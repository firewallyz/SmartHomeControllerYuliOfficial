
SmartHomeController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7ec  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800d9ac  0800d9ac  0001d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd48  0800dd48  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd48  0800dd48  0001dd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd50  0800dd50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd50  0800dd50  0001dd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd54  0800dd54  0001dd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800dd58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00008adc  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008b3c  20008b3c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ba0c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000729f  00000000  00000000  0005badf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c48  00000000  00000000  00062d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002241  00000000  00000000  000659c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037656  00000000  00000000  00067c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00037456  00000000  00000000  0009f25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001319e3  00000000  00000000  000d66b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000d6d4  00000000  00000000  00208098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0021576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d994 	.word	0x0800d994

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	0800d994 	.word	0x0800d994

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <_ZN10LEDControlC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	GPIO_TypeDef* ledPort;
	uint16_t ledPin;
	std::string ledName;

public:
	LEDControl(GPIO_TypeDef* ledPortInput, uint16_t ledPinInput, std::string name) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	4613      	mov	r3, r2
 8000556:	80fb      	strh	r3, [r7, #6]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3308      	adds	r3, #8
 800055c:	4618      	mov	r0, r3
 800055e:	f00c ff95 	bl	800d48c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		ledPort = ledPortInput;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	601a      	str	r2, [r3, #0]
		ledPin = ledPinInput;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	88fa      	ldrh	r2, [r7, #6]
 800056c:	809a      	strh	r2, [r3, #4]
		ledName = name;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3308      	adds	r3, #8
 8000572:	6839      	ldr	r1, [r7, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f00c ffb0 	bl	800d4da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		ledOff();
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	68f9      	ldr	r1, [r7, #12]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f80b 	bl	800059c <_ZN10LEDControl6ledOffB5cxx11Ev>
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4618      	mov	r0, r3
 800058c:	f00c ff9f 	bl	800d4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4618      	mov	r0, r3
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <_ZN10LEDControl6ledOffB5cxx11Ev>:
		HAL_GPIO_WritePin(ledPort, ledPin, GPIO_PIN_RESET);
		return ledName + " is turned on.";

	}

	std::string ledOff() {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
		HAL_GPIO_WritePin(ledPort, ledPin, GPIO_PIN_SET);
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	889b      	ldrh	r3, [r3, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	f003 fe93 	bl	80042dc <HAL_GPIO_WritePin>
		return ledName + " is turned off.";
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f103 0108 	add.w	r1, r3, #8
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <_ZN10LEDControl6ledOffB5cxx11Ev+0x34>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 f855 	bl	8001670 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
	}
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	0800d9bc 	.word	0x0800d9bc

080005d4 <_ZN10LEDControl9ledToggleB5cxx11Ev>:

	std::string ledToggle() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
		HAL_GPIO_TogglePin(ledPort, ledPin);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	889b      	ldrh	r3, [r3, #4]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f003 fe90 	bl	800430e <HAL_GPIO_TogglePin>
		return ledName + " is toggled.";
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f103 0108 	add.w	r1, r3, #8
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <_ZN10LEDControl9ledToggleB5cxx11Ev+0x34>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 f839 	bl	8001670 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
	}
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	0800d9cc 	.word	0x0800d9cc

0800060c <_ZNSt12_Vector_baseI10LEDControlSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f83d 	bl	8001696 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE12_Vector_implC1Ev>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_ZNSt6vectorI10LEDControlSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffeb 	bl	800060c <_ZNSt12_Vector_baseI10LEDControlSaIS0_EEC1Ev>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <_ZN10LEDControlD1Ev>:
class LEDControl {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3308      	adds	r3, #8
 800064c:	4618      	mov	r0, r3
 800064e:	f00c ff3e 	bl	800d4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <_ZN10LEDControlC1EOS_>:
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	889a      	ldrh	r2, [r3, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	809a      	strh	r2, [r3, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f103 0208 	add.w	r2, r3, #8
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	3308      	adds	r3, #8
 8000680:	4619      	mov	r1, r3
 8000682:	4610      	mov	r0, r2
 8000684:	f00c ff09 	bl	800d49a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0c6      	sub	sp, #280	; 0x118
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f002 fad5 	bl	8002c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f943 	bl	8000928 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a2:	f000 f9c3 	bl	8000a2c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 fe29 	bl	80012fc <_ZL12MX_GPIO_Initv>
  MX_CRC_Init();
 80006aa:	f000 f9ef 	bl	8000a8c <_ZL11MX_CRC_Initv>
  MX_DMA2D_Init();
 80006ae:	f000 fa05 	bl	8000abc <_ZL13MX_DMA2D_Initv>
  MX_DSIHOST_DSI_Init();
 80006b2:	f000 fa3f 	bl	8000b34 <_ZL19MX_DSIHOST_DSI_Initv>
  MX_FMC_Init();
 80006b6:	f000 fdcb 	bl	8001250 <_ZL11MX_FMC_Initv>
  MX_I2C1_Init();
 80006ba:	f000 fb67 	bl	8000d8c <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80006be:	f000 fb99 	bl	8000df4 <_ZL12MX_I2C2_Initv>
  MX_LTDC_Init();
 80006c2:	f000 fbcb 	bl	8000e5c <_ZL12MX_LTDC_Initv>
  MX_QUADSPI_Init();
 80006c6:	f000 fc51 	bl	8000f6c <_ZL15MX_QUADSPI_Initv>
  MX_SAI1_Init();
 80006ca:	f000 fc81 	bl	8000fd0 <_ZL12MX_SAI1_Initv>
  MX_SDIO_SD_Init();
 80006ce:	f000 fce1 	bl	8001094 <_ZL15MX_SDIO_SD_Initv>
  MX_TIM1_Init();
 80006d2:	f000 fd01 	bl	80010d8 <_ZL12MX_TIM1_Initv>
  MX_USART3_UART_Init();
 80006d6:	f000 fd5f 	bl	8001198 <_ZL19MX_USART3_UART_Initv>
  MX_USART6_UART_Init();
 80006da:	f000 fd8b 	bl	80011f4 <_ZL19MX_USART6_UART_Initv>
  MX_FATFS_Init();
 80006de:	f00a fc17 	bl	800af10 <MX_FATFS_Init>
  /* Start scheduler */
  //osKernelStart();



  std::vector<LEDControl> ledControls;
 80006e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff9d 	bl	8000626 <_ZNSt6vectorI10LEDControlSaIS0_EEC1Ev>
  LEDControl led1Control = LEDControl(LED1_GPIO_Port, LED1_Pin, "LED 1");
 80006ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00c fe0a 	bl	800d30a <_ZNSaIcEC1Ev>
 80006f6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80006fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006fe:	4953      	ldr	r1, [pc, #332]	; (800084c <main+0x1b8>)
 8000700:	4618      	mov	r0, r3
 8000702:	f00c ff81 	bl	800d608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000706:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800070a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800070e:	2240      	movs	r2, #64	; 0x40
 8000710:	494f      	ldr	r1, [pc, #316]	; (8000850 <main+0x1bc>)
 8000712:	f7ff ff19 	bl	8000548 <_ZN10LEDControlC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000716:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800071a:	4618      	mov	r0, r3
 800071c:	f00c fed7 	bl	800d4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000720:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000724:	4618      	mov	r0, r3
 8000726:	f00c fdf1 	bl	800d30c <_ZNSaIcED1Ev>
  ledControls.push_back(led1Control);
 800072a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800072e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f000 ffbe 	bl	80016b6 <_ZNSt6vectorI10LEDControlSaIS0_EE9push_backERKS0_>
  LEDControl led2Control = LEDControl(LED2_GPIO_Port, LED2_Pin, "LED 2");
 800073a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800073e:	4618      	mov	r0, r3
 8000740:	f00c fde3 	bl	800d30a <_ZNSaIcEC1Ev>
 8000744:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000748:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800074c:	4941      	ldr	r1, [pc, #260]	; (8000854 <main+0x1c0>)
 800074e:	4618      	mov	r0, r3
 8000750:	f00c ff5a 	bl	800d608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000754:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000758:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800075c:	2210      	movs	r2, #16
 800075e:	493e      	ldr	r1, [pc, #248]	; (8000858 <main+0x1c4>)
 8000760:	f7ff fef2 	bl	8000548 <_ZN10LEDControlC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000764:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000768:	4618      	mov	r0, r3
 800076a:	f00c feb0 	bl	800d4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800076e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000772:	4618      	mov	r0, r3
 8000774:	f00c fdca 	bl	800d30c <_ZNSaIcED1Ev>
  ledControls.push_back(led2Control);
 8000778:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800077c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f000 ff97 	bl	80016b6 <_ZNSt6vectorI10LEDControlSaIS0_EE9push_backERKS0_>
  LEDControl led3Control = LEDControl(LED3_GPIO_Port, LED3_Pin, "LED 3");
 8000788:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800078c:	4618      	mov	r0, r3
 800078e:	f00c fdbc 	bl	800d30a <_ZNSaIcEC1Ev>
 8000792:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000796:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800079a:	4930      	ldr	r1, [pc, #192]	; (800085c <main+0x1c8>)
 800079c:	4618      	mov	r0, r3
 800079e:	f00c ff33 	bl	800d608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80007a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80007a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80007aa:	2220      	movs	r2, #32
 80007ac:	492a      	ldr	r1, [pc, #168]	; (8000858 <main+0x1c4>)
 80007ae:	f7ff fecb 	bl	8000548 <_ZN10LEDControlC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80007b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00c fe89 	bl	800d4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80007bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00c fda3 	bl	800d30c <_ZNSaIcED1Ev>
  ledControls.push_back(led3Control);
 80007c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 ff70 	bl	80016b6 <_ZNSt6vectorI10LEDControlSaIS0_EE9push_backERKS0_>
  LEDControl led4Control = LEDControl(LED4_GPIO_Port, LED4_Pin, "LED 4");
 80007d6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007da:	4618      	mov	r0, r3
 80007dc:	f00c fd95 	bl	800d30a <_ZNSaIcEC1Ev>
 80007e0:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80007e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007e8:	491d      	ldr	r1, [pc, #116]	; (8000860 <main+0x1cc>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f00c ff0c 	bl	800d608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80007f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007f4:	1d38      	adds	r0, r7, #4
 80007f6:	2208      	movs	r2, #8
 80007f8:	491a      	ldr	r1, [pc, #104]	; (8000864 <main+0x1d0>)
 80007fa:	f7ff fea5 	bl	8000548 <_ZN10LEDControlC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80007fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000802:	4618      	mov	r0, r3
 8000804:	f00c fe63 	bl	800d4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000808:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800080c:	4618      	mov	r0, r3
 800080e:	f00c fd7d 	bl	800d30c <_ZNSaIcED1Ev>
  ledControls.push_back(led4Control);
 8000812:	1d3a      	adds	r2, r7, #4
 8000814:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 ff4b 	bl	80016b6 <_ZNSt6vectorI10LEDControlSaIS0_EE9push_backERKS0_>


  ledSelector = LED3;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <main+0x1d4>)
 8000822:	2202      	movs	r2, #2
 8000824:	701a      	strb	r2, [r3, #0]
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (buttonISR) {
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <main+0x1d8>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d0fa      	beq.n	8000826 <main+0x192>
		  toggleLEDs(ledControls, ledSelector);
 8000830:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000834:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <main+0x1d4>)
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f818 	bl	8000870 <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator>
 8000840:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000844:	4618      	mov	r0, r3
 8000846:	f00c fe42 	bl	800d4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  if (buttonISR) {
 800084a:	e7ec      	b.n	8000826 <main+0x192>
 800084c:	0800d9dc 	.word	0x0800d9dc
 8000850:	40021800 	.word	0x40021800
 8000854:	0800d9e4 	.word	0x0800d9e4
 8000858:	40020c00 	.word	0x40020c00
 800085c:	0800d9ec 	.word	0x0800d9ec
 8000860:	0800d9f4 	.word	0x0800d9f4
 8000864:	40022800 	.word	0x40022800
 8000868:	20000494 	.word	0x20000494
 800086c:	20000495 	.word	0x20000495

08000870 <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator>:
  }
  /* USER CODE END 3 */
}


std::string toggleLEDs(std::vector<LEDControl> &ledControls, LEDIterator &ledSelector) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
	buttonISR = false;
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	if (ledSelector == LED1) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10a      	bne.n	80008a0 <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x30>
		return ledControls[0].ledToggle();
 800088a:	2100      	movs	r1, #0
 800088c:	68b8      	ldr	r0, [r7, #8]
 800088e:	f000 ff38 	bl	8001702 <_ZNSt6vectorI10LEDControlSaIS0_EEixEj>
 8000892:	4602      	mov	r2, r0
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fe9b 	bl	80005d4 <_ZN10LEDControl9ledToggleB5cxx11Ev>
 800089e:	e02d      	b.n	80008fc <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x8c>
	} else if (ledSelector == LED2) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d10a      	bne.n	80008be <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x4e>
		return ledControls[1].ledToggle();
 80008a8:	2101      	movs	r1, #1
 80008aa:	68b8      	ldr	r0, [r7, #8]
 80008ac:	f000 ff29 	bl	8001702 <_ZNSt6vectorI10LEDControlSaIS0_EEixEj>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe8c 	bl	80005d4 <_ZN10LEDControl9ledToggleB5cxx11Ev>
 80008bc:	e01e      	b.n	80008fc <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x8c>
	} else if (ledSelector == LED3) {
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d10a      	bne.n	80008dc <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x6c>
		return ledControls[2].ledToggle();
 80008c6:	2102      	movs	r1, #2
 80008c8:	68b8      	ldr	r0, [r7, #8]
 80008ca:	f000 ff1a 	bl	8001702 <_ZNSt6vectorI10LEDControlSaIS0_EEixEj>
 80008ce:	4602      	mov	r2, r0
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe7d 	bl	80005d4 <_ZN10LEDControl9ledToggleB5cxx11Ev>
 80008da:	e00f      	b.n	80008fc <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x8c>
	} else if (ledSelector == LED4) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d10a      	bne.n	80008fa <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x8a>
		return ledControls[3].ledToggle();
 80008e4:	2103      	movs	r1, #3
 80008e6:	68b8      	ldr	r0, [r7, #8]
 80008e8:	f000 ff0b 	bl	8001702 <_ZNSt6vectorI10LEDControlSaIS0_EEixEj>
 80008ec:	4602      	mov	r2, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fe6e 	bl	80005d4 <_ZN10LEDControl9ledToggleB5cxx11Ev>
 80008f8:	e000      	b.n	80008fc <_Z10toggleLEDsB5cxx11RSt6vectorI10LEDControlSaIS0_EER11LEDIterator+0x8c>
	}
}
 80008fa:	bf00      	nop
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000495 	.word	0x20000495

08000908 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
	buttonISR = true;
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20000495 	.word	0x20000495

08000928 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2234      	movs	r2, #52	; 0x34
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f00c ff4a 	bl	800d7d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <_Z18SystemClock_Configv+0xfc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a33      	ldr	r2, [pc, #204]	; (8000a24 <_Z18SystemClock_Configv+0xfc>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <_Z18SystemClock_Configv+0xfc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <_Z18SystemClock_Configv+0x100>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <_Z18SystemClock_Configv+0x100>)
 8000972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <_Z18SystemClock_Configv+0x100>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800099c:	23b4      	movs	r3, #180	; 0xb4
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009a4:	2306      	movs	r3, #6
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80009a8:	2306      	movs	r3, #6
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4618      	mov	r0, r3
 80009b2:	f006 fcbb 	bl	800732c <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bf14      	ite	ne
 80009bc:	2301      	movne	r3, #1
 80009be:	2300      	moveq	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80009c6:	f000 fe3b 	bl	8001640 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009ca:	f005 ff0d 	bl	80067e8 <HAL_PWREx_EnableOverDrive>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80009de:	f000 fe2f 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2105      	movs	r1, #5
 8000a00:	4618      	mov	r0, r3
 8000a02:	f006 f803 	bl	8006a0c <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	2301      	movne	r3, #1
 8000a0e:	2300      	moveq	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8000a16:	f000 fe13 	bl	8001640 <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3750      	adds	r7, #80	; 0x50
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b090      	sub	sp, #64	; 0x40
 8000a30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	223c      	movs	r2, #60	; 0x3c
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f00c fec9 	bl	800d7d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000a3e:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8000a42:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000a44:	2390      	movs	r3, #144	; 0x90
 8000a46:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000a50:	2306      	movs	r3, #6
 8000a52:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000a5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f006 fa20 	bl	8006eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <_Z24PeriphCommonClock_Configv+0x58>
  {
    Error_Handler();
 8000a80:	f000 fdde 	bl	8001640 <Error_Handler>
  }
}
 8000a84:	bf00      	nop
 8000a86:	3740      	adds	r7, #64	; 0x40
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_ZL11MX_CRC_Initv+0x28>)
 8000a92:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <_ZL11MX_CRC_Initv+0x2c>)
 8000a94:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <_ZL11MX_CRC_Initv+0x28>)
 8000a98:	f002 fa1e 	bl	8002ed8 <HAL_CRC_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8000aac:	f000 fdc8 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000007c 	.word	0x2000007c
 8000ab8:	40023000 	.word	0x40023000

08000abc <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <_ZL13MX_DMA2D_Initv+0x74>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000af0:	480e      	ldr	r0, [pc, #56]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000af2:	f002 fa9f 	bl	8003034 <HAL_DMA2D_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_ZL13MX_DMA2D_Initv+0x4e>
  {
    Error_Handler();
 8000b06:	f000 fd9b 	bl	8001640 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <_ZL13MX_DMA2D_Initv+0x70>)
 8000b0e:	f002 fbeb 	bl	80032e8 <HAL_DMA2D_ConfigLayer>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <_ZL13MX_DMA2D_Initv+0x6a>
  {
    Error_Handler();
 8000b22:	f000 fd8d 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000084 	.word	0x20000084
 8000b30:	4002b000 	.word	0x4002b000

08000b34 <_ZL19MX_DSIHOST_DSI_Initv>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0aa      	sub	sp, #168	; 0xa8
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b4a:	2224      	movs	r2, #36	; 0x24
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00c fe3e 	bl	800d7d0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6a:	2234      	movs	r2, #52	; 0x34
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f00c fe2e 	bl	800d7d0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	222c      	movs	r2, #44	; 0x2c
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f00c fe28 	bl	800d7d0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b80:	4b80      	ldr	r3, [pc, #512]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000b82:	4a81      	ldr	r2, [pc, #516]	; (8000d88 <_ZL19MX_DSIHOST_DSI_Initv+0x254>)
 8000b84:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b86:	4b7f      	ldr	r3, [pc, #508]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000b8c:	4b7d      	ldr	r3, [pc, #500]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000b92:	4b7c      	ldr	r3, [pc, #496]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000b98:	237d      	movs	r3, #125	; 0x7d
 8000b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000baa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4874      	ldr	r0, [pc, #464]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000bb2:	f002 fc2b 	bl	800340c <HAL_DSI_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bf14      	ite	ne
 8000bbc:	2301      	movne	r3, #1
 8000bbe:	2300      	moveq	r3, #0
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <_ZL19MX_DSIHOST_DSI_Initv+0x96>
  {
    Error_Handler();
 8000bc6:	f000 fd3b 	bl	8001640 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000bfc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c00:	4619      	mov	r1, r3
 8000c02:	4860      	ldr	r0, [pc, #384]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000c04:	f003 f8b2 	bl	8003d6c <HAL_DSI_ConfigHostTimeouts>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf14      	ite	ne
 8000c0e:	2301      	movne	r3, #1
 8000c10:	2300      	moveq	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <_ZL19MX_DSIHOST_DSI_Initv+0xe8>
  {
    Error_Handler();
 8000c18:	f000 fd12 	bl	8001640 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000c1c:	231c      	movs	r3, #28
 8000c1e:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000c20:	2321      	movs	r3, #33	; 0x21
 8000c22:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000c24:	230f      	movs	r3, #15
 8000c26:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000c28:	2319      	movs	r3, #25
 8000c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 8000c30:	230a      	movs	r3, #10
 8000c32:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4852      	ldr	r0, [pc, #328]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000c3c:	f003 f82c 	bl	8003c98 <HAL_DSI_ConfigPhyTimer>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <_ZL19MX_DSIHOST_DSI_Initv+0x120>
  {
    Error_Handler();
 8000c50:	f000 fcf6 	bl	8001640 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000c54:	2104      	movs	r1, #4
 8000c56:	484b      	ldr	r0, [pc, #300]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000c58:	f002 fff6 	bl	8003c48 <HAL_DSI_ConfigFlowControl>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf14      	ite	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	2300      	moveq	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <_ZL19MX_DSIHOST_DSI_Initv+0x13c>
  {
    Error_Handler();
 8000c6c:	f000 fce8 	bl	8001640 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c70:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c74:	4843      	ldr	r0, [pc, #268]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000c76:	f003 f93f 	bl	8003ef8 <HAL_DSI_SetLowPowerRXFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf14      	ite	ne
 8000c80:	2301      	movne	r3, #1
 8000c82:	2300      	moveq	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <_ZL19MX_DSIHOST_DSI_Initv+0x15a>
  {
    Error_Handler();
 8000c8a:	f000 fcd9 	bl	8001640 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	483c      	ldr	r0, [pc, #240]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000c92:	f002 fcd7 	bl	8003644 <HAL_DSI_ConfigErrorMonitor>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	bf14      	ite	ne
 8000c9c:	2301      	movne	r3, #1
 8000c9e:	2300      	moveq	r3, #0
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <_ZL19MX_DSIHOST_DSI_Initv+0x176>
  {
    Error_Handler();
 8000ca6:	f000 fccb 	bl	8001640 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000cce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ce4:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000ce6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000cea:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf0:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4821      	ldr	r0, [pc, #132]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000cfe:	f002 ff45 	bl	8003b8c <HAL_DSI_ConfigCommand>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bf14      	ite	ne
 8000d08:	2301      	movne	r3, #1
 8000d0a:	2300      	moveq	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <_ZL19MX_DSIHOST_DSI_Initv+0x1e2>
  {
    Error_Handler();
 8000d12:	f000 fc95 	bl	8001640 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000d1e:	23c8      	movs	r3, #200	; 0xc8
 8000d20:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000d22:	2310      	movs	r3, #16
 8000d24:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	480f      	ldr	r0, [pc, #60]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000d48:	f002 fe48 	bl	80039dc <HAL_DSI_ConfigAdaptedCommandMode>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf14      	ite	ne
 8000d52:	2301      	movne	r3, #1
 8000d54:	2300      	moveq	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <_ZL19MX_DSIHOST_DSI_Initv+0x22c>
  {
    Error_Handler();
 8000d5c:	f000 fc70 	bl	8001640 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000d60:	2100      	movs	r1, #0
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <_ZL19MX_DSIHOST_DSI_Initv+0x250>)
 8000d64:	f002 fe12 	bl	800398c <HAL_DSI_SetGenericVCID>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	bf14      	ite	ne
 8000d6e:	2301      	movne	r3, #1
 8000d70:	2300      	moveq	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <_ZL19MX_DSIHOST_DSI_Initv+0x248>
  {
    Error_Handler();
 8000d78:	f000 fc62 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	37a8      	adds	r7, #168	; 0xa8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000c4 	.word	0x200000c4
 8000d88:	40016c00 	.word	0x40016c00

08000d8c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <_ZL12MX_I2C1_Initv+0x60>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d98:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <_ZL12MX_I2C1_Initv+0x64>)
 8000d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000dca:	f005 f861 	bl	8005e90 <HAL_I2C_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000dde:	f000 fc2f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000e0 	.word	0x200000e0
 8000dec:	40005400 	.word	0x40005400
 8000df0:	000186a0 	.word	0x000186a0

08000df4 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <_ZL12MX_I2C2_Initv+0x60>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e00:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <_ZL12MX_I2C2_Initv+0x64>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <_ZL12MX_I2C2_Initv+0x5c>)
 8000e32:	f005 f82d 	bl	8005e90 <HAL_I2C_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf14      	ite	ne
 8000e3c:	2301      	movne	r3, #1
 8000e3e:	2300      	moveq	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000e46:	f000 fbfb 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000134 	.word	0x20000134
 8000e54:	40005800 	.word	0x40005800
 8000e58:	000186a0 	.word	0x000186a0

08000e5c <_ZL12MX_LTDC_Initv>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2234      	movs	r2, #52	; 0x34
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f00c fcb1 	bl	800d7d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000e70:	4a3d      	ldr	r2, [pc, #244]	; (8000f68 <_ZL12MX_LTDC_Initv+0x10c>)
 8000e72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000e8c:	4b35      	ldr	r3, [pc, #212]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000e92:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000e98:	4b32      	ldr	r3, [pc, #200]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000ea6:	22c9      	movs	r2, #201	; 0xc9
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000eac:	f240 12e1 	movw	r2, #481	; 0x1e1
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000eb4:	22ca      	movs	r2, #202	; 0xca
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000eba:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ed0:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ed8:	4822      	ldr	r0, [pc, #136]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000eda:	f005 f91d 	bl	8006118 <HAL_LTDC_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <_ZL12MX_LTDC_Initv+0x96>
  {
    Error_Handler();
 8000eee:	f000 fba7 	bl	8001640 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000ef6:	23c8      	movs	r3, #200	; 0xc8
 8000ef8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000efe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f02:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f04:	2302      	movs	r3, #2
 8000f06:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f08:	23ff      	movs	r3, #255	; 0xff
 8000f0a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f14:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f16:	2307      	movs	r3, #7
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f1a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000f20:	23c8      	movs	r3, #200	; 0xc8
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000f24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <_ZL12MX_LTDC_Initv+0x108>)
 8000f44:	f005 fa7a 	bl	800643c <HAL_LTDC_ConfigLayer>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	2300      	moveq	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <_ZL12MX_LTDC_Initv+0x100>
  {
    Error_Handler();
 8000f58:	f000 fb72 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3738      	adds	r7, #56	; 0x38
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000188 	.word	0x20000188
 8000f68:	40016800 	.word	0x40016800

08000f6c <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <_ZL15MX_QUADSPI_Initv+0x60>)
 8000f74:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000f84:	2210      	movs	r2, #16
 8000f86:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000f8a:	2218      	movs	r2, #24
 8000f8c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f94:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000faa:	f005 fc6d 	bl	8006888 <HAL_QSPI_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <_ZL15MX_QUADSPI_Initv+0x56>
  {
    Error_Handler();
 8000fbe:	f000 fb3f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000230 	.word	0x20000230
 8000fcc:	a0001000 	.word	0xa0001000

08000fd0 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <_ZL12MX_SAI1_Initv+0xbc>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8000fe8:	2240      	movs	r2, #64	; 0x40
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <_ZL12MX_SAI1_Initv+0xc0>)
 800101a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001024:	2200      	movs	r2, #0
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 800102a:	2200      	movs	r2, #0
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001030:	2200      	movs	r2, #0
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001036:	2208      	movs	r2, #8
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 800103c:	2201      	movs	r2, #1
 800103e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001042:	2200      	movs	r2, #0
 8001044:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001048:	2200      	movs	r2, #0
 800104a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 800104e:	2200      	movs	r2, #0
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001054:	2200      	movs	r2, #0
 8001056:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 800105a:	2200      	movs	r2, #0
 800105c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001060:	2201      	movs	r2, #1
 8001062:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 8001066:	2200      	movs	r2, #0
 8001068:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <_ZL12MX_SAI1_Initv+0xb8>)
 800106c:	f006 fbe2 	bl	8007834 <HAL_SAI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf14      	ite	ne
 8001076:	2301      	movne	r3, #1
 8001078:	2300      	moveq	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <_ZL12MX_SAI1_Initv+0xb4>
  {
    Error_Handler();
 8001080:	f000 fade 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000027c 	.word	0x2000027c
 800108c:	40015804 	.word	0x40015804
 8001090:	0002ee00 	.word	0x0002ee00

08001094 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <_ZL15MX_SDIO_SD_Initv+0x40>)
 800109c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80010b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b6:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000304 	.word	0x20000304
 80010d4:	40012c00 	.word	0x40012c00

080010d8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 80010f6:	4a27      	ldr	r2, [pc, #156]	; (8001194 <_ZL12MX_TIM1_Initv+0xbc>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 8001108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001120:	481b      	ldr	r0, [pc, #108]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 8001122:	f007 fe78 	bl	8008e16 <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf14      	ite	ne
 800112c:	2301      	movne	r3, #1
 800112e:	2300      	moveq	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8001136:	f000 fa83 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4619      	mov	r1, r3
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 8001148:	f008 f814 	bl	8009174 <HAL_TIM_ConfigClockSource>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	bf14      	ite	ne
 8001152:	2301      	movne	r3, #1
 8001154:	2300      	moveq	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 800115c:	f000 fa70 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	4619      	mov	r1, r3
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <_ZL12MX_TIM1_Initv+0xb8>)
 800116e:	f008 fa37 	bl	80095e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8001182:	f000 fa5d 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000388 	.word	0x20000388
 8001194:	40010000 	.word	0x40010000

08001198 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_ZL19MX_USART3_UART_Initv+0x58>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <_ZL19MX_USART3_UART_Initv+0x54>)
 80011d0:	f008 fa96 	bl	8009700 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf14      	ite	ne
 80011da:	2301      	movne	r3, #1
 80011dc:	2300      	moveq	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80011e4:	f000 fa2c 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200003d0 	.word	0x200003d0
 80011f0:	40004800 	.word	0x40004800

080011f4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <_ZL19MX_USART6_UART_Initv+0x58>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <_ZL19MX_USART6_UART_Initv+0x54>)
 800122c:	f008 fa68 	bl	8009700 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001240:	f000 f9fe 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000418 	.word	0x20000418
 800124c:	40011400 	.word	0x40011400

08001250 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 800126a:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <_ZL11MX_FMC_Initv+0xa8>)
 800126c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 800127c:	2204      	movs	r2, #4
 800127e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 8001282:	2220      	movs	r2, #32
 8001284:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 8001288:	2240      	movs	r2, #64	; 0x40
 800128a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 800128e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001292:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 800129c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012a0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 80012a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80012b4:	2307      	movs	r3, #7
 80012b6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80012bc:	2307      	movs	r3, #7
 80012be:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80012c0:	2303      	movs	r3, #3
 80012c2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <_ZL11MX_FMC_Initv+0xa4>)
 80012d2:	f007 fd6c 	bl	8008dae <HAL_SDRAM_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <_ZL11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 80012e6:	f000 f9ab 	bl	8001640 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000460 	.word	0x20000460
 80012f8:	a0000140 	.word	0xa0000140

080012fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b090      	sub	sp, #64	; 0x40
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
 8001316:	4bae      	ldr	r3, [pc, #696]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4aad      	ldr	r2, [pc, #692]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4bab      	ldr	r3, [pc, #684]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
 8001332:	4ba7      	ldr	r3, [pc, #668]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4aa6      	ldr	r2, [pc, #664]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4ba4      	ldr	r3, [pc, #656]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
 800134e:	4ba0      	ldr	r3, [pc, #640]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a9f      	ldr	r2, [pc, #636]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b9d      	ldr	r3, [pc, #628]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	4b99      	ldr	r3, [pc, #612]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a98      	ldr	r2, [pc, #608]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b96      	ldr	r3, [pc, #600]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a91      	ldr	r2, [pc, #580]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b8f      	ldr	r3, [pc, #572]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	4b8b      	ldr	r3, [pc, #556]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a8a      	ldr	r2, [pc, #552]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b88      	ldr	r3, [pc, #544]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b84      	ldr	r3, [pc, #528]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a83      	ldr	r2, [pc, #524]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b7d      	ldr	r3, [pc, #500]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a7c      	ldr	r2, [pc, #496]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b7a      	ldr	r3, [pc, #488]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a75      	ldr	r2, [pc, #468]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 80013fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b73      	ldr	r3, [pc, #460]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a67      	ldr	r2, [pc, #412]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b65      	ldr	r3, [pc, #404]	; (80015d0 <_ZL12MX_GPIO_Initv+0x2d4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	210c      	movs	r1, #12
 800144a:	4862      	ldr	r0, [pc, #392]	; (80015d4 <_ZL12MX_GPIO_Initv+0x2d8>)
 800144c:	f002 ff46 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2130      	movs	r1, #48	; 0x30
 8001454:	4860      	ldr	r0, [pc, #384]	; (80015d8 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001456:	f002 ff41 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2108      	movs	r1, #8
 800145e:	485f      	ldr	r0, [pc, #380]	; (80015dc <_ZL12MX_GPIO_Initv+0x2e0>)
 8001460:	f002 ff3c 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	485d      	ldr	r0, [pc, #372]	; (80015e0 <_ZL12MX_GPIO_Initv+0x2e4>)
 800146a:	f002 ff37 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	485c      	ldr	r0, [pc, #368]	; (80015e4 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001474:	f002 ff32 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	485a      	ldr	r0, [pc, #360]	; (80015e8 <_ZL12MX_GPIO_Initv+0x2ec>)
 800147e:	f002 ff2d 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2108      	movs	r1, #8
 8001486:	4859      	ldr	r0, [pc, #356]	; (80015ec <_ZL12MX_GPIO_Initv+0x2f0>)
 8001488:	f002 ff28 	bl	80042dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 800148c:	230c      	movs	r3, #12
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800149c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a0:	4619      	mov	r1, r3
 80014a2:	484c      	ldr	r0, [pc, #304]	; (80015d4 <_ZL12MX_GPIO_Initv+0x2d8>)
 80014a4:	f002 fd56 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 80014a8:	2308      	movs	r3, #8
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b8:	2306      	movs	r3, #6
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c0:	4619      	mov	r1, r3
 80014c2:	4848      	ldr	r0, [pc, #288]	; (80015e4 <_ZL12MX_GPIO_Initv+0x2e8>)
 80014c4:	f002 fd46 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014da:	4619      	mov	r1, r3
 80014dc:	4841      	ldr	r0, [pc, #260]	; (80015e4 <_ZL12MX_GPIO_Initv+0x2e8>)
 80014de:	f002 fd39 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80014e2:	2330      	movs	r3, #48	; 0x30
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014e6:	2311      	movs	r3, #17
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f6:	4619      	mov	r1, r3
 80014f8:	4837      	ldr	r0, [pc, #220]	; (80015d8 <_ZL12MX_GPIO_Initv+0x2dc>)
 80014fa:	f002 fd2b 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80014fe:	2308      	movs	r3, #8
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001502:	2311      	movs	r3, #17
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001512:	4619      	mov	r1, r3
 8001514:	4831      	ldr	r0, [pc, #196]	; (80015dc <_ZL12MX_GPIO_Initv+0x2e0>)
 8001516:	f002 fd1d 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800151e:	2311      	movs	r3, #17
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152e:	4619      	mov	r1, r3
 8001530:	482b      	ldr	r0, [pc, #172]	; (80015e0 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001532:	f002 fd0f 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001536:	2305      	movs	r3, #5
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154a:	4619      	mov	r1, r3
 800154c:	4825      	ldr	r0, [pc, #148]	; (80015e4 <_ZL12MX_GPIO_Initv+0x2e8>)
 800154e:	f002 fd01 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8001552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001564:	2302      	movs	r3, #2
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156c:	4619      	mov	r1, r3
 800156e:	481a      	ldr	r0, [pc, #104]	; (80015d8 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001570:	f002 fcf0 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001574:	2304      	movs	r3, #4
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001584:	4619      	mov	r1, r3
 8001586:	4816      	ldr	r0, [pc, #88]	; (80015e0 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001588:	f002 fce4 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800158c:	2320      	movs	r3, #32
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001590:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159e:	4619      	mov	r1, r3
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <_ZL12MX_GPIO_Initv+0x2f4>)
 80015a2:	f002 fcd7 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a6:	2301      	movs	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b8:	4619      	mov	r1, r3
 80015ba:	480c      	ldr	r0, [pc, #48]	; (80015ec <_ZL12MX_GPIO_Initv+0x2f0>)
 80015bc:	f002 fcca 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
 80015cc:	e012      	b.n	80015f4 <_ZL12MX_GPIO_Initv+0x2f8>
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40022800 	.word	0x40022800
 80015e0:	40021800 	.word	0x40021800
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40021c00 	.word	0x40021c00
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40022400 	.word	0x40022400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fc:	4619      	mov	r1, r3
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <_ZL12MX_GPIO_Initv+0x33c>)
 8001600:	f002 fca8 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001604:	2308      	movs	r3, #8
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001618:	4619      	mov	r1, r3
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <_ZL12MX_GPIO_Initv+0x340>)
 800161c:	f002 fc9a 	bl	8003f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2105      	movs	r1, #5
 8001624:	2006      	movs	r0, #6
 8001626:	f001 fc2d 	bl	8002e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800162a:	2006      	movs	r0, #6
 800162c:	f001 fc46 	bl	8002ebc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001630:	bf00      	nop
 8001632:	3740      	adds	r7, #64	; 0x40
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021c00 	.word	0x40021c00
 800163c:	40020000 	.word	0x40020000

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165e:	f001 fb15 	bl	8002c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40001000 	.word	0x40001000

08001670 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
   *  @param __rhs  Last string.
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
	      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f00b ff8e 	bl	800d5a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f00b ff50 	bl	800d52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 800168c:	bf00      	nop
    }
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f83f 	bl	8001722 <_ZNSaI10LEDControlEC1Ev>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f847 	bl	800173a <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_ZNSt6vectorI10LEDControlSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d00d      	beq.n	80016e8 <_ZNSt6vectorI10LEDControlSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f000 f870 	bl	80017ba <_ZNSt16allocator_traitsISaI10LEDControlEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f103 0220 	add.w	r2, r3, #32
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80016e6:	e008      	b.n	80016fa <_ZNSt6vectorI10LEDControlSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f879 	bl	80017e0 <_ZNSt6vectorI10LEDControlSaIS0_EE3endEv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	4619      	mov	r1, r3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f89b 	bl	8001830 <_ZNSt6vectorI10LEDControlSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_ZNSt6vectorI10LEDControlSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	4413      	add	r3, r2
      }
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_ZNSaI10LEDControlEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f93c 	bl	80019a8 <_ZN9__gnu_cxx13new_allocatorI10LEDControlEC1Ev>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
	{ }
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
	if (__p)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f91f 	bl	80019be <_ZNSt16allocator_traitsISaI10LEDControlEE10deallocateERS1_PS0_j>
      }
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <_ZSt8_DestroyIP10LEDControlS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f915 	bl	80019dc <_ZSt8_DestroyIP10LEDControlEvT_S2_>
    }
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_ZNSt16allocator_traitsISaI10LEDControlEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f915 	bl	80019f6 <_ZSt7forwardIRK10LEDControlEOT_RNSt16remove_referenceIS3_E4typeE>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f935 	bl	8001a42 <_ZN9__gnu_cxx13new_allocatorI10LEDControlE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZNSt6vectorI10LEDControlSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	1d1a      	adds	r2, r3, #4
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f93d 	bl	8001a72 <_ZN9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_ZNSt6vectorI10LEDControlSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f805 	bl	8001818 <_ZNSt6vectorI10LEDControlSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800180e:	4603      	mov	r3, r0
      }
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZNSt6vectorI10LEDControlSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001820:	2301      	movs	r3, #1
      }
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <_ZNSt6vectorI10LEDControlSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800183c:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <_ZNSt6vectorI10LEDControlSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 800183e:	2101      	movs	r1, #1
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 f926 	bl	8001a92 <_ZNKSt6vectorI10LEDControlSaIS0_EE12_M_check_lenEjPKc>
 8001846:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f963 	bl	8001b20 <_ZNSt6vectorI10LEDControlSaIS0_EE5beginEv>
 800185a:	4603      	mov	r3, r0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	f107 0214 	add.w	r2, r7, #20
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f969 	bl	8001b40 <_ZN9__gnu_cxxmiIP10LEDControlSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800186e:	4603      	mov	r3, r0
 8001870:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f977 	bl	8001b6a <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE11_M_allocateEj>
 800187c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001882:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	015b      	lsls	r3, r3, #5
	  _Alloc_traits::construct(this->_M_impl,
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	18d5      	adds	r5, r2, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8b2 	bl	80019f6 <_ZSt7forwardIRK10LEDControlEOT_RNSt16remove_referenceIS3_E4typeE>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	4629      	mov	r1, r5
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff ff8e 	bl	80017ba <_ZNSt16allocator_traitsISaI10LEDControlEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80018a2:	f7ff ffae 	bl	8001802 <_ZNSt6vectorI10LEDControlSaIS0_EE15_S_use_relocateEv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d027      	beq.n	80018fc <_ZNSt6vectorI10LEDControlSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 f982 	bl	8001bba <_ZNK9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEE4baseEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff63 	bl	8001788 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE19_M_get_Tp_allocatorEv>
 80018c2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4621      	mov	r1, r4
 80018c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ca:	f000 f962 	bl	8001b92 <_ZNSt6vectorI10LEDControlSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80018ce:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80018d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d2:	3320      	adds	r3, #32
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f96d 	bl	8001bba <_ZNK9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEE4baseEv>
 80018e0:	4603      	mov	r3, r0
 80018e2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff4e 	bl	8001788 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE19_M_get_Tp_allocatorEv>
 80018ec:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80018ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f0:	6a39      	ldr	r1, [r7, #32]
 80018f2:	4620      	mov	r0, r4
 80018f4:	f000 f94d 	bl	8001b92 <_ZNSt6vectorI10LEDControlSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80018f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80018fa:	e026      	b.n	800194a <_ZNSt6vectorI10LEDControlSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f95a 	bl	8001bba <_ZNK9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEE4baseEv>
 8001906:	4603      	mov	r3, r0
 8001908:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff3b 	bl	8001788 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE19_M_get_Tp_allocatorEv>
 8001912:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4621      	mov	r1, r4
 8001918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800191a:	f000 f959 	bl	8001bd0 <_ZSt34__uninitialized_move_if_noexcept_aIP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_>
 800191e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	3320      	adds	r3, #32
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f945 	bl	8001bba <_ZNK9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEE4baseEv>
 8001930:	4603      	mov	r3, r0
 8001932:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff26 	bl	8001788 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE19_M_get_Tp_allocatorEv>
 800193c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800193e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001940:	6a39      	ldr	r1, [r7, #32]
 8001942:	4620      	mov	r0, r4
 8001944:	f000 f944 	bl	8001bd0 <_ZSt34__uninitialized_move_if_noexcept_aIP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001948:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800194a:	f7ff ff5a 	bl	8001802 <_ZNSt6vectorI10LEDControlSaIS0_EE15_S_use_relocateEv>
 800194e:	4603      	mov	r3, r0
 8001950:	f083 0301 	eor.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <_ZNSt6vectorI10LEDControlSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff13 	bl	8001788 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE19_M_get_Tp_allocatorEv>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	6a39      	ldr	r1, [r7, #32]
 8001968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800196a:	f7ff ff18 	bl	800179e <_ZSt8_DestroyIP10LEDControlS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800196e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	115b      	asrs	r3, r3, #5
      _M_deallocate(__old_start,
 800197a:	461a      	mov	r2, r3
 800197c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800197e:	f7ff fef0 	bl	8001762 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	441a      	add	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	609a      	str	r2, [r3, #8]
    }
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bdb0      	pop	{r4, r5, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0800dc98 	.word	0x0800dc98

080019a8 <_ZN9__gnu_cxx13new_allocatorI10LEDControlEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_ZNSt16allocator_traitsISaI10LEDControlEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f924 	bl	8001c1c <_ZN9__gnu_cxx13new_allocatorI10LEDControlE10deallocateEPS1_j>
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_ZSt8_DestroyIP10LEDControlEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f927 	bl	8001c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIP10LEDControlEEvT_S4_>
    }
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_ZSt7forwardIRK10LEDControlEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_ZN10LEDControlC1ERKS_>:
class LEDControl {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	889a      	ldrh	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	809a      	strh	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f103 0208 	add.w	r2, r3, #8
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	3308      	adds	r3, #8
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f00b fdb4 	bl	800d5a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_ZN9__gnu_cxx13new_allocatorI10LEDControlE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001a42:	b590      	push	{r4, r7, lr}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffd1 	bl	80019f6 <_ZSt7forwardIRK10LEDControlEOT_RNSt16remove_referenceIS3_E4typeE>
 8001a54:	4604      	mov	r4, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2020      	movs	r0, #32
 8001a5c:	f7fe fd68 	bl	8000530 <_ZnwjPv>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4621      	mov	r1, r4
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ffd1 	bl	8001a0c <_ZN10LEDControlC1ERKS_>
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}

08001a72 <_ZN9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_ZNKSt6vectorI10LEDControlSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8001a92:	b590      	push	{r4, r7, lr}
 8001a94:	b087      	sub	sp, #28
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f8e5 	bl	8001c6e <_ZNKSt6vectorI10LEDControlSaIS0_EE8max_sizeEv>
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f8f2 	bl	8001c90 <_ZNKSt6vectorI10LEDControlSaIS0_EE4sizeEv>
 8001aac:	4603      	mov	r3, r0
 8001aae:	1ae2      	subs	r2, r4, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	bf34      	ite	cc
 8001ab6:	2301      	movcc	r3, #1
 8001ab8:	2300      	movcs	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <_ZNKSt6vectorI10LEDControlSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f00b fc2d 	bl	800d320 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f8e2 	bl	8001c90 <_ZNKSt6vectorI10LEDControlSaIS0_EE4sizeEv>
 8001acc:	4604      	mov	r4, r0
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f8de 	bl	8001c90 <_ZNKSt6vectorI10LEDControlSaIS0_EE4sizeEv>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	f107 0208 	add.w	r2, r7, #8
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f8e4 	bl	8001cb0 <_ZSt3maxIjERKT_S2_S2_>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4423      	add	r3, r4
 8001aee:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f8cd 	bl	8001c90 <_ZNKSt6vectorI10LEDControlSaIS0_EE4sizeEv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d306      	bcc.n	8001b0c <_ZNKSt6vectorI10LEDControlSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f8b5 	bl	8001c6e <_ZNKSt6vectorI10LEDControlSaIS0_EE8max_sizeEv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d904      	bls.n	8001b16 <_ZNKSt6vectorI10LEDControlSaIS0_EE12_M_check_lenEjPKc+0x84>
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f8ae 	bl	8001c6e <_ZNKSt6vectorI10LEDControlSaIS0_EE8max_sizeEv>
 8001b12:	4603      	mov	r3, r0
 8001b14:	e000      	b.n	8001b18 <_ZNKSt6vectorI10LEDControlSaIS0_EE12_M_check_lenEjPKc+0x86>
 8001b16:	697b      	ldr	r3, [r7, #20]
      }
 8001b18:	4618      	mov	r0, r3
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}

08001b20 <_ZNSt6vectorI10LEDControlSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff9e 	bl	8001a72 <_ZN9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN9__gnu_cxxmiIP10LEDControlSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f835 	bl	8001bba <_ZNK9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEE4baseEv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	681c      	ldr	r4, [r3, #0]
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f000 f830 	bl	8001bba <_ZNK9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEE4baseEv>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1ae3      	subs	r3, r4, r3
 8001b60:	115b      	asrs	r3, r3, #5
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}

08001b6a <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE11_M_allocateEj+0x1e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f8aa 	bl	8001cd8 <_ZNSt16allocator_traitsISaI10LEDControlEE8allocateERS1_j>
 8001b84:	4603      	mov	r3, r0
 8001b86:	e000      	b.n	8001b8a <_ZNSt12_Vector_baseI10LEDControlSaIS0_EE11_M_allocateEj+0x20>
 8001b88:	2300      	movs	r3, #0
      }
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_ZNSt6vectorI10LEDControlSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af02      	add	r7, sp, #8
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8001ba0:	f88d 4000 	strb.w	r4, [sp]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f8a3 	bl	8001cf6 <_ZNSt6vectorI10LEDControlSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8001bb0:	4603      	mov	r3, r0
      }
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}

08001bba <_ZNK9__gnu_cxx17__normal_iteratorIP10LEDControlSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_ZSt34__uninitialized_move_if_noexcept_aIP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f89b 	bl	8001d1a <_ZSt32__make_move_if_noexcept_iteratorI10LEDControlSt13move_iteratorIPS0_EET0_PT_>
 8001be4:	4604      	mov	r4, r0
 8001be6:	68b8      	ldr	r0, [r7, #8]
 8001be8:	f000 f897 	bl	8001d1a <_ZSt32__make_move_if_noexcept_iteratorI10LEDControlSt13move_iteratorIPS0_EET0_PT_>
 8001bec:	4601      	mov	r1, r0
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f000 f8a0 	bl	8001d38 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10LEDControlES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8001bf8:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}

08001c02 <_ZNSt16allocator_traitsISaI10LEDControlEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8a3 	bl	8001d5a <_ZN9__gnu_cxx13new_allocatorI10LEDControlE7destroyIS1_EEvPT_>
	}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZN9__gnu_cxx13new_allocatorI10LEDControlE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68b8      	ldr	r0, [r7, #8]
 8001c30:	f00b fb58 	bl	800d2e4 <_ZdlPvj>
      }
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIP10LEDControlEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001c46:	e009      	b.n	8001c5c <_ZNSt12_Destroy_auxILb0EE9__destroyIP10LEDControlEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f892 	bl	8001d72 <_ZSt11__addressofI10LEDControlEPT_RS1_>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f899 	bl	8001d88 <_ZSt8_DestroyI10LEDControlEvPT_>
	  for (; __first != __last; ++__first)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3320      	adds	r3, #32
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1f1      	bne.n	8001c48 <_ZNSt12_Destroy_auxILb0EE9__destroyIP10LEDControlEEvT_S4_+0xc>
	}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_ZNKSt6vectorI10LEDControlSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f8aa 	bl	8001dd2 <_ZNKSt12_Vector_baseI10LEDControlSaIS0_EE19_M_get_Tp_allocatorEv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 f88c 	bl	8001d9e <_ZNSt6vectorI10LEDControlSaIS0_EE11_S_max_sizeERKS1_>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZNKSt6vectorI10LEDControlSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	115b      	asrs	r3, r3, #5
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d201      	bcs.n	8001cca <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	e000      	b.n	8001ccc <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001cca:	687b      	ldr	r3, [r7, #4]
    }
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_ZNSt16allocator_traitsISaI10LEDControlEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f88a 	bl	8001e00 <_ZN9__gnu_cxx13new_allocatorI10LEDControlE8allocateEjPKv>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_ZNSt6vectorI10LEDControlSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f8a1 	bl	8001e52 <_ZSt12__relocate_aIP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001d10:	4603      	mov	r3, r0
      }
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZSt32__make_move_if_noexcept_iteratorI10LEDControlSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f8af 	bl	8001e8c <_ZNSt13move_iteratorIP10LEDControlEC1ES1_>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10LEDControlES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f8b0 	bl	8001eb0 <_ZSt18uninitialized_copyISt13move_iteratorIP10LEDControlES2_ET0_T_S5_S4_>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_ZN9__gnu_cxx13new_allocatorI10LEDControlE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001d64:	6838      	ldr	r0, [r7, #0]
 8001d66:	f7fe fc6b 	bl	8000640 <_ZN10LEDControlD1Ev>
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_ZSt11__addressofI10LEDControlEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_ZSt8_DestroyI10LEDControlEvPT_>:
    _Destroy(_Tp* __pointer)
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe fc55 	bl	8000640 <_ZN10LEDControlD1Ev>
    }
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_ZNSt6vectorI10LEDControlSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8001da6:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8001daa:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f891 	bl	8001ed4 <_ZNSt16allocator_traitsISaI10LEDControlEE8max_sizeERKS1_>
 8001db2:	4603      	mov	r3, r0
 8001db4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001db6:	f107 0208 	add.w	r2, r7, #8
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f893 	bl	8001eec <_ZSt3minIjERKT_S2_S2_>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	681b      	ldr	r3, [r3, #0]
      }
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_ZNKSt12_Vector_baseI10LEDControlSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_ZNK9__gnu_cxx13new_allocatorI10LEDControlE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001df0:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_ZN9__gnu_cxx13new_allocatorI10LEDControlE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff ffeb 	bl	8001de8 <_ZNK9__gnu_cxx13new_allocatorI10LEDControlE11_M_max_sizeEv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4293      	cmp	r3, r2
 8001e18:	bf8c      	ite	hi
 8001e1a:	2301      	movhi	r3, #1
 8001e1c:	2300      	movls	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <_ZN9__gnu_cxx13new_allocatorI10LEDControlE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e34:	d301      	bcc.n	8001e3a <_ZN9__gnu_cxx13new_allocatorI10LEDControlE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001e36:	f00b fa6d 	bl	800d314 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001e3a:	f00b fa68 	bl	800d30e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	015b      	lsls	r3, r3, #5
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00b fa50 	bl	800d2e8 <_Znwj>
 8001e48:	4603      	mov	r3, r0
      }
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZSt12__relocate_aIP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8001e52:	b5b0      	push	{r4, r5, r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f857 	bl	8001f14 <_ZSt12__niter_baseIP10LEDControlET_S2_>
 8001e66:	4604      	mov	r4, r0
 8001e68:	68b8      	ldr	r0, [r7, #8]
 8001e6a:	f000 f853 	bl	8001f14 <_ZSt12__niter_baseIP10LEDControlET_S2_>
 8001e6e:	4605      	mov	r5, r0
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f84f 	bl	8001f14 <_ZSt12__niter_baseIP10LEDControlET_S2_>
 8001e76:	4602      	mov	r2, r0
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f000 f854 	bl	8001f2a <_ZSt14__relocate_a_1IP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001e82:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdb0      	pop	{r4, r5, r7, pc}

08001e8c <_ZNSt13move_iteratorIP10LEDControlEC1ES1_>:
      move_iterator(iterator_type __i)
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8001e96:	463b      	mov	r3, r7
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f86c 	bl	8001f76 <_ZSt4moveIRP10LEDControlEONSt16remove_referenceIT_E4typeEOS4_>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_ZSt18uninitialized_copyISt13move_iteratorIP10LEDControlES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f861 	bl	8001f8c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10LEDControlES4_EET0_T_S7_S6_>
 8001eca:	4603      	mov	r3, r0
    }
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt16allocator_traitsISaI10LEDControlEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f884 	bl	8001fea <_ZNK9__gnu_cxx13new_allocatorI10LEDControlE8max_sizeEv>
 8001ee2:	4603      	mov	r3, r0
      }
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d201      	bcs.n	8001f06 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	e000      	b.n	8001f08 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001f06:	687b      	ldr	r3, [r7, #4]
    }
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_ZSt12__niter_baseIP10LEDControlET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_ZSt14__relocate_a_1IP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8001f2a:	b590      	push	{r4, r7, lr}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8001f3c:	e012      	b.n	8001f64 <_ZSt14__relocate_a_1IP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff17 	bl	8001d72 <_ZSt11__addressofI10LEDControlEPT_RS1_>
 8001f44:	4604      	mov	r4, r0
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7ff ff13 	bl	8001d72 <_ZSt11__addressofI10LEDControlEPT_RS1_>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 f855 	bl	8002002 <_ZSt19__relocate_object_aI10LEDControlS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3320      	adds	r3, #32
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1e8      	bne.n	8001f3e <_ZSt14__relocate_a_1IP10LEDControlS1_SaIS0_EET0_T_S4_S3_RT1_+0x14>
      return __cur;
 8001f6c:	697b      	ldr	r3, [r7, #20]
    }
 8001f6e:	4618      	mov	r0, r3
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}

08001f76 <_ZSt4moveIRP10LEDControlEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10LEDControlES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8001f9c:	e015      	b.n	8001fca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10LEDControlES4_EET0_T_S7_S6_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff fee7 	bl	8001d72 <_ZSt11__addressofI10LEDControlEPT_RS1_>
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f866 	bl	800207c <_ZNKSt13move_iteratorIP10LEDControlEdeEv>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f000 f86d 	bl	8002094 <_ZSt10_ConstructI10LEDControlJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f84b 	bl	800205a <_ZNSt13move_iteratorIP10LEDControlEppEv>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3320      	adds	r3, #32
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	f107 0208 	add.w	r2, r7, #8
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 f82f 	bl	8002038 <_ZStneIP10LEDControlEbRKSt13move_iteratorIT_ES6_>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1de      	bne.n	8001f9e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10LEDControlES4_EET0_T_S7_S6_+0x12>
	      return __cur;
 8001fe0:	697b      	ldr	r3, [r7, #20]
	}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}

08001fea <_ZNK9__gnu_cxx13new_allocatorI10LEDControlE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fef8 	bl	8001de8 <_ZNK9__gnu_cxx13new_allocatorI10LEDControlE11_M_max_sizeEv>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_ZSt19__relocate_object_aI10LEDControlS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800200e:	68b8      	ldr	r0, [r7, #8]
 8002010:	f000 f857 	bl	80020c2 <_ZSt4moveIR10LEDControlEONSt16remove_referenceIT_E4typeEOS3_>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f85c 	bl	80020d8 <_ZNSt16allocator_traitsISaI10LEDControlEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002020:	68b8      	ldr	r0, [r7, #8]
 8002022:	f7ff fea6 	bl	8001d72 <_ZSt11__addressofI10LEDControlEPT_RS1_>
 8002026:	4603      	mov	r3, r0
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fde9 	bl	8001c02 <_ZNSt16allocator_traitsISaI10LEDControlEE7destroyIS0_EEvRS1_PT_>
    }
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_ZStneIP10LEDControlEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8002042:	6839      	ldr	r1, [r7, #0]
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f85a 	bl	80020fe <_ZSteqIP10LEDControlEbRKSt13move_iteratorIT_ES6_>
 800204a:	4603      	mov	r3, r0
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_ZNSt13move_iteratorIP10LEDControlEppEv>:
      operator++()
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f103 0220 	add.w	r2, r3, #32
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
	return *this;
 800206e:	687b      	ldr	r3, [r7, #4]
      }
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_ZNKSt13move_iteratorIP10LEDControlEdeEv>:
      operator*() const
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_ZSt10_ConstructI10LEDControlJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	f000 f843 	bl	800212a <_ZSt7forwardI10LEDControlEOT_RNSt16remove_referenceIS1_E4typeE>
 80020a4:	4604      	mov	r4, r0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4619      	mov	r1, r3
 80020aa:	2020      	movs	r0, #32
 80020ac:	f7fe fa40 	bl	8000530 <_ZnwjPv>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4621      	mov	r1, r4
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fad1 	bl	800065c <_ZN10LEDControlC1EOS_>
    }
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}

080020c2 <_ZSt4moveIR10LEDControlEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_ZNSt16allocator_traitsISaI10LEDControlEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f820 	bl	800212a <_ZSt7forwardI10LEDControlEOT_RNSt16remove_referenceIS1_E4typeE>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f825 	bl	8002140 <_ZN9__gnu_cxx13new_allocatorI10LEDControlE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_ZSteqIP10LEDControlEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f831 	bl	8002170 <_ZNKSt13move_iteratorIP10LEDControlE4baseEv>
 800210e:	4604      	mov	r4, r0
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f000 f82d 	bl	8002170 <_ZNKSt13move_iteratorIP10LEDControlE4baseEv>
 8002116:	4603      	mov	r3, r0
 8002118:	429c      	cmp	r4, r3
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}

0800212a <_ZSt7forwardI10LEDControlEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_ZN9__gnu_cxx13new_allocatorI10LEDControlE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffec 	bl	800212a <_ZSt7forwardI10LEDControlEOT_RNSt16remove_referenceIS1_E4typeE>
 8002152:	4604      	mov	r4, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4619      	mov	r1, r3
 8002158:	2020      	movs	r0, #32
 800215a:	f7fe f9e9 	bl	8000530 <_ZnwjPv>
 800215e:	4603      	mov	r3, r0
 8002160:	4621      	mov	r1, r4
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fa7a 	bl	800065c <_ZN10LEDControlC1EOS_>
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}

08002170 <_ZNKSt13move_iteratorIP10LEDControlE4baseEv>:
      base() const
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_MspInit+0x54>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_MspInit+0x54>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_MspInit+0x54>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_MspInit+0x54>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_MspInit+0x54>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_MspInit+0x54>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	210f      	movs	r1, #15
 80021ca:	f06f 0001 	mvn.w	r0, #1
 80021ce:	f000 fe59 	bl	8002e84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0b      	ldr	r2, [pc, #44]	; (800221c <HAL_CRC_MspInit+0x3c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10d      	bne.n	800220e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_CRC_MspInit+0x40>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_CRC_MspInit+0x40>)
 80021fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_CRC_MspInit+0x40>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023000 	.word	0x40023000
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_DMA2D_MspInit+0x48>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d115      	bne.n	8002262 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_DMA2D_MspInit+0x4c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <HAL_DMA2D_MspInit+0x4c>)
 8002240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_DMA2D_MspInit+0x4c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2105      	movs	r1, #5
 8002256:	205a      	movs	r0, #90	; 0x5a
 8002258:	f000 fe14 	bl	8002e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800225c:	205a      	movs	r0, #90	; 0x5a
 800225e:	f000 fe2d 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	4002b000 	.word	0x4002b000
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_DSI_MspInit+0x94>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d133      	bne.n	80022fe <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_DSI_MspInit+0x98>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_DSI_MspInit+0x98>)
 80022a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_DSI_MspInit+0x98>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_DSI_MspInit+0x98>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <HAL_DSI_MspInit+0x98>)
 80022bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_DSI_MspInit+0x98>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80022ce:	2304      	movs	r3, #4
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80022de:	230d      	movs	r3, #13
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <HAL_DSI_MspInit+0x9c>)
 80022ea:	f001 fe33 	bl	8003f54 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2105      	movs	r1, #5
 80022f2:	205c      	movs	r0, #92	; 0x5c
 80022f4:	f000 fdc6 	bl	8002e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80022f8:	205c      	movs	r0, #92	; 0x5c
 80022fa:	f000 fddf 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40016c00 	.word	0x40016c00
 800230c:	40023800 	.word	0x40023800
 8002310:	40022400 	.word	0x40022400

08002314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_I2C_MspInit+0xe8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12d      	bne.n	8002392 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_I2C_MspInit+0xec>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a30      	ldr	r2, [pc, #192]	; (8002400 <HAL_I2C_MspInit+0xec>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <HAL_I2C_MspInit+0xec>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002358:	2312      	movs	r3, #18
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235c:	2301      	movs	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002364:	2304      	movs	r3, #4
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	4619      	mov	r1, r3
 800236e:	4825      	ldr	r0, [pc, #148]	; (8002404 <HAL_I2C_MspInit+0xf0>)
 8002370:	f001 fdf0 	bl	8003f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_I2C_MspInit+0xec>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_I2C_MspInit+0xec>)
 800237e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002382:	6413      	str	r3, [r2, #64]	; 0x40
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <HAL_I2C_MspInit+0xec>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002390:	e030      	b.n	80023f4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_I2C_MspInit+0xf4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d12b      	bne.n	80023f4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_I2C_MspInit+0xec>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_I2C_MspInit+0xec>)
 80023a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023aa:	6313      	str	r3, [r2, #48]	; 0x30
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_I2C_MspInit+0xec>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80023b8:	2330      	movs	r3, #48	; 0x30
 80023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023bc:	2312      	movs	r3, #18
 80023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c0:	2301      	movs	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023c8:	2304      	movs	r3, #4
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	480e      	ldr	r0, [pc, #56]	; (800240c <HAL_I2C_MspInit+0xf8>)
 80023d4:	f001 fdbe 	bl	8003f54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_I2C_MspInit+0xec>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_I2C_MspInit+0xec>)
 80023e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e6:	6413      	str	r3, [r2, #64]	; 0x40
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_I2C_MspInit+0xec>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3730      	adds	r7, #48	; 0x30
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40005400 	.word	0x40005400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020400 	.word	0x40020400
 8002408:	40005800 	.word	0x40005800
 800240c:	40021c00 	.word	0x40021c00

08002410 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_LTDC_MspInit+0x48>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d115      	bne.n	800244e <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_LTDC_MspInit+0x4c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <HAL_LTDC_MspInit+0x4c>)
 800242c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_LTDC_MspInit+0x4c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2105      	movs	r1, #5
 8002442:	2058      	movs	r0, #88	; 0x58
 8002444:	f000 fd1e 	bl	8002e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002448:	2058      	movs	r0, #88	; 0x58
 800244a:	f000 fd37 	bl	8002ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40016800 	.word	0x40016800
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a31      	ldr	r2, [pc, #196]	; (8002544 <HAL_QSPI_MspInit+0xe4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d15b      	bne.n	800253a <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	4a2f      	ldr	r2, [pc, #188]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6393      	str	r3, [r2, #56]	; 0x38
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a21      	ldr	r2, [pc, #132]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_QSPI_MspInit+0xe8>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80024d6:	2340      	movs	r3, #64	; 0x40
 80024d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80024e6:	230a      	movs	r3, #10
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	4816      	ldr	r0, [pc, #88]	; (800254c <HAL_QSPI_MspInit+0xec>)
 80024f2:	f001 fd2f 	bl	8003f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80024f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80024fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002508:	2309      	movs	r3, #9
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	480f      	ldr	r0, [pc, #60]	; (8002550 <HAL_QSPI_MspInit+0xf0>)
 8002514:	f001 fd1e 	bl	8003f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800252a:	230a      	movs	r3, #10
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4806      	ldr	r0, [pc, #24]	; (8002550 <HAL_QSPI_MspInit+0xf0>)
 8002536:	f001 fd0d 	bl	8003f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	a0001000 	.word	0xa0001000
 8002548:	40023800 	.word	0x40023800
 800254c:	40020400 	.word	0x40020400
 8002550:	40021400 	.word	0x40021400

08002554 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_SD_MspInit+0xc0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d14a      	bne.n	800260c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_SD_MspInit+0xc4>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a26      	ldr	r2, [pc, #152]	; (8002618 <HAL_SD_MspInit+0xc4>)
 8002580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_SD_MspInit+0xc4>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_SD_MspInit+0xc4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <HAL_SD_MspInit+0xc4>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_SD_MspInit+0xc4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_SD_MspInit+0xc4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_SD_MspInit+0xc4>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_SD_MspInit+0xc4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80025ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80025ce:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80025dc:	230c      	movs	r3, #12
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	480d      	ldr	r0, [pc, #52]	; (800261c <HAL_SD_MspInit+0xc8>)
 80025e8:	f001 fcb4 	bl	8003f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80025ec:	2304      	movs	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80025fc:	230c      	movs	r3, #12
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	4806      	ldr	r0, [pc, #24]	; (8002620 <HAL_SD_MspInit+0xcc>)
 8002608:	f001 fca4 	bl	8003f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800260c:	bf00      	nop
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40023800 	.word	0x40023800
 800261c:	40020800 	.word	0x40020800
 8002620:	40020c00 	.word	0x40020c00

08002624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <HAL_TIM_Base_MspInit+0x3c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10d      	bne.n	8002652 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_TIM_Base_MspInit+0x40>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_TIM_Base_MspInit+0x40>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_TIM_Base_MspInit+0x40>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40010000 	.word	0x40010000
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a33      	ldr	r2, [pc, #204]	; (8002754 <HAL_UART_MspInit+0xec>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12d      	bne.n	80026e6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_UART_MspInit+0xf0>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a31      	ldr	r2, [pc, #196]	; (8002758 <HAL_UART_MspInit+0xf0>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_UART_MspInit+0xf0>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_UART_MspInit+0xf0>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_UART_MspInit+0xf0>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b28      	ldr	r3, [pc, #160]	; (8002758 <HAL_UART_MspInit+0xf0>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80026c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026cc:	2301      	movs	r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026d4:	2307      	movs	r3, #7
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	4619      	mov	r1, r3
 80026de:	481f      	ldr	r0, [pc, #124]	; (800275c <HAL_UART_MspInit+0xf4>)
 80026e0:	f001 fc38 	bl	8003f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026e4:	e031      	b.n	800274a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_UART_MspInit+0xf8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d12c      	bne.n	800274a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_UART_MspInit+0xf0>)
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_UART_MspInit+0xf0>)
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_UART_MspInit+0xf0>)
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_UART_MspInit+0xf0>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	4a10      	ldr	r2, [pc, #64]	; (8002758 <HAL_UART_MspInit+0xf0>)
 8002716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800271a:	6313      	str	r3, [r2, #48]	; 0x30
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_UART_MspInit+0xf0>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8002728:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800273a:	2308      	movs	r3, #8
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800273e:	f107 031c 	add.w	r3, r7, #28
 8002742:	4619      	mov	r1, r3
 8002744:	4807      	ldr	r0, [pc, #28]	; (8002764 <HAL_UART_MspInit+0xfc>)
 8002746:	f001 fc05 	bl	8003f54 <HAL_GPIO_Init>
}
 800274a:	bf00      	nop
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40004800 	.word	0x40004800
 8002758:	40023800 	.word	0x40023800
 800275c:	40020400 	.word	0x40020400
 8002760:	40011400 	.word	0x40011400
 8002764:	40021800 	.word	0x40021800

08002768 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800277c:	4b44      	ldr	r3, [pc, #272]	; (8002890 <HAL_FMC_MspInit+0x128>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 8081 	bne.w	8002888 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_FMC_MspInit+0x128>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <HAL_FMC_MspInit+0x12c>)
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	4a3f      	ldr	r2, [pc, #252]	; (8002894 <HAL_FMC_MspInit+0x12c>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6393      	str	r3, [r2, #56]	; 0x38
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_FMC_MspInit+0x12c>)
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80027a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80027ac:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b6:	2303      	movs	r3, #3
 80027b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ba:	230c      	movs	r3, #12
 80027bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4835      	ldr	r0, [pc, #212]	; (8002898 <HAL_FMC_MspInit+0x130>)
 80027c4:	f001 fbc6 	bl	8003f54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80027c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80027cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027da:	230c      	movs	r3, #12
 80027dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	482e      	ldr	r0, [pc, #184]	; (800289c <HAL_FMC_MspInit+0x134>)
 80027e4:	f001 fbb6 	bl	8003f54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80027e8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80027ec:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027fa:	230c      	movs	r3, #12
 80027fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4827      	ldr	r0, [pc, #156]	; (80028a0 <HAL_FMC_MspInit+0x138>)
 8002804:	f001 fba6 	bl	8003f54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002808:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800280c:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800281a:	230c      	movs	r3, #12
 800281c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4820      	ldr	r0, [pc, #128]	; (80028a4 <HAL_FMC_MspInit+0x13c>)
 8002824:	f001 fb96 	bl	8003f54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002828:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800282c:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800283a:	230c      	movs	r3, #12
 800283c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4819      	ldr	r0, [pc, #100]	; (80028a8 <HAL_FMC_MspInit+0x140>)
 8002844:	f001 fb86 	bl	8003f54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8002848:	f64f 730c 	movw	r3, #65292	; 0xff0c
 800284c:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800285a:	230c      	movs	r3, #12
 800285c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4812      	ldr	r0, [pc, #72]	; (80028ac <HAL_FMC_MspInit+0x144>)
 8002864:	f001 fb76 	bl	8003f54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002868:	2301      	movs	r3, #1
 800286a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002878:	230c      	movs	r3, #12
 800287a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	4619      	mov	r1, r3
 8002880:	480b      	ldr	r0, [pc, #44]	; (80028b0 <HAL_FMC_MspInit+0x148>)
 8002882:	f001 fb67 	bl	8003f54 <HAL_GPIO_Init>
 8002886:	e000      	b.n	800288a <HAL_FMC_MspInit+0x122>
    return;
 8002888:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000498 	.word	0x20000498
 8002894:	40023800 	.word	0x40023800
 8002898:	40021000 	.word	0x40021000
 800289c:	40021800 	.word	0x40021800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40021400 	.word	0x40021400
 80028ac:	40021c00 	.word	0x40021c00
 80028b0:	40020800 	.word	0x40020800

080028b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80028bc:	f7ff ff54 	bl	8002768 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a26      	ldr	r2, [pc, #152]	; (8002970 <HAL_SAI_MspInit+0xa8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d146      	bne.n	8002968 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_SAI_MspInit+0xac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10d      	bne.n	80028fe <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_SAI_MspInit+0xb0>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a23      	ldr	r2, [pc, #140]	; (8002978 <HAL_SAI_MspInit+0xb0>)
 80028ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <HAL_SAI_MspInit+0xb0>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_SAI_MspInit+0xac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <HAL_SAI_MspInit+0xac>)
 8002906:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8002908:	2330      	movs	r3, #48	; 0x30
 800290a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002918:	2306      	movs	r3, #6
 800291a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	4619      	mov	r1, r3
 8002922:	4816      	ldr	r0, [pc, #88]	; (800297c <HAL_SAI_MspInit+0xb4>)
 8002924:	f001 fb16 	bl	8003f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8002928:	2340      	movs	r3, #64	; 0x40
 800292a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002938:	2306      	movs	r3, #6
 800293a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	4619      	mov	r1, r3
 8002942:	480f      	ldr	r0, [pc, #60]	; (8002980 <HAL_SAI_MspInit+0xb8>)
 8002944:	f001 fb06 	bl	8003f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002958:	2306      	movs	r3, #6
 800295a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	4619      	mov	r1, r3
 8002962:	4808      	ldr	r0, [pc, #32]	; (8002984 <HAL_SAI_MspInit+0xbc>)
 8002964:	f001 faf6 	bl	8003f54 <HAL_GPIO_Init>

    }
}
 8002968:	bf00      	nop
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40015804 	.word	0x40015804
 8002974:	2000049c 	.word	0x2000049c
 8002978:	40023800 	.word	0x40023800
 800297c:	40021000 	.word	0x40021000
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40021800 	.word	0x40021800

08002988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <HAL_InitTick+0xe4>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	4a32      	ldr	r2, [pc, #200]	; (8002a6c <HAL_InitTick+0xe4>)
 80029a2:	f043 0310 	orr.w	r3, r3, #16
 80029a6:	6413      	str	r3, [r2, #64]	; 0x40
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_InitTick+0xe4>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029b4:	f107 0210 	add.w	r2, r7, #16
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fa44 	bl	8006e4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029ce:	f004 fa15 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 80029d2:	6378      	str	r0, [r7, #52]	; 0x34
 80029d4:	e004      	b.n	80029e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029d6:	f004 fa11 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 80029da:	4603      	mov	r3, r0
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <HAL_InitTick+0xe8>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	0c9b      	lsrs	r3, r3, #18
 80029ea:	3b01      	subs	r3, #1
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029ee:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <HAL_InitTick+0xec>)
 80029f0:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_InitTick+0xf0>)
 80029f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <HAL_InitTick+0xec>)
 80029f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029fc:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_InitTick+0xec>)
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_InitTick+0xec>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_InitTick+0xec>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_InitTick+0xec>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a14:	4817      	ldr	r0, [pc, #92]	; (8002a74 <HAL_InitTick+0xec>)
 8002a16:	f006 f9fe 	bl	8008e16 <HAL_TIM_Base_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002a20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11b      	bne.n	8002a60 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a28:	4812      	ldr	r0, [pc, #72]	; (8002a74 <HAL_InitTick+0xec>)
 8002a2a:	f006 fa43 	bl	8008eb4 <HAL_TIM_Base_Start_IT>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d111      	bne.n	8002a60 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a3c:	2036      	movs	r0, #54	; 0x36
 8002a3e:	f000 fa3d 	bl	8002ebc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d808      	bhi.n	8002a5a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	2036      	movs	r0, #54	; 0x36
 8002a4e:	f000 fa19 	bl	8002e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_InitTick+0xf4>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e002      	b.n	8002a60 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3738      	adds	r7, #56	; 0x38
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	431bde83 	.word	0x431bde83
 8002a74:	200004a0 	.word	0x200004a0
 8002a78:	40001000 	.word	0x40001000
 8002a7c:	20000004 	.word	0x20000004

08002a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a84:	e7fe      	b.n	8002a84 <NMI_Handler+0x4>

08002a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8a:	e7fe      	b.n	8002a8a <HardFault_Handler+0x4>

08002a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <MemManage_Handler+0x4>

08002a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a96:	e7fe      	b.n	8002a96 <BusFault_Handler+0x4>

08002a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <UsageFault_Handler+0x4>

08002a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f001 fc47 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <TIM6_DAC_IRQHandler+0x10>)
 8002ac2:	f006 fa67 	bl	8008f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200004a0 	.word	0x200004a0

08002ad0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <OTG_FS_IRQHandler+0x10>)
 8002ad6:	f001 fc4d 	bl	8004374 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20008610 	.word	0x20008610

08002ae4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <LTDC_IRQHandler+0x10>)
 8002aea:	f003 fbe5 	bl	80062b8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000188 	.word	0x20000188

08002af8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <DMA2D_IRQHandler+0x10>)
 8002afe:	f000 fae2 	bl	80030c6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000084 	.word	0x20000084

08002b0c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <DSI_IRQHandler+0x10>)
 8002b12:	f000 fe54 	bl	80037be <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200000c4 	.word	0x200000c4

08002b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return 1;
 8002b24:	2301      	movs	r3, #1
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_kill>:

int _kill(int pid, int sig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b3a:	f00a fea5 	bl	800d888 <__errno>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2216      	movs	r2, #22
 8002b42:	601a      	str	r2, [r3, #0]
  return -1;
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_exit>:

void _exit (int status)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffe7 	bl	8002b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b62:	e7fe      	b.n	8002b62 <_exit+0x12>

08002b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b6c:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <_sbrk+0x5c>)
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <_sbrk+0x60>)
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <_sbrk+0x64>)
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <_sbrk+0x68>)
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <_sbrk+0x64>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d207      	bcs.n	8002ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b94:	f00a fe78 	bl	800d888 <__errno>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	e009      	b.n	8002bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <_sbrk+0x64>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <_sbrk+0x64>)
 8002bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20050000 	.word	0x20050000
 8002bc4:	00000400 	.word	0x00000400
 8002bc8:	200004e8 	.word	0x200004e8
 8002bcc:	20008b40 	.word	0x20008b40

08002bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <SystemInit+0x20>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <SystemInit+0x20>)
 8002bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bf8:	f7ff ffea 	bl	8002bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bfc:	480c      	ldr	r0, [pc, #48]	; (8002c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bfe:	490d      	ldr	r1, [pc, #52]	; (8002c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c14:	4c0a      	ldr	r4, [pc, #40]	; (8002c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002c22:	f00a fe37 	bl	800d894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c26:	f7fd fd35 	bl	8000694 <main>
  bx  lr    
 8002c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002c38:	0800dd58 	.word	0x0800dd58
  ldr r2, =_sbss
 8002c3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002c40:	20008b3c 	.word	0x20008b3c

08002c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c44:	e7fe      	b.n	8002c44 <ADC_IRQHandler>
	...

08002c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <HAL_Init+0x40>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <HAL_Init+0x40>)
 8002c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_Init+0x40>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_Init+0x40>)
 8002c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_Init+0x40>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <HAL_Init+0x40>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c70:	2003      	movs	r0, #3
 8002c72:	f000 f8fc 	bl	8002e6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c76:	200f      	movs	r0, #15
 8002c78:	f7ff fe86 	bl	8002988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c7c:	f7ff fa84 	bl	8002188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00

08002c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_IncTick+0x20>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_IncTick+0x24>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_IncTick+0x24>)
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	200004ec 	.word	0x200004ec

08002cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_GetTick+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	200004ec 	.word	0x200004ec

08002ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd4:	f7ff ffee 	bl	8002cb4 <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d005      	beq.n	8002cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_Delay+0x44>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4413      	add	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cf2:	bf00      	nop
 8002cf4:	f7ff ffde 	bl	8002cb4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d8f7      	bhi.n	8002cf4 <HAL_Delay+0x28>
  {
  }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000008 	.word	0x20000008

08002d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	db0b      	blt.n	8002da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4907      	ldr	r1, [pc, #28]	; (8002db0 <__NVIC_EnableIRQ+0x38>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100

08002db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db0a      	blt.n	8002dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	490c      	ldr	r1, [pc, #48]	; (8002e00 <__NVIC_SetPriority+0x4c>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ddc:	e00a      	b.n	8002df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4908      	ldr	r1, [pc, #32]	; (8002e04 <__NVIC_SetPriority+0x50>)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	3b04      	subs	r3, #4
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	440b      	add	r3, r1
 8002df2:	761a      	strb	r2, [r3, #24]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f1c3 0307 	rsb	r3, r3, #7
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf28      	it	cs
 8002e26:	2304      	movcs	r3, #4
 8002e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d902      	bls.n	8002e38 <NVIC_EncodePriority+0x30>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3b03      	subs	r3, #3
 8002e36:	e000      	b.n	8002e3a <NVIC_EncodePriority+0x32>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	4313      	orrs	r3, r2
         );
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ff4c 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e96:	f7ff ff61 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002e9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	6978      	ldr	r0, [r7, #20]
 8002ea2:	f7ff ffb1 	bl	8002e08 <NVIC_EncodePriority>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff80 	bl	8002db4 <__NVIC_SetPriority>
}
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff54 	bl	8002d78 <__NVIC_EnableIRQ>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00e      	b.n	8002f08 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	795b      	ldrb	r3, [r3, #5]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff f970 	bl	80021e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_DMA_Start_IT+0x26>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e040      	b.n	8002fb8 <HAL_DMA_Start_IT+0xa8>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d12f      	bne.n	8002faa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f83a 	bl	8002fd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	223f      	movs	r2, #63	; 0x3f
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0216 	orr.w	r2, r2, #22
 8002f7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0208 	orr.w	r2, r2, #8
 8002f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e005      	b.n	8002fb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d108      	bne.n	8003018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003016:	e007      	b.n	8003028 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e03b      	b.n	80030be <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff f8e2 	bl	8002224 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	f023 0107 	bic.w	r1, r3, #7
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800309e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68d1      	ldr	r1, [r2, #12]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	430b      	orrs	r3, r1
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d026      	beq.n	8003136 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d021      	beq.n	8003136 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003100:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2204      	movs	r2, #4
 800311a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d026      	beq.n	800318e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d021      	beq.n	800318e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003158:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2220      	movs	r2, #32
 8003160:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2204      	movs	r2, #4
 8003172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d026      	beq.n	80031e6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d021      	beq.n	80031e6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2208      	movs	r2, #8
 80031b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2204      	movs	r2, #4
 80031ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003208:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2204      	movs	r2, #4
 8003210:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f853 	bl	80032be <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d024      	beq.n	800326c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01f      	beq.n	800326c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2202      	movs	r2, #2
 8003242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01f      	beq.n	80032b6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01a      	beq.n	80032b6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800328e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2210      	movs	r2, #16
 8003296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f80e 	bl	80032d2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_DMA2D_ConfigLayer+0x20>
 8003304:	2302      	movs	r3, #2
 8003306:	e079      	b.n	80033fc <HAL_DMA2D_ConfigLayer+0x114>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	3318      	adds	r3, #24
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003332:	4b35      	ldr	r3, [pc, #212]	; (8003408 <HAL_DMA2D_ConfigLayer+0x120>)
 8003334:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b0a      	cmp	r3, #10
 800333c:	d003      	beq.n	8003346 <HAL_DMA2D_ConfigLayer+0x5e>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b09      	cmp	r3, #9
 8003344:	d107      	bne.n	8003356 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e005      	b.n	8003362 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d120      	bne.n	80033aa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43db      	mvns	r3, r3
 8003372:	ea02 0103 	and.w	r1, r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	430a      	orrs	r2, r1
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b0a      	cmp	r3, #10
 8003390:	d003      	beq.n	800339a <HAL_DMA2D_ConfigLayer+0xb2>
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b09      	cmp	r3, #9
 8003398:	d127      	bne.n	80033ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
 80033a8:	e01f      	b.n	80033ea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	ea02 0103 	and.w	r1, r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	430a      	orrs	r2, r1
 80033c0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b0a      	cmp	r3, #10
 80033d2:	d003      	beq.n	80033dc <HAL_DMA2D_ConfigLayer+0xf4>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b09      	cmp	r3, #9
 80033da:	d106      	bne.n	80033ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80033e8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	ff03000f 	.word	0xff03000f

0800340c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e10b      	b.n	8003638 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7c5b      	ldrb	r3, [r3, #17]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe ff22 	bl	8002274 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2203      	movs	r2, #3
 8003434:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800344a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800345e:	f7ff fc29 	bl	8002cb4 <HAL_GetTick>
 8003462:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003464:	e009      	b.n	800347a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003466:	f7ff fc25 	bl	8002cb4 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003474:	d901      	bls.n	800347a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0de      	b.n	8003638 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ed      	beq.n	8003466 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800349a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800349e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80034b6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80034be:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f7ff fbea 	bl	8002ccc <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f8:	f7ff fbdc 	bl	8002cb4 <HAL_GetTick>
 80034fc:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80034fe:	e009      	b.n	8003514 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003500:	f7ff fbd8 	bl	8002cb4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800350e:	d901      	bls.n	8003514 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e091      	b.n	8003638 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ed      	beq.n	8003500 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0206 	orr.w	r2, r2, #6
 8003534:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0203 	bic.w	r2, r2, #3
 8003548:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0203 	bic.w	r2, r2, #3
 8003576:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800359e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_DSI_Init+0x1b4>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	e000      	b.n	80035c2 <HAL_DSI_Init+0x1b6>
 80035c0:	2301      	movs	r3, #1
 80035c2:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_DSI_Init+0x234>)
 80035c8:	fb03 f202 	mul.w	r2, r3, r2
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	409a      	lsls	r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80035f8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	430a      	orrs	r2, r1
 800360c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2200      	movs	r2, #0
 8003616:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	003d0900 	.word	0x003d0900

08003644 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7c1b      	ldrb	r3, [r3, #16]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_DSI_ConfigErrorMonitor+0x16>
 8003656:	2302      	movs	r3, #2
 8003658:	e0ab      	b.n	80037b2 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2200      	movs	r2, #0
 8003666:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003694:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003698:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80036b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0202 	orr.w	r2, r2, #2
 80036f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 020c 	orr.w	r2, r2, #12
 8003710:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0210 	orr.w	r2, r2, #16
 800372e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0220 	orr.w	r2, r2, #32
 800374c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003788:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80037a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00f      	beq.n	80037f6 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f8ad 	bl	8003950 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00f      	beq.n	8003826 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2202      	movs	r2, #2
 800381c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f89f 	bl	8003964 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 808c 	beq.w	8003948 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003838:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003850:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f043 0202 	orr.w	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f043 0208 	orr.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f043 0210 	orr.w	r2, r3, #16
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f818 	bl	8003978 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7c1b      	ldrb	r3, [r3, #16]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_DSI_SetGenericVCID+0x16>
 800399e:	2302      	movs	r3, #2
 80039a0:	e016      	b.n	80039d0 <HAL_DSI_SetGenericVCID+0x44>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0203 	bic.w	r2, r2, #3
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7c1b      	ldrb	r3, [r3, #16]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e0c5      	b.n	8003b7e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0203 	bic.w	r2, r2, #3
 8003a3e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68d9      	ldr	r1, [r3, #12]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0207 	bic.w	r2, r2, #7
 8003a60:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6959      	ldr	r1, [r3, #20]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 020f 	bic.w	r2, r2, #15
 8003a8e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6919      	ldr	r1, [r3, #16]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020e 	bic.w	r2, r2, #14
 8003ab2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	005a      	lsls	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0202 	orr.w	r2, r2, #2
 8003b72:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7c1b      	ldrb	r3, [r3, #16]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_DSI_ConfigCommand+0x16>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e049      	b.n	8003c36 <HAL_DSI_ConfigCommand+0xaa>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <HAL_DSI_ConfigCommand+0xb8>)
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003bc6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003bcc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003bd2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003bd8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003bde:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003be4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003bea:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003bf0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003bf6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003bfc:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003c02:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0202 	bic.w	r2, r2, #2
 8003c1a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	fef080ff 	.word	0xfef080ff

08003c48 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	7c1b      	ldrb	r3, [r3, #16]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_DSI_ConfigFlowControl+0x16>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e016      	b.n	8003c8c <HAL_DSI_ConfigFlowControl+0x44>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 021f 	bic.w	r2, r2, #31
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7c1b      	ldrb	r3, [r3, #16]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_DSI_ConfigPhyTimer+0x16>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e058      	b.n	8003d60 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bf38      	it	cc
 8003cc0:	4613      	movcc	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003cd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	041a      	lsls	r2, r3, #16
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003d02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003d3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	021a      	lsls	r2, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7c1b      	ldrb	r3, [r3, #16]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0b4      	b.n	8003eec <HAL_DSI_ConfigHostTimeouts+0x180>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003d96:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6899      	ldr	r1, [r3, #8]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b292      	uxth	r2, r2
 8003db8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	041a      	lsls	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	0c1b      	lsrs	r3, r3, #16
 8003dfc:	041b      	lsls	r3, r3, #16
 8003dfe:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	0c1b      	lsrs	r3, r3, #16
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6a1a      	ldr	r2, [r3, #32]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7c1b      	ldrb	r3, [r3, #16]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e01b      	b.n	8003f46 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003f24:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	065a      	lsls	r2, r3, #25
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e177      	b.n	8004260 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f70:	2201      	movs	r2, #1
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	f040 8166 	bne.w	800425a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d005      	beq.n	8003fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d130      	bne.n	8004008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fdc:	2201      	movs	r2, #1
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 0201 	and.w	r2, r3, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	2b03      	cmp	r3, #3
 8004012:	d017      	beq.n	8004044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	2203      	movs	r2, #3
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d123      	bne.n	8004098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	08da      	lsrs	r2, r3, #3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3208      	adds	r2, #8
 8004058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	220f      	movs	r2, #15
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	08da      	lsrs	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3208      	adds	r2, #8
 8004092:	69b9      	ldr	r1, [r7, #24]
 8004094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	2203      	movs	r2, #3
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0203 	and.w	r2, r3, #3
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80c0 	beq.w	800425a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b66      	ldr	r3, [pc, #408]	; (8004278 <HAL_GPIO_Init+0x324>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4a65      	ldr	r2, [pc, #404]	; (8004278 <HAL_GPIO_Init+0x324>)
 80040e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ea:	4b63      	ldr	r3, [pc, #396]	; (8004278 <HAL_GPIO_Init+0x324>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040f6:	4a61      	ldr	r2, [pc, #388]	; (800427c <HAL_GPIO_Init+0x328>)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	3302      	adds	r3, #2
 80040fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	220f      	movs	r2, #15
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a58      	ldr	r2, [pc, #352]	; (8004280 <HAL_GPIO_Init+0x32c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d037      	beq.n	8004192 <HAL_GPIO_Init+0x23e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a57      	ldr	r2, [pc, #348]	; (8004284 <HAL_GPIO_Init+0x330>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d031      	beq.n	800418e <HAL_GPIO_Init+0x23a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a56      	ldr	r2, [pc, #344]	; (8004288 <HAL_GPIO_Init+0x334>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02b      	beq.n	800418a <HAL_GPIO_Init+0x236>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a55      	ldr	r2, [pc, #340]	; (800428c <HAL_GPIO_Init+0x338>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d025      	beq.n	8004186 <HAL_GPIO_Init+0x232>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a54      	ldr	r2, [pc, #336]	; (8004290 <HAL_GPIO_Init+0x33c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01f      	beq.n	8004182 <HAL_GPIO_Init+0x22e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a53      	ldr	r2, [pc, #332]	; (8004294 <HAL_GPIO_Init+0x340>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d019      	beq.n	800417e <HAL_GPIO_Init+0x22a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a52      	ldr	r2, [pc, #328]	; (8004298 <HAL_GPIO_Init+0x344>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_GPIO_Init+0x226>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_GPIO_Init+0x348>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00d      	beq.n	8004176 <HAL_GPIO_Init+0x222>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a50      	ldr	r2, [pc, #320]	; (80042a0 <HAL_GPIO_Init+0x34c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <HAL_GPIO_Init+0x21e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a4f      	ldr	r2, [pc, #316]	; (80042a4 <HAL_GPIO_Init+0x350>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_GPIO_Init+0x21a>
 800416a:	2309      	movs	r3, #9
 800416c:	e012      	b.n	8004194 <HAL_GPIO_Init+0x240>
 800416e:	230a      	movs	r3, #10
 8004170:	e010      	b.n	8004194 <HAL_GPIO_Init+0x240>
 8004172:	2308      	movs	r3, #8
 8004174:	e00e      	b.n	8004194 <HAL_GPIO_Init+0x240>
 8004176:	2307      	movs	r3, #7
 8004178:	e00c      	b.n	8004194 <HAL_GPIO_Init+0x240>
 800417a:	2306      	movs	r3, #6
 800417c:	e00a      	b.n	8004194 <HAL_GPIO_Init+0x240>
 800417e:	2305      	movs	r3, #5
 8004180:	e008      	b.n	8004194 <HAL_GPIO_Init+0x240>
 8004182:	2304      	movs	r3, #4
 8004184:	e006      	b.n	8004194 <HAL_GPIO_Init+0x240>
 8004186:	2303      	movs	r3, #3
 8004188:	e004      	b.n	8004194 <HAL_GPIO_Init+0x240>
 800418a:	2302      	movs	r3, #2
 800418c:	e002      	b.n	8004194 <HAL_GPIO_Init+0x240>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <HAL_GPIO_Init+0x240>
 8004192:	2300      	movs	r3, #0
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	f002 0203 	and.w	r2, r2, #3
 800419a:	0092      	lsls	r2, r2, #2
 800419c:	4093      	lsls	r3, r2
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a4:	4935      	ldr	r1, [pc, #212]	; (800427c <HAL_GPIO_Init+0x328>)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	3302      	adds	r3, #2
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_GPIO_Init+0x354>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041d6:	4a34      	ldr	r2, [pc, #208]	; (80042a8 <HAL_GPIO_Init+0x354>)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041dc:	4b32      	ldr	r3, [pc, #200]	; (80042a8 <HAL_GPIO_Init+0x354>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004200:	4a29      	ldr	r2, [pc, #164]	; (80042a8 <HAL_GPIO_Init+0x354>)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004206:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <HAL_GPIO_Init+0x354>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800422a:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <HAL_GPIO_Init+0x354>)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004230:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <HAL_GPIO_Init+0x354>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004254:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <HAL_GPIO_Init+0x354>)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3301      	adds	r3, #1
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b0f      	cmp	r3, #15
 8004264:	f67f ae84 	bls.w	8003f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	40013800 	.word	0x40013800
 8004280:	40020000 	.word	0x40020000
 8004284:	40020400 	.word	0x40020400
 8004288:	40020800 	.word	0x40020800
 800428c:	40020c00 	.word	0x40020c00
 8004290:	40021000 	.word	0x40021000
 8004294:	40021400 	.word	0x40021400
 8004298:	40021800 	.word	0x40021800
 800429c:	40021c00 	.word	0x40021c00
 80042a0:	40022000 	.word	0x40022000
 80042a4:	40022400 	.word	0x40022400
 80042a8:	40013c00 	.word	0x40013c00

080042ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	887b      	ldrh	r3, [r7, #2]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e001      	b.n	80042ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
 80042e8:	4613      	mov	r3, r2
 80042ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042ec:	787b      	ldrb	r3, [r7, #1]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042f8:	e003      	b.n	8004302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042fa:	887b      	ldrh	r3, [r7, #2]
 80042fc:	041a      	lsls	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	619a      	str	r2, [r3, #24]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004320:	887a      	ldrh	r2, [r7, #2]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4013      	ands	r3, r2
 8004326:	041a      	lsls	r2, r3, #16
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	43d9      	mvns	r1, r3
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	400b      	ands	r3, r1
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	619a      	str	r2, [r3, #24]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc fad0 	bl	8000908 <HAL_GPIO_EXTI_Callback>
  }
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40013c00 	.word	0x40013c00

08004374 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f006 fbb2 	bl	800aaf4 <USB_GetMode>
 8004390:	4603      	mov	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	f040 80fb 	bne.w	800458e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f006 fb75 	bl	800aa8c <USB_ReadInterrupts>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80f1 	beq.w	800458c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f006 fb6c 	bl	800aa8c <USB_ReadInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043be:	d104      	bne.n	80043ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80043c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f006 fb5c 	bl	800aa8c <USB_ReadInterrupts>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043de:	d104      	bne.n	80043ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f006 fb4c 	bl	800aa8c <USB_ReadInterrupts>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043fe:	d104      	bne.n	800440a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004408:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f006 fb3c 	bl	800aa8c <USB_ReadInterrupts>
 8004414:	4603      	mov	r3, r0
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	d103      	bne.n	8004426 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2202      	movs	r2, #2
 8004424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f006 fb2e 	bl	800aa8c <USB_ReadInterrupts>
 8004430:	4603      	mov	r3, r0
 8004432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443a:	d120      	bne.n	800447e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004444:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004456:	2110      	movs	r1, #16
 8004458:	6938      	ldr	r0, [r7, #16]
 800445a:	f006 fa5f 	bl	800a91c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800445e:	6938      	ldr	r0, [r7, #16]
 8004460:	f006 fa8e 	bl	800a980 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7a5b      	ldrb	r3, [r3, #9]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d105      	bne.n	8004478 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2101      	movs	r1, #1
 8004472:	4618      	mov	r0, r3
 8004474:	f006 fb4c 	bl	800ab10 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f008 feaf 	bl	800d1dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f006 fb02 	bl	800aa8c <USB_ReadInterrupts>
 8004488:	4603      	mov	r3, r0
 800448a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004492:	d102      	bne.n	800449a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f001 fc87 	bl	8005da8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f006 faf4 	bl	800aa8c <USB_ReadInterrupts>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d106      	bne.n	80044bc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f008 fe78 	bl	800d1a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2208      	movs	r2, #8
 80044ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f006 fae3 	bl	800aa8c <USB_ReadInterrupts>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044d0:	d139      	bne.n	8004546 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f006 fb57 	bl	800ab8a <USB_HC_ReadInterrupt>
 80044dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e025      	b.n	8004530 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d018      	beq.n	800452a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800450e:	d106      	bne.n	800451e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f859 	bl	80045ce <HCD_HC_IN_IRQHandler>
 800451c:	e005      	b.n	800452a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 febb 	bl	80052a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	3301      	adds	r3, #1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	795b      	ldrb	r3, [r3, #5]
 8004534:	461a      	mov	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	4293      	cmp	r3, r2
 800453a:	d3d3      	bcc.n	80044e4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f006 fa9e 	bl	800aa8c <USB_ReadInterrupts>
 8004550:	4603      	mov	r3, r0
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d101      	bne.n	800455e <HAL_HCD_IRQHandler+0x1ea>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_HCD_IRQHandler+0x1ec>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d014      	beq.n	800458e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0210 	bic.w	r2, r2, #16
 8004572:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f001 fb38 	bl	8005bea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0210 	orr.w	r2, r2, #16
 8004588:	619a      	str	r2, [r3, #24]
 800458a:	e000      	b.n	800458e <HAL_HCD_IRQHandler+0x21a>
      return;
 800458c:	bf00      	nop
    }
  }
}
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_HCD_Stop+0x16>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e00d      	b.n	80045c6 <HAL_HCD_Stop+0x32>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f006 fc18 	bl	800adec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f006 fa60 	bl	800aab2 <USB_ReadChInterrupts>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d11a      	bne.n	8004632 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	461a      	mov	r2, r3
 800460a:	2304      	movs	r3, #4
 800460c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334d      	adds	r3, #77	; 0x4d
 800461e:	2207      	movs	r2, #7
 8004620:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f006 fabe 	bl	800abac <USB_HC_Halt>
 8004630:	e09e      	b.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f006 fa39 	bl	800aab2 <USB_ReadChInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464a:	d11b      	bne.n	8004684 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4413      	add	r3, r2
 8004654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004658:	461a      	mov	r2, r3
 800465a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800465e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	334d      	adds	r3, #77	; 0x4d
 8004670:	2208      	movs	r2, #8
 8004672:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f006 fa95 	bl	800abac <USB_HC_Halt>
 8004682:	e075      	b.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f006 fa10 	bl	800aab2 <USB_ReadChInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b08      	cmp	r3, #8
 800469a:	d11a      	bne.n	80046d2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a8:	461a      	mov	r2, r3
 80046aa:	2308      	movs	r3, #8
 80046ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	334d      	adds	r3, #77	; 0x4d
 80046be:	2206      	movs	r2, #6
 80046c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f006 fa6e 	bl	800abac <USB_HC_Halt>
 80046d0:	e04e      	b.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f006 f9e9 	bl	800aab2 <USB_ReadChInterrupts>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ea:	d11b      	bne.n	8004724 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	461a      	mov	r2, r3
 80046fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	334d      	adds	r3, #77	; 0x4d
 8004710:	2209      	movs	r2, #9
 8004712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f006 fa45 	bl	800abac <USB_HC_Halt>
 8004722:	e025      	b.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f006 f9c0 	bl	800aab2 <USB_ReadChInterrupts>
 8004732:	4603      	mov	r3, r0
 8004734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004738:	2b80      	cmp	r3, #128	; 0x80
 800473a:	d119      	bne.n	8004770 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004748:	461a      	mov	r2, r3
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	334d      	adds	r3, #77	; 0x4d
 800475e:	2207      	movs	r2, #7
 8004760:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f006 fa1e 	bl	800abac <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f006 f99a 	bl	800aab2 <USB_ReadChInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004788:	d112      	bne.n	80047b0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f006 fa0a 	bl	800abac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	461a      	mov	r2, r3
 80047a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047aa:	6093      	str	r3, [r2, #8]
 80047ac:	f000 bd75 	b.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f006 f97a 	bl	800aab2 <USB_ReadChInterrupts>
 80047be:	4603      	mov	r3, r0
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 8128 	bne.w	8004a1a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d6:	461a      	mov	r2, r3
 80047d8:	2320      	movs	r3, #32
 80047da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	331b      	adds	r3, #27
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d119      	bne.n	8004826 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	331b      	adds	r3, #27
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4413      	add	r3, r2
 800480e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	440a      	add	r2, r1
 800481c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004824:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	799b      	ldrb	r3, [r3, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01b      	beq.n	8004866 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	3330      	adds	r3, #48	; 0x30
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	1ac9      	subs	r1, r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4403      	add	r3, r0
 8004862:	3338      	adds	r3, #56	; 0x38
 8004864:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	334d      	adds	r3, #77	; 0x4d
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	3344      	adds	r3, #68	; 0x44
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4413      	add	r3, r2
 8004896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489a:	461a      	mov	r2, r3
 800489c:	2301      	movs	r3, #1
 800489e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	3326      	adds	r3, #38	; 0x26
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	3326      	adds	r3, #38	; 0x26
 80048c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d110      	bne.n	80048ee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f006 f969 	bl	800abac <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	2310      	movs	r3, #16
 80048ea:	6093      	str	r3, [r2, #8]
 80048ec:	e03d      	b.n	800496a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3326      	adds	r3, #38	; 0x26
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d00a      	beq.n	800491a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3326      	adds	r3, #38	; 0x26
 8004914:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004916:	2b01      	cmp	r3, #1
 8004918:	d127      	bne.n	800496a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	440a      	add	r2, r1
 8004930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004938:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	334c      	adds	r3, #76	; 0x4c
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334c      	adds	r3, #76	; 0x4c
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f008 fc47 	bl	800d1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	799b      	ldrb	r3, [r3, #6]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d13b      	bne.n	80049ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	3338      	adds	r3, #56	; 0x38
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4403      	add	r3, r0
 8004992:	3328      	adds	r3, #40	; 0x28
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	440b      	add	r3, r1
 8004998:	1e59      	subs	r1, r3, #1
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4403      	add	r3, r0
 80049a8:	3328      	adds	r3, #40	; 0x28
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8470 	beq.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	333c      	adds	r3, #60	; 0x3c
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	f083 0301 	eor.w	r3, r3, #1
 80049d2:	b2d8      	uxtb	r0, r3
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	333c      	adds	r3, #60	; 0x3c
 80049e2:	4602      	mov	r2, r0
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	f000 bc58 	b.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	333c      	adds	r3, #60	; 0x3c
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2d8      	uxtb	r0, r3
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	333c      	adds	r3, #60	; 0x3c
 8004a12:	4602      	mov	r2, r0
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	f000 bc40 	b.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f006 f845 	bl	800aab2 <USB_ReadChInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d131      	bne.n	8004a96 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3e:	461a      	mov	r2, r3
 8004a40:	2320      	movs	r3, #32
 8004a42:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	331a      	adds	r3, #26
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	f040 841f 	bne.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	331b      	adds	r3, #27
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	334d      	adds	r3, #77	; 0x4d
 8004a80:	2203      	movs	r2, #3
 8004a82:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f006 f88d 	bl	800abac <USB_HC_Halt>
 8004a92:	f000 bc02 	b.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f006 f807 	bl	800aab2 <USB_ReadChInterrupts>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	f040 8305 	bne.w	80050ba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abc:	461a      	mov	r2, r3
 8004abe:	2302      	movs	r3, #2
 8004ac0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	334d      	adds	r3, #77	; 0x4d
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d114      	bne.n	8004b02 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	334d      	adds	r3, #77	; 0x4d
 8004ae8:	2202      	movs	r2, #2
 8004aea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	334c      	adds	r3, #76	; 0x4c
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e2cc      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	334d      	adds	r3, #77	; 0x4d
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d114      	bne.n	8004b42 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	334d      	adds	r3, #77	; 0x4d
 8004b28:	2202      	movs	r2, #2
 8004b2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	334c      	adds	r3, #76	; 0x4c
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e2ac      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	334d      	adds	r3, #77	; 0x4d
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b07      	cmp	r3, #7
 8004b56:	d00b      	beq.n	8004b70 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	334d      	adds	r3, #77	; 0x4d
 8004b68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b6a:	2b09      	cmp	r3, #9
 8004b6c:	f040 80a6 	bne.w	8004cbc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	334d      	adds	r3, #77	; 0x4d
 8004b80:	2202      	movs	r2, #2
 8004b82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	3344      	adds	r3, #68	; 0x44
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4403      	add	r3, r0
 8004ba4:	3344      	adds	r3, #68	; 0x44
 8004ba6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3344      	adds	r3, #68	; 0x44
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d943      	bls.n	8004c46 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3344      	adds	r3, #68	; 0x44
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	331a      	adds	r3, #26
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d123      	bne.n	8004c30 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	331b      	adds	r3, #27
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	331c      	adds	r3, #28
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	334c      	adds	r3, #76	; 0x4c
 8004c40:	2204      	movs	r2, #4
 8004c42:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c44:	e229      	b.n	800509a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	334c      	adds	r3, #76	; 0x4c
 8004c56:	2202      	movs	r2, #2
 8004c58:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3326      	adds	r3, #38	; 0x26
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3326      	adds	r3, #38	; 0x26
 8004c80:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	f040 8209 	bne.w	800509a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c9e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ca6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cba:	e1ee      	b.n	800509a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	334d      	adds	r3, #77	; 0x4d
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b05      	cmp	r3, #5
 8004cd0:	f040 80c8 	bne.w	8004e64 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	334d      	adds	r3, #77	; 0x4d
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	331b      	adds	r3, #27
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f040 81ce 	bne.w	800509c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3326      	adds	r3, #38	; 0x26
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d16b      	bne.n	8004dee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	3348      	adds	r3, #72	; 0x48
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4403      	add	r3, r0
 8004d36:	3348      	adds	r3, #72	; 0x48
 8004d38:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3348      	adds	r3, #72	; 0x48
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d943      	bls.n	8004dd8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3348      	adds	r3, #72	; 0x48
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	331b      	adds	r3, #27
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	3344      	adds	r3, #68	; 0x44
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d809      	bhi.n	8004da2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	331c      	adds	r3, #28
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	334c      	adds	r3, #76	; 0x4c
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e014      	b.n	8004e02 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	334c      	adds	r3, #76	; 0x4c
 8004de8:	2202      	movs	r2, #2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e009      	b.n	8004e02 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	334c      	adds	r3, #76	; 0x4c
 8004dfe:	2202      	movs	r2, #2
 8004e00:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3326      	adds	r3, #38	; 0x26
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3326      	adds	r3, #38	; 0x26
 8004e28:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f040 8136 	bne.w	800509c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e46:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e11b      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	334d      	adds	r3, #77	; 0x4d
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	f040 8081 	bne.w	8004f7e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	334d      	adds	r3, #77	; 0x4d
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	331b      	adds	r3, #27
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	f040 80fa 	bne.w	800509c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	334c      	adds	r3, #76	; 0x4c
 8004eb8:	2202      	movs	r2, #2
 8004eba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eda:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f16:	f023 0320 	bic.w	r3, r3, #32
 8004f1a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f1c:	78fa      	ldrb	r2, [r7, #3]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	3326      	adds	r3, #38	; 0x26
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3326      	adds	r3, #38	; 0x26
 8004f42:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	f040 80a9 	bne.w	800509c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f68:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f76:	461a      	mov	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e08e      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	334d      	adds	r3, #77	; 0x4d
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d143      	bne.n	800501c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	334d      	adds	r3, #77	; 0x4d
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	334c      	adds	r3, #76	; 0x4c
 8004fb8:	2202      	movs	r2, #2
 8004fba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	3326      	adds	r3, #38	; 0x26
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	3326      	adds	r3, #38	; 0x26
 8004fe2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d159      	bne.n	800509c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ffe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005006:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005014:	461a      	mov	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e03f      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	334d      	adds	r3, #77	; 0x4d
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b08      	cmp	r3, #8
 8005030:	d126      	bne.n	8005080 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	334d      	adds	r3, #77	; 0x4d
 8005042:	2202      	movs	r2, #2
 8005044:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3344      	adds	r3, #68	; 0x44
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4403      	add	r3, r0
 8005066:	3344      	adds	r3, #68	; 0x44
 8005068:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	334c      	adds	r3, #76	; 0x4c
 800507a:	2204      	movs	r2, #4
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e00d      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	334d      	adds	r3, #77	; 0x4d
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b02      	cmp	r3, #2
 8005094:	f000 8100 	beq.w	8005298 <HCD_HC_IN_IRQHandler+0xcca>
 8005098:	e000      	b.n	800509c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800509a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	334c      	adds	r3, #76	; 0x4c
 80050ac:	781a      	ldrb	r2, [r3, #0]
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f008 f8a0 	bl	800d1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050b8:	e0ef      	b.n	800529a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f005 fcf5 	bl	800aab2 <USB_ReadChInterrupts>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d12f      	bne.n	8005132 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	334d      	adds	r3, #77	; 0x4d
 80050f4:	2205      	movs	r2, #5
 80050f6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	331a      	adds	r3, #26
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3344      	adds	r3, #68	; 0x44
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f005 fd3e 	bl	800abac <USB_HC_Halt>
 8005130:	e0b3      	b.n	800529a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f005 fcb9 	bl	800aab2 <USB_ReadChInterrupts>
 8005140:	4603      	mov	r3, r0
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b10      	cmp	r3, #16
 8005148:	f040 80a7 	bne.w	800529a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	1a9b      	subs	r3, r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3326      	adds	r3, #38	; 0x26
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d11b      	bne.n	800519a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	3344      	adds	r3, #68	; 0x44
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	334d      	adds	r3, #77	; 0x4d
 8005186:	2204      	movs	r2, #4
 8005188:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f005 fd0a 	bl	800abac <USB_HC_Halt>
 8005198:	e03f      	b.n	800521a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	3326      	adds	r3, #38	; 0x26
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	3326      	adds	r3, #38	; 0x26
 80051c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d129      	bne.n	800521a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	3344      	adds	r3, #68	; 0x44
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	799b      	ldrb	r3, [r3, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HCD_HC_IN_IRQHandler+0xc2a>
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	331b      	adds	r3, #27
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d110      	bne.n	800521a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	334d      	adds	r3, #77	; 0x4d
 8005208:	2204      	movs	r2, #4
 800520a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f005 fcc9 	bl	800abac <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	331b      	adds	r3, #27
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d129      	bne.n	8005284 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	331b      	adds	r3, #27
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	440a      	add	r2, r1
 800525a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005262:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	440a      	add	r2, r1
 800527a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527e:	f043 0320 	orr.w	r3, r3, #32
 8005282:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	461a      	mov	r2, r3
 8005292:	2310      	movs	r3, #16
 8005294:	6093      	str	r3, [r2, #8]
 8005296:	e000      	b.n	800529a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005298:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	78fa      	ldrb	r2, [r7, #3]
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f005 fbf7 	bl	800aab2 <USB_ReadChInterrupts>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d11b      	bne.n	8005306 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	461a      	mov	r2, r3
 80052dc:	2304      	movs	r3, #4
 80052de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334d      	adds	r3, #77	; 0x4d
 80052f0:	2207      	movs	r2, #7
 80052f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	78fa      	ldrb	r2, [r7, #3]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f005 fc55 	bl	800abac <USB_HC_Halt>
 8005302:	f000 bc6f 	b.w	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f005 fbcf 	bl	800aab2 <USB_ReadChInterrupts>
 8005314:	4603      	mov	r3, r0
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b20      	cmp	r3, #32
 800531c:	f040 8082 	bne.w	8005424 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532c:	461a      	mov	r2, r3
 800532e:	2320      	movs	r3, #32
 8005330:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3319      	adds	r3, #25
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d124      	bne.n	8005392 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	3319      	adds	r3, #25
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	334c      	adds	r3, #76	; 0x4c
 800536c:	2202      	movs	r2, #2
 800536e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	334d      	adds	r3, #77	; 0x4d
 8005380:	2203      	movs	r2, #3
 8005382:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f005 fc0d 	bl	800abac <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	331a      	adds	r3, #26
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	f040 841d 	bne.w	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	331b      	adds	r3, #27
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 8411 	bne.w	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3326      	adds	r3, #38	; 0x26
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d009      	beq.n	80053ec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	331b      	adds	r3, #27
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	334d      	adds	r3, #77	; 0x4d
 80053fc:	2203      	movs	r2, #3
 80053fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f005 fbcf 	bl	800abac <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	3344      	adds	r3, #68	; 0x44
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e3df      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f005 fb40 	bl	800aab2 <USB_ReadChInterrupts>
 8005432:	4603      	mov	r3, r0
 8005434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543c:	d111      	bne.n	8005462 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	461a      	mov	r2, r3
 800544c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005450:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f005 fba6 	bl	800abac <USB_HC_Halt>
 8005460:	e3c0      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f005 fb21 	bl	800aab2 <USB_ReadChInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d168      	bne.n	800554c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800547a:	78fa      	ldrb	r2, [r7, #3]
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	3344      	adds	r3, #68	; 0x44
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f005 fb0b 	bl	800aab2 <USB_ReadChInterrupts>
 800549c:	4603      	mov	r3, r0
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d112      	bne.n	80054cc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80054a6:	78fa      	ldrb	r2, [r7, #3]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	3319      	adds	r3, #25
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	461a      	mov	r2, r3
 80054c8:	2340      	movs	r3, #64	; 0x40
 80054ca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	331b      	adds	r3, #27
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d019      	beq.n	8005516 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	331b      	adds	r3, #27
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	440a      	add	r2, r1
 800550c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005514:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	461a      	mov	r2, r3
 8005524:	2301      	movs	r3, #1
 8005526:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	334d      	adds	r3, #77	; 0x4d
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f005 fb31 	bl	800abac <USB_HC_Halt>
 800554a:	e34b      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f005 faac 	bl	800aab2 <USB_ReadChInterrupts>
 800555a:	4603      	mov	r3, r0
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d139      	bne.n	80055d8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	334d      	adds	r3, #77	; 0x4d
 8005574:	2205      	movs	r2, #5
 8005576:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	331a      	adds	r3, #26
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3319      	adds	r3, #25
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	3344      	adds	r3, #68	; 0x44
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 faf4 	bl	800abac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d0:	461a      	mov	r2, r3
 80055d2:	2340      	movs	r3, #64	; 0x40
 80055d4:	6093      	str	r3, [r2, #8]
 80055d6:	e305      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	78fa      	ldrb	r2, [r7, #3]
 80055de:	4611      	mov	r1, r2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f005 fa66 	bl	800aab2 <USB_ReadChInterrupts>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d11a      	bne.n	8005626 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fc:	461a      	mov	r2, r3
 80055fe:	2308      	movs	r3, #8
 8005600:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	334d      	adds	r3, #77	; 0x4d
 8005612:	2206      	movs	r2, #6
 8005614:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	4611      	mov	r1, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f005 fac4 	bl	800abac <USB_HC_Halt>
 8005624:	e2de      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f005 fa3f 	bl	800aab2 <USB_ReadChInterrupts>
 8005634:	4603      	mov	r3, r0
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b10      	cmp	r3, #16
 800563c:	d144      	bne.n	80056c8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800563e:	78fa      	ldrb	r2, [r7, #3]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	3344      	adds	r3, #68	; 0x44
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	334d      	adds	r3, #77	; 0x4d
 8005662:	2204      	movs	r2, #4
 8005664:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3319      	adds	r3, #25
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d114      	bne.n	80056a6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3318      	adds	r3, #24
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	3319      	adds	r3, #25
 80056a2:	2201      	movs	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f005 fa7c 	bl	800abac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c0:	461a      	mov	r2, r3
 80056c2:	2310      	movs	r3, #16
 80056c4:	6093      	str	r3, [r2, #8]
 80056c6:	e28d      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	4611      	mov	r1, r2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f005 f9ee 	bl	800aab2 <USB_ReadChInterrupts>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	2b80      	cmp	r3, #128	; 0x80
 80056de:	d169      	bne.n	80057b4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	799b      	ldrb	r3, [r3, #6]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d111      	bne.n	800570c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	334d      	adds	r3, #77	; 0x4d
 80056f8:	2207      	movs	r2, #7
 80056fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f005 fa51 	bl	800abac <USB_HC_Halt>
 800570a:	e049      	b.n	80057a0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3344      	adds	r3, #68	; 0x44
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1c59      	adds	r1, r3, #1
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4403      	add	r3, r0
 800572c:	3344      	adds	r3, #68	; 0x44
 800572e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	3344      	adds	r3, #68	; 0x44
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d922      	bls.n	800578c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005746:	78fa      	ldrb	r2, [r7, #3]
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	3344      	adds	r3, #68	; 0x44
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800575a:	78fa      	ldrb	r2, [r7, #3]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	334c      	adds	r3, #76	; 0x4c
 800576a:	2204      	movs	r2, #4
 800576c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800576e:	78fa      	ldrb	r2, [r7, #3]
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	334c      	adds	r3, #76	; 0x4c
 800577e:	781a      	ldrb	r2, [r3, #0]
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f007 fd37 	bl	800d1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800578a:	e009      	b.n	80057a0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	334c      	adds	r3, #76	; 0x4c
 800579c:	2202      	movs	r2, #2
 800579e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	461a      	mov	r2, r3
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	6093      	str	r3, [r2, #8]
 80057b2:	e217      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	4611      	mov	r1, r2
 80057bc:	4618      	mov	r0, r3
 80057be:	f005 f978 	bl	800aab2 <USB_ReadChInterrupts>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d11b      	bne.n	8005806 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80057ce:	78fa      	ldrb	r2, [r7, #3]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	334d      	adds	r3, #77	; 0x4d
 80057de:	2209      	movs	r2, #9
 80057e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f005 f9de 	bl	800abac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fc:	461a      	mov	r2, r3
 80057fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005802:	6093      	str	r3, [r2, #8]
 8005804:	e1ee      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f005 f94f 	bl	800aab2 <USB_ReadChInterrupts>
 8005814:	4603      	mov	r3, r0
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b02      	cmp	r3, #2
 800581c:	f040 81df 	bne.w	8005bde <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	461a      	mov	r2, r3
 800582e:	2302      	movs	r3, #2
 8005830:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005832:	78fa      	ldrb	r2, [r7, #3]
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	334d      	adds	r3, #77	; 0x4d
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	f040 8093 	bne.w	8005970 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	334d      	adds	r3, #77	; 0x4d
 800585a:	2202      	movs	r2, #2
 800585c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	334c      	adds	r3, #76	; 0x4c
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	3326      	adds	r3, #38	; 0x26
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d00b      	beq.n	80058a0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	3326      	adds	r3, #38	; 0x26
 8005898:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800589a:	2b03      	cmp	r3, #3
 800589c:	f040 8190 	bne.w	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	799b      	ldrb	r3, [r3, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d115      	bne.n	80058d4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	333d      	adds	r3, #61	; 0x3d
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	f083 0301 	eor.w	r3, r3, #1
 80058c0:	b2d8      	uxtb	r0, r3
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	333d      	adds	r3, #61	; 0x3d
 80058d0:	4602      	mov	r2, r0
 80058d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	799b      	ldrb	r3, [r3, #6]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	f040 8171 	bne.w	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
 80058de:	78fa      	ldrb	r2, [r7, #3]
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	3334      	adds	r3, #52	; 0x34
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8165 	beq.w	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3334      	adds	r3, #52	; 0x34
 8005906:	6819      	ldr	r1, [r3, #0]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4403      	add	r3, r0
 8005916:	3328      	adds	r3, #40	; 0x28
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	440b      	add	r3, r1
 800591c:	1e59      	subs	r1, r3, #1
 800591e:	78fa      	ldrb	r2, [r7, #3]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4403      	add	r3, r0
 800592c:	3328      	adds	r3, #40	; 0x28
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	fbb1 f3f3 	udiv	r3, r1, r3
 8005934:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 813f 	beq.w	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	333d      	adds	r3, #61	; 0x3d
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	f083 0301 	eor.w	r3, r3, #1
 800595a:	b2d8      	uxtb	r0, r3
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	333d      	adds	r3, #61	; 0x3d
 800596a:	4602      	mov	r2, r0
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e127      	b.n	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005970:	78fa      	ldrb	r2, [r7, #3]
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	334d      	adds	r3, #77	; 0x4d
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b03      	cmp	r3, #3
 8005984:	d120      	bne.n	80059c8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	334d      	adds	r3, #77	; 0x4d
 8005996:	2202      	movs	r2, #2
 8005998:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800599a:	78fa      	ldrb	r2, [r7, #3]
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	331b      	adds	r3, #27
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f040 8107 	bne.w	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	334c      	adds	r3, #76	; 0x4c
 80059c2:	2202      	movs	r2, #2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e0fb      	b.n	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	334d      	adds	r3, #77	; 0x4d
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d13a      	bne.n	8005a54 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059de:	78fa      	ldrb	r2, [r7, #3]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	334d      	adds	r3, #77	; 0x4d
 80059ee:	2202      	movs	r2, #2
 80059f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059f2:	78fa      	ldrb	r2, [r7, #3]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	334c      	adds	r3, #76	; 0x4c
 8005a02:	2202      	movs	r2, #2
 8005a04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	331b      	adds	r3, #27
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	f040 80d1 	bne.w	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	331b      	adds	r3, #27
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a50:	6053      	str	r3, [r2, #4]
 8005a52:	e0b5      	b.n	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	334d      	adds	r3, #77	; 0x4d
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d114      	bne.n	8005a94 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	334d      	adds	r3, #77	; 0x4d
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	334c      	adds	r3, #76	; 0x4c
 8005a8e:	2202      	movs	r2, #2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e095      	b.n	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	334d      	adds	r3, #77	; 0x4d
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d114      	bne.n	8005ad4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005aaa:	78fa      	ldrb	r2, [r7, #3]
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	334d      	adds	r3, #77	; 0x4d
 8005aba:	2202      	movs	r2, #2
 8005abc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	334c      	adds	r3, #76	; 0x4c
 8005ace:	2205      	movs	r2, #5
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	e075      	b.n	8005bc0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005ad4:	78fa      	ldrb	r2, [r7, #3]
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	334d      	adds	r3, #77	; 0x4d
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b07      	cmp	r3, #7
 8005ae8:	d00a      	beq.n	8005b00 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	334d      	adds	r3, #77	; 0x4d
 8005afa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005afc:	2b09      	cmp	r3, #9
 8005afe:	d170      	bne.n	8005be2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	334d      	adds	r3, #77	; 0x4d
 8005b10:	2202      	movs	r2, #2
 8005b12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	3344      	adds	r3, #68	; 0x44
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4403      	add	r3, r0
 8005b34:	3344      	adds	r3, #68	; 0x44
 8005b36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	3344      	adds	r3, #68	; 0x44
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d914      	bls.n	8005b78 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3344      	adds	r3, #68	; 0x44
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	334c      	adds	r3, #76	; 0x4c
 8005b72:	2204      	movs	r2, #4
 8005b74:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b76:	e022      	b.n	8005bbe <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b78:	78fa      	ldrb	r2, [r7, #3]
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	334c      	adds	r3, #76	; 0x4c
 8005b88:	2202      	movs	r2, #2
 8005b8a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ba2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb8:	461a      	mov	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bbe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	334c      	adds	r3, #76	; 0x4c
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f007 fb0e 	bl	800d1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005bdc:	e002      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005be2:	bf00      	nop
  }
}
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b08a      	sub	sp, #40	; 0x28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	0c5b      	lsrs	r3, r3, #17
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c1e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d004      	beq.n	8005c30 <HCD_RXQLVL_IRQHandler+0x46>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	f000 80b6 	beq.w	8005d9a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c2e:	e0b7      	b.n	8005da0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80b3 	beq.w	8005d9e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	1a9b      	subs	r3, r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	332c      	adds	r3, #44	; 0x2c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 80a7 	beq.w	8005d9e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4613      	mov	r3, r2
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3338      	adds	r3, #56	; 0x38
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	18d1      	adds	r1, r2, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4403      	add	r3, r0
 8005c74:	3334      	adds	r3, #52	; 0x34
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4299      	cmp	r1, r3
 8005c7a:	f200 8083 	bhi.w	8005d84 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4613      	mov	r3, r2
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	332c      	adds	r3, #44	; 0x2c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	b292      	uxth	r2, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f004 fe9f 	bl	800a9dc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	332c      	adds	r3, #44	; 0x2c
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	18d1      	adds	r1, r2, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4403      	add	r3, r0
 8005cc2:	332c      	adds	r3, #44	; 0x2c
 8005cc4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3338      	adds	r3, #56	; 0x38
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	18d1      	adds	r1, r2, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4403      	add	r3, r0
 8005cea:	3338      	adds	r3, #56	; 0x38
 8005cec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	0cdb      	lsrs	r3, r3, #19
 8005cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d02:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	3328      	adds	r3, #40	; 0x28
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d13f      	bne.n	8005d9e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d03c      	beq.n	8005d9e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d3a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d42:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	333c      	adds	r3, #60	; 0x3c
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f083 0301 	eor.w	r3, r3, #1
 8005d6c:	b2d8      	uxtb	r0, r3
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4613      	mov	r3, r2
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	333c      	adds	r3, #60	; 0x3c
 8005d7e:	4602      	mov	r2, r0
 8005d80:	701a      	strb	r2, [r3, #0]
      break;
 8005d82:	e00c      	b.n	8005d9e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	334c      	adds	r3, #76	; 0x4c
 8005d94:	2204      	movs	r2, #4
 8005d96:	701a      	strb	r2, [r3, #0]
      break;
 8005d98:	e001      	b.n	8005d9e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005d9e:	bf00      	nop
  }
}
 8005da0:	bf00      	nop
 8005da2:	3728      	adds	r7, #40	; 0x28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dd4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d10b      	bne.n	8005df8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d102      	bne.n	8005df0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f007 f9e8 	bl	800d1c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f043 0302 	orr.w	r3, r3, #2
 8005df6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d132      	bne.n	8005e68 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f043 0308 	orr.w	r3, r3, #8
 8005e08:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d126      	bne.n	8005e62 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	7a5b      	ldrb	r3, [r3, #9]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d113      	bne.n	8005e44 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e26:	d106      	bne.n	8005e36 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2102      	movs	r1, #2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f004 fe6e 	bl	800ab10 <USB_InitFSLSPClkSel>
 8005e34:	e011      	b.n	8005e5a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f004 fe67 	bl	800ab10 <USB_InitFSLSPClkSel>
 8005e42:	e00a      	b.n	8005e5a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	79db      	ldrb	r3, [r3, #7]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d106      	bne.n	8005e5a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e52:	461a      	mov	r2, r3
 8005e54:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005e58:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f007 f9de 	bl	800d21c <HAL_HCD_PortEnabled_Callback>
 8005e60:	e002      	b.n	8005e68 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f007 f9e8 	bl	800d238 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d103      	bne.n	8005e7a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f043 0320 	orr.w	r3, r3, #32
 8005e78:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e80:	461a      	mov	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6013      	str	r3, [r2, #0]
}
 8005e86:	bf00      	nop
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e12b      	b.n	80060fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fc fa2c 	bl	8002314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2224      	movs	r2, #36	; 0x24
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ef4:	f000 ff82 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 8005ef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4a81      	ldr	r2, [pc, #516]	; (8006104 <HAL_I2C_Init+0x274>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d807      	bhi.n	8005f14 <HAL_I2C_Init+0x84>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a80      	ldr	r2, [pc, #512]	; (8006108 <HAL_I2C_Init+0x278>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	bf94      	ite	ls
 8005f0c:	2301      	movls	r3, #1
 8005f0e:	2300      	movhi	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e006      	b.n	8005f22 <HAL_I2C_Init+0x92>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a7d      	ldr	r2, [pc, #500]	; (800610c <HAL_I2C_Init+0x27c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	bf94      	ite	ls
 8005f1c:	2301      	movls	r3, #1
 8005f1e:	2300      	movhi	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e0e7      	b.n	80060fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a78      	ldr	r2, [pc, #480]	; (8006110 <HAL_I2C_Init+0x280>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	0c9b      	lsrs	r3, r3, #18
 8005f34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a6a      	ldr	r2, [pc, #424]	; (8006104 <HAL_I2C_Init+0x274>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d802      	bhi.n	8005f64 <HAL_I2C_Init+0xd4>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	3301      	adds	r3, #1
 8005f62:	e009      	b.n	8005f78 <HAL_I2C_Init+0xe8>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f6a:	fb02 f303 	mul.w	r3, r2, r3
 8005f6e:	4a69      	ldr	r2, [pc, #420]	; (8006114 <HAL_I2C_Init+0x284>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	099b      	lsrs	r3, r3, #6
 8005f76:	3301      	adds	r3, #1
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	495c      	ldr	r1, [pc, #368]	; (8006104 <HAL_I2C_Init+0x274>)
 8005f94:	428b      	cmp	r3, r1
 8005f96:	d819      	bhi.n	8005fcc <HAL_I2C_Init+0x13c>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1e59      	subs	r1, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005fac:	400b      	ands	r3, r1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_I2C_Init+0x138>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	1e59      	subs	r1, r3, #1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc6:	e051      	b.n	800606c <HAL_I2C_Init+0x1dc>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	e04f      	b.n	800606c <HAL_I2C_Init+0x1dc>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d111      	bne.n	8005ff8 <HAL_I2C_Init+0x168>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	1e58      	subs	r0, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	440b      	add	r3, r1
 8005fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bf0c      	ite	eq
 8005ff0:	2301      	moveq	r3, #1
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e012      	b.n	800601e <HAL_I2C_Init+0x18e>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	1e58      	subs	r0, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6859      	ldr	r1, [r3, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	0099      	lsls	r1, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	fbb0 f3f3 	udiv	r3, r0, r3
 800600e:	3301      	adds	r3, #1
 8006010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_I2C_Init+0x196>
 8006022:	2301      	movs	r3, #1
 8006024:	e022      	b.n	800606c <HAL_I2C_Init+0x1dc>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10e      	bne.n	800604c <HAL_I2C_Init+0x1bc>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1e58      	subs	r0, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6859      	ldr	r1, [r3, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	440b      	add	r3, r1
 800603c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006040:	3301      	adds	r3, #1
 8006042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604a:	e00f      	b.n	800606c <HAL_I2C_Init+0x1dc>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1e58      	subs	r0, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	0099      	lsls	r1, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006062:	3301      	adds	r3, #1
 8006064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	6809      	ldr	r1, [r1, #0]
 8006070:	4313      	orrs	r3, r2
 8006072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800609a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6911      	ldr	r1, [r2, #16]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	68d2      	ldr	r2, [r2, #12]
 80060a6:	4311      	orrs	r1, r2
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	430b      	orrs	r3, r1
 80060ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	000186a0 	.word	0x000186a0
 8006108:	001e847f 	.word	0x001e847f
 800610c:	003d08ff 	.word	0x003d08ff
 8006110:	431bde83 	.word	0x431bde83
 8006114:	10624dd3 	.word	0x10624dd3

08006118 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e0bf      	b.n	80062aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fc f966 	bl	8002410 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800615a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006170:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6899      	ldr	r1, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b4a      	ldr	r3, [pc, #296]	; (80062b4 <HAL_LTDC_Init+0x19c>)
 800618c:	400b      	ands	r3, r1
 800618e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6899      	ldr	r1, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68d9      	ldr	r1, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b3e      	ldr	r3, [pc, #248]	; (80062b4 <HAL_LTDC_Init+0x19c>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	041b      	lsls	r3, r3, #16
 80061c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68d9      	ldr	r1, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1a      	ldr	r2, [r3, #32]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6919      	ldr	r1, [r3, #16]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b33      	ldr	r3, [pc, #204]	; (80062b4 <HAL_LTDC_Init+0x19c>)
 80061e8:	400b      	ands	r3, r1
 80061ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	041b      	lsls	r3, r3, #16
 80061f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6919      	ldr	r1, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6959      	ldr	r1, [r3, #20]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b27      	ldr	r3, [pc, #156]	; (80062b4 <HAL_LTDC_Init+0x19c>)
 8006216:	400b      	ands	r3, r1
 8006218:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	041b      	lsls	r3, r3, #16
 8006220:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006248:	041b      	lsls	r3, r3, #16
 800624a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0206 	orr.w	r2, r2, #6
 8006286:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	f000f800 	.word	0xf000f800

080062b8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d023      	beq.n	8006322 <HAL_LTDC_IRQHandler+0x6a>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01e      	beq.n	8006322 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0204 	bic.w	r2, r2, #4
 80062f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2204      	movs	r2, #4
 80062fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006302:	f043 0201 	orr.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2204      	movs	r2, #4
 8006310:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f86f 	bl	8006400 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d023      	beq.n	8006374 <HAL_LTDC_IRQHandler+0xbc>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01e      	beq.n	8006374 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0202 	bic.w	r2, r2, #2
 8006344:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2202      	movs	r2, #2
 800634c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006354:	f043 0202 	orr.w	r2, r3, #2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2204      	movs	r2, #4
 8006362:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f846 	bl	8006400 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01b      	beq.n	80063b6 <HAL_LTDC_IRQHandler+0xfe>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d016      	beq.n	80063b6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2201      	movs	r2, #1
 800639e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f82f 	bl	8006414 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01b      	beq.n	80063f8 <HAL_LTDC_IRQHandler+0x140>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0208 	bic.w	r2, r2, #8
 80063d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2208      	movs	r2, #8
 80063e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f818 	bl	8006428 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_LTDC_ConfigLayer+0x1a>
 8006452:	2302      	movs	r3, #2
 8006454:	e02c      	b.n	80064b0 <HAL_LTDC_ConfigLayer+0x74>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2134      	movs	r1, #52	; 0x34
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	4413      	add	r3, r2
 8006472:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4614      	mov	r4, r2
 800647a:	461d      	mov	r5, r3
 800647c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800647e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f811 	bl	80064b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2201      	movs	r2, #1
 800649c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bdb0      	pop	{r4, r5, r7, pc}

080064b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b089      	sub	sp, #36	; 0x24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	0c1b      	lsrs	r3, r3, #16
 80064d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d4:	4413      	add	r3, r2
 80064d6:	041b      	lsls	r3, r3, #16
 80064d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	01db      	lsls	r3, r3, #7
 80064e4:	4413      	add	r3, r2
 80064e6:	3384      	adds	r3, #132	; 0x84
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	4611      	mov	r1, r2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	01d2      	lsls	r2, r2, #7
 80064f4:	440a      	add	r2, r1
 80064f6:	3284      	adds	r2, #132	; 0x84
 80064f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	0c1b      	lsrs	r3, r3, #16
 800650a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800650e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006510:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	440b      	add	r3, r1
 800651e:	3384      	adds	r3, #132	; 0x84
 8006520:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006526:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006536:	4413      	add	r3, r2
 8006538:	041b      	lsls	r3, r3, #16
 800653a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	01db      	lsls	r3, r3, #7
 8006546:	4413      	add	r3, r2
 8006548:	3384      	adds	r3, #132	; 0x84
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	4611      	mov	r1, r2
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	01d2      	lsls	r2, r2, #7
 8006556:	440a      	add	r2, r1
 8006558:	3284      	adds	r2, #132	; 0x84
 800655a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800655e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800656e:	4413      	add	r3, r2
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	01db      	lsls	r3, r3, #7
 800657c:	440b      	add	r3, r1
 800657e:	3384      	adds	r3, #132	; 0x84
 8006580:	4619      	mov	r1, r3
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4313      	orrs	r3, r2
 8006586:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	01db      	lsls	r3, r3, #7
 8006592:	4413      	add	r3, r2
 8006594:	3384      	adds	r3, #132	; 0x84
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	4611      	mov	r1, r2
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	01d2      	lsls	r2, r2, #7
 80065a2:	440a      	add	r2, r1
 80065a4:	3284      	adds	r2, #132	; 0x84
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	01db      	lsls	r3, r3, #7
 80065b6:	4413      	add	r3, r2
 80065b8:	3384      	adds	r3, #132	; 0x84
 80065ba:	461a      	mov	r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	061b      	lsls	r3, r3, #24
 80065dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	01db      	lsls	r3, r3, #7
 80065e8:	4413      	add	r3, r2
 80065ea:	3384      	adds	r3, #132	; 0x84
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	01db      	lsls	r3, r3, #7
 80065f8:	4413      	add	r3, r2
 80065fa:	3384      	adds	r3, #132	; 0x84
 80065fc:	461a      	mov	r2, r3
 80065fe:	2300      	movs	r3, #0
 8006600:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006608:	461a      	mov	r2, r3
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	431a      	orrs	r2, r3
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4619      	mov	r1, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	01db      	lsls	r3, r3, #7
 800661c:	440b      	add	r3, r1
 800661e:	3384      	adds	r3, #132	; 0x84
 8006620:	4619      	mov	r1, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	01db      	lsls	r3, r3, #7
 8006632:	4413      	add	r3, r2
 8006634:	3384      	adds	r3, #132	; 0x84
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	6812      	ldr	r2, [r2, #0]
 800663c:	4611      	mov	r1, r2
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	01d2      	lsls	r2, r2, #7
 8006642:	440a      	add	r2, r1
 8006644:	3284      	adds	r2, #132	; 0x84
 8006646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800664a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	01db      	lsls	r3, r3, #7
 8006656:	4413      	add	r3, r2
 8006658:	3384      	adds	r3, #132	; 0x84
 800665a:	461a      	mov	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	01db      	lsls	r3, r3, #7
 800666c:	4413      	add	r3, r2
 800666e:	3384      	adds	r3, #132	; 0x84
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	4611      	mov	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	01d2      	lsls	r2, r2, #7
 800667c:	440a      	add	r2, r1
 800667e:	3284      	adds	r2, #132	; 0x84
 8006680:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006684:	f023 0307 	bic.w	r3, r3, #7
 8006688:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	6809      	ldr	r1, [r1, #0]
 8006696:	4608      	mov	r0, r1
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	01c9      	lsls	r1, r1, #7
 800669c:	4401      	add	r1, r0
 800669e:	3184      	adds	r1, #132	; 0x84
 80066a0:	4313      	orrs	r3, r2
 80066a2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	01db      	lsls	r3, r3, #7
 80066ae:	4413      	add	r3, r2
 80066b0:	3384      	adds	r3, #132	; 0x84
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	01db      	lsls	r3, r3, #7
 80066be:	4413      	add	r3, r2
 80066c0:	3384      	adds	r3, #132	; 0x84
 80066c2:	461a      	mov	r2, r3
 80066c4:	2300      	movs	r3, #0
 80066c6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	01db      	lsls	r3, r3, #7
 80066d2:	4413      	add	r3, r2
 80066d4:	3384      	adds	r3, #132	; 0x84
 80066d6:	461a      	mov	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80066e6:	2304      	movs	r3, #4
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	e01b      	b.n	8006724 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d102      	bne.n	80066fa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80066f4:	2303      	movs	r3, #3
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	e014      	b.n	8006724 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d00b      	beq.n	800671a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006706:	2b02      	cmp	r3, #2
 8006708:	d007      	beq.n	800671a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800670e:	2b03      	cmp	r3, #3
 8006710:	d003      	beq.n	800671a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006716:	2b07      	cmp	r3, #7
 8006718:	d102      	bne.n	8006720 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800671a:	2302      	movs	r3, #2
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	e001      	b.n	8006724 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006720:	2301      	movs	r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	01db      	lsls	r3, r3, #7
 800672e:	4413      	add	r3, r2
 8006730:	3384      	adds	r3, #132	; 0x84
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	4611      	mov	r1, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	01d2      	lsls	r2, r2, #7
 800673e:	440a      	add	r2, r1
 8006740:	3284      	adds	r2, #132	; 0x84
 8006742:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006746:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6859      	ldr	r1, [r3, #4]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	1acb      	subs	r3, r1, r3
 800675e:	69f9      	ldr	r1, [r7, #28]
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	6809      	ldr	r1, [r1, #0]
 800676a:	4608      	mov	r0, r1
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	01c9      	lsls	r1, r1, #7
 8006770:	4401      	add	r1, r0
 8006772:	3184      	adds	r1, #132	; 0x84
 8006774:	4313      	orrs	r3, r2
 8006776:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	01db      	lsls	r3, r3, #7
 8006782:	4413      	add	r3, r2
 8006784:	3384      	adds	r3, #132	; 0x84
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	4611      	mov	r1, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	01d2      	lsls	r2, r2, #7
 8006792:	440a      	add	r2, r1
 8006794:	3284      	adds	r2, #132	; 0x84
 8006796:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800679a:	f023 0307 	bic.w	r3, r3, #7
 800679e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	01db      	lsls	r3, r3, #7
 80067aa:	4413      	add	r3, r2
 80067ac:	3384      	adds	r3, #132	; 0x84
 80067ae:	461a      	mov	r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	01db      	lsls	r3, r3, #7
 80067c0:	4413      	add	r3, r2
 80067c2:	3384      	adds	r3, #132	; 0x84
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	4611      	mov	r1, r2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	01d2      	lsls	r2, r2, #7
 80067d0:	440a      	add	r2, r1
 80067d2:	3284      	adds	r2, #132	; 0x84
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	6013      	str	r3, [r2, #0]
}
 80067da:	bf00      	nop
 80067dc:	3724      	adds	r7, #36	; 0x24
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	2300      	movs	r3, #0
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4b20      	ldr	r3, [pc, #128]	; (8006878 <HAL_PWREx_EnableOverDrive+0x90>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <HAL_PWREx_EnableOverDrive+0x90>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	; 0x40
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <HAL_PWREx_EnableOverDrive+0x90>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800680e:	4b1b      	ldr	r3, [pc, #108]	; (800687c <HAL_PWREx_EnableOverDrive+0x94>)
 8006810:	2201      	movs	r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006814:	f7fc fa4e 	bl	8002cb4 <HAL_GetTick>
 8006818:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800681a:	e009      	b.n	8006830 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800681c:	f7fc fa4a 	bl	8002cb4 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800682a:	d901      	bls.n	8006830 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e01f      	b.n	8006870 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006830:	4b13      	ldr	r3, [pc, #76]	; (8006880 <HAL_PWREx_EnableOverDrive+0x98>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d1ee      	bne.n	800681c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800683e:	4b11      	ldr	r3, [pc, #68]	; (8006884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006844:	f7fc fa36 	bl	8002cb4 <HAL_GetTick>
 8006848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800684a:	e009      	b.n	8006860 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800684c:	f7fc fa32 	bl	8002cb4 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800685a:	d901      	bls.n	8006860 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e007      	b.n	8006870 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <HAL_PWREx_EnableOverDrive+0x98>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800686c:	d1ee      	bne.n	800684c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40023800 	.word	0x40023800
 800687c:	420e0040 	.word	0x420e0040
 8006880:	40007000 	.word	0x40007000
 8006884:	420e0044 	.word	0x420e0044

08006888 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006890:	f7fc fa10 	bl	8002cb4 <HAL_GetTick>
 8006894:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e069      	b.n	8006974 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fb fdd3 	bl	8002460 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80068ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f85e 	bl	8006980 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	021a      	lsls	r2, r3, #8
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	2120      	movs	r1, #32
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f856 	bl	800699c <QSPI_WaitFlagStateUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80068f4:	7afb      	ldrb	r3, [r7, #11]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d137      	bne.n	800696a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006904:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6852      	ldr	r2, [r2, #4]
 800690c:	0611      	lsls	r1, r2, #24
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	68d2      	ldr	r2, [r2, #12]
 8006912:	4311      	orrs	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	69d2      	ldr	r2, [r2, #28]
 8006918:	4311      	orrs	r1, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6a12      	ldr	r2, [r2, #32]
 800691e:	4311      	orrs	r1, r2
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	430b      	orrs	r3, r1
 8006926:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_QSPI_Init+0xf4>)
 8006930:	4013      	ands	r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6912      	ldr	r2, [r2, #16]
 8006936:	0411      	lsls	r1, r2, #16
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6952      	ldr	r2, [r2, #20]
 800693c:	4311      	orrs	r1, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6992      	ldr	r2, [r2, #24]
 8006942:	4311      	orrs	r1, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	430b      	orrs	r3, r1
 800694a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006972:	7afb      	ldrb	r3, [r7, #11]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	ffe0f8fe 	.word	0xffe0f8fe

08006980 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069ac:	e01a      	b.n	80069e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d016      	beq.n	80069e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b6:	f7fc f97d 	bl	8002cb4 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2204      	movs	r2, #4
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d8:	f043 0201 	orr.w	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e00e      	b.n	8006a02 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bf14      	ite	ne
 80069f2:	2301      	movne	r3, #1
 80069f4:	2300      	moveq	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d1d6      	bne.n	80069ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0cc      	b.n	8006bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a20:	4b68      	ldr	r3, [pc, #416]	; (8006bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 030f 	and.w	r3, r3, #15
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d90c      	bls.n	8006a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a2e:	4b65      	ldr	r3, [pc, #404]	; (8006bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a36:	4b63      	ldr	r3, [pc, #396]	; (8006bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d001      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0b8      	b.n	8006bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d020      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a60:	4b59      	ldr	r3, [pc, #356]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	4a58      	ldr	r2, [pc, #352]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0308 	and.w	r3, r3, #8
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d005      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a78:	4b53      	ldr	r3, [pc, #332]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4a52      	ldr	r2, [pc, #328]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a84:	4b50      	ldr	r3, [pc, #320]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	494d      	ldr	r1, [pc, #308]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d044      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d107      	bne.n	8006aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aaa:	4b47      	ldr	r3, [pc, #284]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d119      	bne.n	8006aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e07f      	b.n	8006bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d003      	beq.n	8006aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d107      	bne.n	8006ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aca:	4b3f      	ldr	r3, [pc, #252]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e06f      	b.n	8006bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ada:	4b3b      	ldr	r3, [pc, #236]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e067      	b.n	8006bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aea:	4b37      	ldr	r3, [pc, #220]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f023 0203 	bic.w	r2, r3, #3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	4934      	ldr	r1, [pc, #208]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006afc:	f7fc f8da 	bl	8002cb4 <HAL_GetTick>
 8006b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b02:	e00a      	b.n	8006b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b04:	f7fc f8d6 	bl	8002cb4 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e04f      	b.n	8006bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1a:	4b2b      	ldr	r3, [pc, #172]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 020c 	and.w	r2, r3, #12
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d1eb      	bne.n	8006b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b2c:	4b25      	ldr	r3, [pc, #148]	; (8006bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d20c      	bcs.n	8006b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b3a:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b42:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d001      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e032      	b.n	8006bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b60:	4b19      	ldr	r3, [pc, #100]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	4916      	ldr	r1, [pc, #88]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d009      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b7e:	4b12      	ldr	r3, [pc, #72]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	490e      	ldr	r1, [pc, #56]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b92:	f000 f821 	bl	8006bd8 <HAL_RCC_GetSysClockFreq>
 8006b96:	4602      	mov	r2, r0
 8006b98:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	091b      	lsrs	r3, r3, #4
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	490a      	ldr	r1, [pc, #40]	; (8006bcc <HAL_RCC_ClockConfig+0x1c0>)
 8006ba4:	5ccb      	ldrb	r3, [r1, r3]
 8006ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8006baa:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fb fee8 	bl	8002988 <HAL_InitTick>

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40023c00 	.word	0x40023c00
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	0800dcc4 	.word	0x0800dcc4
 8006bd0:	20000000 	.word	0x20000000
 8006bd4:	20000004 	.word	0x20000004

08006bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bdc:	b094      	sub	sp, #80	; 0x50
 8006bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	647b      	str	r3, [r7, #68]	; 0x44
 8006be4:	2300      	movs	r3, #0
 8006be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be8:	2300      	movs	r3, #0
 8006bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bf0:	4b79      	ldr	r3, [pc, #484]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 030c 	and.w	r3, r3, #12
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d00d      	beq.n	8006c18 <HAL_RCC_GetSysClockFreq+0x40>
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	f200 80e1 	bhi.w	8006dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x34>
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d003      	beq.n	8006c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c0a:	e0db      	b.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c0c:	4b73      	ldr	r3, [pc, #460]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8006c0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c10:	e0db      	b.n	8006dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c12:	4b73      	ldr	r3, [pc, #460]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c16:	e0d8      	b.n	8006dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c18:	4b6f      	ldr	r3, [pc, #444]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c22:	4b6d      	ldr	r3, [pc, #436]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d063      	beq.n	8006cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c2e:	4b6a      	ldr	r3, [pc, #424]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	099b      	lsrs	r3, r3, #6
 8006c34:	2200      	movs	r2, #0
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
 8006c42:	2300      	movs	r3, #0
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
 8006c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	f04f 0000 	mov.w	r0, #0
 8006c52:	f04f 0100 	mov.w	r1, #0
 8006c56:	0159      	lsls	r1, r3, #5
 8006c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c5c:	0150      	lsls	r0, r2, #5
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4621      	mov	r1, r4
 8006c64:	1a51      	subs	r1, r2, r1
 8006c66:	6139      	str	r1, [r7, #16]
 8006c68:	4629      	mov	r1, r5
 8006c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c7c:	4659      	mov	r1, fp
 8006c7e:	018b      	lsls	r3, r1, #6
 8006c80:	4651      	mov	r1, sl
 8006c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c86:	4651      	mov	r1, sl
 8006c88:	018a      	lsls	r2, r1, #6
 8006c8a:	4651      	mov	r1, sl
 8006c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8006c90:	4659      	mov	r1, fp
 8006c92:	eb63 0901 	sbc.w	r9, r3, r1
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006caa:	4690      	mov	r8, r2
 8006cac:	4699      	mov	r9, r3
 8006cae:	4623      	mov	r3, r4
 8006cb0:	eb18 0303 	adds.w	r3, r8, r3
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	eb49 0303 	adc.w	r3, r9, r3
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cca:	4629      	mov	r1, r5
 8006ccc:	024b      	lsls	r3, r1, #9
 8006cce:	4621      	mov	r1, r4
 8006cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	024a      	lsls	r2, r1, #9
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cde:	2200      	movs	r2, #0
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ce8:	f7f9 fa92 	bl	8000210 <__aeabi_uldivmod>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cf4:	e058      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cf6:	4b38      	ldr	r3, [pc, #224]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	099b      	lsrs	r3, r3, #6
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	4611      	mov	r1, r2
 8006d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d06:	623b      	str	r3, [r7, #32]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d10:	4642      	mov	r2, r8
 8006d12:	464b      	mov	r3, r9
 8006d14:	f04f 0000 	mov.w	r0, #0
 8006d18:	f04f 0100 	mov.w	r1, #0
 8006d1c:	0159      	lsls	r1, r3, #5
 8006d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d22:	0150      	lsls	r0, r2, #5
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4641      	mov	r1, r8
 8006d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d2e:	4649      	mov	r1, r9
 8006d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d48:	ebb2 040a 	subs.w	r4, r2, sl
 8006d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	00eb      	lsls	r3, r5, #3
 8006d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d5e:	00e2      	lsls	r2, r4, #3
 8006d60:	4614      	mov	r4, r2
 8006d62:	461d      	mov	r5, r3
 8006d64:	4643      	mov	r3, r8
 8006d66:	18e3      	adds	r3, r4, r3
 8006d68:	603b      	str	r3, [r7, #0]
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	eb45 0303 	adc.w	r3, r5, r3
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d7e:	4629      	mov	r1, r5
 8006d80:	028b      	lsls	r3, r1, #10
 8006d82:	4621      	mov	r1, r4
 8006d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d88:	4621      	mov	r1, r4
 8006d8a:	028a      	lsls	r2, r1, #10
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d92:	2200      	movs	r2, #0
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	61fa      	str	r2, [r7, #28]
 8006d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d9c:	f7f9 fa38 	bl	8000210 <__aeabi_uldivmod>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4613      	mov	r3, r2
 8006da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006da8:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	3301      	adds	r3, #1
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dc2:	e002      	b.n	8006dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dc4:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8006dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3750      	adds	r7, #80	; 0x50
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dd6:	bf00      	nop
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	00f42400 	.word	0x00f42400
 8006de0:	007a1200 	.word	0x007a1200

08006de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006de8:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dea:	681b      	ldr	r3, [r3, #0]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20000000 	.word	0x20000000

08006dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e00:	f7ff fff0 	bl	8006de4 <HAL_RCC_GetHCLKFreq>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	0a9b      	lsrs	r3, r3, #10
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	4903      	ldr	r1, [pc, #12]	; (8006e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e12:	5ccb      	ldrb	r3, [r1, r3]
 8006e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	0800dcd4 	.word	0x0800dcd4

08006e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e28:	f7ff ffdc 	bl	8006de4 <HAL_RCC_GetHCLKFreq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	0b5b      	lsrs	r3, r3, #13
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	4903      	ldr	r1, [pc, #12]	; (8006e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e3a:	5ccb      	ldrb	r3, [r1, r3]
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40023800 	.word	0x40023800
 8006e48:	0800dcd4 	.word	0x0800dcd4

08006e4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	220f      	movs	r2, #15
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e5c:	4b12      	ldr	r3, [pc, #72]	; (8006ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0203 	and.w	r2, r3, #3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	08db      	lsrs	r3, r3, #3
 8006e86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <HAL_RCC_GetClockConfig+0x60>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 020f 	and.w	r2, r3, #15
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	601a      	str	r2, [r3, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	40023c00 	.word	0x40023c00

08006eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b088      	sub	sp, #32
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ed8:	4b66      	ldr	r3, [pc, #408]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ede:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	4963      	ldr	r1, [pc, #396]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006efa:	4b5e      	ldr	r3, [pc, #376]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	495a      	ldr	r1, [pc, #360]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d105      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d075      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f34:	4b50      	ldr	r3, [pc, #320]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f3a:	f7fb febb 	bl	8002cb4 <HAL_GetTick>
 8006f3e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f40:	e008      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f42:	f7fb feb7 	bl	8002cb4 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e1dc      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f54:	4b47      	ldr	r3, [pc, #284]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f0      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	019a      	lsls	r2, r3, #6
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	071b      	lsls	r3, r3, #28
 8006f78:	493e      	ldr	r1, [pc, #248]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01f      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f8c:	4b39      	ldr	r3, [pc, #228]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f92:	0f1b      	lsrs	r3, r3, #28
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	019a      	lsls	r2, r3, #6
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	061b      	lsls	r3, r3, #24
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	071b      	lsls	r3, r3, #28
 8006fac:	4931      	ldr	r1, [pc, #196]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fb4:	4b2f      	ldr	r3, [pc, #188]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fba:	f023 021f 	bic.w	r2, r3, #31
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	492b      	ldr	r1, [pc, #172]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00d      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	019a      	lsls	r2, r3, #6
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	061b      	lsls	r3, r3, #24
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	071b      	lsls	r3, r3, #28
 8006fec:	4921      	ldr	r1, [pc, #132]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ff4:	4b20      	ldr	r3, [pc, #128]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ffa:	f7fb fe5b 	bl	8002cb4 <HAL_GetTick>
 8006ffe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007000:	e008      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007002:	f7fb fe57 	bl	8002cb4 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e17c      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007014:	4b17      	ldr	r3, [pc, #92]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d112      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10c      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80ce 	beq.w	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800704a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800704e:	f040 80c8 	bne.w	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007052:	4b0a      	ldr	r3, [pc, #40]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007058:	f7fb fe2c 	bl	8002cb4 <HAL_GetTick>
 800705c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800705e:	e00f      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007060:	f7fb fe28 	bl	8002cb4 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d908      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e14d      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8007072:	bf00      	nop
 8007074:	40023800 	.word	0x40023800
 8007078:	42470068 	.word	0x42470068
 800707c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007080:	4ba5      	ldr	r3, [pc, #660]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800708c:	d0e8      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d02e      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800709a:	4b9f      	ldr	r3, [pc, #636]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800709c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	3301      	adds	r3, #1
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070ac:	4b9a      	ldr	r3, [pc, #616]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	0f1b      	lsrs	r3, r3, #28
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	019a      	lsls	r2, r3, #6
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	3b01      	subs	r3, #1
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	431a      	orrs	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	071b      	lsls	r3, r3, #28
 80070d6:	4990      	ldr	r1, [pc, #576]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070de:	4b8e      	ldr	r3, [pc, #568]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	3b01      	subs	r3, #1
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	4989      	ldr	r1, [pc, #548]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d02c      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007104:	4b84      	ldr	r3, [pc, #528]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710a:	0c1b      	lsrs	r3, r3, #16
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	3301      	adds	r3, #1
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007116:	4b80      	ldr	r3, [pc, #512]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711c:	0e1b      	lsrs	r3, r3, #24
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	019a      	lsls	r2, r3, #6
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	3b01      	subs	r3, #1
 8007130:	041b      	lsls	r3, r3, #16
 8007132:	431a      	orrs	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	061b      	lsls	r3, r3, #24
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	071b      	lsls	r3, r3, #28
 8007140:	4975      	ldr	r1, [pc, #468]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007148:	4b73      	ldr	r3, [pc, #460]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800714a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800714e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	4970      	ldr	r1, [pc, #448]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007166:	2b00      	cmp	r3, #0
 8007168:	d024      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800716e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007172:	d11f      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007174:	4b68      	ldr	r3, [pc, #416]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717a:	0e1b      	lsrs	r3, r3, #24
 800717c:	f003 030f 	and.w	r3, r3, #15
 8007180:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007182:	4b65      	ldr	r3, [pc, #404]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007188:	0f1b      	lsrs	r3, r3, #28
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	019a      	lsls	r2, r3, #6
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	3b01      	subs	r3, #1
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	431a      	orrs	r2, r3
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	061b      	lsls	r3, r3, #24
 80071a6:	431a      	orrs	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	071b      	lsls	r3, r3, #28
 80071ac:	495a      	ldr	r1, [pc, #360]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071b4:	4b59      	ldr	r3, [pc, #356]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80071b6:	2201      	movs	r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071ba:	f7fb fd7b 	bl	8002cb4 <HAL_GetTick>
 80071be:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071c0:	e008      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071c2:	f7fb fd77 	bl	8002cb4 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e09c      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071d4:	4b50      	ldr	r3, [pc, #320]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e0:	d1ef      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8083 	beq.w	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071f0:	2300      	movs	r3, #0
 80071f2:	60bb      	str	r3, [r7, #8]
 80071f4:	4b48      	ldr	r3, [pc, #288]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	4a47      	ldr	r2, [pc, #284]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071fe:	6413      	str	r3, [r2, #64]	; 0x40
 8007200:	4b45      	ldr	r3, [pc, #276]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007208:	60bb      	str	r3, [r7, #8]
 800720a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800720c:	4b44      	ldr	r3, [pc, #272]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a43      	ldr	r2, [pc, #268]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007216:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007218:	f7fb fd4c 	bl	8002cb4 <HAL_GetTick>
 800721c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800721e:	e008      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007220:	f7fb fd48 	bl	8002cb4 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d901      	bls.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e06d      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007232:	4b3b      	ldr	r3, [pc, #236]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800723e:	4b36      	ldr	r3, [pc, #216]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d02f      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	429a      	cmp	r2, r3
 800725a:	d028      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800725c:	4b2e      	ldr	r3, [pc, #184]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007264:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007266:	4b2f      	ldr	r3, [pc, #188]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800726c:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007272:	4a29      	ldr	r2, [pc, #164]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007278:	4b27      	ldr	r3, [pc, #156]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b01      	cmp	r3, #1
 8007282:	d114      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007284:	f7fb fd16 	bl	8002cb4 <HAL_GetTick>
 8007288:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728a:	e00a      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f7fb fd12 	bl	8002cb4 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f241 3288 	movw	r2, #5000	; 0x1388
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e035      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a2:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0ee      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ba:	d10d      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80072bc:	4b16      	ldr	r3, [pc, #88]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d0:	4911      	ldr	r1, [pc, #68]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	608b      	str	r3, [r1, #8]
 80072d6:	e005      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80072d8:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4a0e      	ldr	r2, [pc, #56]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072e2:	6093      	str	r3, [r2, #8]
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f0:	4909      	ldr	r1, [pc, #36]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007308:	4b07      	ldr	r3, [pc, #28]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800730a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	42470070 	.word	0x42470070
 8007320:	40007000 	.word	0x40007000
 8007324:	42470e40 	.word	0x42470e40
 8007328:	424711e0 	.word	0x424711e0

0800732c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e273      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d075      	beq.n	8007436 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800734a:	4b88      	ldr	r3, [pc, #544]	; (800756c <HAL_RCC_OscConfig+0x240>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 030c 	and.w	r3, r3, #12
 8007352:	2b04      	cmp	r3, #4
 8007354:	d00c      	beq.n	8007370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007356:	4b85      	ldr	r3, [pc, #532]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800735e:	2b08      	cmp	r3, #8
 8007360:	d112      	bne.n	8007388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007362:	4b82      	ldr	r3, [pc, #520]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800736a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800736e:	d10b      	bne.n	8007388 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007370:	4b7e      	ldr	r3, [pc, #504]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05b      	beq.n	8007434 <HAL_RCC_OscConfig+0x108>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d157      	bne.n	8007434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e24e      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007390:	d106      	bne.n	80073a0 <HAL_RCC_OscConfig+0x74>
 8007392:	4b76      	ldr	r3, [pc, #472]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a75      	ldr	r2, [pc, #468]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	e01d      	b.n	80073dc <HAL_RCC_OscConfig+0xb0>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073a8:	d10c      	bne.n	80073c4 <HAL_RCC_OscConfig+0x98>
 80073aa:	4b70      	ldr	r3, [pc, #448]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a6f      	ldr	r2, [pc, #444]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80073b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	4b6d      	ldr	r3, [pc, #436]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a6c      	ldr	r2, [pc, #432]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80073bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	e00b      	b.n	80073dc <HAL_RCC_OscConfig+0xb0>
 80073c4:	4b69      	ldr	r3, [pc, #420]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a68      	ldr	r2, [pc, #416]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80073ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	4b66      	ldr	r3, [pc, #408]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a65      	ldr	r2, [pc, #404]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80073d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d013      	beq.n	800740c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fb fc66 	bl	8002cb4 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073ec:	f7fb fc62 	bl	8002cb4 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b64      	cmp	r3, #100	; 0x64
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e213      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073fe:	4b5b      	ldr	r3, [pc, #364]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0f0      	beq.n	80073ec <HAL_RCC_OscConfig+0xc0>
 800740a:	e014      	b.n	8007436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fb fc52 	bl	8002cb4 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007414:	f7fb fc4e 	bl	8002cb4 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b64      	cmp	r3, #100	; 0x64
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e1ff      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007426:	4b51      	ldr	r3, [pc, #324]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0xe8>
 8007432:	e000      	b.n	8007436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d063      	beq.n	800750a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007442:	4b4a      	ldr	r3, [pc, #296]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 030c 	and.w	r3, r3, #12
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800744e:	4b47      	ldr	r3, [pc, #284]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007456:	2b08      	cmp	r3, #8
 8007458:	d11c      	bne.n	8007494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800745a:	4b44      	ldr	r3, [pc, #272]	; (800756c <HAL_RCC_OscConfig+0x240>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d116      	bne.n	8007494 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007466:	4b41      	ldr	r3, [pc, #260]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <HAL_RCC_OscConfig+0x152>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d001      	beq.n	800747e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e1d3      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747e:	4b3b      	ldr	r3, [pc, #236]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4937      	ldr	r1, [pc, #220]	; (800756c <HAL_RCC_OscConfig+0x240>)
 800748e:	4313      	orrs	r3, r2
 8007490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007492:	e03a      	b.n	800750a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d020      	beq.n	80074de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800749c:	4b34      	ldr	r3, [pc, #208]	; (8007570 <HAL_RCC_OscConfig+0x244>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a2:	f7fb fc07 	bl	8002cb4 <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074aa:	f7fb fc03 	bl	8002cb4 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e1b4      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074bc:	4b2b      	ldr	r3, [pc, #172]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074c8:	4b28      	ldr	r3, [pc, #160]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4925      	ldr	r1, [pc, #148]	; (800756c <HAL_RCC_OscConfig+0x240>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	600b      	str	r3, [r1, #0]
 80074dc:	e015      	b.n	800750a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074de:	4b24      	ldr	r3, [pc, #144]	; (8007570 <HAL_RCC_OscConfig+0x244>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e4:	f7fb fbe6 	bl	8002cb4 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074ec:	f7fb fbe2 	bl	8002cb4 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e193      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074fe:	4b1b      	ldr	r3, [pc, #108]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f0      	bne.n	80074ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d036      	beq.n	8007584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d016      	beq.n	800754c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800751e:	4b15      	ldr	r3, [pc, #84]	; (8007574 <HAL_RCC_OscConfig+0x248>)
 8007520:	2201      	movs	r2, #1
 8007522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007524:	f7fb fbc6 	bl	8002cb4 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800752c:	f7fb fbc2 	bl	8002cb4 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e173      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800753e:	4b0b      	ldr	r3, [pc, #44]	; (800756c <HAL_RCC_OscConfig+0x240>)
 8007540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f0      	beq.n	800752c <HAL_RCC_OscConfig+0x200>
 800754a:	e01b      	b.n	8007584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800754c:	4b09      	ldr	r3, [pc, #36]	; (8007574 <HAL_RCC_OscConfig+0x248>)
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007552:	f7fb fbaf 	bl	8002cb4 <HAL_GetTick>
 8007556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007558:	e00e      	b.n	8007578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800755a:	f7fb fbab 	bl	8002cb4 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d907      	bls.n	8007578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e15c      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
 800756c:	40023800 	.word	0x40023800
 8007570:	42470000 	.word	0x42470000
 8007574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007578:	4b8a      	ldr	r3, [pc, #552]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800757a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1ea      	bne.n	800755a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8097 	beq.w	80076c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007596:	4b83      	ldr	r3, [pc, #524]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10f      	bne.n	80075c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]
 80075a6:	4b7f      	ldr	r3, [pc, #508]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	4a7e      	ldr	r2, [pc, #504]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 80075ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b0:	6413      	str	r3, [r2, #64]	; 0x40
 80075b2:	4b7c      	ldr	r3, [pc, #496]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c2:	4b79      	ldr	r3, [pc, #484]	; (80077a8 <HAL_RCC_OscConfig+0x47c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d118      	bne.n	8007600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075ce:	4b76      	ldr	r3, [pc, #472]	; (80077a8 <HAL_RCC_OscConfig+0x47c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a75      	ldr	r2, [pc, #468]	; (80077a8 <HAL_RCC_OscConfig+0x47c>)
 80075d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075da:	f7fb fb6b 	bl	8002cb4 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e2:	f7fb fb67 	bl	8002cb4 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e118      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f4:	4b6c      	ldr	r3, [pc, #432]	; (80077a8 <HAL_RCC_OscConfig+0x47c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0f0      	beq.n	80075e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d106      	bne.n	8007616 <HAL_RCC_OscConfig+0x2ea>
 8007608:	4b66      	ldr	r3, [pc, #408]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800760a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760c:	4a65      	ldr	r2, [pc, #404]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	6713      	str	r3, [r2, #112]	; 0x70
 8007614:	e01c      	b.n	8007650 <HAL_RCC_OscConfig+0x324>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b05      	cmp	r3, #5
 800761c:	d10c      	bne.n	8007638 <HAL_RCC_OscConfig+0x30c>
 800761e:	4b61      	ldr	r3, [pc, #388]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4a60      	ldr	r2, [pc, #384]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007624:	f043 0304 	orr.w	r3, r3, #4
 8007628:	6713      	str	r3, [r2, #112]	; 0x70
 800762a:	4b5e      	ldr	r3, [pc, #376]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	4a5d      	ldr	r2, [pc, #372]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007630:	f043 0301 	orr.w	r3, r3, #1
 8007634:	6713      	str	r3, [r2, #112]	; 0x70
 8007636:	e00b      	b.n	8007650 <HAL_RCC_OscConfig+0x324>
 8007638:	4b5a      	ldr	r3, [pc, #360]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800763a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763c:	4a59      	ldr	r2, [pc, #356]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	6713      	str	r3, [r2, #112]	; 0x70
 8007644:	4b57      	ldr	r3, [pc, #348]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007648:	4a56      	ldr	r2, [pc, #344]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800764a:	f023 0304 	bic.w	r3, r3, #4
 800764e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007658:	f7fb fb2c 	bl	8002cb4 <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800765e:	e00a      	b.n	8007676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007660:	f7fb fb28 	bl	8002cb4 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f241 3288 	movw	r2, #5000	; 0x1388
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e0d7      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007676:	4b4b      	ldr	r3, [pc, #300]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0ee      	beq.n	8007660 <HAL_RCC_OscConfig+0x334>
 8007682:	e014      	b.n	80076ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007684:	f7fb fb16 	bl	8002cb4 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800768a:	e00a      	b.n	80076a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800768c:	f7fb fb12 	bl	8002cb4 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f241 3288 	movw	r2, #5000	; 0x1388
 800769a:	4293      	cmp	r3, r2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e0c1      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076a2:	4b40      	ldr	r3, [pc, #256]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 80076a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ee      	bne.n	800768c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d105      	bne.n	80076c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076b4:	4b3b      	ldr	r3, [pc, #236]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	4a3a      	ldr	r2, [pc, #232]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 80076ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80ad 	beq.w	8007824 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076ca:	4b36      	ldr	r3, [pc, #216]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 030c 	and.w	r3, r3, #12
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d060      	beq.n	8007798 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d145      	bne.n	800776a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076de:	4b33      	ldr	r3, [pc, #204]	; (80077ac <HAL_RCC_OscConfig+0x480>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fb fae6 	bl	8002cb4 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ec:	f7fb fae2 	bl	8002cb4 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e093      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076fe:	4b29      	ldr	r3, [pc, #164]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69da      	ldr	r2, [r3, #28]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	019b      	lsls	r3, r3, #6
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	3b01      	subs	r3, #1
 8007724:	041b      	lsls	r3, r3, #16
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	061b      	lsls	r3, r3, #24
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	071b      	lsls	r3, r3, #28
 8007736:	491b      	ldr	r1, [pc, #108]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007738:	4313      	orrs	r3, r2
 800773a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800773c:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <HAL_RCC_OscConfig+0x480>)
 800773e:	2201      	movs	r2, #1
 8007740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007742:	f7fb fab7 	bl	8002cb4 <HAL_GetTick>
 8007746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800774a:	f7fb fab3 	bl	8002cb4 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e064      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800775c:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f0      	beq.n	800774a <HAL_RCC_OscConfig+0x41e>
 8007768:	e05c      	b.n	8007824 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800776a:	4b10      	ldr	r3, [pc, #64]	; (80077ac <HAL_RCC_OscConfig+0x480>)
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007770:	f7fb faa0 	bl	8002cb4 <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007778:	f7fb fa9c 	bl	8002cb4 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e04d      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800778a:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <HAL_RCC_OscConfig+0x478>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1f0      	bne.n	8007778 <HAL_RCC_OscConfig+0x44c>
 8007796:	e045      	b.n	8007824 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d107      	bne.n	80077b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e040      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
 80077a4:	40023800 	.word	0x40023800
 80077a8:	40007000 	.word	0x40007000
 80077ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077b0:	4b1f      	ldr	r3, [pc, #124]	; (8007830 <HAL_RCC_OscConfig+0x504>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d030      	beq.n	8007820 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d129      	bne.n	8007820 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d122      	bne.n	8007820 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077e0:	4013      	ands	r3, r2
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d119      	bne.n	8007820 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	3b01      	subs	r3, #1
 80077fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d10f      	bne.n	8007820 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800780c:	429a      	cmp	r2, r3
 800780e:	d107      	bne.n	8007820 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800781c:	429a      	cmp	r2, r3
 800781e:	d001      	beq.n	8007824 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	40023800 	.word	0x40023800

08007834 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e10c      	b.n	8007a70 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fb f82c 	bl	80028c8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f903 	bl	8007a84 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f938 	bl	8007af4 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d030      	beq.n	80078ee <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f957 	bl	8007b40 <SAI_GetInputClock>
 8007892:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	025b      	lsls	r3, r3, #9
 80078a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078aa:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a72      	ldr	r2, [pc, #456]	; (8007a78 <HAL_SAI_Init+0x244>)
 80078b0:	fba2 2303 	umull	r2, r3, r2, r3
 80078b4:	08da      	lsrs	r2, r3, #3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	4b6e      	ldr	r3, [pc, #440]	; (8007a78 <HAL_SAI_Init+0x244>)
 80078be:	fba3 2301 	umull	r2, r3, r3, r1
 80078c2:	08da      	lsrs	r2, r3, #3
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	1aca      	subs	r2, r1, r3
 80078ce:	2a08      	cmp	r2, #8
 80078d0:	d904      	bls.n	80078dc <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d104      	bne.n	80078ee <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	085a      	lsrs	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_SAI_Init+0xca>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d109      	bne.n	8007912 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_SAI_Init+0xd6>
 8007906:	2300      	movs	r3, #0
 8007908:	e001      	b.n	800790e <HAL_SAI_Init+0xda>
 800790a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e008      	b.n	8007924 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b01      	cmp	r3, #1
 8007918:	d102      	bne.n	8007920 <HAL_SAI_Init+0xec>
 800791a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791e:	e000      	b.n	8007922 <HAL_SAI_Init+0xee>
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d811      	bhi.n	8007950 <HAL_SAI_Init+0x11c>
 800792c:	2b02      	cmp	r3, #2
 800792e:	d20b      	bcs.n	8007948 <HAL_SAI_Init+0x114>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_SAI_Init+0x106>
 8007934:	2b01      	cmp	r3, #1
 8007936:	d003      	beq.n	8007940 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007938:	e00a      	b.n	8007950 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	613b      	str	r3, [r7, #16]
    break;
 800793e:	e008      	b.n	8007952 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007944:	613b      	str	r3, [r7, #16]
    break;
 8007946:	e004      	b.n	8007952 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800794c:	613b      	str	r3, [r7, #16]
    break;
 800794e:	e000      	b.n	8007952 <HAL_SAI_Init+0x11e>
      break;
 8007950:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6819      	ldr	r1, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	4b47      	ldr	r3, [pc, #284]	; (8007a7c <HAL_SAI_Init+0x248>)
 800795e:	400b      	ands	r3, r1
 8007960:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6819      	ldr	r1, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007970:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007976:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	431a      	orrs	r2, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800798a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007996:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	051b      	lsls	r3, r3, #20
 800799e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80079b6:	f023 030f 	bic.w	r3, r3, #15
 80079ba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6859      	ldr	r1, [r3, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6899      	ldr	r1, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4b26      	ldr	r3, [pc, #152]	; (8007a80 <HAL_SAI_Init+0x24c>)
 80079e6:	400b      	ands	r3, r1
 80079e8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6899      	ldr	r1, [r3, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079fa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8007a00:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8007a06:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007a10:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68d9      	ldr	r1, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007a28:	400b      	ands	r3, r1
 8007a2a:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68d9      	ldr	r1, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a40:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007a42:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	021b      	lsls	r3, r3, #8
 8007a4c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	cccccccd 	.word	0xcccccccd
 8007a7c:	ff05c010 	.word	0xff05c010
 8007a80:	fff88000 	.word	0xfff88000

08007a84 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007a8c:	4b17      	ldr	r3, [pc, #92]	; (8007aec <SAI_Disable+0x68>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a17      	ldr	r2, [pc, #92]	; (8007af0 <SAI_Disable+0x6c>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	0b1b      	lsrs	r3, r3, #12
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007aae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	1e5a      	subs	r2, r3, #1
 8007ab4:	60fa      	str	r2, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10a      	bne.n	8007ad0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	72fb      	strb	r3, [r7, #11]
      break;
 8007ace:	e006      	b.n	8007ade <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e8      	bne.n	8007ab0 <SAI_Disable+0x2c>

  return status;
 8007ade:	7afb      	ldrb	r3, [r7, #11]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	20000000 	.word	0x20000000
 8007af0:	95cbec1b 	.word	0x95cbec1b

08007af4 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d00c      	beq.n	8007b1e <SAI_BlockSynchroConfig+0x2a>
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d80d      	bhi.n	8007b24 <SAI_BlockSynchroConfig+0x30>
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <SAI_BlockSynchroConfig+0x1e>
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d003      	beq.n	8007b18 <SAI_BlockSynchroConfig+0x24>
 8007b10:	e008      	b.n	8007b24 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
      break;
 8007b16:	e008      	b.n	8007b2a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007b18:	2310      	movs	r3, #16
 8007b1a:	60fb      	str	r3, [r7, #12]
      break;
 8007b1c:	e005      	b.n	8007b2a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007b1e:	2320      	movs	r3, #32
 8007b20:	60fb      	str	r3, [r7, #12]
      break;
 8007b22:	e002      	b.n	8007b2a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]
      break;
 8007b28:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007b2a:	4a04      	ldr	r2, [pc, #16]	; (8007b3c <SAI_BlockSynchroConfig+0x48>)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007b30:	bf00      	nop
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	40015800 	.word	0x40015800

08007b40 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a46      	ldr	r2, [pc, #280]	; (8007c74 <SAI_GetInputClock+0x134>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d10b      	bne.n	8007b76 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8007b5e:	4b46      	ldr	r3, [pc, #280]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	4942      	ldr	r1, [pc, #264]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8007b74:	e00b      	b.n	8007b8e <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8007b76:	4b40      	ldr	r3, [pc, #256]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	493c      	ldr	r1, [pc, #240]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b8e:	4b3a      	ldr	r3, [pc, #232]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d108      	bne.n	8007bac <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b9a:	4b37      	ldr	r3, [pc, #220]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ba2:	4a36      	ldr	r2, [pc, #216]	; (8007c7c <SAI_GetInputClock+0x13c>)
 8007ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	e007      	b.n	8007bbc <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007bac:	4b32      	ldr	r3, [pc, #200]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bb4:	4a32      	ldr	r2, [pc, #200]	; (8007c80 <SAI_GetInputClock+0x140>)
 8007bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bba:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d121      	bne.n	8007c08 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007bc4:	4b2c      	ldr	r3, [pc, #176]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bca:	0e1b      	lsrs	r3, r3, #24
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8007bd2:	4b29      	ldr	r3, [pc, #164]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd8:	099b      	lsrs	r3, r3, #6
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	fb03 f202 	mul.w	r2, r3, r2
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007bec:	4b22      	ldr	r3, [pc, #136]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf2:	0a1b      	lsrs	r3, r3, #8
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	e02d      	b.n	8007c64 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c10:	d120      	bne.n	8007c54 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8007c12:	4b19      	ldr	r3, [pc, #100]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c18:	0e1b      	lsrs	r3, r3, #24
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007c20:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c26:	099b      	lsrs	r3, r3, #6
 8007c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	fb03 f202 	mul.w	r2, r3, r2
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c38:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007c3a:	4b0f      	ldr	r3, [pc, #60]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c40:	f003 031f 	and.w	r3, r3, #31
 8007c44:	3301      	adds	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	e007      	b.n	8007c64 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8007c54:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4a07      	ldr	r2, [pc, #28]	; (8007c78 <SAI_GetInputClock+0x138>)
 8007c5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c5e:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8007c60:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <SAI_GetInputClock+0x144>)
 8007c62:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007c64:	697b      	ldr	r3, [r7, #20]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40015804 	.word	0x40015804
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	00f42400 	.word	0x00f42400
 8007c80:	007a1200 	.word	0x007a1200
 8007c84:	00bb8000 	.word	0x00bb8000

08007c88 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e022      	b.n	8007ce0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d105      	bne.n	8007cb2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7fa fc51 	bl	8002554 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f814 	bl	8007ce8 <HAL_SD_InitCard>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e00a      	b.n	8007ce0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ce8:	b5b0      	push	{r4, r5, r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af04      	add	r7, sp, #16
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007d04:	2376      	movs	r3, #118	; 0x76
 8007d06:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681d      	ldr	r5, [r3, #0]
 8007d0c:	466c      	mov	r4, sp
 8007d0e:	f107 0314 	add.w	r3, r7, #20
 8007d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d1a:	f107 0308 	add.w	r3, r7, #8
 8007d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d20:	4628      	mov	r0, r5
 8007d22:	f002 f877 	bl	8009e14 <SDIO_Init>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e04f      	b.n	8007dd8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007d38:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <HAL_SD_InitCard+0xf8>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f002 f89e 	bl	8009e84 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007d48:	4b25      	ldr	r3, [pc, #148]	; (8007de0 <HAL_SD_InitCard+0xf8>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007d4e:	2002      	movs	r0, #2
 8007d50:	f7fa ffbc 	bl	8002ccc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fe0b 	bl	8008970 <SD_PowerON>
 8007d5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e02e      	b.n	8007dd8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fd2a 	bl	80087d4 <SD_InitCard>
 8007d80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e01b      	b.n	8007dd8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007da8:	4618      	mov	r0, r3
 8007daa:	f002 f8fd 	bl	8009fa8 <SDMMC_CmdBlockLength>
 8007dae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00f      	beq.n	8007dd6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a0a      	ldr	r2, [pc, #40]	; (8007de4 <HAL_SD_InitCard+0xfc>)
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e000      	b.n	8007dd8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3728      	adds	r7, #40	; 0x28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bdb0      	pop	{r4, r5, r7, pc}
 8007de0:	422580a0 	.word	0x422580a0
 8007de4:	004005ff 	.word	0x004005ff

08007de8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08c      	sub	sp, #48	; 0x30
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d107      	bne.n	8007e10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e0be      	b.n	8007f8e <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	f040 80b7 	bne.w	8007f8c <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	441a      	add	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d907      	bls.n	8007e42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e0a5      	b.n	8007f8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2203      	movs	r2, #3
 8007e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007e60:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	4a4c      	ldr	r2, [pc, #304]	; (8007f98 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	4a4b      	ldr	r2, [pc, #300]	; (8007f9c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007e70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	2200      	movs	r2, #0
 8007e78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	2200      	movs	r2, #0
 8007e80:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3380      	adds	r3, #128	; 0x80
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	025b      	lsls	r3, r3, #9
 8007eb0:	089b      	lsrs	r3, r3, #2
 8007eb2:	f7fb f82d 	bl	8002f10 <HAL_DMA_Start_IT>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d017      	beq.n	8007eec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007eca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a33      	ldr	r2, [pc, #204]	; (8007fa0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e050      	b.n	8007f8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007eec:	4b2d      	ldr	r3, [pc, #180]	; (8007fa4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d002      	beq.n	8007f00 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	025b      	lsls	r3, r3, #9
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f00:	f04f 33ff 	mov.w	r3, #4294967295
 8007f04:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	025b      	lsls	r3, r3, #9
 8007f0a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007f0c:	2390      	movs	r3, #144	; 0x90
 8007f0e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f10:	2302      	movs	r3, #2
 8007f12:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f107 0210 	add.w	r2, r7, #16
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f002 f812 	bl	8009f50 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d90a      	bls.n	8007f48 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2282      	movs	r2, #130	; 0x82
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 f876 	bl	800a030 <SDMMC_CmdReadMultiBlock>
 8007f44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f46:	e009      	b.n	8007f5c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2281      	movs	r2, #129	; 0x81
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 f849 	bl	8009fec <SDMMC_CmdReadSingleBlock>
 8007f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d012      	beq.n	8007f88 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a0e      	ldr	r2, [pc, #56]	; (8007fa0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007f68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	431a      	orrs	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e002      	b.n	8007f8e <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e000      	b.n	8007f8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007f8c:	2302      	movs	r3, #2
  }
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3730      	adds	r7, #48	; 0x30
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	080086bf 	.word	0x080086bf
 8007f9c:	08008731 	.word	0x08008731
 8007fa0:	004005ff 	.word	0x004005ff
 8007fa4:	4225858c 	.word	0x4225858c

08007fa8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08c      	sub	sp, #48	; 0x30
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d107      	bne.n	8007fd0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0c1      	b.n	8008154 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	f040 80ba 	bne.w	8008152 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	441a      	add	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d907      	bls.n	8008002 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e0a8      	b.n	8008154 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2203      	movs	r2, #3
 8008006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 021a 	orr.w	r2, r2, #26
 8008020:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008026:	4a4d      	ldr	r2, [pc, #308]	; (800815c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8008028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802e:	4a4c      	ldr	r2, [pc, #304]	; (8008160 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8008030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008036:	2200      	movs	r2, #0
 8008038:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	2b01      	cmp	r3, #1
 8008040:	d002      	beq.n	8008048 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	025b      	lsls	r3, r3, #9
 8008046:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d90a      	bls.n	8008064 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	22a0      	movs	r2, #160	; 0xa0
 8008052:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800805a:	4618      	mov	r0, r3
 800805c:	f002 f82c 	bl	800a0b8 <SDMMC_CmdWriteMultiBlock>
 8008060:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008062:	e009      	b.n	8008078 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2290      	movs	r2, #144	; 0x90
 8008068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008070:	4618      	mov	r0, r3
 8008072:	f001 ffff 	bl	800a074 <SDMMC_CmdWriteSingleBlock>
 8008076:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d012      	beq.n	80080a4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a38      	ldr	r2, [pc, #224]	; (8008164 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	431a      	orrs	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e057      	b.n	8008154 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80080a4:	4b30      	ldr	r3, [pc, #192]	; (8008168 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ae:	2240      	movs	r2, #64	; 0x40
 80080b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3380      	adds	r3, #128	; 0x80
 80080da:	461a      	mov	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	025b      	lsls	r3, r3, #9
 80080e0:	089b      	lsrs	r3, r3, #2
 80080e2:	f7fa ff15 	bl	8002f10 <HAL_DMA_Start_IT>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01a      	beq.n	8008122 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 021a 	bic.w	r2, r2, #26
 80080fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a18      	ldr	r2, [pc, #96]	; (8008164 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e018      	b.n	8008154 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008122:	f04f 33ff 	mov.w	r3, #4294967295
 8008126:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	025b      	lsls	r3, r3, #9
 800812c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800812e:	2390      	movs	r3, #144	; 0x90
 8008130:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008132:	2300      	movs	r3, #0
 8008134:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008136:	2300      	movs	r3, #0
 8008138:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800813a:	2301      	movs	r3, #1
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f107 0210 	add.w	r2, r7, #16
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f001 ff01 	bl	8009f50 <SDIO_ConfigData>

      return HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	e000      	b.n	8008154 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8008152:	2302      	movs	r3, #2
  }
}
 8008154:	4618      	mov	r0, r3
 8008156:	3730      	adds	r7, #48	; 0x30
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	08008695 	.word	0x08008695
 8008160:	08008731 	.word	0x08008731
 8008164:	004005ff 	.word	0x004005ff
 8008168:	4225858c 	.word	0x4225858c

0800816c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800818e:	0f9b      	lsrs	r3, r3, #30
 8008190:	b2da      	uxtb	r2, r3
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819a:	0e9b      	lsrs	r3, r3, #26
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ac:	0e1b      	lsrs	r3, r3, #24
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081be:	0c1b      	lsrs	r3, r3, #16
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e0:	0d1b      	lsrs	r3, r3, #20
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ec:	0c1b      	lsrs	r3, r3, #16
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081fe:	0bdb      	lsrs	r3, r3, #15
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008210:	0b9b      	lsrs	r3, r3, #14
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008222:	0b5b      	lsrs	r3, r3, #13
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008234:	0b1b      	lsrs	r3, r3, #12
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	b2da      	uxtb	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2200      	movs	r2, #0
 8008246:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824c:	2b00      	cmp	r3, #0
 800824e:	d163      	bne.n	8008318 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008254:	009a      	lsls	r2, r3, #2
 8008256:	f640 73fc 	movw	r3, #4092	; 0xffc
 800825a:	4013      	ands	r3, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008260:	0f92      	lsrs	r2, r2, #30
 8008262:	431a      	orrs	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826c:	0edb      	lsrs	r3, r3, #27
 800826e:	b2db      	uxtb	r3, r3
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	b2da      	uxtb	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827e:	0e1b      	lsrs	r3, r3, #24
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008290:	0d5b      	lsrs	r3, r3, #21
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	b2da      	uxtb	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a2:	0c9b      	lsrs	r3, r3, #18
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b4:	0bdb      	lsrs	r3, r3, #15
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	7e1b      	ldrb	r3, [r3, #24]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	3302      	adds	r3, #2
 80082d8:	2201      	movs	r2, #1
 80082da:	fa02 f303 	lsl.w	r3, r2, r3
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80082e2:	fb03 f202 	mul.w	r2, r3, r2
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	7a1b      	ldrb	r3, [r3, #8]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	2201      	movs	r2, #1
 80082f6:	409a      	lsls	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008304:	0a52      	lsrs	r2, r2, #9
 8008306:	fb03 f202 	mul.w	r2, r3, r2
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008314:	661a      	str	r2, [r3, #96]	; 0x60
 8008316:	e031      	b.n	800837c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831c:	2b01      	cmp	r3, #1
 800831e:	d11d      	bne.n	800835c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832e:	0c1b      	lsrs	r3, r3, #16
 8008330:	431a      	orrs	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	3301      	adds	r3, #1
 800833c:	029a      	lsls	r2, r3, #10
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008350:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	661a      	str	r2, [r3, #96]	; 0x60
 800835a:	e00f      	b.n	800837c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a58      	ldr	r2, [pc, #352]	; (80084c4 <HAL_SD_GetCardCSD+0x344>)
 8008362:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e09d      	b.n	80084b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008380:	0b9b      	lsrs	r3, r3, #14
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	b2da      	uxtb	r2, r3
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008392:	09db      	lsrs	r3, r3, #7
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839a:	b2da      	uxtb	r2, r3
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b4:	0fdb      	lsrs	r3, r3, #31
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c0:	0f5b      	lsrs	r3, r3, #29
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d2:	0e9b      	lsrs	r3, r3, #26
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e4:	0d9b      	lsrs	r3, r3, #22
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f6:	0d5b      	lsrs	r3, r3, #21
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008412:	0c1b      	lsrs	r3, r3, #16
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	b2da      	uxtb	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	0bdb      	lsrs	r3, r3, #15
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	b2da      	uxtb	r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843a:	0b9b      	lsrs	r3, r3, #14
 800843c:	b2db      	uxtb	r3, r3
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	0b5b      	lsrs	r3, r3, #13
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	b2da      	uxtb	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008462:	0b1b      	lsrs	r3, r3, #12
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	b2da      	uxtb	r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008476:	0a9b      	lsrs	r3, r3, #10
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	b2da      	uxtb	r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	0a1b      	lsrs	r3, r3, #8
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	004005ff 	.word	0x004005ff

080084c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008520:	b5b0      	push	{r4, r5, r7, lr}
 8008522:	b08e      	sub	sp, #56	; 0x38
 8008524:	af04      	add	r7, sp, #16
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2203      	movs	r2, #3
 8008534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853c:	2b03      	cmp	r3, #3
 800853e:	d02e      	beq.n	800859e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008546:	d106      	bne.n	8008556 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	639a      	str	r2, [r3, #56]	; 0x38
 8008554:	e029      	b.n	80085aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800855c:	d10a      	bne.n	8008574 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fabc 	bl	8008adc <SD_WideBus_Enable>
 8008564:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	639a      	str	r2, [r3, #56]	; 0x38
 8008572:	e01a      	b.n	80085aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 faf9 	bl	8008b72 <SD_WideBus_Disable>
 8008580:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	431a      	orrs	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
 800858e:	e00c      	b.n	80085aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008594:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	639a      	str	r2, [r3, #56]	; 0x38
 800859c:	e005      	b.n	80085aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00b      	beq.n	80085ca <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a26      	ldr	r2, [pc, #152]	; (8008650 <HAL_SD_ConfigWideBusOperation+0x130>)
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085c8:	e01f      	b.n	800860a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681d      	ldr	r5, [r3, #0]
 80085f0:	466c      	mov	r4, sp
 80085f2:	f107 0314 	add.w	r3, r7, #20
 80085f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008604:	4628      	mov	r0, r5
 8008606:	f001 fc05 	bl	8009e14 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008612:	4618      	mov	r0, r3
 8008614:	f001 fcc8 	bl	8009fa8 <SDMMC_CmdBlockLength>
 8008618:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00c      	beq.n	800863a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a0a      	ldr	r2, [pc, #40]	; (8008650 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008646:	4618      	mov	r0, r3
 8008648:	3728      	adds	r7, #40	; 0x28
 800864a:	46bd      	mov	sp, r7
 800864c:	bdb0      	pop	{r4, r5, r7, pc}
 800864e:	bf00      	nop
 8008650:	004005ff 	.word	0x004005ff

08008654 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008660:	f107 030c 	add.w	r3, r7, #12
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa10 	bl	8008a8c <SD_SendStatus>
 800866c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	0a5b      	lsrs	r3, r3, #9
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800868a:	693b      	ldr	r3, [r7, #16]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80086b2:	bf00      	nop
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	2b82      	cmp	r3, #130	; 0x82
 80086d2:	d111      	bne.n	80086f8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 fd0f 	bl	800a0fc <SDMMC_CmdStopTransfer>
 80086de:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d008      	beq.n	80086f8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fd3a 	bl	800816c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0208 	bic.w	r2, r2, #8
 8008706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008710:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f002 fc7f 	bl	800b024 <HAL_SD_RxCpltCallback>
#endif
}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fa fc3e 	bl	8002fc0 <HAL_DMA_GetError>
 8008744:	4603      	mov	r3, r0
 8008746:	2b02      	cmp	r3, #2
 8008748:	d03e      	beq.n	80087c8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008750:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008758:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d002      	beq.n	8008766 <SD_DMAError+0x36>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d12d      	bne.n	80087c2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a19      	ldr	r2, [pc, #100]	; (80087d0 <SD_DMAError+0xa0>)
 800876c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800877c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800878a:	6978      	ldr	r0, [r7, #20]
 800878c:	f7ff ff62 	bl	8008654 <HAL_SD_GetCardState>
 8008790:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b06      	cmp	r3, #6
 8008796:	d002      	beq.n	800879e <SD_DMAError+0x6e>
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b05      	cmp	r3, #5
 800879c:	d10a      	bne.n	80087b4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 fcaa 	bl	800a0fc <SDMMC_CmdStopTransfer>
 80087a8:	4602      	mov	r2, r0
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	431a      	orrs	r2, r3
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2200      	movs	r2, #0
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80087c2:	6978      	ldr	r0, [r7, #20]
 80087c4:	f7ff fcd2 	bl	800816c <HAL_SD_ErrorCallback>
#endif
  }
}
 80087c8:	bf00      	nop
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	004005ff 	.word	0x004005ff

080087d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087d4:	b5b0      	push	{r4, r5, r7, lr}
 80087d6:	b094      	sub	sp, #80	; 0x50
 80087d8:	af04      	add	r7, sp, #16
 80087da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80087dc:	2301      	movs	r3, #1
 80087de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 fb5b 	bl	8009ea0 <SDIO_GetPowerState>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d102      	bne.n	80087f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087f4:	e0b8      	b.n	8008968 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d02f      	beq.n	800885e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4618      	mov	r0, r3
 8008804:	f001 fd84 	bl	800a310 <SDMMC_CmdSendCID>
 8008808:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800880a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <SD_InitCard+0x40>
    {
      return errorstate;
 8008810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008812:	e0a9      	b.n	8008968 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2100      	movs	r1, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f001 fb85 	bl	8009f2a <SDIO_GetResponse>
 8008820:	4602      	mov	r2, r0
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2104      	movs	r1, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fb7c 	bl	8009f2a <SDIO_GetResponse>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2108      	movs	r1, #8
 800883e:	4618      	mov	r0, r3
 8008840:	f001 fb73 	bl	8009f2a <SDIO_GetResponse>
 8008844:	4602      	mov	r2, r0
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	210c      	movs	r1, #12
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fb6a 	bl	8009f2a <SDIO_GetResponse>
 8008856:	4602      	mov	r2, r0
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008862:	2b03      	cmp	r3, #3
 8008864:	d00d      	beq.n	8008882 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f107 020e 	add.w	r2, r7, #14
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f001 fd8a 	bl	800a38a <SDMMC_CmdSetRelAdd>
 8008876:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <SD_InitCard+0xae>
    {
      return errorstate;
 800887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008880:	e072      	b.n	8008968 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008886:	2b03      	cmp	r3, #3
 8008888:	d036      	beq.n	80088f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800888a:	89fb      	ldrh	r3, [r7, #14]
 800888c:	461a      	mov	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889a:	041b      	lsls	r3, r3, #16
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f001 fd54 	bl	800a34c <SDMMC_CmdSendCSD>
 80088a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80088ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ae:	e05b      	b.n	8008968 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2100      	movs	r1, #0
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 fb37 	bl	8009f2a <SDIO_GetResponse>
 80088bc:	4602      	mov	r2, r0
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2104      	movs	r1, #4
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 fb2e 	bl	8009f2a <SDIO_GetResponse>
 80088ce:	4602      	mov	r2, r0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2108      	movs	r1, #8
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fb25 	bl	8009f2a <SDIO_GetResponse>
 80088e0:	4602      	mov	r2, r0
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	210c      	movs	r1, #12
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 fb1c 	bl	8009f2a <SDIO_GetResponse>
 80088f2:	4602      	mov	r2, r0
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2104      	movs	r1, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fb13 	bl	8009f2a <SDIO_GetResponse>
 8008904:	4603      	mov	r3, r0
 8008906:	0d1a      	lsrs	r2, r3, #20
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800890c:	f107 0310 	add.w	r3, r7, #16
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff fc34 	bl	8008180 <HAL_SD_GetCardCSD>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800891e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008922:	e021      	b.n	8008968 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6819      	ldr	r1, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	2200      	movs	r2, #0
 8008930:	461c      	mov	r4, r3
 8008932:	4615      	mov	r5, r2
 8008934:	4622      	mov	r2, r4
 8008936:	462b      	mov	r3, r5
 8008938:	4608      	mov	r0, r1
 800893a:	f001 fc01 	bl	800a140 <SDMMC_CmdSelDesel>
 800893e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <SD_InitCard+0x176>
  {
    return errorstate;
 8008946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008948:	e00e      	b.n	8008968 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681d      	ldr	r5, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	466c      	mov	r4, sp
 8008952:	f103 0210 	add.w	r2, r3, #16
 8008956:	ca07      	ldmia	r2, {r0, r1, r2}
 8008958:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800895c:	3304      	adds	r3, #4
 800895e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008960:	4628      	mov	r0, r5
 8008962:	f001 fa57 	bl	8009e14 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3740      	adds	r7, #64	; 0x40
 800896c:	46bd      	mov	sp, r7
 800896e:	bdb0      	pop	{r4, r5, r7, pc}

08008970 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	2300      	movs	r3, #0
 8008982:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fbfc 	bl	800a186 <SDMMC_CmdGoIdleState>
 800898e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	e072      	b.n	8008a80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 fc0f 	bl	800a1c2 <SDMMC_CmdOperCond>
 80089a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00d      	beq.n	80089c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 fbe5 	bl	800a186 <SDMMC_CmdGoIdleState>
 80089bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d004      	beq.n	80089ce <SD_PowerON+0x5e>
    {
      return errorstate;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e05b      	b.n	8008a80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d137      	bne.n	8008a46 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2100      	movs	r1, #0
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 fc0f 	bl	800a200 <SDMMC_CmdAppCommand>
 80089e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d02d      	beq.n	8008a46 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089ee:	e047      	b.n	8008a80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 fc02 	bl	800a200 <SDMMC_CmdAppCommand>
 80089fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <SD_PowerON+0x98>
    {
      return errorstate;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	e03b      	b.n	8008a80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	491e      	ldr	r1, [pc, #120]	; (8008a88 <SD_PowerON+0x118>)
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fc18 	bl	800a244 <SDMMC_CmdAppOperCommand>
 8008a14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a20:	e02e      	b.n	8008a80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2100      	movs	r1, #0
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 fa7e 	bl	8009f2a <SDIO_GetResponse>
 8008a2e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	0fdb      	lsrs	r3, r3, #31
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d101      	bne.n	8008a3c <SD_PowerON+0xcc>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e000      	b.n	8008a3e <SD_PowerON+0xce>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	613b      	str	r3, [r7, #16]

    count++;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	3301      	adds	r3, #1
 8008a44:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d802      	bhi.n	8008a56 <SD_PowerON+0xe6>
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0cc      	beq.n	80089f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d902      	bls.n	8008a66 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a64:	e00c      	b.n	8008a80 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	645a      	str	r2, [r3, #68]	; 0x44
 8008a76:	e002      	b.n	8008a7e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	c1100000 	.word	0xc1100000

08008a8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008aa0:	e018      	b.n	8008ad4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aaa:	041b      	lsls	r3, r3, #16
 8008aac:	4619      	mov	r1, r3
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f001 fc8c 	bl	800a3cc <SDMMC_CmdSendStatus>
 8008ab4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	e009      	b.n	8008ad4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 fa2f 	bl	8009f2a <SDIO_GetResponse>
 8008acc:	4602      	mov	r2, r0
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2100      	movs	r1, #0
 8008af2:	4618      	mov	r0, r3
 8008af4:	f001 fa19 	bl	8009f2a <SDIO_GetResponse>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b02:	d102      	bne.n	8008b0a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b08:	e02f      	b.n	8008b6a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b0a:	f107 030c 	add.w	r3, r7, #12
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f879 	bl	8008c08 <SD_FindSCR>
 8008b16:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	e023      	b.n	8008b6a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01c      	beq.n	8008b66 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b34:	041b      	lsls	r3, r3, #16
 8008b36:	4619      	mov	r1, r3
 8008b38:	4610      	mov	r0, r2
 8008b3a:	f001 fb61 	bl	800a200 <SDMMC_CmdAppCommand>
 8008b3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	e00f      	b.n	8008b6a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2102      	movs	r1, #2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f001 fb9a 	bl	800a28a <SDMMC_CmdBusWidth>
 8008b56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	e003      	b.n	8008b6a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	e001      	b.n	8008b6a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b086      	sub	sp, #24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2100      	movs	r1, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 f9ce 	bl	8009f2a <SDIO_GetResponse>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b98:	d102      	bne.n	8008ba0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b9e:	e02f      	b.n	8008c00 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ba0:	f107 030c 	add.w	r3, r7, #12
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f82e 	bl	8008c08 <SD_FindSCR>
 8008bac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	e023      	b.n	8008c00 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d01c      	beq.n	8008bfc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bca:	041b      	lsls	r3, r3, #16
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f001 fb16 	bl	800a200 <SDMMC_CmdAppCommand>
 8008bd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	e00f      	b.n	8008c00 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2100      	movs	r1, #0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 fb4f 	bl	800a28a <SDMMC_CmdBusWidth>
 8008bec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	e003      	b.n	8008c00 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e001      	b.n	8008c00 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c08:	b590      	push	{r4, r7, lr}
 8008c0a:	b08f      	sub	sp, #60	; 0x3c
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c12:	f7fa f84f 	bl	8002cb4 <HAL_GetTick>
 8008c16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60bb      	str	r3, [r7, #8]
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2108      	movs	r1, #8
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 f9ba 	bl	8009fa8 <SDMMC_CmdBlockLength>
 8008c34:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	e0b2      	b.n	8008da6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f001 fad7 	bl	800a200 <SDMMC_CmdAppCommand>
 8008c52:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	e0a3      	b.n	8008da6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c62:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c64:	2308      	movs	r3, #8
 8008c66:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008c68:	2330      	movs	r3, #48	; 0x30
 8008c6a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008c74:	2301      	movs	r3, #1
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f107 0210 	add.w	r2, r7, #16
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f964 	bl	8009f50 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fb1e 	bl	800a2ce <SDMMC_CmdSendSCR>
 8008c92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d02a      	beq.n	8008cf0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	e083      	b.n	8008da6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00f      	beq.n	8008ccc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6819      	ldr	r1, [r3, #0]
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	f107 0208 	add.w	r2, r7, #8
 8008cb8:	18d4      	adds	r4, r2, r3
 8008cba:	4608      	mov	r0, r1
 8008cbc:	f001 f8d5 	bl	8009e6a <SDIO_ReadFIFO>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	6023      	str	r3, [r4, #0]
      index++;
 8008cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8008cca:	e006      	b.n	8008cda <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d012      	beq.n	8008d00 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008cda:	f7f9 ffeb 	bl	8002cb4 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce8:	d102      	bne.n	8008cf0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cee:	e05a      	b.n	8008da6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0cf      	beq.n	8008c9e <SD_FindSCR+0x96>
 8008cfe:	e000      	b.n	8008d02 <SD_FindSCR+0xfa>
      break;
 8008d00:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2208      	movs	r2, #8
 8008d16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d18:	2308      	movs	r3, #8
 8008d1a:	e044      	b.n	8008da6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d32:	2302      	movs	r3, #2
 8008d34:	e037      	b.n	8008da6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3c:	f003 0320 	and.w	r3, r3, #32
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	e02a      	b.n	8008da6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d58:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	061a      	lsls	r2, r3, #24
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d66:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d70:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	0e1b      	lsrs	r3, r3, #24
 8008d76:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	601a      	str	r2, [r3, #0]
    scr++;
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	3304      	adds	r3, #4
 8008d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	061a      	lsls	r2, r3, #24
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	021b      	lsls	r3, r3, #8
 8008d8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d8e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	0a1b      	lsrs	r3, r3, #8
 8008d94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d98:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	0e1b      	lsrs	r3, r3, #24
 8008d9e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	373c      	adds	r7, #60	; 0x3c
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd90      	pop	{r4, r7, pc}

08008dae <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e025      	b.n	8008e0e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f9 fd6c 	bl	80028b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f000 ff4a 	bl	8009c88 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	f000 ff9f 	bl	8009d42 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e041      	b.n	8008eac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7f9 fbf1 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2202      	movs	r2, #2
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4619      	mov	r1, r3
 8008e54:	4610      	mov	r0, r2
 8008e56:	f000 fa7d 	bl	8009354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d001      	beq.n	8008ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e04e      	b.n	8008f6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0201 	orr.w	r2, r2, #1
 8008ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a23      	ldr	r2, [pc, #140]	; (8008f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d022      	beq.n	8008f34 <HAL_TIM_Base_Start_IT+0x80>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef6:	d01d      	beq.n	8008f34 <HAL_TIM_Base_Start_IT+0x80>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1f      	ldr	r2, [pc, #124]	; (8008f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d018      	beq.n	8008f34 <HAL_TIM_Base_Start_IT+0x80>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1e      	ldr	r2, [pc, #120]	; (8008f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d013      	beq.n	8008f34 <HAL_TIM_Base_Start_IT+0x80>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1c      	ldr	r2, [pc, #112]	; (8008f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d00e      	beq.n	8008f34 <HAL_TIM_Base_Start_IT+0x80>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1b      	ldr	r2, [pc, #108]	; (8008f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d009      	beq.n	8008f34 <HAL_TIM_Base_Start_IT+0x80>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d004      	beq.n	8008f34 <HAL_TIM_Base_Start_IT+0x80>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a18      	ldr	r2, [pc, #96]	; (8008f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d111      	bne.n	8008f58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b06      	cmp	r3, #6
 8008f44:	d010      	beq.n	8008f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0201 	orr.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f56:	e007      	b.n	8008f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40010000 	.word	0x40010000
 8008f7c:	40000400 	.word	0x40000400
 8008f80:	40000800 	.word	0x40000800
 8008f84:	40000c00 	.word	0x40000c00
 8008f88:	40010400 	.word	0x40010400
 8008f8c:	40014000 	.word	0x40014000
 8008f90:	40001800 	.word	0x40001800

08008f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d020      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f003 0302 	and.w	r3, r3, #2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01b      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f06f 0202 	mvn.w	r2, #2
 8008fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f999 	bl	8009316 <HAL_TIM_IC_CaptureCallback>
 8008fe4:	e005      	b.n	8008ff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f98b 	bl	8009302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f99c 	bl	800932a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d020      	beq.n	8009044 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01b      	beq.n	8009044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0204 	mvn.w	r2, #4
 8009014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2202      	movs	r2, #2
 800901a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f973 	bl	8009316 <HAL_TIM_IC_CaptureCallback>
 8009030:	e005      	b.n	800903e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f965 	bl	8009302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f976 	bl	800932a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d020      	beq.n	8009090 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01b      	beq.n	8009090 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0208 	mvn.w	r2, #8
 8009060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2204      	movs	r2, #4
 8009066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d003      	beq.n	800907e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f94d 	bl	8009316 <HAL_TIM_IC_CaptureCallback>
 800907c:	e005      	b.n	800908a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f93f 	bl	8009302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f950 	bl	800932a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f003 0310 	and.w	r3, r3, #16
 8009096:	2b00      	cmp	r3, #0
 8009098:	d020      	beq.n	80090dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f003 0310 	and.w	r3, r3, #16
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01b      	beq.n	80090dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f06f 0210 	mvn.w	r2, #16
 80090ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2208      	movs	r2, #8
 80090b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f927 	bl	8009316 <HAL_TIM_IC_CaptureCallback>
 80090c8:	e005      	b.n	80090d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f919 	bl	8009302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f92a 	bl	800932a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00c      	beq.n	8009100 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d007      	beq.n	8009100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f06f 0201 	mvn.w	r2, #1
 80090f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7f8 faa6 	bl	800164c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00c      	beq.n	8009124 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800911c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fae4 	bl	80096ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00c      	beq.n	8009148 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d007      	beq.n	8009148 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8fb 	bl	800933e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00c      	beq.n	800916c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f003 0320 	and.w	r3, r3, #32
 8009158:	2b00      	cmp	r3, #0
 800915a:	d007      	beq.n	800916c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0220 	mvn.w	r2, #32
 8009164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fab6 	bl	80096d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800916c:	bf00      	nop
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_TIM_ConfigClockSource+0x1c>
 800918c:	2302      	movs	r3, #2
 800918e:	e0b4      	b.n	80092fa <HAL_TIM_ConfigClockSource+0x186>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c8:	d03e      	beq.n	8009248 <HAL_TIM_ConfigClockSource+0xd4>
 80091ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ce:	f200 8087 	bhi.w	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
 80091d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d6:	f000 8086 	beq.w	80092e6 <HAL_TIM_ConfigClockSource+0x172>
 80091da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091de:	d87f      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e0:	2b70      	cmp	r3, #112	; 0x70
 80091e2:	d01a      	beq.n	800921a <HAL_TIM_ConfigClockSource+0xa6>
 80091e4:	2b70      	cmp	r3, #112	; 0x70
 80091e6:	d87b      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e8:	2b60      	cmp	r3, #96	; 0x60
 80091ea:	d050      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x11a>
 80091ec:	2b60      	cmp	r3, #96	; 0x60
 80091ee:	d877      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f0:	2b50      	cmp	r3, #80	; 0x50
 80091f2:	d03c      	beq.n	800926e <HAL_TIM_ConfigClockSource+0xfa>
 80091f4:	2b50      	cmp	r3, #80	; 0x50
 80091f6:	d873      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f8:	2b40      	cmp	r3, #64	; 0x40
 80091fa:	d058      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x13a>
 80091fc:	2b40      	cmp	r3, #64	; 0x40
 80091fe:	d86f      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009200:	2b30      	cmp	r3, #48	; 0x30
 8009202:	d064      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x15a>
 8009204:	2b30      	cmp	r3, #48	; 0x30
 8009206:	d86b      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009208:	2b20      	cmp	r3, #32
 800920a:	d060      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x15a>
 800920c:	2b20      	cmp	r3, #32
 800920e:	d867      	bhi.n	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009210:	2b00      	cmp	r3, #0
 8009212:	d05c      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x15a>
 8009214:	2b10      	cmp	r3, #16
 8009216:	d05a      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x15a>
 8009218:	e062      	b.n	80092e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800922a:	f000 f9b9 	bl	80095a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800923c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	609a      	str	r2, [r3, #8]
      break;
 8009246:	e04f      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009258:	f000 f9a2 	bl	80095a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800926a:	609a      	str	r2, [r3, #8]
      break;
 800926c:	e03c      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800927a:	461a      	mov	r2, r3
 800927c:	f000 f916 	bl	80094ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2150      	movs	r1, #80	; 0x50
 8009286:	4618      	mov	r0, r3
 8009288:	f000 f96f 	bl	800956a <TIM_ITRx_SetConfig>
      break;
 800928c:	e02c      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800929a:	461a      	mov	r2, r3
 800929c:	f000 f935 	bl	800950a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2160      	movs	r1, #96	; 0x60
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f95f 	bl	800956a <TIM_ITRx_SetConfig>
      break;
 80092ac:	e01c      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ba:	461a      	mov	r2, r3
 80092bc:	f000 f8f6 	bl	80094ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2140      	movs	r1, #64	; 0x40
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f94f 	bl	800956a <TIM_ITRx_SetConfig>
      break;
 80092cc:	e00c      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4619      	mov	r1, r3
 80092d8:	4610      	mov	r0, r2
 80092da:	f000 f946 	bl	800956a <TIM_ITRx_SetConfig>
      break;
 80092de:	e003      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	73fb      	strb	r3, [r7, #15]
      break;
 80092e4:	e000      	b.n	80092e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009332:	bf00      	nop
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
	...

08009354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a46      	ldr	r2, [pc, #280]	; (8009480 <TIM_Base_SetConfig+0x12c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d013      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009372:	d00f      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a43      	ldr	r2, [pc, #268]	; (8009484 <TIM_Base_SetConfig+0x130>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00b      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a42      	ldr	r2, [pc, #264]	; (8009488 <TIM_Base_SetConfig+0x134>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d007      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a41      	ldr	r2, [pc, #260]	; (800948c <TIM_Base_SetConfig+0x138>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a40      	ldr	r2, [pc, #256]	; (8009490 <TIM_Base_SetConfig+0x13c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d108      	bne.n	80093a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a35      	ldr	r2, [pc, #212]	; (8009480 <TIM_Base_SetConfig+0x12c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d02b      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b4:	d027      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a32      	ldr	r2, [pc, #200]	; (8009484 <TIM_Base_SetConfig+0x130>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d023      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a31      	ldr	r2, [pc, #196]	; (8009488 <TIM_Base_SetConfig+0x134>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d01f      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a30      	ldr	r2, [pc, #192]	; (800948c <TIM_Base_SetConfig+0x138>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d01b      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a2f      	ldr	r2, [pc, #188]	; (8009490 <TIM_Base_SetConfig+0x13c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d017      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a2e      	ldr	r2, [pc, #184]	; (8009494 <TIM_Base_SetConfig+0x140>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d013      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a2d      	ldr	r2, [pc, #180]	; (8009498 <TIM_Base_SetConfig+0x144>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d00f      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a2c      	ldr	r2, [pc, #176]	; (800949c <TIM_Base_SetConfig+0x148>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00b      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a2b      	ldr	r2, [pc, #172]	; (80094a0 <TIM_Base_SetConfig+0x14c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d007      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a2a      	ldr	r2, [pc, #168]	; (80094a4 <TIM_Base_SetConfig+0x150>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d003      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a29      	ldr	r2, [pc, #164]	; (80094a8 <TIM_Base_SetConfig+0x154>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d108      	bne.n	8009418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800940c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	4313      	orrs	r3, r2
 8009416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a10      	ldr	r2, [pc, #64]	; (8009480 <TIM_Base_SetConfig+0x12c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_Base_SetConfig+0xf8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a12      	ldr	r2, [pc, #72]	; (8009490 <TIM_Base_SetConfig+0x13c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d103      	bne.n	8009454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	2b01      	cmp	r3, #1
 8009464:	d105      	bne.n	8009472 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f023 0201 	bic.w	r2, r3, #1
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	611a      	str	r2, [r3, #16]
  }
}
 8009472:	bf00      	nop
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	40010000 	.word	0x40010000
 8009484:	40000400 	.word	0x40000400
 8009488:	40000800 	.word	0x40000800
 800948c:	40000c00 	.word	0x40000c00
 8009490:	40010400 	.word	0x40010400
 8009494:	40014000 	.word	0x40014000
 8009498:	40014400 	.word	0x40014400
 800949c:	40014800 	.word	0x40014800
 80094a0:	40001800 	.word	0x40001800
 80094a4:	40001c00 	.word	0x40001c00
 80094a8:	40002000 	.word	0x40002000

080094ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f023 0201 	bic.w	r2, r3, #1
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	011b      	lsls	r3, r3, #4
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	4313      	orrs	r3, r2
 80094e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f023 030a 	bic.w	r3, r3, #10
 80094e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	621a      	str	r2, [r3, #32]
}
 80094fe:	bf00      	nop
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800950a:	b480      	push	{r7}
 800950c:	b087      	sub	sp, #28
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6a1b      	ldr	r3, [r3, #32]
 8009520:	f023 0210 	bic.w	r2, r3, #16
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	031b      	lsls	r3, r3, #12
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	4313      	orrs	r3, r2
 800953e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009546:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	011b      	lsls	r3, r3, #4
 800954c:	697a      	ldr	r2, [r7, #20]
 800954e:	4313      	orrs	r3, r2
 8009550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	621a      	str	r2, [r3, #32]
}
 800955e:	bf00      	nop
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800956a:	b480      	push	{r7}
 800956c:	b085      	sub	sp, #20
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4313      	orrs	r3, r2
 8009588:	f043 0307 	orr.w	r3, r3, #7
 800958c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	609a      	str	r2, [r3, #8]
}
 8009594:	bf00      	nop
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	021a      	lsls	r2, r3, #8
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	431a      	orrs	r2, r3
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	609a      	str	r2, [r3, #8]
}
 80095d4:	bf00      	nop
 80095d6:	371c      	adds	r7, #28
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d101      	bne.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095f4:	2302      	movs	r3, #2
 80095f6:	e05a      	b.n	80096ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2202      	movs	r2, #2
 8009604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a21      	ldr	r2, [pc, #132]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d022      	beq.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009644:	d01d      	beq.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a1d      	ldr	r2, [pc, #116]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d018      	beq.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a1b      	ldr	r2, [pc, #108]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d013      	beq.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a1a      	ldr	r2, [pc, #104]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d00e      	beq.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a18      	ldr	r2, [pc, #96]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d009      	beq.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a17      	ldr	r2, [pc, #92]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d004      	beq.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a15      	ldr	r2, [pc, #84]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d10c      	bne.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	4313      	orrs	r3, r2
 8009692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	40010000 	.word	0x40010000
 80096c0:	40000400 	.word	0x40000400
 80096c4:	40000800 	.word	0x40000800
 80096c8:	40000c00 	.word	0x40000c00
 80096cc:	40010400 	.word	0x40010400
 80096d0:	40014000 	.word	0x40014000
 80096d4:	40001800 	.word	0x40001800

080096d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e042      	b.n	8009798 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d106      	bne.n	800972c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7f8 ff9e 	bl	8002668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2224      	movs	r2, #36	; 0x24
 8009730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f82b 	bl	80097a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	691a      	ldr	r2, [r3, #16]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	695a      	ldr	r2, [r3, #20]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68da      	ldr	r2, [r3, #12]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097a4:	b0c0      	sub	sp, #256	; 0x100
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80097b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097bc:	68d9      	ldr	r1, [r3, #12]
 80097be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	ea40 0301 	orr.w	r3, r0, r1
 80097c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80097ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	431a      	orrs	r2, r3
 80097d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	431a      	orrs	r2, r3
 80097e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80097ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80097f8:	f021 010c 	bic.w	r1, r1, #12
 80097fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009806:	430b      	orrs	r3, r1
 8009808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800980a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800981a:	6999      	ldr	r1, [r3, #24]
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	ea40 0301 	orr.w	r3, r0, r1
 8009826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b8f      	ldr	r3, [pc, #572]	; (8009a6c <UART_SetConfig+0x2cc>)
 8009830:	429a      	cmp	r2, r3
 8009832:	d005      	beq.n	8009840 <UART_SetConfig+0xa0>
 8009834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4b8d      	ldr	r3, [pc, #564]	; (8009a70 <UART_SetConfig+0x2d0>)
 800983c:	429a      	cmp	r2, r3
 800983e:	d104      	bne.n	800984a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009840:	f7fd faf0 	bl	8006e24 <HAL_RCC_GetPCLK2Freq>
 8009844:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009848:	e003      	b.n	8009852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800984a:	f7fd fad7 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 800984e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800985c:	f040 810c 	bne.w	8009a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009864:	2200      	movs	r2, #0
 8009866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800986a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800986e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009872:	4622      	mov	r2, r4
 8009874:	462b      	mov	r3, r5
 8009876:	1891      	adds	r1, r2, r2
 8009878:	65b9      	str	r1, [r7, #88]	; 0x58
 800987a:	415b      	adcs	r3, r3
 800987c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800987e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009882:	4621      	mov	r1, r4
 8009884:	eb12 0801 	adds.w	r8, r2, r1
 8009888:	4629      	mov	r1, r5
 800988a:	eb43 0901 	adc.w	r9, r3, r1
 800988e:	f04f 0200 	mov.w	r2, #0
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800989a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800989e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098a2:	4690      	mov	r8, r2
 80098a4:	4699      	mov	r9, r3
 80098a6:	4623      	mov	r3, r4
 80098a8:	eb18 0303 	adds.w	r3, r8, r3
 80098ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098b0:	462b      	mov	r3, r5
 80098b2:	eb49 0303 	adc.w	r3, r9, r3
 80098b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80098ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80098ce:	460b      	mov	r3, r1
 80098d0:	18db      	adds	r3, r3, r3
 80098d2:	653b      	str	r3, [r7, #80]	; 0x50
 80098d4:	4613      	mov	r3, r2
 80098d6:	eb42 0303 	adc.w	r3, r2, r3
 80098da:	657b      	str	r3, [r7, #84]	; 0x54
 80098dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80098e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80098e4:	f7f6 fc94 	bl	8000210 <__aeabi_uldivmod>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4b61      	ldr	r3, [pc, #388]	; (8009a74 <UART_SetConfig+0x2d4>)
 80098ee:	fba3 2302 	umull	r2, r3, r3, r2
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	011c      	lsls	r4, r3, #4
 80098f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009900:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009908:	4642      	mov	r2, r8
 800990a:	464b      	mov	r3, r9
 800990c:	1891      	adds	r1, r2, r2
 800990e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009910:	415b      	adcs	r3, r3
 8009912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009918:	4641      	mov	r1, r8
 800991a:	eb12 0a01 	adds.w	sl, r2, r1
 800991e:	4649      	mov	r1, r9
 8009920:	eb43 0b01 	adc.w	fp, r3, r1
 8009924:	f04f 0200 	mov.w	r2, #0
 8009928:	f04f 0300 	mov.w	r3, #0
 800992c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009938:	4692      	mov	sl, r2
 800993a:	469b      	mov	fp, r3
 800993c:	4643      	mov	r3, r8
 800993e:	eb1a 0303 	adds.w	r3, sl, r3
 8009942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009946:	464b      	mov	r3, r9
 8009948:	eb4b 0303 	adc.w	r3, fp, r3
 800994c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800995c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009964:	460b      	mov	r3, r1
 8009966:	18db      	adds	r3, r3, r3
 8009968:	643b      	str	r3, [r7, #64]	; 0x40
 800996a:	4613      	mov	r3, r2
 800996c:	eb42 0303 	adc.w	r3, r2, r3
 8009970:	647b      	str	r3, [r7, #68]	; 0x44
 8009972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800997a:	f7f6 fc49 	bl	8000210 <__aeabi_uldivmod>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4611      	mov	r1, r2
 8009984:	4b3b      	ldr	r3, [pc, #236]	; (8009a74 <UART_SetConfig+0x2d4>)
 8009986:	fba3 2301 	umull	r2, r3, r3, r1
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	2264      	movs	r2, #100	; 0x64
 800998e:	fb02 f303 	mul.w	r3, r2, r3
 8009992:	1acb      	subs	r3, r1, r3
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800999a:	4b36      	ldr	r3, [pc, #216]	; (8009a74 <UART_SetConfig+0x2d4>)
 800999c:	fba3 2302 	umull	r2, r3, r3, r2
 80099a0:	095b      	lsrs	r3, r3, #5
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099a8:	441c      	add	r4, r3
 80099aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80099b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80099bc:	4642      	mov	r2, r8
 80099be:	464b      	mov	r3, r9
 80099c0:	1891      	adds	r1, r2, r2
 80099c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80099c4:	415b      	adcs	r3, r3
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099cc:	4641      	mov	r1, r8
 80099ce:	1851      	adds	r1, r2, r1
 80099d0:	6339      	str	r1, [r7, #48]	; 0x30
 80099d2:	4649      	mov	r1, r9
 80099d4:	414b      	adcs	r3, r1
 80099d6:	637b      	str	r3, [r7, #52]	; 0x34
 80099d8:	f04f 0200 	mov.w	r2, #0
 80099dc:	f04f 0300 	mov.w	r3, #0
 80099e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80099e4:	4659      	mov	r1, fp
 80099e6:	00cb      	lsls	r3, r1, #3
 80099e8:	4651      	mov	r1, sl
 80099ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099ee:	4651      	mov	r1, sl
 80099f0:	00ca      	lsls	r2, r1, #3
 80099f2:	4610      	mov	r0, r2
 80099f4:	4619      	mov	r1, r3
 80099f6:	4603      	mov	r3, r0
 80099f8:	4642      	mov	r2, r8
 80099fa:	189b      	adds	r3, r3, r2
 80099fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a00:	464b      	mov	r3, r9
 8009a02:	460a      	mov	r2, r1
 8009a04:	eb42 0303 	adc.w	r3, r2, r3
 8009a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009a20:	460b      	mov	r3, r1
 8009a22:	18db      	adds	r3, r3, r3
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a26:	4613      	mov	r3, r2
 8009a28:	eb42 0303 	adc.w	r3, r2, r3
 8009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009a36:	f7f6 fbeb 	bl	8000210 <__aeabi_uldivmod>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <UART_SetConfig+0x2d4>)
 8009a40:	fba3 1302 	umull	r1, r3, r3, r2
 8009a44:	095b      	lsrs	r3, r3, #5
 8009a46:	2164      	movs	r1, #100	; 0x64
 8009a48:	fb01 f303 	mul.w	r3, r1, r3
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	3332      	adds	r3, #50	; 0x32
 8009a52:	4a08      	ldr	r2, [pc, #32]	; (8009a74 <UART_SetConfig+0x2d4>)
 8009a54:	fba2 2303 	umull	r2, r3, r2, r3
 8009a58:	095b      	lsrs	r3, r3, #5
 8009a5a:	f003 0207 	and.w	r2, r3, #7
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4422      	add	r2, r4
 8009a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a68:	e106      	b.n	8009c78 <UART_SetConfig+0x4d8>
 8009a6a:	bf00      	nop
 8009a6c:	40011000 	.word	0x40011000
 8009a70:	40011400 	.word	0x40011400
 8009a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009a8a:	4642      	mov	r2, r8
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	1891      	adds	r1, r2, r2
 8009a90:	6239      	str	r1, [r7, #32]
 8009a92:	415b      	adcs	r3, r3
 8009a94:	627b      	str	r3, [r7, #36]	; 0x24
 8009a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	1854      	adds	r4, r2, r1
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	eb43 0501 	adc.w	r5, r3, r1
 8009aa4:	f04f 0200 	mov.w	r2, #0
 8009aa8:	f04f 0300 	mov.w	r3, #0
 8009aac:	00eb      	lsls	r3, r5, #3
 8009aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ab2:	00e2      	lsls	r2, r4, #3
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	461d      	mov	r5, r3
 8009ab8:	4643      	mov	r3, r8
 8009aba:	18e3      	adds	r3, r4, r3
 8009abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ac0:	464b      	mov	r3, r9
 8009ac2:	eb45 0303 	adc.w	r3, r5, r3
 8009ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ada:	f04f 0200 	mov.w	r2, #0
 8009ade:	f04f 0300 	mov.w	r3, #0
 8009ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	008b      	lsls	r3, r1, #2
 8009aea:	4621      	mov	r1, r4
 8009aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009af0:	4621      	mov	r1, r4
 8009af2:	008a      	lsls	r2, r1, #2
 8009af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009af8:	f7f6 fb8a 	bl	8000210 <__aeabi_uldivmod>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4b60      	ldr	r3, [pc, #384]	; (8009c84 <UART_SetConfig+0x4e4>)
 8009b02:	fba3 2302 	umull	r2, r3, r3, r2
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	011c      	lsls	r4, r3, #4
 8009b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	1891      	adds	r1, r2, r2
 8009b22:	61b9      	str	r1, [r7, #24]
 8009b24:	415b      	adcs	r3, r3
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b2c:	4641      	mov	r1, r8
 8009b2e:	1851      	adds	r1, r2, r1
 8009b30:	6139      	str	r1, [r7, #16]
 8009b32:	4649      	mov	r1, r9
 8009b34:	414b      	adcs	r3, r1
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	f04f 0300 	mov.w	r3, #0
 8009b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b44:	4659      	mov	r1, fp
 8009b46:	00cb      	lsls	r3, r1, #3
 8009b48:	4651      	mov	r1, sl
 8009b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b4e:	4651      	mov	r1, sl
 8009b50:	00ca      	lsls	r2, r1, #3
 8009b52:	4610      	mov	r0, r2
 8009b54:	4619      	mov	r1, r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	4642      	mov	r2, r8
 8009b5a:	189b      	adds	r3, r3, r2
 8009b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b60:	464b      	mov	r3, r9
 8009b62:	460a      	mov	r2, r1
 8009b64:	eb42 0303 	adc.w	r3, r2, r3
 8009b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b78:	f04f 0200 	mov.w	r2, #0
 8009b7c:	f04f 0300 	mov.w	r3, #0
 8009b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009b84:	4649      	mov	r1, r9
 8009b86:	008b      	lsls	r3, r1, #2
 8009b88:	4641      	mov	r1, r8
 8009b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b8e:	4641      	mov	r1, r8
 8009b90:	008a      	lsls	r2, r1, #2
 8009b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b96:	f7f6 fb3b 	bl	8000210 <__aeabi_uldivmod>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	4b38      	ldr	r3, [pc, #224]	; (8009c84 <UART_SetConfig+0x4e4>)
 8009ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ba6:	095b      	lsrs	r3, r3, #5
 8009ba8:	2264      	movs	r2, #100	; 0x64
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	1acb      	subs	r3, r1, r3
 8009bb0:	011b      	lsls	r3, r3, #4
 8009bb2:	3332      	adds	r3, #50	; 0x32
 8009bb4:	4a33      	ldr	r2, [pc, #204]	; (8009c84 <UART_SetConfig+0x4e4>)
 8009bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bc0:	441c      	add	r4, r3
 8009bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	673b      	str	r3, [r7, #112]	; 0x70
 8009bca:	677a      	str	r2, [r7, #116]	; 0x74
 8009bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	1891      	adds	r1, r2, r2
 8009bd6:	60b9      	str	r1, [r7, #8]
 8009bd8:	415b      	adcs	r3, r3
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009be0:	4641      	mov	r1, r8
 8009be2:	1851      	adds	r1, r2, r1
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	4649      	mov	r1, r9
 8009be8:	414b      	adcs	r3, r1
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009bf8:	4659      	mov	r1, fp
 8009bfa:	00cb      	lsls	r3, r1, #3
 8009bfc:	4651      	mov	r1, sl
 8009bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c02:	4651      	mov	r1, sl
 8009c04:	00ca      	lsls	r2, r1, #3
 8009c06:	4610      	mov	r0, r2
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	189b      	adds	r3, r3, r2
 8009c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c12:	464b      	mov	r3, r9
 8009c14:	460a      	mov	r2, r1
 8009c16:	eb42 0303 	adc.w	r3, r2, r3
 8009c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	663b      	str	r3, [r7, #96]	; 0x60
 8009c26:	667a      	str	r2, [r7, #100]	; 0x64
 8009c28:	f04f 0200 	mov.w	r2, #0
 8009c2c:	f04f 0300 	mov.w	r3, #0
 8009c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009c34:	4649      	mov	r1, r9
 8009c36:	008b      	lsls	r3, r1, #2
 8009c38:	4641      	mov	r1, r8
 8009c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c3e:	4641      	mov	r1, r8
 8009c40:	008a      	lsls	r2, r1, #2
 8009c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009c46:	f7f6 fae3 	bl	8000210 <__aeabi_uldivmod>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <UART_SetConfig+0x4e4>)
 8009c50:	fba3 1302 	umull	r1, r3, r3, r2
 8009c54:	095b      	lsrs	r3, r3, #5
 8009c56:	2164      	movs	r1, #100	; 0x64
 8009c58:	fb01 f303 	mul.w	r3, r1, r3
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	011b      	lsls	r3, r3, #4
 8009c60:	3332      	adds	r3, #50	; 0x32
 8009c62:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <UART_SetConfig+0x4e4>)
 8009c64:	fba2 2303 	umull	r2, r3, r2, r3
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	f003 020f 	and.w	r2, r3, #15
 8009c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4422      	add	r2, r4
 8009c76:	609a      	str	r2, [r3, #8]
}
 8009c78:	bf00      	nop
 8009c7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c84:	51eb851f 	.word	0x51eb851f

08009c88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d123      	bne.n	8009ce2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009ca2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	6851      	ldr	r1, [r2, #4]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	6892      	ldr	r2, [r2, #8]
 8009cae:	4311      	orrs	r1, r2
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	68d2      	ldr	r2, [r2, #12]
 8009cb4:	4311      	orrs	r1, r2
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	6912      	ldr	r2, [r2, #16]
 8009cba:	4311      	orrs	r1, r2
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	6952      	ldr	r2, [r2, #20]
 8009cc0:	4311      	orrs	r1, r2
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	6992      	ldr	r2, [r2, #24]
 8009cc6:	4311      	orrs	r1, r2
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	69d2      	ldr	r2, [r2, #28]
 8009ccc:	4311      	orrs	r1, r2
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	6a12      	ldr	r2, [r2, #32]
 8009cd2:	4311      	orrs	r1, r2
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	e028      	b.n	8009d34 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	69d9      	ldr	r1, [r3, #28]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	4319      	orrs	r1, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	430b      	orrs	r3, r1
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009d08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	6851      	ldr	r1, [r2, #4]
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	6892      	ldr	r2, [r2, #8]
 8009d14:	4311      	orrs	r1, r2
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	68d2      	ldr	r2, [r2, #12]
 8009d1a:	4311      	orrs	r1, r2
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	6912      	ldr	r2, [r2, #16]
 8009d20:	4311      	orrs	r1, r2
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	6952      	ldr	r2, [r2, #20]
 8009d26:	4311      	orrs	r1, r2
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	6992      	ldr	r2, [r2, #24]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	431a      	orrs	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d128      	bne.n	8009da6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	1e59      	subs	r1, r3, #1
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	4319      	orrs	r1, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	4319      	orrs	r1, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	031b      	lsls	r3, r3, #12
 8009d7e:	4319      	orrs	r1, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	4319      	orrs	r1, r3
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	051b      	lsls	r3, r3, #20
 8009d92:	4319      	orrs	r1, r3
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	061b      	lsls	r3, r3, #24
 8009d9c:	430b      	orrs	r3, r1
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	609a      	str	r2, [r3, #8]
 8009da4:	e02f      	b.n	8009e06 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	68d2      	ldr	r2, [r2, #12]
 8009db6:	3a01      	subs	r2, #1
 8009db8:	0311      	lsls	r1, r2, #12
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	6952      	ldr	r2, [r2, #20]
 8009dbe:	3a01      	subs	r2, #1
 8009dc0:	0512      	lsls	r2, r2, #20
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	1e59      	subs	r1, r3, #1
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	4319      	orrs	r1, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	021b      	lsls	r3, r3, #8
 8009dea:	4319      	orrs	r1, r3
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	041b      	lsls	r3, r3, #16
 8009df4:	4319      	orrs	r1, r3
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	061b      	lsls	r3, r3, #24
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	431a      	orrs	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009e14:	b084      	sub	sp, #16
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	f107 001c 	add.w	r0, r7, #28
 8009e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009e2a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009e2e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009e32:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009e36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009e3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009e3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009e4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	431a      	orrs	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	b004      	add	sp, #16
 8009e68:	4770      	bx	lr

08009e6a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2203      	movs	r2, #3
 8009e90:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0303 	and.w	r3, r3, #3
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009eda:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009ee0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009ee6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009ef6:	f023 030f 	bic.w	r3, r3, #15
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	431a      	orrs	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	b2db      	uxtb	r3, r3
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3314      	adds	r3, #20
 8009f38:	461a      	mov	r2, r3
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
}  
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f76:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009f7c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009f82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0

}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009fb6:	2310      	movs	r3, #16
 8009fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fba:	2340      	movs	r3, #64	; 0x40
 8009fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fc8:	f107 0308 	add.w	r3, r7, #8
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7ff ff74 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fd8:	2110      	movs	r1, #16
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fa18 	bl	800a410 <SDMMC_GetCmdResp1>
 8009fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3720      	adds	r7, #32
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009ffa:	2311      	movs	r3, #17
 8009ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ffe:	2340      	movs	r3, #64	; 0x40
 800a000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a00a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a00c:	f107 0308 	add.w	r3, r7, #8
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff ff52 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a018:	f241 3288 	movw	r2, #5000	; 0x1388
 800a01c:	2111      	movs	r1, #17
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f9f6 	bl	800a410 <SDMMC_GetCmdResp1>
 800a024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a026:	69fb      	ldr	r3, [r7, #28]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3720      	adds	r7, #32
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a03e:	2312      	movs	r3, #18
 800a040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a042:	2340      	movs	r3, #64	; 0x40
 800a044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a046:	2300      	movs	r3, #0
 800a048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a04a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a04e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a050:	f107 0308 	add.w	r3, r7, #8
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff ff30 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a05c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a060:	2112      	movs	r1, #18
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f9d4 	bl	800a410 <SDMMC_GetCmdResp1>
 800a068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a06a:	69fb      	ldr	r3, [r7, #28]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3720      	adds	r7, #32
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a082:	2318      	movs	r3, #24
 800a084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a08e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a094:	f107 0308 	add.w	r3, r7, #8
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7ff ff0e 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a4:	2118      	movs	r1, #24
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f9b2 	bl	800a410 <SDMMC_GetCmdResp1>
 800a0ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ae:	69fb      	ldr	r3, [r7, #28]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3720      	adds	r7, #32
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a0c6:	2319      	movs	r3, #25
 800a0c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0ca:	2340      	movs	r3, #64	; 0x40
 800a0cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0d8:	f107 0308 	add.w	r3, r7, #8
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7ff feec 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e8:	2119      	movs	r1, #25
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f990 	bl	800a410 <SDMMC_GetCmdResp1>
 800a0f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f2:	69fb      	ldr	r3, [r7, #28]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3720      	adds	r7, #32
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b088      	sub	sp, #32
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a108:	230c      	movs	r3, #12
 800a10a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a118:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff fecb 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a126:	4a05      	ldr	r2, [pc, #20]	; (800a13c <SDMMC_CmdStopTransfer+0x40>)
 800a128:	210c      	movs	r1, #12
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f970 	bl	800a410 <SDMMC_GetCmdResp1>
 800a130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a132:	69fb      	ldr	r3, [r7, #28]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3720      	adds	r7, #32
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	05f5e100 	.word	0x05f5e100

0800a140 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08a      	sub	sp, #40	; 0x28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a150:	2307      	movs	r3, #7
 800a152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a154:	2340      	movs	r3, #64	; 0x40
 800a156:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a158:	2300      	movs	r3, #0
 800a15a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a15c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a160:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a162:	f107 0310 	add.w	r3, r7, #16
 800a166:	4619      	mov	r1, r3
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f7ff fea7 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a16e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a172:	2107      	movs	r1, #7
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f94b 	bl	800a410 <SDMMC_GetCmdResp1>
 800a17a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3728      	adds	r7, #40	; 0x28
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b088      	sub	sp, #32
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a196:	2300      	movs	r3, #0
 800a198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1a4:	f107 0308 	add.w	r3, r7, #8
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7ff fe86 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fb65 	bl	800a880 <SDMMC_GetCmdError>
 800a1b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3720      	adds	r7, #32
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b088      	sub	sp, #32
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a1ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a1ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1d4:	2340      	movs	r3, #64	; 0x40
 800a1d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1e2:	f107 0308 	add.w	r3, r7, #8
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff fe67 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 faf8 	bl	800a7e4 <SDMMC_GetCmdResp7>
 800a1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3720      	adds	r7, #32
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a20e:	2337      	movs	r3, #55	; 0x37
 800a210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a212:	2340      	movs	r3, #64	; 0x40
 800a214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a216:	2300      	movs	r3, #0
 800a218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a21e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a220:	f107 0308 	add.w	r3, r7, #8
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff fe48 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a230:	2137      	movs	r1, #55	; 0x37
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f8ec 	bl	800a410 <SDMMC_GetCmdResp1>
 800a238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a23a:	69fb      	ldr	r3, [r7, #28]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3720      	adds	r7, #32
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a25a:	2329      	movs	r3, #41	; 0x29
 800a25c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a25e:	2340      	movs	r3, #64	; 0x40
 800a260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a26a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a26c:	f107 0308 	add.w	r3, r7, #8
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff fe22 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f9ff 	bl	800a67c <SDMMC_GetCmdResp3>
 800a27e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a280:	69fb      	ldr	r3, [r7, #28]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3720      	adds	r7, #32
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b088      	sub	sp, #32
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a298:	2306      	movs	r3, #6
 800a29a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a29c:	2340      	movs	r3, #64	; 0x40
 800a29e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2aa:	f107 0308 	add.w	r3, r7, #8
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fe03 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ba:	2106      	movs	r1, #6
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f8a7 	bl	800a410 <SDMMC_GetCmdResp1>
 800a2c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2c4:	69fb      	ldr	r3, [r7, #28]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3720      	adds	r7, #32
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b088      	sub	sp, #32
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a2da:	2333      	movs	r3, #51	; 0x33
 800a2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2de:	2340      	movs	r3, #64	; 0x40
 800a2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff fde2 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2fc:	2133      	movs	r1, #51	; 0x33
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f886 	bl	800a410 <SDMMC_GetCmdResp1>
 800a304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a306:	69fb      	ldr	r3, [r7, #28]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3720      	adds	r7, #32
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a31c:	2302      	movs	r3, #2
 800a31e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a320:	23c0      	movs	r3, #192	; 0xc0
 800a322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a32c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a32e:	f107 0308 	add.w	r3, r7, #8
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff fdc1 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f956 	bl	800a5ec <SDMMC_GetCmdResp2>
 800a340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a342:	69fb      	ldr	r3, [r7, #28]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a35a:	2309      	movs	r3, #9
 800a35c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a35e:	23c0      	movs	r3, #192	; 0xc0
 800a360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a36a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a36c:	f107 0308 	add.w	r3, r7, #8
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff fda2 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f937 	bl	800a5ec <SDMMC_GetCmdResp2>
 800a37e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a380:	69fb      	ldr	r3, [r7, #28]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3720      	adds	r7, #32
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b088      	sub	sp, #32
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a398:	2303      	movs	r3, #3
 800a39a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a39c:	2340      	movs	r3, #64	; 0x40
 800a39e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3aa:	f107 0308 	add.w	r3, r7, #8
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff fd83 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	2103      	movs	r1, #3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f99c 	bl	800a6f8 <SDMMC_GetCmdResp6>
 800a3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3c2:	69fb      	ldr	r3, [r7, #28]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3720      	adds	r7, #32
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a3da:	230d      	movs	r3, #13
 800a3dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3de:	2340      	movs	r3, #64	; 0x40
 800a3e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3ec:	f107 0308 	add.w	r3, r7, #8
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff fd62 	bl	8009ebc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3fc:	210d      	movs	r1, #13
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f806 	bl	800a410 <SDMMC_GetCmdResp1>
 800a404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a406:	69fb      	ldr	r3, [r7, #28]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3720      	adds	r7, #32
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	460b      	mov	r3, r1
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a41e:	4b70      	ldr	r3, [pc, #448]	; (800a5e0 <SDMMC_GetCmdResp1+0x1d0>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a70      	ldr	r2, [pc, #448]	; (800a5e4 <SDMMC_GetCmdResp1+0x1d4>)
 800a424:	fba2 2303 	umull	r2, r3, r2, r3
 800a428:	0a5a      	lsrs	r2, r3, #9
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	fb02 f303 	mul.w	r3, r2, r3
 800a430:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	1e5a      	subs	r2, r3, #1
 800a436:	61fa      	str	r2, [r7, #28]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d102      	bne.n	800a442 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a43c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a440:	e0c9      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a446:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0ef      	beq.n	800a432 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1ea      	bne.n	800a432 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2204      	movs	r2, #4
 800a46c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a46e:	2304      	movs	r3, #4
 800a470:	e0b1      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d004      	beq.n	800a488 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a484:	2301      	movs	r3, #1
 800a486:	e0a6      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	22c5      	movs	r2, #197	; 0xc5
 800a48c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff fd3e 	bl	8009f10 <SDIO_GetCommandResponse>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d001      	beq.n	800a4a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e099      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7ff fd40 	bl	8009f2a <SDIO_GetResponse>
 800a4aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	4b4e      	ldr	r3, [pc, #312]	; (800a5e8 <SDMMC_GetCmdResp1+0x1d8>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	e08d      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	da02      	bge.n	800a4c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a4c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4c4:	e087      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a4d0:	2340      	movs	r3, #64	; 0x40
 800a4d2:	e080      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a4de:	2380      	movs	r3, #128	; 0x80
 800a4e0:	e079      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a4ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4f0:	e071      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a4fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a500:	e069      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a50c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a510:	e061      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a51c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a520:	e059      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a52c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a530:	e051      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a53c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a540:	e049      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a54c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a550:	e041      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a55c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a560:	e039      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a56c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a570:	e031      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a57c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a580:	e029      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a58c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a590:	e021      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a59c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a5a0:	e019      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a5ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5b0:	e011      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a5bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a5c0:	e009      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f003 0308 	and.w	r3, r3, #8
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a5cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a5d0:	e001      	b.n	800a5d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3720      	adds	r7, #32
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	20000000 	.word	0x20000000
 800a5e4:	10624dd3 	.word	0x10624dd3
 800a5e8:	fdffe008 	.word	0xfdffe008

0800a5ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5f4:	4b1f      	ldr	r3, [pc, #124]	; (800a674 <SDMMC_GetCmdResp2+0x88>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a1f      	ldr	r2, [pc, #124]	; (800a678 <SDMMC_GetCmdResp2+0x8c>)
 800a5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fe:	0a5b      	lsrs	r3, r3, #9
 800a600:	f241 3288 	movw	r2, #5000	; 0x1388
 800a604:	fb02 f303 	mul.w	r3, r2, r3
 800a608:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	1e5a      	subs	r2, r3, #1
 800a60e:	60fa      	str	r2, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d102      	bne.n	800a61a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a618:	e026      	b.n	800a668 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a61e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0ef      	beq.n	800a60a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1ea      	bne.n	800a60a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d004      	beq.n	800a64a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2204      	movs	r2, #4
 800a644:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a646:	2304      	movs	r3, #4
 800a648:	e00e      	b.n	800a668 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b00      	cmp	r3, #0
 800a654:	d004      	beq.n	800a660 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e003      	b.n	800a668 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	22c5      	movs	r2, #197	; 0xc5
 800a664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	20000000 	.word	0x20000000
 800a678:	10624dd3 	.word	0x10624dd3

0800a67c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a684:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <SDMMC_GetCmdResp3+0x74>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <SDMMC_GetCmdResp3+0x78>)
 800a68a:	fba2 2303 	umull	r2, r3, r2, r3
 800a68e:	0a5b      	lsrs	r3, r3, #9
 800a690:	f241 3288 	movw	r2, #5000	; 0x1388
 800a694:	fb02 f303 	mul.w	r3, r2, r3
 800a698:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	1e5a      	subs	r2, r3, #1
 800a69e:	60fa      	str	r2, [r7, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6a8:	e01b      	b.n	800a6e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0ef      	beq.n	800a69a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1ea      	bne.n	800a69a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d004      	beq.n	800a6da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2204      	movs	r2, #4
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6d6:	2304      	movs	r3, #4
 800a6d8:	e003      	b.n	800a6e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	22c5      	movs	r2, #197	; 0xc5
 800a6de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	20000000 	.word	0x20000000
 800a6f4:	10624dd3 	.word	0x10624dd3

0800a6f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b088      	sub	sp, #32
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	460b      	mov	r3, r1
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a706:	4b35      	ldr	r3, [pc, #212]	; (800a7dc <SDMMC_GetCmdResp6+0xe4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a35      	ldr	r2, [pc, #212]	; (800a7e0 <SDMMC_GetCmdResp6+0xe8>)
 800a70c:	fba2 2303 	umull	r2, r3, r2, r3
 800a710:	0a5b      	lsrs	r3, r3, #9
 800a712:	f241 3288 	movw	r2, #5000	; 0x1388
 800a716:	fb02 f303 	mul.w	r3, r2, r3
 800a71a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	1e5a      	subs	r2, r3, #1
 800a720:	61fa      	str	r2, [r7, #28]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d102      	bne.n	800a72c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a726:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a72a:	e052      	b.n	800a7d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a730:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0ef      	beq.n	800a71c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1ea      	bne.n	800a71c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d004      	beq.n	800a75c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2204      	movs	r2, #4
 800a756:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a758:	2304      	movs	r3, #4
 800a75a:	e03a      	b.n	800a7d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d004      	beq.n	800a772 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2201      	movs	r2, #1
 800a76c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a76e:	2301      	movs	r3, #1
 800a770:	e02f      	b.n	800a7d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7ff fbcc 	bl	8009f10 <SDIO_GetCommandResponse>
 800a778:	4603      	mov	r3, r0
 800a77a:	461a      	mov	r2, r3
 800a77c:	7afb      	ldrb	r3, [r7, #11]
 800a77e:	4293      	cmp	r3, r2
 800a780:	d001      	beq.n	800a786 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a782:	2301      	movs	r3, #1
 800a784:	e025      	b.n	800a7d2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	22c5      	movs	r2, #197	; 0xc5
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a78c:	2100      	movs	r1, #0
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f7ff fbcb 	bl	8009f2a <SDIO_GetResponse>
 800a794:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d106      	bne.n	800a7ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	0c1b      	lsrs	r3, r3, #16
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e011      	b.n	800a7d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a7b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7bc:	e009      	b.n	800a7d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a7c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7cc:	e001      	b.n	800a7d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a7ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3720      	adds	r7, #32
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000000 	.word	0x20000000
 800a7e0:	10624dd3 	.word	0x10624dd3

0800a7e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7ec:	4b22      	ldr	r3, [pc, #136]	; (800a878 <SDMMC_GetCmdResp7+0x94>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a22      	ldr	r2, [pc, #136]	; (800a87c <SDMMC_GetCmdResp7+0x98>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	0a5b      	lsrs	r3, r3, #9
 800a7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7fc:	fb02 f303 	mul.w	r3, r2, r3
 800a800:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	1e5a      	subs	r2, r3, #1
 800a806:	60fa      	str	r2, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a80c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a810:	e02c      	b.n	800a86c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a816:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d0ef      	beq.n	800a802 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1ea      	bne.n	800a802 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a830:	f003 0304 	and.w	r3, r3, #4
 800a834:	2b00      	cmp	r3, #0
 800a836:	d004      	beq.n	800a842 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2204      	movs	r2, #4
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a83e:	2304      	movs	r3, #4
 800a840:	e014      	b.n	800a86c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d004      	beq.n	800a858 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a854:	2301      	movs	r3, #1
 800a856:	e009      	b.n	800a86c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2240      	movs	r2, #64	; 0x40
 800a868:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a86a:	2300      	movs	r3, #0
  
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	20000000 	.word	0x20000000
 800a87c:	10624dd3 	.word	0x10624dd3

0800a880 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a888:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <SDMMC_GetCmdError+0x50>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a11      	ldr	r2, [pc, #68]	; (800a8d4 <SDMMC_GetCmdError+0x54>)
 800a88e:	fba2 2303 	umull	r2, r3, r2, r3
 800a892:	0a5b      	lsrs	r3, r3, #9
 800a894:	f241 3288 	movw	r2, #5000	; 0x1388
 800a898:	fb02 f303 	mul.w	r3, r2, r3
 800a89c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	1e5a      	subs	r2, r3, #1
 800a8a2:	60fa      	str	r2, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d102      	bne.n	800a8ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8ac:	e009      	b.n	800a8c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0f1      	beq.n	800a89e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	22c5      	movs	r2, #197	; 0xc5
 800a8be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	20000000 	.word	0x20000000
 800a8d4:	10624dd3 	.word	0x10624dd3

0800a8d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f043 0201 	orr.w	r2, r3, #1
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f023 0201 	bic.w	r2, r3, #1
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3301      	adds	r3, #1
 800a92e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a936:	d901      	bls.n	800a93c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e01b      	b.n	800a974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	daf2      	bge.n	800a92a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	019b      	lsls	r3, r3, #6
 800a94c:	f043 0220 	orr.w	r2, r3, #32
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3301      	adds	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a960:	d901      	bls.n	800a966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e006      	b.n	800a974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f003 0320 	and.w	r3, r3, #32
 800a96e:	2b20      	cmp	r3, #32
 800a970:	d0f0      	beq.n	800a954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a988:	2300      	movs	r3, #0
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	3301      	adds	r3, #1
 800a990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a998:	d901      	bls.n	800a99e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e018      	b.n	800a9d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	daf2      	bge.n	800a98c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2210      	movs	r2, #16
 800a9ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a9bc:	d901      	bls.n	800a9c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e006      	b.n	800a9d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	f003 0310 	and.w	r3, r3, #16
 800a9ca:	2b10      	cmp	r3, #16
 800a9cc:	d0f0      	beq.n	800a9b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b08b      	sub	sp, #44	; 0x2c
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	089b      	lsrs	r3, r3, #2
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9fa:	88fb      	ldrh	r3, [r7, #6]
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa02:	2300      	movs	r3, #0
 800aa04:	623b      	str	r3, [r7, #32]
 800aa06:	e014      	b.n	800aa32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	3301      	adds	r3, #1
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	3301      	adds	r3, #1
 800aa24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	3301      	adds	r3, #1
 800aa2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	623b      	str	r3, [r7, #32]
 800aa32:	6a3a      	ldr	r2, [r7, #32]
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d3e6      	bcc.n	800aa08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa3a:	8bfb      	ldrh	r3, [r7, #30]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d01e      	beq.n	800aa7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f107 0310 	add.w	r3, r7, #16
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	701a      	strb	r2, [r3, #0]
      i++;
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	3301      	adds	r3, #1
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aa72:	8bfb      	ldrh	r3, [r7, #30]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa78:	8bfb      	ldrh	r3, [r7, #30]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1ea      	bne.n	800aa54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	372c      	adds	r7, #44	; 0x2c
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800aab2:	b480      	push	{r7}
 800aab4:	b085      	sub	sp, #20
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	460b      	mov	r3, r1
 800aabc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800aad2:	78fb      	ldrb	r3, [r7, #3]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	4013      	ands	r3, r2
 800aae4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aae6:	68bb      	ldr	r3, [r7, #8]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	f003 0301 	and.w	r3, r3, #1
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab2e:	f023 0303 	bic.w	r3, r3, #3
 800ab32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ab4c:	78fb      	ldrb	r3, [r7, #3]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d107      	bne.n	800ab62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab58:	461a      	mov	r2, r3
 800ab5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ab5e:	6053      	str	r3, [r2, #4]
 800ab60:	e00c      	b.n	800ab7c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800ab62:	78fb      	ldrb	r3, [r7, #3]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d107      	bne.n	800ab78 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f241 7370 	movw	r3, #6000	; 0x1770
 800ab74:	6053      	str	r3, [r2, #4]
 800ab76:	e001      	b.n	800ab7c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e000      	b.n	800ab7e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	b29b      	uxth	r3, r3
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800abac:	b480      	push	{r7}
 800abae:	b089      	sub	sp, #36	; 0x24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	0c9b      	lsrs	r3, r3, #18
 800abd4:	f003 0303 	and.w	r3, r3, #3
 800abd8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	0fdb      	lsrs	r3, r3, #31
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	015a      	lsls	r2, r3, #5
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	4413      	add	r3, r2
 800abf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	0fdb      	lsrs	r3, r3, #31
 800ac00:	f003 0301 	and.w	r3, r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b20      	cmp	r3, #32
 800ac10:	d10d      	bne.n	800ac2e <USB_HC_Halt+0x82>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10a      	bne.n	800ac2e <USB_HC_Halt+0x82>
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d002      	beq.n	800ac2a <USB_HC_Halt+0x7e>
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d101      	bne.n	800ac2e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e0d8      	b.n	800ade0 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <USB_HC_Halt+0x8e>
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d173      	bne.n	800ad22 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	69ba      	ldr	r2, [r7, #24]
 800ac4a:	0151      	lsls	r1, r2, #5
 800ac4c:	69fa      	ldr	r2, [r7, #28]
 800ac4e:	440a      	add	r2, r1
 800ac50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac58:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d14a      	bne.n	800acfc <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d133      	bne.n	800acda <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	0151      	lsls	r1, r2, #5
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	440a      	add	r2, r1
 800ac88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac90:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	015a      	lsls	r2, r3, #5
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	4413      	add	r3, r2
 800ac9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	0151      	lsls	r1, r2, #5
 800aca4:	69fa      	ldr	r2, [r7, #28]
 800aca6:	440a      	add	r2, r1
 800aca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acb0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	3301      	adds	r3, #1
 800acb6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acbe:	d82e      	bhi.n	800ad1e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	015a      	lsls	r2, r3, #5
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	4413      	add	r3, r2
 800acc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acd6:	d0ec      	beq.n	800acb2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800acd8:	e081      	b.n	800adde <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	015a      	lsls	r2, r3, #5
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	4413      	add	r3, r2
 800ace2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	0151      	lsls	r1, r2, #5
 800acec:	69fa      	ldr	r2, [r7, #28]
 800acee:	440a      	add	r2, r1
 800acf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acf8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800acfa:	e070      	b.n	800adde <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	0151      	lsls	r1, r2, #5
 800ad0e:	69fa      	ldr	r2, [r7, #28]
 800ad10:	440a      	add	r2, r1
 800ad12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad1a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad1c:	e05f      	b.n	800adde <USB_HC_Halt+0x232>
            break;
 800ad1e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad20:	e05d      	b.n	800adde <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	69ba      	ldr	r2, [r7, #24]
 800ad32:	0151      	lsls	r1, r2, #5
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	440a      	add	r2, r1
 800ad38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad40:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d133      	bne.n	800adba <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	0151      	lsls	r1, r2, #5
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	440a      	add	r2, r1
 800ad68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad90:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	3301      	adds	r3, #1
 800ad96:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad9e:	d81d      	bhi.n	800addc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adb6:	d0ec      	beq.n	800ad92 <USB_HC_Halt+0x1e6>
 800adb8:	e011      	b.n	800adde <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	0151      	lsls	r1, r2, #5
 800adcc:	69fa      	ldr	r2, [r7, #28]
 800adce:	440a      	add	r2, r1
 800add0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800add4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	e000      	b.n	800adde <USB_HC_Halt+0x232>
          break;
 800addc:	bf00      	nop
    }
  }

  return HAL_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3724      	adds	r7, #36	; 0x24
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800adfc:	2300      	movs	r3, #0
 800adfe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff fd7a 	bl	800a8fa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae06:	2110      	movs	r1, #16
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff fd87 	bl	800a91c <USB_FlushTxFifo>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff fdb1 	bl	800a980 <USB_FlushRxFifo>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61bb      	str	r3, [r7, #24]
 800ae2c:	e01f      	b.n	800ae6e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	015a      	lsls	r2, r3, #5
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	4413      	add	r3, r2
 800ae36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	015a      	lsls	r2, r3, #5
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae62:	461a      	mov	r2, r3
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	61bb      	str	r3, [r7, #24]
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b0f      	cmp	r3, #15
 800ae72:	d9dc      	bls.n	800ae2e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ae74:	2300      	movs	r3, #0
 800ae76:	61bb      	str	r3, [r7, #24]
 800ae78:	e034      	b.n	800aee4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	015a      	lsls	r2, r3, #5
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	4413      	add	r3, r2
 800ae82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aea0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeae:	461a      	mov	r2, r3
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aec0:	d80c      	bhi.n	800aedc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	015a      	lsls	r2, r3, #5
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aed8:	d0ec      	beq.n	800aeb4 <USB_StopHost+0xc8>
 800aeda:	e000      	b.n	800aede <USB_StopHost+0xf2>
        break;
 800aedc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	3301      	adds	r3, #1
 800aee2:	61bb      	str	r3, [r7, #24]
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	2b0f      	cmp	r3, #15
 800aee8:	d9c7      	bls.n	800ae7a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aef0:	461a      	mov	r2, r3
 800aef2:	f04f 33ff 	mov.w	r3, #4294967295
 800aef6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f04f 32ff 	mov.w	r2, #4294967295
 800aefe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fce9 	bl	800a8d8 <USB_EnableGlobalInt>

  return ret;
 800af06:	7ffb      	ldrb	r3, [r7, #31]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3720      	adds	r7, #32
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af14:	4904      	ldr	r1, [pc, #16]	; (800af28 <MX_FATFS_Init+0x18>)
 800af16:	4805      	ldr	r0, [pc, #20]	; (800af2c <MX_FATFS_Init+0x1c>)
 800af18:	f000 fb72 	bl	800b600 <FATFS_LinkDriver>
 800af1c:	4603      	mov	r3, r0
 800af1e:	461a      	mov	r2, r3
 800af20:	4b03      	ldr	r3, [pc, #12]	; (800af30 <MX_FATFS_Init+0x20>)
 800af22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af24:	bf00      	nop
 800af26:	bd80      	pop	{r7, pc}
 800af28:	200004f4 	.word	0x200004f4
 800af2c:	0800dcdc 	.word	0x0800dcdc
 800af30:	200004f0 	.word	0x200004f0

0800af34 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af3e:	f000 f87b 	bl	800b038 <BSP_SD_IsDetected>
 800af42:	4603      	mov	r3, r0
 800af44:	2b01      	cmp	r3, #1
 800af46:	d001      	beq.n	800af4c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e012      	b.n	800af72 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800af4c:	480b      	ldr	r0, [pc, #44]	; (800af7c <BSP_SD_Init+0x48>)
 800af4e:	f7fc fe9b 	bl	8007c88 <HAL_SD_Init>
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800af5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af60:	4806      	ldr	r0, [pc, #24]	; (800af7c <BSP_SD_Init+0x48>)
 800af62:	f7fd fadd 	bl	8008520 <HAL_SD_ConfigWideBusOperation>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af70:	79fb      	ldrb	r3, [r7, #7]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20000304 	.word	0x20000304

0800af80 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	68f9      	ldr	r1, [r7, #12]
 800af96:	4806      	ldr	r0, [pc, #24]	; (800afb0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800af98:	f7fc ff26 	bl	8007de8 <HAL_SD_ReadBlocks_DMA>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000304 	.word	0x20000304

0800afb4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	68f9      	ldr	r1, [r7, #12]
 800afca:	4806      	ldr	r0, [pc, #24]	; (800afe4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800afcc:	f7fc ffec 	bl	8007fa8 <HAL_SD_WriteBlocks_DMA>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afda:	7dfb      	ldrb	r3, [r7, #23]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20000304 	.word	0x20000304

0800afe8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <BSP_SD_GetCardState+0x1c>)
 800afee:	f7fd fb31 	bl	8008654 <HAL_SD_GetCardState>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	bf14      	ite	ne
 800aff8:	2301      	movne	r3, #1
 800affa:	2300      	moveq	r3, #0
 800affc:	b2db      	uxtb	r3, r3
}
 800affe:	4618      	mov	r0, r3
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	20000304 	.word	0x20000304

0800b008 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	4803      	ldr	r0, [pc, #12]	; (800b020 <BSP_SD_GetCardInfo+0x18>)
 800b014:	f7fd fa58 	bl	80084c8 <HAL_SD_GetCardInfo>
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20000304 	.word	0x20000304

0800b024 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b02c:	f000 f9b2 	bl	800b394 <BSP_SD_ReadCpltCallback>
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b03e:	2301      	movs	r3, #1
 800b040:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b042:	f000 f80b 	bl	800b05c <BSP_PlatformIsDetected>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b04c:	2300      	movs	r3, #0
 800b04e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	b2db      	uxtb	r3, r3
}
 800b054:	4618      	mov	r0, r3
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b062:	2301      	movs	r3, #1
 800b064:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b066:	2104      	movs	r1, #4
 800b068:	4806      	ldr	r0, [pc, #24]	; (800b084 <BSP_PlatformIsDetected+0x28>)
 800b06a:	f7f9 f91f 	bl	80042ac <HAL_GPIO_ReadPin>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b074:	2300      	movs	r3, #0
 800b076:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b078:	79fb      	ldrb	r3, [r7, #7]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	40021800 	.word	0x40021800

0800b088 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b090:	f000 fae3 	bl	800b65a <osKernelSysTick>
 800b094:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b096:	e006      	b.n	800b0a6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b098:	f7ff ffa6 	bl	800afe8 <BSP_SD_GetCardState>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e009      	b.n	800b0ba <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b0a6:	f000 fad8 	bl	800b65a <osKernelSysTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d8f0      	bhi.n	800b098 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b0b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <SD_CheckStatus+0x38>)
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0d4:	f7ff ff88 	bl	800afe8 <BSP_SD_GetCardState>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d107      	bne.n	800b0ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b0de:	4b07      	ldr	r3, [pc, #28]	; (800b0fc <SD_CheckStatus+0x38>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	f023 0301 	bic.w	r3, r3, #1
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <SD_CheckStatus+0x38>)
 800b0ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b0ee:	4b03      	ldr	r3, [pc, #12]	; (800b0fc <SD_CheckStatus+0x38>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	b2db      	uxtb	r3, r3
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	20000009 	.word	0x20000009

0800b100 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b100:	b590      	push	{r4, r7, lr}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b10a:	4b20      	ldr	r3, [pc, #128]	; (800b18c <SD_initialize+0x8c>)
 800b10c:	2201      	movs	r2, #1
 800b10e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b110:	f000 fa97 	bl	800b642 <osKernelRunning>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d030      	beq.n	800b17c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b11a:	f7ff ff0b 	bl	800af34 <BSP_SD_Init>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d107      	bne.n	800b134 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b124:	79fb      	ldrb	r3, [r7, #7]
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff ffcc 	bl	800b0c4 <SD_CheckStatus>
 800b12c:	4603      	mov	r3, r0
 800b12e:	461a      	mov	r2, r3
 800b130:	4b16      	ldr	r3, [pc, #88]	; (800b18c <SD_initialize+0x8c>)
 800b132:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b134:	4b15      	ldr	r3, [pc, #84]	; (800b18c <SD_initialize+0x8c>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d01e      	beq.n	800b17c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b13e:	4b14      	ldr	r3, [pc, #80]	; (800b190 <SD_initialize+0x90>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10e      	bne.n	800b164 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b146:	4b13      	ldr	r3, [pc, #76]	; (800b194 <SD_initialize+0x94>)
 800b148:	f107 0408 	add.w	r4, r7, #8
 800b14c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b14e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b152:	f107 0308 	add.w	r3, r7, #8
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fa8e 	bl	800b67a <osMessageCreate>
 800b15e:	4603      	mov	r3, r0
 800b160:	4a0b      	ldr	r2, [pc, #44]	; (800b190 <SD_initialize+0x90>)
 800b162:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b164:	4b0a      	ldr	r3, [pc, #40]	; (800b190 <SD_initialize+0x90>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d107      	bne.n	800b17c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b16c:	4b07      	ldr	r3, [pc, #28]	; (800b18c <SD_initialize+0x8c>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	b2db      	uxtb	r3, r3
 800b172:	f043 0301 	orr.w	r3, r3, #1
 800b176:	b2da      	uxtb	r2, r3
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <SD_initialize+0x8c>)
 800b17a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b17c:	4b03      	ldr	r3, [pc, #12]	; (800b18c <SD_initialize+0x8c>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	b2db      	uxtb	r3, r3
}
 800b182:	4618      	mov	r0, r3
 800b184:	371c      	adds	r7, #28
 800b186:	46bd      	mov	sp, r7
 800b188:	bd90      	pop	{r4, r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20000009 	.word	0x20000009
 800b190:	200004f8 	.word	0x200004f8
 800b194:	0800dcb4 	.word	0x0800dcb4

0800b198 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff ff8d 	bl	800b0c4 <SD_CheckStatus>
 800b1aa:	4603      	mov	r3, r0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08a      	sub	sp, #40	; 0x28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60b9      	str	r1, [r7, #8]
 800b1bc:	607a      	str	r2, [r7, #4]
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b1ca:	f247 5030 	movw	r0, #30000	; 0x7530
 800b1ce:	f7ff ff5b 	bl	800b088 <SD_CheckStatusWithTimeout>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da02      	bge.n	800b1de <SD_read+0x2a>
  {
    return res;
 800b1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1dc:	e032      	b.n	800b244 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	6879      	ldr	r1, [r7, #4]
 800b1e2:	68b8      	ldr	r0, [r7, #8]
 800b1e4:	f7ff fecc 	bl	800af80 <BSP_SD_ReadBlocks_DMA>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b1ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d124      	bne.n	800b240 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b1f6:	4b15      	ldr	r3, [pc, #84]	; (800b24c <SD_read+0x98>)
 800b1f8:	6819      	ldr	r1, [r3, #0]
 800b1fa:	f107 0314 	add.w	r3, r7, #20
 800b1fe:	f247 5230 	movw	r2, #30000	; 0x7530
 800b202:	4618      	mov	r0, r3
 800b204:	f000 faa2 	bl	800b74c <osMessageGet>

    if (event.status == osEventMessage)
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	2b10      	cmp	r3, #16
 800b20c:	d118      	bne.n	800b240 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d115      	bne.n	800b240 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b214:	f000 fa21 	bl	800b65a <osKernelSysTick>
 800b218:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b21a:	e008      	b.n	800b22e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b21c:	f7ff fee4 	bl	800afe8 <BSP_SD_GetCardState>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d103      	bne.n	800b22e <SD_read+0x7a>
              {
                res = RES_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b22c:	e008      	b.n	800b240 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b22e:	f000 fa14 	bl	800b65a <osKernelSysTick>
 800b232:	4602      	mov	r2, r0
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	f247 522f 	movw	r2, #29999	; 0x752f
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d9ed      	bls.n	800b21c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b244:	4618      	mov	r0, r3
 800b246:	3728      	adds	r7, #40	; 0x28
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	200004f8 	.word	0x200004f8

0800b250 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08a      	sub	sp, #40	; 0x28
 800b254:	af00      	add	r7, sp, #0
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	607a      	str	r2, [r7, #4]
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b266:	f247 5030 	movw	r0, #30000	; 0x7530
 800b26a:	f7ff ff0d 	bl	800b088 <SD_CheckStatusWithTimeout>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	da02      	bge.n	800b27a <SD_write+0x2a>
  {
    return res;
 800b274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b278:	e02e      	b.n	800b2d8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	6879      	ldr	r1, [r7, #4]
 800b27e:	68b8      	ldr	r0, [r7, #8]
 800b280:	f7ff fe98 	bl	800afb4 <BSP_SD_WriteBlocks_DMA>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d124      	bne.n	800b2d4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b28a:	4b15      	ldr	r3, [pc, #84]	; (800b2e0 <SD_write+0x90>)
 800b28c:	6819      	ldr	r1, [r3, #0]
 800b28e:	f107 0314 	add.w	r3, r7, #20
 800b292:	f247 5230 	movw	r2, #30000	; 0x7530
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fa58 	bl	800b74c <osMessageGet>

    if (event.status == osEventMessage)
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2b10      	cmp	r3, #16
 800b2a0:	d118      	bne.n	800b2d4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d115      	bne.n	800b2d4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b2a8:	f000 f9d7 	bl	800b65a <osKernelSysTick>
 800b2ac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b2ae:	e008      	b.n	800b2c2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b2b0:	f7ff fe9a 	bl	800afe8 <BSP_SD_GetCardState>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d103      	bne.n	800b2c2 <SD_write+0x72>
          {
            res = RES_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b2c0:	e008      	b.n	800b2d4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b2c2:	f000 f9ca 	bl	800b65a <osKernelSysTick>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	f247 522f 	movw	r2, #29999	; 0x752f
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d9ed      	bls.n	800b2b0 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3728      	adds	r7, #40	; 0x28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	200004f8 	.word	0x200004f8

0800b2e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b08c      	sub	sp, #48	; 0x30
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	603a      	str	r2, [r7, #0]
 800b2ee:	71fb      	strb	r3, [r7, #7]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2fa:	4b25      	ldr	r3, [pc, #148]	; (800b390 <SD_ioctl+0xac>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <SD_ioctl+0x28>
 800b308:	2303      	movs	r3, #3
 800b30a:	e03c      	b.n	800b386 <SD_ioctl+0xa2>

  switch (cmd)
 800b30c:	79bb      	ldrb	r3, [r7, #6]
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d834      	bhi.n	800b37c <SD_ioctl+0x98>
 800b312:	a201      	add	r2, pc, #4	; (adr r2, 800b318 <SD_ioctl+0x34>)
 800b314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b318:	0800b329 	.word	0x0800b329
 800b31c:	0800b331 	.word	0x0800b331
 800b320:	0800b349 	.word	0x0800b349
 800b324:	0800b363 	.word	0x0800b363
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b32e:	e028      	b.n	800b382 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b330:	f107 030c 	add.w	r3, r7, #12
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff fe67 	bl	800b008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b33a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b346:	e01c      	b.n	800b382 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b348:	f107 030c 	add.w	r3, r7, #12
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff fe5b 	bl	800b008 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	b29a      	uxth	r2, r3
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b360:	e00f      	b.n	800b382 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b362:	f107 030c 	add.w	r3, r7, #12
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fe4e 	bl	800b008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	0a5a      	lsrs	r2, r3, #9
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b37a:	e002      	b.n	800b382 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b37c:	2304      	movs	r3, #4
 800b37e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b386:	4618      	mov	r0, r3
 800b388:	3730      	adds	r7, #48	; 0x30
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000009 	.word	0x20000009

0800b394 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b398:	4b04      	ldr	r3, [pc, #16]	; (800b3ac <BSP_SD_ReadCpltCallback+0x18>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2200      	movs	r2, #0
 800b39e:	2101      	movs	r1, #1
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 f993 	bl	800b6cc <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800b3a6:	bf00      	nop
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	200004f8 	.word	0x200004f8

0800b3b0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f804 	bl	800b3d4 <USBH_HandleSof>
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b0b      	cmp	r3, #11
 800b3e4:	d10a      	bne.n	800b3fc <USBH_HandleSof+0x28>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d005      	beq.n	800b3fc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3f6:	699b      	ldr	r3, [r3, #24]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	4798      	blx	r3
  }
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b428:	2200      	movs	r2, #0
 800b42a:	4619      	mov	r1, r3
 800b42c:	f000 f94e 	bl	800b6cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b430:	bf00      	nop
}
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b448:	bf00      	nop
}
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b488:	2200      	movs	r2, #0
 800b48a:	4619      	mov	r1, r3
 800b48c:	f000 f91e 	bl	800b6cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f001 feca 	bl	800d254 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	791b      	ldrb	r3, [r3, #4]
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f830 	bl	800b52c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	795b      	ldrb	r3, [r3, #5]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f82a 	bl	800b52c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	f000 f8ec 	bl	800b6cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b51a:	2200      	movs	r2, #0
 800b51c:	4619      	mov	r1, r3
 800b51e:	f000 f8d5 	bl	800b6cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	2b0f      	cmp	r3, #15
 800b53c:	d80d      	bhi.n	800b55a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b53e:	78fb      	ldrb	r3, [r7, #3]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	33e0      	adds	r3, #224	; 0xe0
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4413      	add	r3, r2
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	33e0      	adds	r3, #224	; 0xe0
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	440b      	add	r3, r1
 800b558:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	4613      	mov	r3, r2
 800b574:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b576:	2301      	movs	r3, #1
 800b578:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b57e:	4b1f      	ldr	r3, [pc, #124]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b580:	7a5b      	ldrb	r3, [r3, #9]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b00      	cmp	r3, #0
 800b586:	d131      	bne.n	800b5ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b588:	4b1c      	ldr	r3, [pc, #112]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b58a:	7a5b      	ldrb	r3, [r3, #9]
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	461a      	mov	r2, r3
 800b590:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b592:	2100      	movs	r1, #0
 800b594:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b596:	4b19      	ldr	r3, [pc, #100]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b598:	7a5b      	ldrb	r3, [r3, #9]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	4a17      	ldr	r2, [pc, #92]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b5a6:	4b15      	ldr	r3, [pc, #84]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b5a8:	7a5b      	ldrb	r3, [r3, #9]
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4b13      	ldr	r3, [pc, #76]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b5b0:	4413      	add	r3, r2
 800b5b2:	79fa      	ldrb	r2, [r7, #7]
 800b5b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b5b6:	4b11      	ldr	r3, [pc, #68]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b5b8:	7a5b      	ldrb	r3, [r3, #9]
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	b2d1      	uxtb	r1, r2
 800b5c0:	4a0e      	ldr	r2, [pc, #56]	; (800b5fc <FATFS_LinkDriverEx+0x94>)
 800b5c2:	7251      	strb	r1, [r2, #9]
 800b5c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5c6:	7dbb      	ldrb	r3, [r7, #22]
 800b5c8:	3330      	adds	r3, #48	; 0x30
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	223a      	movs	r2, #58	; 0x3a
 800b5d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	3302      	adds	r3, #2
 800b5dc:	222f      	movs	r2, #47	; 0x2f
 800b5de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	3303      	adds	r3, #3
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	371c      	adds	r7, #28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	200004fc 	.word	0x200004fc

0800b600 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b60a:	2200      	movs	r2, #0
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff ffaa 	bl	800b568 <FATFS_LinkDriverEx>
 800b614:	4603      	mov	r3, r0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b624:	f3ef 8305 	mrs	r3, IPSR
 800b628:	607b      	str	r3, [r7, #4]
  return(result);
 800b62a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	bf14      	ite	ne
 800b630:	2301      	movne	r3, #1
 800b632:	2300      	moveq	r3, #0
 800b634:	b2db      	uxtb	r3, r3
}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800b646:	f001 fa0f 	bl	800ca68 <xTaskGetSchedulerState>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d101      	bne.n	800b654 <osKernelRunning+0x12>
    return 0;
 800b650:	2300      	movs	r3, #0
 800b652:	e000      	b.n	800b656 <osKernelRunning+0x14>
  else
    return 1;
 800b654:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800b656:	4618      	mov	r0, r3
 800b658:	bd80      	pop	{r7, pc}

0800b65a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b65e:	f7ff ffde 	bl	800b61e <inHandlerMode>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b668:	f000 ff8a 	bl	800c580 <xTaskGetTickCountFromISR>
 800b66c:	4603      	mov	r3, r0
 800b66e:	e002      	b.n	800b676 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b670:	f000 ff76 	bl	800c560 <xTaskGetTickCount>
 800b674:	4603      	mov	r3, r0
  }
}
 800b676:	4618      	mov	r0, r3
 800b678:	bd80      	pop	{r7, pc}

0800b67a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b67a:	b590      	push	{r4, r7, lr}
 800b67c:	b085      	sub	sp, #20
 800b67e:	af02      	add	r7, sp, #8
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d011      	beq.n	800b6b0 <osMessageCreate+0x36>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00d      	beq.n	800b6b0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6859      	ldr	r1, [r3, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	2400      	movs	r4, #0
 800b6a6:	9400      	str	r4, [sp, #0]
 800b6a8:	f000 f9d4 	bl	800ba54 <xQueueGenericCreateStatic>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	e008      	b.n	800b6c2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	f000 fa42 	bl	800bb44 <xQueueGenericCreate>
 800b6c0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd90      	pop	{r4, r7, pc}
	...

0800b6cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <osMessagePut+0x1e>
    ticks = 1;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b6ea:	f7ff ff98 	bl	800b61e <inHandlerMode>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d018      	beq.n	800b726 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b6f4:	f107 0210 	add.w	r2, r7, #16
 800b6f8:	f107 0108 	add.w	r1, r7, #8
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f000 fb78 	bl	800bdf4 <xQueueGenericSendFromISR>
 800b704:	4603      	mov	r3, r0
 800b706:	2b01      	cmp	r3, #1
 800b708:	d001      	beq.n	800b70e <osMessagePut+0x42>
      return osErrorOS;
 800b70a:	23ff      	movs	r3, #255	; 0xff
 800b70c:	e018      	b.n	800b740 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d014      	beq.n	800b73e <osMessagePut+0x72>
 800b714:	4b0c      	ldr	r3, [pc, #48]	; (800b748 <osMessagePut+0x7c>)
 800b716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	e00b      	b.n	800b73e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b726:	f107 0108 	add.w	r1, r7, #8
 800b72a:	2300      	movs	r3, #0
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f000 fa62 	bl	800bbf8 <xQueueGenericSend>
 800b734:	4603      	mov	r3, r0
 800b736:	2b01      	cmp	r3, #1
 800b738:	d001      	beq.n	800b73e <osMessagePut+0x72>
      return osErrorOS;
 800b73a:	23ff      	movs	r3, #255	; 0xff
 800b73c:	e000      	b.n	800b740 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b74c:	b590      	push	{r4, r7, lr}
 800b74e:	b08b      	sub	sp, #44	; 0x2c
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10a      	bne.n	800b77c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b766:	2380      	movs	r3, #128	; 0x80
 800b768:	617b      	str	r3, [r7, #20]
    return event;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	461c      	mov	r4, r3
 800b76e:	f107 0314 	add.w	r3, r7, #20
 800b772:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b77a:	e054      	b.n	800b826 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b77c:	2300      	movs	r3, #0
 800b77e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78a:	d103      	bne.n	800b794 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b78c:	f04f 33ff 	mov.w	r3, #4294967295
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
 800b792:	e009      	b.n	800b7a8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d006      	beq.n	800b7a8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <osMessageGet+0x5c>
      ticks = 1;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b7a8:	f7ff ff39 	bl	800b61e <inHandlerMode>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d01c      	beq.n	800b7ec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b7b2:	f107 0220 	add.w	r2, r7, #32
 800b7b6:	f107 0314 	add.w	r3, r7, #20
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	4619      	mov	r1, r3
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f000 fc94 	bl	800c0ec <xQueueReceiveFromISR>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d102      	bne.n	800b7d0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b7ca:	2310      	movs	r3, #16
 800b7cc:	617b      	str	r3, [r7, #20]
 800b7ce:	e001      	b.n	800b7d4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b7d4:	6a3b      	ldr	r3, [r7, #32]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d01d      	beq.n	800b816 <osMessageGet+0xca>
 800b7da:	4b15      	ldr	r3, [pc, #84]	; (800b830 <osMessageGet+0xe4>)
 800b7dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7e0:	601a      	str	r2, [r3, #0]
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	e014      	b.n	800b816 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b7ec:	f107 0314 	add.w	r3, r7, #20
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	68b8      	ldr	r0, [r7, #8]
 800b7f8:	f000 fb98 	bl	800bf2c <xQueueReceive>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d102      	bne.n	800b808 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b802:	2310      	movs	r3, #16
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	e006      	b.n	800b816 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <osMessageGet+0xc6>
 800b80e:	2300      	movs	r3, #0
 800b810:	e000      	b.n	800b814 <osMessageGet+0xc8>
 800b812:	2340      	movs	r3, #64	; 0x40
 800b814:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	461c      	mov	r4, r3
 800b81a:	f107 0314 	add.w	r3, r7, #20
 800b81e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b822:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	372c      	adds	r7, #44	; 0x2c
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd90      	pop	{r4, r7, pc}
 800b82e:	bf00      	nop
 800b830:	e000ed04 	.word	0xe000ed04

0800b834 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f103 0208 	add.w	r2, r3, #8
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f04f 32ff 	mov.w	r2, #4294967295
 800b84c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f103 0208 	add.w	r2, r3, #8
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f103 0208 	add.w	r2, r3, #8
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	689a      	ldr	r2, [r3, #8]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	601a      	str	r2, [r3, #0]
}
 800b8b0:	bf00      	nop
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d2:	d103      	bne.n	800b8dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	e00c      	b.n	800b8f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3308      	adds	r3, #8
 800b8e0:	60fb      	str	r3, [r7, #12]
 800b8e2:	e002      	b.n	800b8ea <vListInsert+0x2e>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d2f6      	bcs.n	800b8e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
}
 800b922:	bf00      	nop
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	6892      	ldr	r2, [r2, #8]
 800b944:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6852      	ldr	r2, [r2, #4]
 800b94e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	429a      	cmp	r2, r3
 800b958:	d103      	bne.n	800b962 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	689a      	ldr	r2, [r3, #8]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	1e5a      	subs	r2, r3, #1
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
	...

0800b984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b9aa:	bf00      	nop
 800b9ac:	e7fe      	b.n	800b9ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b9ae:	f001 f97b 	bl	800cca8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9be:	fb01 f303 	mul.w	r3, r1, r3
 800b9c2:	441a      	add	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	68f9      	ldr	r1, [r7, #12]
 800b9e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9e4:	fb01 f303 	mul.w	r3, r1, r3
 800b9e8:	441a      	add	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	22ff      	movs	r2, #255	; 0xff
 800b9f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	22ff      	movs	r2, #255	; 0xff
 800b9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d114      	bne.n	800ba2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	691b      	ldr	r3, [r3, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d01a      	beq.n	800ba42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	3310      	adds	r3, #16
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 ff23 	bl	800c85c <xTaskRemoveFromEventList>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d012      	beq.n	800ba42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba1c:	4b0c      	ldr	r3, [pc, #48]	; (800ba50 <xQueueGenericReset+0xcc>)
 800ba1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	e009      	b.n	800ba42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3310      	adds	r3, #16
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff fefe 	bl	800b834 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3324      	adds	r3, #36	; 0x24
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff fef9 	bl	800b834 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba42:	f001 f961 	bl	800cd08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba46:	2301      	movs	r3, #1
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	e000ed04 	.word	0xe000ed04

0800ba54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08e      	sub	sp, #56	; 0x38
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10a      	bne.n	800ba7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ba68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba7a:	bf00      	nop
 800ba7c:	e7fe      	b.n	800ba7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba96:	bf00      	nop
 800ba98:	e7fe      	b.n	800ba98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <xQueueGenericCreateStatic+0x52>
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <xQueueGenericCreateStatic+0x56>
 800baa6:	2301      	movs	r3, #1
 800baa8:	e000      	b.n	800baac <xQueueGenericCreateStatic+0x58>
 800baaa:	2300      	movs	r3, #0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10a      	bne.n	800bac6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	623b      	str	r3, [r7, #32]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <xQueueGenericCreateStatic+0x7e>
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <xQueueGenericCreateStatic+0x82>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e000      	b.n	800bad8 <xQueueGenericCreateStatic+0x84>
 800bad6:	2300      	movs	r3, #0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10a      	bne.n	800baf2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	61fb      	str	r3, [r7, #28]
}
 800baee:	bf00      	nop
 800baf0:	e7fe      	b.n	800baf0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800baf2:	2348      	movs	r3, #72	; 0x48
 800baf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b48      	cmp	r3, #72	; 0x48
 800bafa:	d00a      	beq.n	800bb12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	61bb      	str	r3, [r7, #24]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00d      	beq.n	800bb3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	2201      	movs	r2, #1
 800bb22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	68b9      	ldr	r1, [r7, #8]
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f83f 	bl	800bbb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3730      	adds	r7, #48	; 0x30
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08a      	sub	sp, #40	; 0x28
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <xQueueGenericCreate+0x2a>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	613b      	str	r3, [r7, #16]
}
 800bb6a:	bf00      	nop
 800bb6c:	e7fe      	b.n	800bb6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	fb02 f303 	mul.w	r3, r2, r3
 800bb76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	3348      	adds	r3, #72	; 0x48
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 f985 	bl	800ce8c <pvPortMalloc>
 800bb82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d011      	beq.n	800bbae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	3348      	adds	r3, #72	; 0x48
 800bb92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb9c:	79fa      	ldrb	r2, [r7, #7]
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	4613      	mov	r3, r2
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	68b9      	ldr	r1, [r7, #8]
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 f805 	bl	800bbb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bbae:	69bb      	ldr	r3, [r7, #24]
	}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3720      	adds	r7, #32
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
 800bbc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	e002      	b.n	800bbda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	69b8      	ldr	r0, [r7, #24]
 800bbea:	f7ff fecb 	bl	800b984 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08e      	sub	sp, #56	; 0x38
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc06:	2300      	movs	r3, #0
 800bc08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <xQueueGenericSend+0x32>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d103      	bne.n	800bc38 <xQueueGenericSend+0x40>
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <xQueueGenericSend+0x44>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e000      	b.n	800bc3e <xQueueGenericSend+0x46>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <xQueueGenericSend+0x60>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d103      	bne.n	800bc66 <xQueueGenericSend+0x6e>
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d101      	bne.n	800bc6a <xQueueGenericSend+0x72>
 800bc66:	2301      	movs	r3, #1
 800bc68:	e000      	b.n	800bc6c <xQueueGenericSend+0x74>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10a      	bne.n	800bc86 <xQueueGenericSend+0x8e>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	623b      	str	r3, [r7, #32]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc86:	f000 feef 	bl	800ca68 <xTaskGetSchedulerState>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <xQueueGenericSend+0x9e>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d101      	bne.n	800bc9a <xQueueGenericSend+0xa2>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e000      	b.n	800bc9c <xQueueGenericSend+0xa4>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <xQueueGenericSend+0xbe>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	61fb      	str	r3, [r7, #28]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcb6:	f000 fff7 	bl	800cca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d302      	bcc.n	800bccc <xQueueGenericSend+0xd4>
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d129      	bne.n	800bd20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	68b9      	ldr	r1, [r7, #8]
 800bcd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcd2:	f000 fa8b 	bl	800c1ec <prvCopyDataToQueue>
 800bcd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d010      	beq.n	800bd02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	3324      	adds	r3, #36	; 0x24
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fdb9 	bl	800c85c <xTaskRemoveFromEventList>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d013      	beq.n	800bd18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bcf0:	4b3f      	ldr	r3, [pc, #252]	; (800bdf0 <xQueueGenericSend+0x1f8>)
 800bcf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf6:	601a      	str	r2, [r3, #0]
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	e00a      	b.n	800bd18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d007      	beq.n	800bd18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd08:	4b39      	ldr	r3, [pc, #228]	; (800bdf0 <xQueueGenericSend+0x1f8>)
 800bd0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd0e:	601a      	str	r2, [r3, #0]
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd18:	f000 fff6 	bl	800cd08 <vPortExitCritical>
				return pdPASS;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e063      	b.n	800bde8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d103      	bne.n	800bd2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd26:	f000 ffef 	bl	800cd08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e05c      	b.n	800bde8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d106      	bne.n	800bd42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd34:	f107 0314 	add.w	r3, r7, #20
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fdf1 	bl	800c920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd42:	f000 ffe1 	bl	800cd08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd46:	f000 fb61 	bl	800c40c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd4a:	f000 ffad 	bl	800cca8 <vPortEnterCritical>
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd54:	b25b      	sxtb	r3, r3
 800bd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5a:	d103      	bne.n	800bd64 <xQueueGenericSend+0x16c>
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd6a:	b25b      	sxtb	r3, r3
 800bd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd70:	d103      	bne.n	800bd7a <xQueueGenericSend+0x182>
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd7a:	f000 ffc5 	bl	800cd08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd7e:	1d3a      	adds	r2, r7, #4
 800bd80:	f107 0314 	add.w	r3, r7, #20
 800bd84:	4611      	mov	r1, r2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 fde0 	bl	800c94c <xTaskCheckForTimeOut>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d124      	bne.n	800bddc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd94:	f000 fb22 	bl	800c3dc <prvIsQueueFull>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d018      	beq.n	800bdd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	3310      	adds	r3, #16
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	4611      	mov	r1, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 fd34 	bl	800c814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdae:	f000 faad 	bl	800c30c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdb2:	f000 fb39 	bl	800c428 <xTaskResumeAll>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f47f af7c 	bne.w	800bcb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bdbe:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <xQueueGenericSend+0x1f8>)
 800bdc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	e772      	b.n	800bcb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bdd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdd2:	f000 fa9b 	bl	800c30c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdd6:	f000 fb27 	bl	800c428 <xTaskResumeAll>
 800bdda:	e76c      	b.n	800bcb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdde:	f000 fa95 	bl	800c30c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bde2:	f000 fb21 	bl	800c428 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bde6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3738      	adds	r7, #56	; 0x38
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b090      	sub	sp, #64	; 0x40
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800be06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10a      	bne.n	800be22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be1e:	bf00      	nop
 800be20:	e7fe      	b.n	800be20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d103      	bne.n	800be30 <xQueueGenericSendFromISR+0x3c>
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <xQueueGenericSendFromISR+0x40>
 800be30:	2301      	movs	r3, #1
 800be32:	e000      	b.n	800be36 <xQueueGenericSendFromISR+0x42>
 800be34:	2300      	movs	r3, #0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b02      	cmp	r3, #2
 800be54:	d103      	bne.n	800be5e <xQueueGenericSendFromISR+0x6a>
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d101      	bne.n	800be62 <xQueueGenericSendFromISR+0x6e>
 800be5e:	2301      	movs	r3, #1
 800be60:	e000      	b.n	800be64 <xQueueGenericSendFromISR+0x70>
 800be62:	2300      	movs	r3, #0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10a      	bne.n	800be7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	623b      	str	r3, [r7, #32]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be7e:	f000 ffc5 	bl	800ce0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be82:	f3ef 8211 	mrs	r2, BASEPRI
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	61fa      	str	r2, [r7, #28]
 800be98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d302      	bcc.n	800beb0 <xQueueGenericSendFromISR+0xbc>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d12f      	bne.n	800bf10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800beb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800beba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bebe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	68b9      	ldr	r1, [r7, #8]
 800bec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bec6:	f000 f991 	bl	800c1ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800beca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d112      	bne.n	800befa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d016      	beq.n	800bf0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bede:	3324      	adds	r3, #36	; 0x24
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 fcbb 	bl	800c85c <xTaskRemoveFromEventList>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00e      	beq.n	800bf0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00b      	beq.n	800bf0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	e007      	b.n	800bf0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800befa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800befe:	3301      	adds	r3, #1
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	b25a      	sxtb	r2, r3
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bf0e:	e001      	b.n	800bf14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3740      	adds	r7, #64	; 0x40
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08c      	sub	sp, #48	; 0x30
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10a      	bne.n	800bf5c <xQueueReceive+0x30>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	623b      	str	r3, [r7, #32]
}
 800bf58:	bf00      	nop
 800bf5a:	e7fe      	b.n	800bf5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d103      	bne.n	800bf6a <xQueueReceive+0x3e>
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d101      	bne.n	800bf6e <xQueueReceive+0x42>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e000      	b.n	800bf70 <xQueueReceive+0x44>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10a      	bne.n	800bf8a <xQueueReceive+0x5e>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	61fb      	str	r3, [r7, #28]
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf8a:	f000 fd6d 	bl	800ca68 <xTaskGetSchedulerState>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d102      	bne.n	800bf9a <xQueueReceive+0x6e>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <xQueueReceive+0x72>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e000      	b.n	800bfa0 <xQueueReceive+0x74>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10a      	bne.n	800bfba <xQueueReceive+0x8e>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	61bb      	str	r3, [r7, #24]
}
 800bfb6:	bf00      	nop
 800bfb8:	e7fe      	b.n	800bfb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfba:	f000 fe75 	bl	800cca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d01f      	beq.n	800c00a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfca:	68b9      	ldr	r1, [r7, #8]
 800bfcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfce:	f000 f977 	bl	800c2c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd4:	1e5a      	subs	r2, r3, #1
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00f      	beq.n	800c002 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	3310      	adds	r3, #16
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 fc38 	bl	800c85c <xTaskRemoveFromEventList>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d007      	beq.n	800c002 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bff2:	4b3d      	ldr	r3, [pc, #244]	; (800c0e8 <xQueueReceive+0x1bc>)
 800bff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff8:	601a      	str	r2, [r3, #0]
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c002:	f000 fe81 	bl	800cd08 <vPortExitCritical>
				return pdPASS;
 800c006:	2301      	movs	r3, #1
 800c008:	e069      	b.n	800c0de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d103      	bne.n	800c018 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c010:	f000 fe7a 	bl	800cd08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c014:	2300      	movs	r3, #0
 800c016:	e062      	b.n	800c0de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c01e:	f107 0310 	add.w	r3, r7, #16
 800c022:	4618      	mov	r0, r3
 800c024:	f000 fc7c 	bl	800c920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c028:	2301      	movs	r3, #1
 800c02a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c02c:	f000 fe6c 	bl	800cd08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c030:	f000 f9ec 	bl	800c40c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c034:	f000 fe38 	bl	800cca8 <vPortEnterCritical>
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c03e:	b25b      	sxtb	r3, r3
 800c040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c044:	d103      	bne.n	800c04e <xQueueReceive+0x122>
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c054:	b25b      	sxtb	r3, r3
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05a:	d103      	bne.n	800c064 <xQueueReceive+0x138>
 800c05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c064:	f000 fe50 	bl	800cd08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c068:	1d3a      	adds	r2, r7, #4
 800c06a:	f107 0310 	add.w	r3, r7, #16
 800c06e:	4611      	mov	r1, r2
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fc6b 	bl	800c94c <xTaskCheckForTimeOut>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d123      	bne.n	800c0c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c07c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c07e:	f000 f997 	bl	800c3b0 <prvIsQueueEmpty>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d017      	beq.n	800c0b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	3324      	adds	r3, #36	; 0x24
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fbbf 	bl	800c814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c098:	f000 f938 	bl	800c30c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c09c:	f000 f9c4 	bl	800c428 <xTaskResumeAll>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d189      	bne.n	800bfba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c0a6:	4b10      	ldr	r3, [pc, #64]	; (800c0e8 <xQueueReceive+0x1bc>)
 800c0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ac:	601a      	str	r2, [r3, #0]
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	e780      	b.n	800bfba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ba:	f000 f927 	bl	800c30c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0be:	f000 f9b3 	bl	800c428 <xTaskResumeAll>
 800c0c2:	e77a      	b.n	800bfba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0c6:	f000 f921 	bl	800c30c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0ca:	f000 f9ad 	bl	800c428 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0d0:	f000 f96e 	bl	800c3b0 <prvIsQueueEmpty>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f43f af6f 	beq.w	800bfba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3730      	adds	r7, #48	; 0x30
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08e      	sub	sp, #56	; 0x38
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10a      	bne.n	800c118 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	623b      	str	r3, [r7, #32]
}
 800c114:	bf00      	nop
 800c116:	e7fe      	b.n	800c116 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d103      	bne.n	800c126 <xQueueReceiveFromISR+0x3a>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <xQueueReceiveFromISR+0x3e>
 800c126:	2301      	movs	r3, #1
 800c128:	e000      	b.n	800c12c <xQueueReceiveFromISR+0x40>
 800c12a:	2300      	movs	r3, #0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10a      	bne.n	800c146 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	61fb      	str	r3, [r7, #28]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c146:	f000 fe61 	bl	800ce0c <vPortValidateInterruptPriority>
	__asm volatile
 800c14a:	f3ef 8211 	mrs	r2, BASEPRI
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	61ba      	str	r2, [r7, #24]
 800c160:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c162:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c164:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d02f      	beq.n	800c1d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c180:	f000 f89e 	bl	800c2c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	1e5a      	subs	r2, r3, #1
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c18c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c194:	d112      	bne.n	800c1bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d016      	beq.n	800c1cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	3310      	adds	r3, #16
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 fb5a 	bl	800c85c <xTaskRemoveFromEventList>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00e      	beq.n	800c1cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	e007      	b.n	800c1cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	b25a      	sxtb	r2, r3
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d0:	e001      	b.n	800c1d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	f383 8811 	msr	BASEPRI, r3
}
 800c1e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3738      	adds	r7, #56	; 0x38
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10d      	bne.n	800c226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d14d      	bne.n	800c2ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	4618      	mov	r0, r3
 800c218:	f000 fc44 	bl	800caa4 <xTaskPriorityDisinherit>
 800c21c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	609a      	str	r2, [r3, #8]
 800c224:	e043      	b.n	800c2ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d119      	bne.n	800c260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6858      	ldr	r0, [r3, #4]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c234:	461a      	mov	r2, r3
 800c236:	68b9      	ldr	r1, [r7, #8]
 800c238:	f001 fb52 	bl	800d8e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c244:	441a      	add	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	429a      	cmp	r2, r3
 800c254:	d32b      	bcc.n	800c2ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	605a      	str	r2, [r3, #4]
 800c25e:	e026      	b.n	800c2ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	68d8      	ldr	r0, [r3, #12]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c268:	461a      	mov	r2, r3
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	f001 fb38 	bl	800d8e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	68da      	ldr	r2, [r3, #12]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c278:	425b      	negs	r3, r3
 800c27a:	441a      	add	r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	68da      	ldr	r2, [r3, #12]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d207      	bcs.n	800c29c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	689a      	ldr	r2, [r3, #8]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c294:	425b      	negs	r3, r3
 800c296:	441a      	add	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d105      	bne.n	800c2ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d002      	beq.n	800c2ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c2b6:	697b      	ldr	r3, [r7, #20]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d018      	beq.n	800c304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68da      	ldr	r2, [r3, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2da:	441a      	add	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68da      	ldr	r2, [r3, #12]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d303      	bcc.n	800c2f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68d9      	ldr	r1, [r3, #12]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	6838      	ldr	r0, [r7, #0]
 800c300:	f001 faee 	bl	800d8e0 <memcpy>
	}
}
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c314:	f000 fcc8 	bl	800cca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c31e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c320:	e011      	b.n	800c346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c326:	2b00      	cmp	r3, #0
 800c328:	d012      	beq.n	800c350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3324      	adds	r3, #36	; 0x24
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fa94 	bl	800c85c <xTaskRemoveFromEventList>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c33a:	f000 fb69 	bl	800ca10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
 800c340:	3b01      	subs	r3, #1
 800c342:	b2db      	uxtb	r3, r3
 800c344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	dce9      	bgt.n	800c322 <prvUnlockQueue+0x16>
 800c34e:	e000      	b.n	800c352 <prvUnlockQueue+0x46>
					break;
 800c350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	22ff      	movs	r2, #255	; 0xff
 800c356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c35a:	f000 fcd5 	bl	800cd08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c35e:	f000 fca3 	bl	800cca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c36a:	e011      	b.n	800c390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d012      	beq.n	800c39a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3310      	adds	r3, #16
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fa6f 	bl	800c85c <xTaskRemoveFromEventList>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c384:	f000 fb44 	bl	800ca10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c388:	7bbb      	ldrb	r3, [r7, #14]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c394:	2b00      	cmp	r3, #0
 800c396:	dce9      	bgt.n	800c36c <prvUnlockQueue+0x60>
 800c398:	e000      	b.n	800c39c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c39a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	22ff      	movs	r2, #255	; 0xff
 800c3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c3a4:	f000 fcb0 	bl	800cd08 <vPortExitCritical>
}
 800c3a8:	bf00      	nop
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3b8:	f000 fc76 	bl	800cca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	60fb      	str	r3, [r7, #12]
 800c3c8:	e001      	b.n	800c3ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3ce:	f000 fc9b 	bl	800cd08 <vPortExitCritical>

	return xReturn;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3e4:	f000 fc60 	bl	800cca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d102      	bne.n	800c3fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	e001      	b.n	800c3fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3fe:	f000 fc83 	bl	800cd08 <vPortExitCritical>

	return xReturn;
 800c402:	68fb      	ldr	r3, [r7, #12]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c40c:	b480      	push	{r7}
 800c40e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c410:	4b04      	ldr	r3, [pc, #16]	; (800c424 <vTaskSuspendAll+0x18>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3301      	adds	r3, #1
 800c416:	4a03      	ldr	r2, [pc, #12]	; (800c424 <vTaskSuspendAll+0x18>)
 800c418:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c41a:	bf00      	nop
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	200005e8 	.word	0x200005e8

0800c428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c432:	2300      	movs	r3, #0
 800c434:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c436:	4b41      	ldr	r3, [pc, #260]	; (800c53c <xTaskResumeAll+0x114>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <xTaskResumeAll+0x2c>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	603b      	str	r3, [r7, #0]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c454:	f000 fc28 	bl	800cca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c458:	4b38      	ldr	r3, [pc, #224]	; (800c53c <xTaskResumeAll+0x114>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4a37      	ldr	r2, [pc, #220]	; (800c53c <xTaskResumeAll+0x114>)
 800c460:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c462:	4b36      	ldr	r3, [pc, #216]	; (800c53c <xTaskResumeAll+0x114>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d161      	bne.n	800c52e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c46a:	4b35      	ldr	r3, [pc, #212]	; (800c540 <xTaskResumeAll+0x118>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d05d      	beq.n	800c52e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c472:	e02e      	b.n	800c4d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c474:	4b33      	ldr	r3, [pc, #204]	; (800c544 <xTaskResumeAll+0x11c>)
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	3318      	adds	r3, #24
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fa54 	bl	800b92e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3304      	adds	r3, #4
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7ff fa4f 	bl	800b92e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c494:	2201      	movs	r2, #1
 800c496:	409a      	lsls	r2, r3
 800c498:	4b2b      	ldr	r3, [pc, #172]	; (800c548 <xTaskResumeAll+0x120>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4313      	orrs	r3, r2
 800c49e:	4a2a      	ldr	r2, [pc, #168]	; (800c548 <xTaskResumeAll+0x120>)
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4413      	add	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4a27      	ldr	r2, [pc, #156]	; (800c54c <xTaskResumeAll+0x124>)
 800c4b0:	441a      	add	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	f7ff f9db 	bl	800b874 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c2:	4b23      	ldr	r3, [pc, #140]	; (800c550 <xTaskResumeAll+0x128>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d302      	bcc.n	800c4d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c4cc:	4b21      	ldr	r3, [pc, #132]	; (800c554 <xTaskResumeAll+0x12c>)
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4d2:	4b1c      	ldr	r3, [pc, #112]	; (800c544 <xTaskResumeAll+0x11c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1cc      	bne.n	800c474 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c4e0:	f000 faa2 	bl	800ca28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c4e4:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <xTaskResumeAll+0x130>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d010      	beq.n	800c512 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c4f0:	f000 f858 	bl	800c5a4 <xTaskIncrementTick>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d002      	beq.n	800c500 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c4fa:	4b16      	ldr	r3, [pc, #88]	; (800c554 <xTaskResumeAll+0x12c>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	3b01      	subs	r3, #1
 800c504:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1f1      	bne.n	800c4f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c50c:	4b12      	ldr	r3, [pc, #72]	; (800c558 <xTaskResumeAll+0x130>)
 800c50e:	2200      	movs	r2, #0
 800c510:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c512:	4b10      	ldr	r3, [pc, #64]	; (800c554 <xTaskResumeAll+0x12c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d009      	beq.n	800c52e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c51a:	2301      	movs	r3, #1
 800c51c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c51e:	4b0f      	ldr	r3, [pc, #60]	; (800c55c <xTaskResumeAll+0x134>)
 800c520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c52e:	f000 fbeb 	bl	800cd08 <vPortExitCritical>

	return xAlreadyYielded;
 800c532:	68bb      	ldr	r3, [r7, #8]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	200005e8 	.word	0x200005e8
 800c540:	200005c8 	.word	0x200005c8
 800c544:	200005a0 	.word	0x200005a0
 800c548:	200005d0 	.word	0x200005d0
 800c54c:	2000050c 	.word	0x2000050c
 800c550:	20000508 	.word	0x20000508
 800c554:	200005dc 	.word	0x200005dc
 800c558:	200005d8 	.word	0x200005d8
 800c55c:	e000ed04 	.word	0xe000ed04

0800c560 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c566:	4b05      	ldr	r3, [pc, #20]	; (800c57c <xTaskGetTickCount+0x1c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c56c:	687b      	ldr	r3, [r7, #4]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	200005cc 	.word	0x200005cc

0800c580 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c586:	f000 fc41 	bl	800ce0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c58a:	2300      	movs	r3, #0
 800c58c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c58e:	4b04      	ldr	r3, [pc, #16]	; (800c5a0 <xTaskGetTickCountFromISR+0x20>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c594:	683b      	ldr	r3, [r7, #0]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	200005cc 	.word	0x200005cc

0800c5a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5ae:	4b4e      	ldr	r3, [pc, #312]	; (800c6e8 <xTaskIncrementTick+0x144>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f040 808e 	bne.w	800c6d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c5b8:	4b4c      	ldr	r3, [pc, #304]	; (800c6ec <xTaskIncrementTick+0x148>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5c0:	4a4a      	ldr	r2, [pc, #296]	; (800c6ec <xTaskIncrementTick+0x148>)
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d120      	bne.n	800c60e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5cc:	4b48      	ldr	r3, [pc, #288]	; (800c6f0 <xTaskIncrementTick+0x14c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <xTaskIncrementTick+0x48>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	603b      	str	r3, [r7, #0]
}
 800c5e8:	bf00      	nop
 800c5ea:	e7fe      	b.n	800c5ea <xTaskIncrementTick+0x46>
 800c5ec:	4b40      	ldr	r3, [pc, #256]	; (800c6f0 <xTaskIncrementTick+0x14c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	60fb      	str	r3, [r7, #12]
 800c5f2:	4b40      	ldr	r3, [pc, #256]	; (800c6f4 <xTaskIncrementTick+0x150>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a3e      	ldr	r2, [pc, #248]	; (800c6f0 <xTaskIncrementTick+0x14c>)
 800c5f8:	6013      	str	r3, [r2, #0]
 800c5fa:	4a3e      	ldr	r2, [pc, #248]	; (800c6f4 <xTaskIncrementTick+0x150>)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	4b3d      	ldr	r3, [pc, #244]	; (800c6f8 <xTaskIncrementTick+0x154>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3301      	adds	r3, #1
 800c606:	4a3c      	ldr	r2, [pc, #240]	; (800c6f8 <xTaskIncrementTick+0x154>)
 800c608:	6013      	str	r3, [r2, #0]
 800c60a:	f000 fa0d 	bl	800ca28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c60e:	4b3b      	ldr	r3, [pc, #236]	; (800c6fc <xTaskIncrementTick+0x158>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	693a      	ldr	r2, [r7, #16]
 800c614:	429a      	cmp	r2, r3
 800c616:	d348      	bcc.n	800c6aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c618:	4b35      	ldr	r3, [pc, #212]	; (800c6f0 <xTaskIncrementTick+0x14c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d104      	bne.n	800c62c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c622:	4b36      	ldr	r3, [pc, #216]	; (800c6fc <xTaskIncrementTick+0x158>)
 800c624:	f04f 32ff 	mov.w	r2, #4294967295
 800c628:	601a      	str	r2, [r3, #0]
					break;
 800c62a:	e03e      	b.n	800c6aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c62c:	4b30      	ldr	r3, [pc, #192]	; (800c6f0 <xTaskIncrementTick+0x14c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	429a      	cmp	r2, r3
 800c642:	d203      	bcs.n	800c64c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c644:	4a2d      	ldr	r2, [pc, #180]	; (800c6fc <xTaskIncrementTick+0x158>)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c64a:	e02e      	b.n	800c6aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	3304      	adds	r3, #4
 800c650:	4618      	mov	r0, r3
 800c652:	f7ff f96c 	bl	800b92e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d004      	beq.n	800c668 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	3318      	adds	r3, #24
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff f963 	bl	800b92e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66c:	2201      	movs	r2, #1
 800c66e:	409a      	lsls	r2, r3
 800c670:	4b23      	ldr	r3, [pc, #140]	; (800c700 <xTaskIncrementTick+0x15c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4313      	orrs	r3, r2
 800c676:	4a22      	ldr	r2, [pc, #136]	; (800c700 <xTaskIncrementTick+0x15c>)
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4a1f      	ldr	r2, [pc, #124]	; (800c704 <xTaskIncrementTick+0x160>)
 800c688:	441a      	add	r2, r3
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	3304      	adds	r3, #4
 800c68e:	4619      	mov	r1, r3
 800c690:	4610      	mov	r0, r2
 800c692:	f7ff f8ef 	bl	800b874 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c69a:	4b1b      	ldr	r3, [pc, #108]	; (800c708 <xTaskIncrementTick+0x164>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d3b9      	bcc.n	800c618 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6a8:	e7b6      	b.n	800c618 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c6aa:	4b17      	ldr	r3, [pc, #92]	; (800c708 <xTaskIncrementTick+0x164>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b0:	4914      	ldr	r1, [pc, #80]	; (800c704 <xTaskIncrementTick+0x160>)
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	440b      	add	r3, r1
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d901      	bls.n	800c6c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c6c6:	4b11      	ldr	r3, [pc, #68]	; (800c70c <xTaskIncrementTick+0x168>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d007      	beq.n	800c6de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	617b      	str	r3, [r7, #20]
 800c6d2:	e004      	b.n	800c6de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c6d4:	4b0e      	ldr	r3, [pc, #56]	; (800c710 <xTaskIncrementTick+0x16c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	4a0d      	ldr	r2, [pc, #52]	; (800c710 <xTaskIncrementTick+0x16c>)
 800c6dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c6de:	697b      	ldr	r3, [r7, #20]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3718      	adds	r7, #24
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	200005e8 	.word	0x200005e8
 800c6ec:	200005cc 	.word	0x200005cc
 800c6f0:	20000598 	.word	0x20000598
 800c6f4:	2000059c 	.word	0x2000059c
 800c6f8:	200005e0 	.word	0x200005e0
 800c6fc:	200005e4 	.word	0x200005e4
 800c700:	200005d0 	.word	0x200005d0
 800c704:	2000050c 	.word	0x2000050c
 800c708:	20000508 	.word	0x20000508
 800c70c:	200005dc 	.word	0x200005dc
 800c710:	200005d8 	.word	0x200005d8

0800c714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b088      	sub	sp, #32
 800c718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c71a:	4b39      	ldr	r3, [pc, #228]	; (800c800 <vTaskSwitchContext+0xec>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c722:	4b38      	ldr	r3, [pc, #224]	; (800c804 <vTaskSwitchContext+0xf0>)
 800c724:	2201      	movs	r2, #1
 800c726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c728:	e066      	b.n	800c7f8 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800c72a:	4b36      	ldr	r3, [pc, #216]	; (800c804 <vTaskSwitchContext+0xf0>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c730:	4b35      	ldr	r3, [pc, #212]	; (800c808 <vTaskSwitchContext+0xf4>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c736:	61fb      	str	r3, [r7, #28]
 800c738:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c73c:	61bb      	str	r3, [r7, #24]
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	69ba      	ldr	r2, [r7, #24]
 800c744:	429a      	cmp	r2, r3
 800c746:	d111      	bne.n	800c76c <vTaskSwitchContext+0x58>
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	3304      	adds	r3, #4
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	69ba      	ldr	r2, [r7, #24]
 800c750:	429a      	cmp	r2, r3
 800c752:	d10b      	bne.n	800c76c <vTaskSwitchContext+0x58>
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	3308      	adds	r3, #8
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d105      	bne.n	800c76c <vTaskSwitchContext+0x58>
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	330c      	adds	r3, #12
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	69ba      	ldr	r2, [r7, #24]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d008      	beq.n	800c77e <vTaskSwitchContext+0x6a>
 800c76c:	4b26      	ldr	r3, [pc, #152]	; (800c808 <vTaskSwitchContext+0xf4>)
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	4b25      	ldr	r3, [pc, #148]	; (800c808 <vTaskSwitchContext+0xf4>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3334      	adds	r3, #52	; 0x34
 800c776:	4619      	mov	r1, r3
 800c778:	4610      	mov	r0, r2
 800c77a:	f7f3 fec7 	bl	800050c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c77e:	4b23      	ldr	r3, [pc, #140]	; (800c80c <vTaskSwitchContext+0xf8>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	fab3 f383 	clz	r3, r3
 800c78a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c78c:	7afb      	ldrb	r3, [r7, #11]
 800c78e:	f1c3 031f 	rsb	r3, r3, #31
 800c792:	617b      	str	r3, [r7, #20]
 800c794:	491e      	ldr	r1, [pc, #120]	; (800c810 <vTaskSwitchContext+0xfc>)
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	4613      	mov	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4413      	add	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	440b      	add	r3, r1
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10a      	bne.n	800c7be <vTaskSwitchContext+0xaa>
	__asm volatile
 800c7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ac:	f383 8811 	msr	BASEPRI, r3
 800c7b0:	f3bf 8f6f 	isb	sy
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	607b      	str	r3, [r7, #4]
}
 800c7ba:	bf00      	nop
 800c7bc:	e7fe      	b.n	800c7bc <vTaskSwitchContext+0xa8>
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4a11      	ldr	r2, [pc, #68]	; (800c810 <vTaskSwitchContext+0xfc>)
 800c7ca:	4413      	add	r3, r2
 800c7cc:	613b      	str	r3, [r7, #16]
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	605a      	str	r2, [r3, #4]
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	3308      	adds	r3, #8
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d104      	bne.n	800c7ee <vTaskSwitchContext+0xda>
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	605a      	str	r2, [r3, #4]
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	4a04      	ldr	r2, [pc, #16]	; (800c808 <vTaskSwitchContext+0xf4>)
 800c7f6:	6013      	str	r3, [r2, #0]
}
 800c7f8:	bf00      	nop
 800c7fa:	3720      	adds	r7, #32
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	200005e8 	.word	0x200005e8
 800c804:	200005dc 	.word	0x200005dc
 800c808:	20000508 	.word	0x20000508
 800c80c:	200005d0 	.word	0x200005d0
 800c810:	2000050c 	.word	0x2000050c

0800c814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	60fb      	str	r3, [r7, #12]
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c83a:	4b07      	ldr	r3, [pc, #28]	; (800c858 <vTaskPlaceOnEventList+0x44>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	3318      	adds	r3, #24
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7ff f83a 	bl	800b8bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c848:	2101      	movs	r1, #1
 800c84a:	6838      	ldr	r0, [r7, #0]
 800c84c:	f000 f9b0 	bl	800cbb0 <prvAddCurrentTaskToDelayedList>
}
 800c850:	bf00      	nop
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	20000508 	.word	0x20000508

0800c85c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b086      	sub	sp, #24
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10a      	bne.n	800c888 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c876:	f383 8811 	msr	BASEPRI, r3
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	60fb      	str	r3, [r7, #12]
}
 800c884:	bf00      	nop
 800c886:	e7fe      	b.n	800c886 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	3318      	adds	r3, #24
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff f84e 	bl	800b92e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c892:	4b1d      	ldr	r3, [pc, #116]	; (800c908 <xTaskRemoveFromEventList+0xac>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d11c      	bne.n	800c8d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	3304      	adds	r3, #4
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff f845 	bl	800b92e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	409a      	lsls	r2, r3
 800c8ac:	4b17      	ldr	r3, [pc, #92]	; (800c90c <xTaskRemoveFromEventList+0xb0>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	4a16      	ldr	r2, [pc, #88]	; (800c90c <xTaskRemoveFromEventList+0xb0>)
 800c8b4:	6013      	str	r3, [r2, #0]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	4a13      	ldr	r2, [pc, #76]	; (800c910 <xTaskRemoveFromEventList+0xb4>)
 800c8c4:	441a      	add	r2, r3
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	f7fe ffd1 	bl	800b874 <vListInsertEnd>
 800c8d2:	e005      	b.n	800c8e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	3318      	adds	r3, #24
 800c8d8:	4619      	mov	r1, r3
 800c8da:	480e      	ldr	r0, [pc, #56]	; (800c914 <xTaskRemoveFromEventList+0xb8>)
 800c8dc:	f7fe ffca 	bl	800b874 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e4:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <xTaskRemoveFromEventList+0xbc>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d905      	bls.n	800c8fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8f2:	4b0a      	ldr	r3, [pc, #40]	; (800c91c <xTaskRemoveFromEventList+0xc0>)
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	601a      	str	r2, [r3, #0]
 800c8f8:	e001      	b.n	800c8fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8fe:	697b      	ldr	r3, [r7, #20]
}
 800c900:	4618      	mov	r0, r3
 800c902:	3718      	adds	r7, #24
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	200005e8 	.word	0x200005e8
 800c90c:	200005d0 	.word	0x200005d0
 800c910:	2000050c 	.word	0x2000050c
 800c914:	200005a0 	.word	0x200005a0
 800c918:	20000508 	.word	0x20000508
 800c91c:	200005dc 	.word	0x200005dc

0800c920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c928:	4b06      	ldr	r3, [pc, #24]	; (800c944 <vTaskInternalSetTimeOutState+0x24>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c930:	4b05      	ldr	r3, [pc, #20]	; (800c948 <vTaskInternalSetTimeOutState+0x28>)
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	605a      	str	r2, [r3, #4]
}
 800c938:	bf00      	nop
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	200005e0 	.word	0x200005e0
 800c948:	200005cc 	.word	0x200005cc

0800c94c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b088      	sub	sp, #32
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10a      	bne.n	800c972 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	613b      	str	r3, [r7, #16]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10a      	bne.n	800c98e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	60fb      	str	r3, [r7, #12]
}
 800c98a:	bf00      	nop
 800c98c:	e7fe      	b.n	800c98c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c98e:	f000 f98b 	bl	800cca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c992:	4b1d      	ldr	r3, [pc, #116]	; (800ca08 <xTaskCheckForTimeOut+0xbc>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	69ba      	ldr	r2, [r7, #24]
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9aa:	d102      	bne.n	800c9b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	61fb      	str	r3, [r7, #28]
 800c9b0:	e023      	b.n	800c9fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	4b15      	ldr	r3, [pc, #84]	; (800ca0c <xTaskCheckForTimeOut+0xc0>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d007      	beq.n	800c9ce <xTaskCheckForTimeOut+0x82>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	69ba      	ldr	r2, [r7, #24]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d302      	bcc.n	800c9ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	61fb      	str	r3, [r7, #28]
 800c9cc:	e015      	b.n	800c9fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d20b      	bcs.n	800c9f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	1ad2      	subs	r2, r2, r3
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7ff ff9b 	bl	800c920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	61fb      	str	r3, [r7, #28]
 800c9ee:	e004      	b.n	800c9fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9fa:	f000 f985 	bl	800cd08 <vPortExitCritical>

	return xReturn;
 800c9fe:	69fb      	ldr	r3, [r7, #28]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3720      	adds	r7, #32
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	200005cc 	.word	0x200005cc
 800ca0c:	200005e0 	.word	0x200005e0

0800ca10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca14:	4b03      	ldr	r3, [pc, #12]	; (800ca24 <vTaskMissedYield+0x14>)
 800ca16:	2201      	movs	r2, #1
 800ca18:	601a      	str	r2, [r3, #0]
}
 800ca1a:	bf00      	nop
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	200005dc 	.word	0x200005dc

0800ca28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca2e:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <prvResetNextTaskUnblockTime+0x38>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d104      	bne.n	800ca42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca38:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <prvResetNextTaskUnblockTime+0x3c>)
 800ca3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca40:	e008      	b.n	800ca54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca42:	4b07      	ldr	r3, [pc, #28]	; (800ca60 <prvResetNextTaskUnblockTime+0x38>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	4a04      	ldr	r2, [pc, #16]	; (800ca64 <prvResetNextTaskUnblockTime+0x3c>)
 800ca52:	6013      	str	r3, [r2, #0]
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	20000598 	.word	0x20000598
 800ca64:	200005e4 	.word	0x200005e4

0800ca68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca6e:	4b0b      	ldr	r3, [pc, #44]	; (800ca9c <xTaskGetSchedulerState+0x34>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d102      	bne.n	800ca7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca76:	2301      	movs	r3, #1
 800ca78:	607b      	str	r3, [r7, #4]
 800ca7a:	e008      	b.n	800ca8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca7c:	4b08      	ldr	r3, [pc, #32]	; (800caa0 <xTaskGetSchedulerState+0x38>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca84:	2302      	movs	r3, #2
 800ca86:	607b      	str	r3, [r7, #4]
 800ca88:	e001      	b.n	800ca8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca8e:	687b      	ldr	r3, [r7, #4]
	}
 800ca90:	4618      	mov	r0, r3
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	200005d4 	.word	0x200005d4
 800caa0:	200005e8 	.word	0x200005e8

0800caa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b086      	sub	sp, #24
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cab0:	2300      	movs	r3, #0
 800cab2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d06e      	beq.n	800cb98 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800caba:	4b3a      	ldr	r3, [pc, #232]	; (800cba4 <xTaskPriorityDisinherit+0x100>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d00a      	beq.n	800cada <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	60fb      	str	r3, [r7, #12]
}
 800cad6:	bf00      	nop
 800cad8:	e7fe      	b.n	800cad8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10a      	bne.n	800caf8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	60bb      	str	r3, [r7, #8]
}
 800caf4:	bf00      	nop
 800caf6:	e7fe      	b.n	800caf6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cafc:	1e5a      	subs	r2, r3, #1
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d044      	beq.n	800cb98 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d140      	bne.n	800cb98 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	3304      	adds	r3, #4
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fe ff07 	bl	800b92e <uxListRemove>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d115      	bne.n	800cb52 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2a:	491f      	ldr	r1, [pc, #124]	; (800cba8 <xTaskPriorityDisinherit+0x104>)
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	440b      	add	r3, r1
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10a      	bne.n	800cb52 <xTaskPriorityDisinherit+0xae>
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb40:	2201      	movs	r2, #1
 800cb42:	fa02 f303 	lsl.w	r3, r2, r3
 800cb46:	43da      	mvns	r2, r3
 800cb48:	4b18      	ldr	r3, [pc, #96]	; (800cbac <xTaskPriorityDisinherit+0x108>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4013      	ands	r3, r2
 800cb4e:	4a17      	ldr	r2, [pc, #92]	; (800cbac <xTaskPriorityDisinherit+0x108>)
 800cb50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5e:	f1c3 0207 	rsb	r2, r3, #7
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	409a      	lsls	r2, r3
 800cb6e:	4b0f      	ldr	r3, [pc, #60]	; (800cbac <xTaskPriorityDisinherit+0x108>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	4a0d      	ldr	r2, [pc, #52]	; (800cbac <xTaskPriorityDisinherit+0x108>)
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	4413      	add	r3, r2
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4a08      	ldr	r2, [pc, #32]	; (800cba8 <xTaskPriorityDisinherit+0x104>)
 800cb86:	441a      	add	r2, r3
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4610      	mov	r0, r2
 800cb90:	f7fe fe70 	bl	800b874 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb94:	2301      	movs	r3, #1
 800cb96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb98:	697b      	ldr	r3, [r7, #20]
	}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3718      	adds	r7, #24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	20000508 	.word	0x20000508
 800cba8:	2000050c 	.word	0x2000050c
 800cbac:	200005d0 	.word	0x200005d0

0800cbb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cbba:	4b29      	ldr	r3, [pc, #164]	; (800cc60 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbc0:	4b28      	ldr	r3, [pc, #160]	; (800cc64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe feb1 	bl	800b92e <uxListRemove>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10b      	bne.n	800cbea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cbd2:	4b24      	ldr	r3, [pc, #144]	; (800cc64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd8:	2201      	movs	r2, #1
 800cbda:	fa02 f303 	lsl.w	r3, r2, r3
 800cbde:	43da      	mvns	r2, r3
 800cbe0:	4b21      	ldr	r3, [pc, #132]	; (800cc68 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	4a20      	ldr	r2, [pc, #128]	; (800cc68 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cbe8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf0:	d10a      	bne.n	800cc08 <prvAddCurrentTaskToDelayedList+0x58>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d007      	beq.n	800cc08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbf8:	4b1a      	ldr	r3, [pc, #104]	; (800cc64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	4619      	mov	r1, r3
 800cc00:	481a      	ldr	r0, [pc, #104]	; (800cc6c <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc02:	f7fe fe37 	bl	800b874 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc06:	e026      	b.n	800cc56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc10:	4b14      	ldr	r3, [pc, #80]	; (800cc64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d209      	bcs.n	800cc34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc20:	4b13      	ldr	r3, [pc, #76]	; (800cc70 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	4b0f      	ldr	r3, [pc, #60]	; (800cc64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3304      	adds	r3, #4
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	f7fe fe45 	bl	800b8bc <vListInsert>
}
 800cc32:	e010      	b.n	800cc56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc34:	4b0f      	ldr	r3, [pc, #60]	; (800cc74 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	4b0a      	ldr	r3, [pc, #40]	; (800cc64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	4619      	mov	r1, r3
 800cc40:	4610      	mov	r0, r2
 800cc42:	f7fe fe3b 	bl	800b8bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc46:	4b0c      	ldr	r3, [pc, #48]	; (800cc78 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d202      	bcs.n	800cc56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cc50:	4a09      	ldr	r2, [pc, #36]	; (800cc78 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	6013      	str	r3, [r2, #0]
}
 800cc56:	bf00      	nop
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	200005cc 	.word	0x200005cc
 800cc64:	20000508 	.word	0x20000508
 800cc68:	200005d0 	.word	0x200005d0
 800cc6c:	200005b4 	.word	0x200005b4
 800cc70:	2000059c 	.word	0x2000059c
 800cc74:	20000598 	.word	0x20000598
 800cc78:	200005e4 	.word	0x200005e4
 800cc7c:	00000000 	.word	0x00000000

0800cc80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc80:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <pxCurrentTCBConst2>)
 800cc82:	6819      	ldr	r1, [r3, #0]
 800cc84:	6808      	ldr	r0, [r1, #0]
 800cc86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8a:	f380 8809 	msr	PSP, r0
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f04f 0000 	mov.w	r0, #0
 800cc96:	f380 8811 	msr	BASEPRI, r0
 800cc9a:	4770      	bx	lr
 800cc9c:	f3af 8000 	nop.w

0800cca0 <pxCurrentTCBConst2>:
 800cca0:	20000508 	.word	0x20000508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop

0800cca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	607b      	str	r3, [r7, #4]
}
 800ccc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ccc2:	4b0f      	ldr	r3, [pc, #60]	; (800cd00 <vPortEnterCritical+0x58>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	4a0d      	ldr	r2, [pc, #52]	; (800cd00 <vPortEnterCritical+0x58>)
 800ccca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cccc:	4b0c      	ldr	r3, [pc, #48]	; (800cd00 <vPortEnterCritical+0x58>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d10f      	bne.n	800ccf4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccd4:	4b0b      	ldr	r3, [pc, #44]	; (800cd04 <vPortEnterCritical+0x5c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00a      	beq.n	800ccf4 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	603b      	str	r3, [r7, #0]
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <vPortEnterCritical+0x4a>
	}
}
 800ccf4:	bf00      	nop
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	2000000c 	.word	0x2000000c
 800cd04:	e000ed04 	.word	0xe000ed04

0800cd08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd0e:	4b12      	ldr	r3, [pc, #72]	; (800cd58 <vPortExitCritical+0x50>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10a      	bne.n	800cd2c <vPortExitCritical+0x24>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	607b      	str	r3, [r7, #4]
}
 800cd28:	bf00      	nop
 800cd2a:	e7fe      	b.n	800cd2a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd2c:	4b0a      	ldr	r3, [pc, #40]	; (800cd58 <vPortExitCritical+0x50>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	4a09      	ldr	r2, [pc, #36]	; (800cd58 <vPortExitCritical+0x50>)
 800cd34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd36:	4b08      	ldr	r3, [pc, #32]	; (800cd58 <vPortExitCritical+0x50>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d105      	bne.n	800cd4a <vPortExitCritical+0x42>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	f383 8811 	msr	BASEPRI, r3
}
 800cd48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd4a:	bf00      	nop
 800cd4c:	370c      	adds	r7, #12
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	2000000c 	.word	0x2000000c
 800cd5c:	00000000 	.word	0x00000000

0800cd60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd60:	f3ef 8009 	mrs	r0, PSP
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	4b15      	ldr	r3, [pc, #84]	; (800cdc0 <pxCurrentTCBConst>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	f01e 0f10 	tst.w	lr, #16
 800cd70:	bf08      	it	eq
 800cd72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7a:	6010      	str	r0, [r2, #0]
 800cd7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd84:	f380 8811 	msr	BASEPRI, r0
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f7ff fcc0 	bl	800c714 <vTaskSwitchContext>
 800cd94:	f04f 0000 	mov.w	r0, #0
 800cd98:	f380 8811 	msr	BASEPRI, r0
 800cd9c:	bc09      	pop	{r0, r3}
 800cd9e:	6819      	ldr	r1, [r3, #0]
 800cda0:	6808      	ldr	r0, [r1, #0]
 800cda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda6:	f01e 0f10 	tst.w	lr, #16
 800cdaa:	bf08      	it	eq
 800cdac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdb0:	f380 8809 	msr	PSP, r0
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	f3af 8000 	nop.w

0800cdc0 <pxCurrentTCBConst>:
 800cdc0:	20000508 	.word	0x20000508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop

0800cdc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	607b      	str	r3, [r7, #4]
}
 800cde0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cde2:	f7ff fbdf 	bl	800c5a4 <xTaskIncrementTick>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdec:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <SysTick_Handler+0x40>)
 800cdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	f383 8811 	msr	BASEPRI, r3
}
 800cdfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce00:	bf00      	nop
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	e000ed04 	.word	0xe000ed04

0800ce0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce12:	f3ef 8305 	mrs	r3, IPSR
 800ce16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b0f      	cmp	r3, #15
 800ce1c:	d914      	bls.n	800ce48 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce1e:	4a17      	ldr	r2, [pc, #92]	; (800ce7c <vPortValidateInterruptPriority+0x70>)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4413      	add	r3, r2
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce28:	4b15      	ldr	r3, [pc, #84]	; (800ce80 <vPortValidateInterruptPriority+0x74>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	7afa      	ldrb	r2, [r7, #11]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d20a      	bcs.n	800ce48 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	607b      	str	r3, [r7, #4]
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce48:	4b0e      	ldr	r3, [pc, #56]	; (800ce84 <vPortValidateInterruptPriority+0x78>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce50:	4b0d      	ldr	r3, [pc, #52]	; (800ce88 <vPortValidateInterruptPriority+0x7c>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d90a      	bls.n	800ce6e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	603b      	str	r3, [r7, #0]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <vPortValidateInterruptPriority+0x60>
	}
 800ce6e:	bf00      	nop
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	e000e3f0 	.word	0xe000e3f0
 800ce80:	200005ec 	.word	0x200005ec
 800ce84:	e000ed0c 	.word	0xe000ed0c
 800ce88:	200005f0 	.word	0x200005f0

0800ce8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08a      	sub	sp, #40	; 0x28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce94:	2300      	movs	r3, #0
 800ce96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce98:	f7ff fab8 	bl	800c40c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce9c:	4b5d      	ldr	r3, [pc, #372]	; (800d014 <pvPortMalloc+0x188>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d101      	bne.n	800cea8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cea4:	f000 f8c2 	bl	800d02c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cea8:	4b5b      	ldr	r3, [pc, #364]	; (800d018 <pvPortMalloc+0x18c>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4013      	ands	r3, r2
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f040 8093 	bne.w	800cfdc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d01d      	beq.n	800cef8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cebc:	2208      	movs	r2, #8
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4413      	add	r3, r2
 800cec2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f003 0307 	and.w	r3, r3, #7
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d014      	beq.n	800cef8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f023 0307 	bic.w	r3, r3, #7
 800ced4:	3308      	adds	r3, #8
 800ced6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f003 0307 	and.w	r3, r3, #7
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <pvPortMalloc+0x6c>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	617b      	str	r3, [r7, #20]
}
 800cef4:	bf00      	nop
 800cef6:	e7fe      	b.n	800cef6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d06e      	beq.n	800cfdc <pvPortMalloc+0x150>
 800cefe:	4b47      	ldr	r3, [pc, #284]	; (800d01c <pvPortMalloc+0x190>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d869      	bhi.n	800cfdc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf08:	4b45      	ldr	r3, [pc, #276]	; (800d020 <pvPortMalloc+0x194>)
 800cf0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf0c:	4b44      	ldr	r3, [pc, #272]	; (800d020 <pvPortMalloc+0x194>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf12:	e004      	b.n	800cf1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d903      	bls.n	800cf30 <pvPortMalloc+0xa4>
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1f1      	bne.n	800cf14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf30:	4b38      	ldr	r3, [pc, #224]	; (800d014 <pvPortMalloc+0x188>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d050      	beq.n	800cfdc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf3a:	6a3b      	ldr	r3, [r7, #32]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2208      	movs	r2, #8
 800cf40:	4413      	add	r3, r2
 800cf42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	1ad2      	subs	r2, r2, r3
 800cf54:	2308      	movs	r3, #8
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d91f      	bls.n	800cf9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4413      	add	r3, r2
 800cf62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	f003 0307 	and.w	r3, r3, #7
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00a      	beq.n	800cf84 <pvPortMalloc+0xf8>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	613b      	str	r3, [r7, #16]
}
 800cf80:	bf00      	nop
 800cf82:	e7fe      	b.n	800cf82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	685a      	ldr	r2, [r3, #4]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	1ad2      	subs	r2, r2, r3
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf96:	69b8      	ldr	r0, [r7, #24]
 800cf98:	f000 f8aa 	bl	800d0f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf9c:	4b1f      	ldr	r3, [pc, #124]	; (800d01c <pvPortMalloc+0x190>)
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	4a1d      	ldr	r2, [pc, #116]	; (800d01c <pvPortMalloc+0x190>)
 800cfa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfaa:	4b1c      	ldr	r3, [pc, #112]	; (800d01c <pvPortMalloc+0x190>)
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	4b1d      	ldr	r3, [pc, #116]	; (800d024 <pvPortMalloc+0x198>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d203      	bcs.n	800cfbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfb6:	4b19      	ldr	r3, [pc, #100]	; (800d01c <pvPortMalloc+0x190>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a1a      	ldr	r2, [pc, #104]	; (800d024 <pvPortMalloc+0x198>)
 800cfbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	685a      	ldr	r2, [r3, #4]
 800cfc2:	4b15      	ldr	r3, [pc, #84]	; (800d018 <pvPortMalloc+0x18c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	2200      	movs	r2, #0
 800cfd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cfd2:	4b15      	ldr	r3, [pc, #84]	; (800d028 <pvPortMalloc+0x19c>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	4a13      	ldr	r2, [pc, #76]	; (800d028 <pvPortMalloc+0x19c>)
 800cfda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfdc:	f7ff fa24 	bl	800c428 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cfe6:	f7f3 fa9c 	bl	8000522 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	f003 0307 	and.w	r3, r3, #7
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00a      	beq.n	800d00a <pvPortMalloc+0x17e>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	60fb      	str	r3, [r7, #12]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <pvPortMalloc+0x17c>
	return pvReturn;
 800d00a:	69fb      	ldr	r3, [r7, #28]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3728      	adds	r7, #40	; 0x28
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	200085fc 	.word	0x200085fc
 800d018:	2000860c 	.word	0x2000860c
 800d01c:	20008600 	.word	0x20008600
 800d020:	200085f4 	.word	0x200085f4
 800d024:	20008604 	.word	0x20008604
 800d028:	20008608 	.word	0x20008608

0800d02c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d036:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d038:	4b27      	ldr	r3, [pc, #156]	; (800d0d8 <prvHeapInit+0xac>)
 800d03a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f003 0307 	and.w	r3, r3, #7
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00c      	beq.n	800d060 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3307      	adds	r3, #7
 800d04a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f023 0307 	bic.w	r3, r3, #7
 800d052:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	4a1f      	ldr	r2, [pc, #124]	; (800d0d8 <prvHeapInit+0xac>)
 800d05c:	4413      	add	r3, r2
 800d05e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d064:	4a1d      	ldr	r2, [pc, #116]	; (800d0dc <prvHeapInit+0xb0>)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d06a:	4b1c      	ldr	r3, [pc, #112]	; (800d0dc <prvHeapInit+0xb0>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	4413      	add	r3, r2
 800d076:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d078:	2208      	movs	r2, #8
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	1a9b      	subs	r3, r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f023 0307 	bic.w	r3, r3, #7
 800d086:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	4a15      	ldr	r2, [pc, #84]	; (800d0e0 <prvHeapInit+0xb4>)
 800d08c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d08e:	4b14      	ldr	r3, [pc, #80]	; (800d0e0 <prvHeapInit+0xb4>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2200      	movs	r2, #0
 800d094:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d096:	4b12      	ldr	r3, [pc, #72]	; (800d0e0 <prvHeapInit+0xb4>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2200      	movs	r2, #0
 800d09c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	1ad2      	subs	r2, r2, r3
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0ac:	4b0c      	ldr	r3, [pc, #48]	; (800d0e0 <prvHeapInit+0xb4>)
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	4a0a      	ldr	r2, [pc, #40]	; (800d0e4 <prvHeapInit+0xb8>)
 800d0ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	4a09      	ldr	r2, [pc, #36]	; (800d0e8 <prvHeapInit+0xbc>)
 800d0c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0c4:	4b09      	ldr	r3, [pc, #36]	; (800d0ec <prvHeapInit+0xc0>)
 800d0c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0ca:	601a      	str	r2, [r3, #0]
}
 800d0cc:	bf00      	nop
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	200005f4 	.word	0x200005f4
 800d0dc:	200085f4 	.word	0x200085f4
 800d0e0:	200085fc 	.word	0x200085fc
 800d0e4:	20008604 	.word	0x20008604
 800d0e8:	20008600 	.word	0x20008600
 800d0ec:	2000860c 	.word	0x2000860c

0800d0f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0f8:	4b28      	ldr	r3, [pc, #160]	; (800d19c <prvInsertBlockIntoFreeList+0xac>)
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	e002      	b.n	800d104 <prvInsertBlockIntoFreeList+0x14>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	60fb      	str	r3, [r7, #12]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d8f7      	bhi.n	800d0fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	4413      	add	r3, r2
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d108      	bne.n	800d132 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	441a      	add	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	441a      	add	r2, r3
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	d118      	bne.n	800d178 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	4b15      	ldr	r3, [pc, #84]	; (800d1a0 <prvInsertBlockIntoFreeList+0xb0>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d00d      	beq.n	800d16e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	441a      	add	r2, r3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	601a      	str	r2, [r3, #0]
 800d16c:	e008      	b.n	800d180 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d16e:	4b0c      	ldr	r3, [pc, #48]	; (800d1a0 <prvInsertBlockIntoFreeList+0xb0>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	e003      	b.n	800d180 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	429a      	cmp	r2, r3
 800d186:	d002      	beq.n	800d18e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d18e:	bf00      	nop
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	200085f4 	.word	0x200085f4
 800d1a0:	200085fc 	.word	0x200085fc

0800d1a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe f8fc 	bl	800b3b0 <USBH_LL_IncTimer>
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe f940 	bl	800b454 <USBH_LL_Connect>
}
 800d1d4:	bf00      	nop
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fe f955 	bl	800b49a <USBH_LL_Disconnect>
}
 800d1f0:	bf00      	nop
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	460b      	mov	r3, r1
 800d202:	70fb      	strb	r3, [r7, #3]
 800d204:	4613      	mov	r3, r2
 800d206:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe f975 	bl	800b4fe <USBH_LL_NotifyURBChange>
#endif
}
 800d214:	bf00      	nop
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe f8ea 	bl	800b404 <USBH_LL_PortEnabled>
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe f8f6 	bl	800b438 <USBH_LL_PortDisabled>
}
 800d24c:	bf00      	nop
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d25c:	2300      	movs	r3, #0
 800d25e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d260:	2300      	movs	r3, #0
 800d262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7f7 f992 	bl	8004594 <HAL_HCD_Stop>
 800d270:	4603      	mov	r3, r0
 800d272:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d274:	7bfb      	ldrb	r3, [r7, #15]
 800d276:	4618      	mov	r0, r3
 800d278:	f000 f808 	bl	800d28c <USBH_Get_USB_Status>
 800d27c:	4603      	mov	r3, r0
 800d27e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d280:	7bbb      	ldrb	r3, [r7, #14]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	4603      	mov	r3, r0
 800d294:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d296:	2300      	movs	r3, #0
 800d298:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d29a:	79fb      	ldrb	r3, [r7, #7]
 800d29c:	2b03      	cmp	r3, #3
 800d29e:	d817      	bhi.n	800d2d0 <USBH_Get_USB_Status+0x44>
 800d2a0:	a201      	add	r2, pc, #4	; (adr r2, 800d2a8 <USBH_Get_USB_Status+0x1c>)
 800d2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a6:	bf00      	nop
 800d2a8:	0800d2b9 	.word	0x0800d2b9
 800d2ac:	0800d2bf 	.word	0x0800d2bf
 800d2b0:	0800d2c5 	.word	0x0800d2c5
 800d2b4:	0800d2cb 	.word	0x0800d2cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d2bc:	e00b      	b.n	800d2d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d2be:	2302      	movs	r3, #2
 800d2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c2:	e008      	b.n	800d2d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2c8:	e005      	b.n	800d2d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ce:	e002      	b.n	800d2d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d4:	bf00      	nop
  }
  return usb_status;
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3714      	adds	r7, #20
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <_ZdlPvj>:
 800d2e4:	f000 b9a5 	b.w	800d632 <_ZdlPv>

0800d2e8 <_Znwj>:
 800d2e8:	2801      	cmp	r0, #1
 800d2ea:	bf38      	it	cc
 800d2ec:	2001      	movcc	r0, #1
 800d2ee:	b510      	push	{r4, lr}
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f000 f9b0 	bl	800d658 <malloc>
 800d2f8:	b100      	cbz	r0, 800d2fc <_Znwj+0x14>
 800d2fa:	bd10      	pop	{r4, pc}
 800d2fc:	f000 f99c 	bl	800d638 <_ZSt15get_new_handlerv>
 800d300:	b908      	cbnz	r0, 800d306 <_Znwj+0x1e>
 800d302:	f000 f9a1 	bl	800d648 <abort>
 800d306:	4780      	blx	r0
 800d308:	e7f3      	b.n	800d2f2 <_Znwj+0xa>

0800d30a <_ZNSaIcEC1Ev>:
 800d30a:	4770      	bx	lr

0800d30c <_ZNSaIcED1Ev>:
 800d30c:	4770      	bx	lr

0800d30e <_ZSt17__throw_bad_allocv>:
 800d30e:	b508      	push	{r3, lr}
 800d310:	f000 f99a 	bl	800d648 <abort>

0800d314 <_ZSt28__throw_bad_array_new_lengthv>:
 800d314:	b508      	push	{r3, lr}
 800d316:	f000 f997 	bl	800d648 <abort>

0800d31a <_ZSt19__throw_logic_errorPKc>:
 800d31a:	b508      	push	{r3, lr}
 800d31c:	f000 f994 	bl	800d648 <abort>

0800d320 <_ZSt20__throw_length_errorPKc>:
 800d320:	b508      	push	{r3, lr}
 800d322:	f000 f991 	bl	800d648 <abort>

0800d326 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800d326:	b10a      	cbz	r2, 800d32c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800d328:	f000 bada 	b.w	800d8e0 <memcpy>
 800d32c:	4770      	bx	lr
	...

0800d330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800d330:	b508      	push	{r3, lr}
 800d332:	680b      	ldr	r3, [r1, #0]
 800d334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d338:	d302      	bcc.n	800d340 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800d33a:	480d      	ldr	r0, [pc, #52]	; (800d370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800d33c:	f7ff fff0 	bl	800d320 <_ZSt20__throw_length_errorPKc>
 800d340:	4293      	cmp	r3, r2
 800d342:	d90b      	bls.n	800d35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800d344:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800d348:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800d34c:	d206      	bcs.n	800d35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800d34e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d352:	bf2a      	itet	cs
 800d354:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800d358:	6008      	strcc	r0, [r1, #0]
 800d35a:	600b      	strcs	r3, [r1, #0]
 800d35c:	6808      	ldr	r0, [r1, #0]
 800d35e:	3001      	adds	r0, #1
 800d360:	d501      	bpl.n	800d366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800d362:	f7ff ffd4 	bl	800d30e <_ZSt17__throw_bad_allocv>
 800d366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d36a:	f7ff bfbd 	b.w	800d2e8 <_Znwj>
 800d36e:	bf00      	nop
 800d370:	0800dcf0 	.word	0x0800dcf0

0800d374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800d374:	f850 3b08 	ldr.w	r3, [r0], #8
 800d378:	4283      	cmp	r3, r0
 800d37a:	d002      	beq.n	800d382 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 b958 	b.w	800d632 <_ZdlPv>
 800d382:	4770      	bx	lr

0800d384 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800d384:	6840      	ldr	r0, [r0, #4]
 800d386:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800d38a:	3901      	subs	r1, #1
 800d38c:	1a09      	subs	r1, r1, r0
 800d38e:	4291      	cmp	r1, r2
 800d390:	b508      	push	{r3, lr}
 800d392:	d202      	bcs.n	800d39a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff ffc3 	bl	800d320 <_ZSt20__throw_length_errorPKc>
 800d39a:	bd08      	pop	{r3, pc}

0800d39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800d39c:	2a01      	cmp	r2, #1
 800d39e:	b410      	push	{r4}
 800d3a0:	d104      	bne.n	800d3ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800d3a2:	780a      	ldrb	r2, [r1, #0]
 800d3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3a8:	7002      	strb	r2, [r0, #0]
 800d3aa:	4770      	bx	lr
 800d3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3b0:	f7ff bfb9 	b.w	800d326 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800d3b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800d3b4:	b508      	push	{r3, lr}
 800d3b6:	1a52      	subs	r2, r2, r1
 800d3b8:	f7ff fff0 	bl	800d39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800d3bc:	bd08      	pop	{r3, pc}

0800d3be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800d3be:	b508      	push	{r3, lr}
 800d3c0:	1a52      	subs	r2, r2, r1
 800d3c2:	f7ff ffeb 	bl	800d39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800d3c6:	bd08      	pop	{r3, pc}

0800d3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800d3c8:	4288      	cmp	r0, r1
 800d3ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	460e      	mov	r6, r1
 800d3d0:	d01e      	beq.n	800d410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	684d      	ldr	r5, [r1, #4]
 800d3d6:	f853 2b08 	ldr.w	r2, [r3], #8
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	bf14      	ite	ne
 800d3de:	6882      	ldrne	r2, [r0, #8]
 800d3e0:	220f      	moveq	r2, #15
 800d3e2:	42aa      	cmp	r2, r5
 800d3e4:	d20a      	bcs.n	800d3fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 800d3e6:	a901      	add	r1, sp, #4
 800d3e8:	9501      	str	r5, [sp, #4]
 800d3ea:	f7ff ffa1 	bl	800d330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800d3ee:	4607      	mov	r7, r0
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f7ff ffbf 	bl	800d374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800d3f6:	9b01      	ldr	r3, [sp, #4]
 800d3f8:	6027      	str	r7, [r4, #0]
 800d3fa:	60a3      	str	r3, [r4, #8]
 800d3fc:	b125      	cbz	r5, 800d408 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800d3fe:	6831      	ldr	r1, [r6, #0]
 800d400:	6820      	ldr	r0, [r4, #0]
 800d402:	462a      	mov	r2, r5
 800d404:	f7ff ffca 	bl	800d39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	6065      	str	r5, [r4, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	555a      	strb	r2, [r3, r5]
 800d410:	b003      	add	sp, #12
 800d412:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800d414:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d418:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d41a:	461f      	mov	r7, r3
 800d41c:	6843      	ldr	r3, [r0, #4]
 800d41e:	eb01 0802 	add.w	r8, r1, r2
 800d422:	1ab2      	subs	r2, r6, r2
 800d424:	441a      	add	r2, r3
 800d426:	eba3 0908 	sub.w	r9, r3, r8
 800d42a:	4603      	mov	r3, r0
 800d42c:	9201      	str	r2, [sp, #4]
 800d42e:	f853 2b08 	ldr.w	r2, [r3], #8
 800d432:	429a      	cmp	r2, r3
 800d434:	bf18      	it	ne
 800d436:	6882      	ldrne	r2, [r0, #8]
 800d438:	460d      	mov	r5, r1
 800d43a:	bf08      	it	eq
 800d43c:	220f      	moveq	r2, #15
 800d43e:	a901      	add	r1, sp, #4
 800d440:	4604      	mov	r4, r0
 800d442:	f7ff ff75 	bl	800d330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800d446:	4682      	mov	sl, r0
 800d448:	b11d      	cbz	r5, 800d452 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800d44a:	6821      	ldr	r1, [r4, #0]
 800d44c:	462a      	mov	r2, r5
 800d44e:	f7ff ffa5 	bl	800d39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800d452:	b137      	cbz	r7, 800d462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800d454:	b12e      	cbz	r6, 800d462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800d456:	4632      	mov	r2, r6
 800d458:	4639      	mov	r1, r7
 800d45a:	eb0a 0005 	add.w	r0, sl, r5
 800d45e:	f7ff ff9d 	bl	800d39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800d462:	f1b9 0f00 	cmp.w	r9, #0
 800d466:	d007      	beq.n	800d478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800d468:	6821      	ldr	r1, [r4, #0]
 800d46a:	4435      	add	r5, r6
 800d46c:	464a      	mov	r2, r9
 800d46e:	4441      	add	r1, r8
 800d470:	eb0a 0005 	add.w	r0, sl, r5
 800d474:	f7ff ff92 	bl	800d39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800d478:	4620      	mov	r0, r4
 800d47a:	f7ff ff7b 	bl	800d374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800d47e:	9b01      	ldr	r3, [sp, #4]
 800d480:	f8c4 a000 	str.w	sl, [r4]
 800d484:	60a3      	str	r3, [r4, #8]
 800d486:	b002      	add	sp, #8
 800d488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d48c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800d48c:	f100 0208 	add.w	r2, r0, #8
 800d490:	6002      	str	r2, [r0, #0]
 800d492:	2200      	movs	r2, #0
 800d494:	6042      	str	r2, [r0, #4]
 800d496:	7202      	strb	r2, [r0, #8]
 800d498:	4770      	bx	lr

0800d49a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800d49a:	b570      	push	{r4, r5, r6, lr}
 800d49c:	4604      	mov	r4, r0
 800d49e:	460e      	mov	r6, r1
 800d4a0:	3008      	adds	r0, #8
 800d4a2:	6020      	str	r0, [r4, #0]
 800d4a4:	f856 3b08 	ldr.w	r3, [r6], #8
 800d4a8:	429e      	cmp	r6, r3
 800d4aa:	460d      	mov	r5, r1
 800d4ac:	d10b      	bne.n	800d4c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800d4ae:	2210      	movs	r2, #16
 800d4b0:	4631      	mov	r1, r6
 800d4b2:	f7ff ff38 	bl	800d326 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800d4b6:	686b      	ldr	r3, [r5, #4]
 800d4b8:	6063      	str	r3, [r4, #4]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	602e      	str	r6, [r5, #0]
 800d4be:	606b      	str	r3, [r5, #4]
 800d4c0:	722b      	strb	r3, [r5, #8]
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	688b      	ldr	r3, [r1, #8]
 800d4ca:	60a3      	str	r3, [r4, #8]
 800d4cc:	e7f3      	b.n	800d4b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800d4ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800d4ce:	b510      	push	{r4, lr}
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	f7ff ff4f 	bl	800d374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	bd10      	pop	{r4, pc}

0800d4da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800d4da:	b510      	push	{r4, lr}
 800d4dc:	4604      	mov	r4, r0
 800d4de:	f7ff ff73 	bl	800d3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	bd10      	pop	{r4, pc}

0800d4e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800d4e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	4623      	mov	r3, r4
 800d4ec:	6840      	ldr	r0, [r0, #4]
 800d4ee:	f853 6b08 	ldr.w	r6, [r3], #8
 800d4f2:	429e      	cmp	r6, r3
 800d4f4:	bf18      	it	ne
 800d4f6:	68a3      	ldrne	r3, [r4, #8]
 800d4f8:	eb00 0502 	add.w	r5, r0, r2
 800d4fc:	bf08      	it	eq
 800d4fe:	230f      	moveq	r3, #15
 800d500:	429d      	cmp	r5, r3
 800d502:	d80a      	bhi.n	800d51a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800d504:	b112      	cbz	r2, 800d50c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800d506:	4430      	add	r0, r6
 800d508:	f7ff ff48 	bl	800d39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	6065      	str	r5, [r4, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	4620      	mov	r0, r4
 800d514:	555a      	strb	r2, [r3, r5]
 800d516:	b002      	add	sp, #8
 800d518:	bd70      	pop	{r4, r5, r6, pc}
 800d51a:	9200      	str	r2, [sp, #0]
 800d51c:	460b      	mov	r3, r1
 800d51e:	2200      	movs	r2, #0
 800d520:	4601      	mov	r1, r0
 800d522:	4620      	mov	r0, r4
 800d524:	f7ff ff76 	bl	800d414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800d528:	e7f0      	b.n	800d50c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
	...

0800d52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800d52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d52e:	4604      	mov	r4, r0
 800d530:	4608      	mov	r0, r1
 800d532:	460d      	mov	r5, r1
 800d534:	f7f2 fe64 	bl	8000200 <strlen>
 800d538:	4b06      	ldr	r3, [pc, #24]	; (800d554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800d53a:	9001      	str	r0, [sp, #4]
 800d53c:	4602      	mov	r2, r0
 800d53e:	2100      	movs	r1, #0
 800d540:	4620      	mov	r0, r4
 800d542:	f7ff ff1f 	bl	800d384 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800d546:	9a01      	ldr	r2, [sp, #4]
 800d548:	4629      	mov	r1, r5
 800d54a:	4620      	mov	r0, r4
 800d54c:	f7ff ffcb 	bl	800d4e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800d550:	b003      	add	sp, #12
 800d552:	bd30      	pop	{r4, r5, pc}
 800d554:	0800dd08 	.word	0x0800dd08

0800d558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800d558:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d55a:	4604      	mov	r4, r0
 800d55c:	4616      	mov	r6, r2
 800d55e:	460d      	mov	r5, r1
 800d560:	b919      	cbnz	r1, 800d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800d562:	b112      	cbz	r2, 800d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800d564:	480d      	ldr	r0, [pc, #52]	; (800d59c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800d566:	f7ff fed8 	bl	800d31a <_ZSt19__throw_logic_errorPKc>
 800d56a:	1b73      	subs	r3, r6, r5
 800d56c:	2b0f      	cmp	r3, #15
 800d56e:	9301      	str	r3, [sp, #4]
 800d570:	d907      	bls.n	800d582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800d572:	2200      	movs	r2, #0
 800d574:	a901      	add	r1, sp, #4
 800d576:	4620      	mov	r0, r4
 800d578:	f7ff feda 	bl	800d330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800d57c:	9b01      	ldr	r3, [sp, #4]
 800d57e:	6020      	str	r0, [r4, #0]
 800d580:	60a3      	str	r3, [r4, #8]
 800d582:	4632      	mov	r2, r6
 800d584:	4629      	mov	r1, r5
 800d586:	6820      	ldr	r0, [r4, #0]
 800d588:	f7ff ff14 	bl	800d3b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800d58c:	9b01      	ldr	r3, [sp, #4]
 800d58e:	6822      	ldr	r2, [r4, #0]
 800d590:	6063      	str	r3, [r4, #4]
 800d592:	2100      	movs	r1, #0
 800d594:	54d1      	strb	r1, [r2, r3]
 800d596:	b002      	add	sp, #8
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	bf00      	nop
 800d59c:	0800dd1d 	.word	0x0800dd1d

0800d5a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	f100 0308 	add.w	r3, r0, #8
 800d5a6:	6003      	str	r3, [r0, #0]
 800d5a8:	e9d1 5200 	ldrd	r5, r2, [r1]
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	f04f 0300 	mov.w	r3, #0
 800d5b2:	442a      	add	r2, r5
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	f7ff ffcf 	bl	800d558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d5c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800d5c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4616      	mov	r6, r2
 800d5c6:	460d      	mov	r5, r1
 800d5c8:	b919      	cbnz	r1, 800d5d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800d5ca:	b112      	cbz	r2, 800d5d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800d5cc:	480d      	ldr	r0, [pc, #52]	; (800d604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800d5ce:	f7ff fea4 	bl	800d31a <_ZSt19__throw_logic_errorPKc>
 800d5d2:	1b73      	subs	r3, r6, r5
 800d5d4:	2b0f      	cmp	r3, #15
 800d5d6:	9301      	str	r3, [sp, #4]
 800d5d8:	d907      	bls.n	800d5ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800d5da:	2200      	movs	r2, #0
 800d5dc:	a901      	add	r1, sp, #4
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7ff fea6 	bl	800d330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800d5e4:	9b01      	ldr	r3, [sp, #4]
 800d5e6:	6020      	str	r0, [r4, #0]
 800d5e8:	60a3      	str	r3, [r4, #8]
 800d5ea:	4632      	mov	r2, r6
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	6820      	ldr	r0, [r4, #0]
 800d5f0:	f7ff fee5 	bl	800d3be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800d5f4:	9b01      	ldr	r3, [sp, #4]
 800d5f6:	6822      	ldr	r2, [r4, #0]
 800d5f8:	6063      	str	r3, [r4, #4]
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	54d1      	strb	r1, [r2, r3]
 800d5fe:	b002      	add	sp, #8
 800d600:	bd70      	pop	{r4, r5, r6, pc}
 800d602:	bf00      	nop
 800d604:	0800dd1d 	.word	0x0800dd1d

0800d608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	f100 0308 	add.w	r3, r0, #8
 800d60e:	4604      	mov	r4, r0
 800d610:	6003      	str	r3, [r0, #0]
 800d612:	460d      	mov	r5, r1
 800d614:	b159      	cbz	r1, 800d62e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800d616:	4608      	mov	r0, r1
 800d618:	f7f2 fdf2 	bl	8000200 <strlen>
 800d61c:	182a      	adds	r2, r5, r0
 800d61e:	4620      	mov	r0, r4
 800d620:	f04f 0300 	mov.w	r3, #0
 800d624:	4629      	mov	r1, r5
 800d626:	f7ff ffcb 	bl	800d5c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800d62a:	4620      	mov	r0, r4
 800d62c:	bd38      	pop	{r3, r4, r5, pc}
 800d62e:	2201      	movs	r2, #1
 800d630:	e7f5      	b.n	800d61e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800d632 <_ZdlPv>:
 800d632:	f000 b819 	b.w	800d668 <free>
	...

0800d638 <_ZSt15get_new_handlerv>:
 800d638:	4b02      	ldr	r3, [pc, #8]	; (800d644 <_ZSt15get_new_handlerv+0xc>)
 800d63a:	6818      	ldr	r0, [r3, #0]
 800d63c:	f3bf 8f5b 	dmb	ish
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	200089f0 	.word	0x200089f0

0800d648 <abort>:
 800d648:	b508      	push	{r3, lr}
 800d64a:	2006      	movs	r0, #6
 800d64c:	f000 f8f0 	bl	800d830 <raise>
 800d650:	2001      	movs	r0, #1
 800d652:	f7f5 fa7d 	bl	8002b50 <_exit>
	...

0800d658 <malloc>:
 800d658:	4b02      	ldr	r3, [pc, #8]	; (800d664 <malloc+0xc>)
 800d65a:	4601      	mov	r1, r0
 800d65c:	6818      	ldr	r0, [r3, #0]
 800d65e:	f000 b82b 	b.w	800d6b8 <_malloc_r>
 800d662:	bf00      	nop
 800d664:	2000005c 	.word	0x2000005c

0800d668 <free>:
 800d668:	4b02      	ldr	r3, [pc, #8]	; (800d674 <free+0xc>)
 800d66a:	4601      	mov	r1, r0
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	f000 b945 	b.w	800d8fc <_free_r>
 800d672:	bf00      	nop
 800d674:	2000005c 	.word	0x2000005c

0800d678 <sbrk_aligned>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	4e0e      	ldr	r6, [pc, #56]	; (800d6b4 <sbrk_aligned+0x3c>)
 800d67c:	460c      	mov	r4, r1
 800d67e:	6831      	ldr	r1, [r6, #0]
 800d680:	4605      	mov	r5, r0
 800d682:	b911      	cbnz	r1, 800d68a <sbrk_aligned+0x12>
 800d684:	f000 f8f0 	bl	800d868 <_sbrk_r>
 800d688:	6030      	str	r0, [r6, #0]
 800d68a:	4621      	mov	r1, r4
 800d68c:	4628      	mov	r0, r5
 800d68e:	f000 f8eb 	bl	800d868 <_sbrk_r>
 800d692:	1c43      	adds	r3, r0, #1
 800d694:	d00a      	beq.n	800d6ac <sbrk_aligned+0x34>
 800d696:	1cc4      	adds	r4, r0, #3
 800d698:	f024 0403 	bic.w	r4, r4, #3
 800d69c:	42a0      	cmp	r0, r4
 800d69e:	d007      	beq.n	800d6b0 <sbrk_aligned+0x38>
 800d6a0:	1a21      	subs	r1, r4, r0
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	f000 f8e0 	bl	800d868 <_sbrk_r>
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	d101      	bne.n	800d6b0 <sbrk_aligned+0x38>
 800d6ac:	f04f 34ff 	mov.w	r4, #4294967295
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	200089f8 	.word	0x200089f8

0800d6b8 <_malloc_r>:
 800d6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6bc:	1ccd      	adds	r5, r1, #3
 800d6be:	f025 0503 	bic.w	r5, r5, #3
 800d6c2:	3508      	adds	r5, #8
 800d6c4:	2d0c      	cmp	r5, #12
 800d6c6:	bf38      	it	cc
 800d6c8:	250c      	movcc	r5, #12
 800d6ca:	2d00      	cmp	r5, #0
 800d6cc:	4607      	mov	r7, r0
 800d6ce:	db01      	blt.n	800d6d4 <_malloc_r+0x1c>
 800d6d0:	42a9      	cmp	r1, r5
 800d6d2:	d905      	bls.n	800d6e0 <_malloc_r+0x28>
 800d6d4:	230c      	movs	r3, #12
 800d6d6:	603b      	str	r3, [r7, #0]
 800d6d8:	2600      	movs	r6, #0
 800d6da:	4630      	mov	r0, r6
 800d6dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d7b4 <_malloc_r+0xfc>
 800d6e4:	f000 f868 	bl	800d7b8 <__malloc_lock>
 800d6e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ec:	461c      	mov	r4, r3
 800d6ee:	bb5c      	cbnz	r4, 800d748 <_malloc_r+0x90>
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	4638      	mov	r0, r7
 800d6f4:	f7ff ffc0 	bl	800d678 <sbrk_aligned>
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	d155      	bne.n	800d7aa <_malloc_r+0xf2>
 800d6fe:	f8d8 4000 	ldr.w	r4, [r8]
 800d702:	4626      	mov	r6, r4
 800d704:	2e00      	cmp	r6, #0
 800d706:	d145      	bne.n	800d794 <_malloc_r+0xdc>
 800d708:	2c00      	cmp	r4, #0
 800d70a:	d048      	beq.n	800d79e <_malloc_r+0xe6>
 800d70c:	6823      	ldr	r3, [r4, #0]
 800d70e:	4631      	mov	r1, r6
 800d710:	4638      	mov	r0, r7
 800d712:	eb04 0903 	add.w	r9, r4, r3
 800d716:	f000 f8a7 	bl	800d868 <_sbrk_r>
 800d71a:	4581      	cmp	r9, r0
 800d71c:	d13f      	bne.n	800d79e <_malloc_r+0xe6>
 800d71e:	6821      	ldr	r1, [r4, #0]
 800d720:	1a6d      	subs	r5, r5, r1
 800d722:	4629      	mov	r1, r5
 800d724:	4638      	mov	r0, r7
 800d726:	f7ff ffa7 	bl	800d678 <sbrk_aligned>
 800d72a:	3001      	adds	r0, #1
 800d72c:	d037      	beq.n	800d79e <_malloc_r+0xe6>
 800d72e:	6823      	ldr	r3, [r4, #0]
 800d730:	442b      	add	r3, r5
 800d732:	6023      	str	r3, [r4, #0]
 800d734:	f8d8 3000 	ldr.w	r3, [r8]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d038      	beq.n	800d7ae <_malloc_r+0xf6>
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	42a2      	cmp	r2, r4
 800d740:	d12b      	bne.n	800d79a <_malloc_r+0xe2>
 800d742:	2200      	movs	r2, #0
 800d744:	605a      	str	r2, [r3, #4]
 800d746:	e00f      	b.n	800d768 <_malloc_r+0xb0>
 800d748:	6822      	ldr	r2, [r4, #0]
 800d74a:	1b52      	subs	r2, r2, r5
 800d74c:	d41f      	bmi.n	800d78e <_malloc_r+0xd6>
 800d74e:	2a0b      	cmp	r2, #11
 800d750:	d917      	bls.n	800d782 <_malloc_r+0xca>
 800d752:	1961      	adds	r1, r4, r5
 800d754:	42a3      	cmp	r3, r4
 800d756:	6025      	str	r5, [r4, #0]
 800d758:	bf18      	it	ne
 800d75a:	6059      	strne	r1, [r3, #4]
 800d75c:	6863      	ldr	r3, [r4, #4]
 800d75e:	bf08      	it	eq
 800d760:	f8c8 1000 	streq.w	r1, [r8]
 800d764:	5162      	str	r2, [r4, r5]
 800d766:	604b      	str	r3, [r1, #4]
 800d768:	4638      	mov	r0, r7
 800d76a:	f104 060b 	add.w	r6, r4, #11
 800d76e:	f000 f829 	bl	800d7c4 <__malloc_unlock>
 800d772:	f026 0607 	bic.w	r6, r6, #7
 800d776:	1d23      	adds	r3, r4, #4
 800d778:	1af2      	subs	r2, r6, r3
 800d77a:	d0ae      	beq.n	800d6da <_malloc_r+0x22>
 800d77c:	1b9b      	subs	r3, r3, r6
 800d77e:	50a3      	str	r3, [r4, r2]
 800d780:	e7ab      	b.n	800d6da <_malloc_r+0x22>
 800d782:	42a3      	cmp	r3, r4
 800d784:	6862      	ldr	r2, [r4, #4]
 800d786:	d1dd      	bne.n	800d744 <_malloc_r+0x8c>
 800d788:	f8c8 2000 	str.w	r2, [r8]
 800d78c:	e7ec      	b.n	800d768 <_malloc_r+0xb0>
 800d78e:	4623      	mov	r3, r4
 800d790:	6864      	ldr	r4, [r4, #4]
 800d792:	e7ac      	b.n	800d6ee <_malloc_r+0x36>
 800d794:	4634      	mov	r4, r6
 800d796:	6876      	ldr	r6, [r6, #4]
 800d798:	e7b4      	b.n	800d704 <_malloc_r+0x4c>
 800d79a:	4613      	mov	r3, r2
 800d79c:	e7cc      	b.n	800d738 <_malloc_r+0x80>
 800d79e:	230c      	movs	r3, #12
 800d7a0:	603b      	str	r3, [r7, #0]
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f000 f80e 	bl	800d7c4 <__malloc_unlock>
 800d7a8:	e797      	b.n	800d6da <_malloc_r+0x22>
 800d7aa:	6025      	str	r5, [r4, #0]
 800d7ac:	e7dc      	b.n	800d768 <_malloc_r+0xb0>
 800d7ae:	605b      	str	r3, [r3, #4]
 800d7b0:	deff      	udf	#255	; 0xff
 800d7b2:	bf00      	nop
 800d7b4:	200089f4 	.word	0x200089f4

0800d7b8 <__malloc_lock>:
 800d7b8:	4801      	ldr	r0, [pc, #4]	; (800d7c0 <__malloc_lock+0x8>)
 800d7ba:	f000 b88f 	b.w	800d8dc <__retarget_lock_acquire_recursive>
 800d7be:	bf00      	nop
 800d7c0:	20008b38 	.word	0x20008b38

0800d7c4 <__malloc_unlock>:
 800d7c4:	4801      	ldr	r0, [pc, #4]	; (800d7cc <__malloc_unlock+0x8>)
 800d7c6:	f000 b88a 	b.w	800d8de <__retarget_lock_release_recursive>
 800d7ca:	bf00      	nop
 800d7cc:	20008b38 	.word	0x20008b38

0800d7d0 <memset>:
 800d7d0:	4402      	add	r2, r0
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d100      	bne.n	800d7da <memset+0xa>
 800d7d8:	4770      	bx	lr
 800d7da:	f803 1b01 	strb.w	r1, [r3], #1
 800d7de:	e7f9      	b.n	800d7d4 <memset+0x4>

0800d7e0 <_raise_r>:
 800d7e0:	291f      	cmp	r1, #31
 800d7e2:	b538      	push	{r3, r4, r5, lr}
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	460d      	mov	r5, r1
 800d7e8:	d904      	bls.n	800d7f4 <_raise_r+0x14>
 800d7ea:	2316      	movs	r3, #22
 800d7ec:	6003      	str	r3, [r0, #0]
 800d7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f2:	bd38      	pop	{r3, r4, r5, pc}
 800d7f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d7f6:	b112      	cbz	r2, 800d7fe <_raise_r+0x1e>
 800d7f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7fc:	b94b      	cbnz	r3, 800d812 <_raise_r+0x32>
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 f830 	bl	800d864 <_getpid_r>
 800d804:	462a      	mov	r2, r5
 800d806:	4601      	mov	r1, r0
 800d808:	4620      	mov	r0, r4
 800d80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d80e:	f000 b817 	b.w	800d840 <_kill_r>
 800d812:	2b01      	cmp	r3, #1
 800d814:	d00a      	beq.n	800d82c <_raise_r+0x4c>
 800d816:	1c59      	adds	r1, r3, #1
 800d818:	d103      	bne.n	800d822 <_raise_r+0x42>
 800d81a:	2316      	movs	r3, #22
 800d81c:	6003      	str	r3, [r0, #0]
 800d81e:	2001      	movs	r0, #1
 800d820:	e7e7      	b.n	800d7f2 <_raise_r+0x12>
 800d822:	2400      	movs	r4, #0
 800d824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d828:	4628      	mov	r0, r5
 800d82a:	4798      	blx	r3
 800d82c:	2000      	movs	r0, #0
 800d82e:	e7e0      	b.n	800d7f2 <_raise_r+0x12>

0800d830 <raise>:
 800d830:	4b02      	ldr	r3, [pc, #8]	; (800d83c <raise+0xc>)
 800d832:	4601      	mov	r1, r0
 800d834:	6818      	ldr	r0, [r3, #0]
 800d836:	f7ff bfd3 	b.w	800d7e0 <_raise_r>
 800d83a:	bf00      	nop
 800d83c:	2000005c 	.word	0x2000005c

0800d840 <_kill_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	4d07      	ldr	r5, [pc, #28]	; (800d860 <_kill_r+0x20>)
 800d844:	2300      	movs	r3, #0
 800d846:	4604      	mov	r4, r0
 800d848:	4608      	mov	r0, r1
 800d84a:	4611      	mov	r1, r2
 800d84c:	602b      	str	r3, [r5, #0]
 800d84e:	f7f5 f96f 	bl	8002b30 <_kill>
 800d852:	1c43      	adds	r3, r0, #1
 800d854:	d102      	bne.n	800d85c <_kill_r+0x1c>
 800d856:	682b      	ldr	r3, [r5, #0]
 800d858:	b103      	cbz	r3, 800d85c <_kill_r+0x1c>
 800d85a:	6023      	str	r3, [r4, #0]
 800d85c:	bd38      	pop	{r3, r4, r5, pc}
 800d85e:	bf00      	nop
 800d860:	20008b34 	.word	0x20008b34

0800d864 <_getpid_r>:
 800d864:	f7f5 b95c 	b.w	8002b20 <_getpid>

0800d868 <_sbrk_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d06      	ldr	r5, [pc, #24]	; (800d884 <_sbrk_r+0x1c>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	602b      	str	r3, [r5, #0]
 800d874:	f7f5 f976 	bl	8002b64 <_sbrk>
 800d878:	1c43      	adds	r3, r0, #1
 800d87a:	d102      	bne.n	800d882 <_sbrk_r+0x1a>
 800d87c:	682b      	ldr	r3, [r5, #0]
 800d87e:	b103      	cbz	r3, 800d882 <_sbrk_r+0x1a>
 800d880:	6023      	str	r3, [r4, #0]
 800d882:	bd38      	pop	{r3, r4, r5, pc}
 800d884:	20008b34 	.word	0x20008b34

0800d888 <__errno>:
 800d888:	4b01      	ldr	r3, [pc, #4]	; (800d890 <__errno+0x8>)
 800d88a:	6818      	ldr	r0, [r3, #0]
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	2000005c 	.word	0x2000005c

0800d894 <__libc_init_array>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	4d0d      	ldr	r5, [pc, #52]	; (800d8cc <__libc_init_array+0x38>)
 800d898:	4c0d      	ldr	r4, [pc, #52]	; (800d8d0 <__libc_init_array+0x3c>)
 800d89a:	1b64      	subs	r4, r4, r5
 800d89c:	10a4      	asrs	r4, r4, #2
 800d89e:	2600      	movs	r6, #0
 800d8a0:	42a6      	cmp	r6, r4
 800d8a2:	d109      	bne.n	800d8b8 <__libc_init_array+0x24>
 800d8a4:	4d0b      	ldr	r5, [pc, #44]	; (800d8d4 <__libc_init_array+0x40>)
 800d8a6:	4c0c      	ldr	r4, [pc, #48]	; (800d8d8 <__libc_init_array+0x44>)
 800d8a8:	f000 f874 	bl	800d994 <_init>
 800d8ac:	1b64      	subs	r4, r4, r5
 800d8ae:	10a4      	asrs	r4, r4, #2
 800d8b0:	2600      	movs	r6, #0
 800d8b2:	42a6      	cmp	r6, r4
 800d8b4:	d105      	bne.n	800d8c2 <__libc_init_array+0x2e>
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8bc:	4798      	blx	r3
 800d8be:	3601      	adds	r6, #1
 800d8c0:	e7ee      	b.n	800d8a0 <__libc_init_array+0xc>
 800d8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8c6:	4798      	blx	r3
 800d8c8:	3601      	adds	r6, #1
 800d8ca:	e7f2      	b.n	800d8b2 <__libc_init_array+0x1e>
 800d8cc:	0800dd50 	.word	0x0800dd50
 800d8d0:	0800dd50 	.word	0x0800dd50
 800d8d4:	0800dd50 	.word	0x0800dd50
 800d8d8:	0800dd54 	.word	0x0800dd54

0800d8dc <__retarget_lock_acquire_recursive>:
 800d8dc:	4770      	bx	lr

0800d8de <__retarget_lock_release_recursive>:
 800d8de:	4770      	bx	lr

0800d8e0 <memcpy>:
 800d8e0:	440a      	add	r2, r1
 800d8e2:	4291      	cmp	r1, r2
 800d8e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8e8:	d100      	bne.n	800d8ec <memcpy+0xc>
 800d8ea:	4770      	bx	lr
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8f6:	4291      	cmp	r1, r2
 800d8f8:	d1f9      	bne.n	800d8ee <memcpy+0xe>
 800d8fa:	bd10      	pop	{r4, pc}

0800d8fc <_free_r>:
 800d8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8fe:	2900      	cmp	r1, #0
 800d900:	d044      	beq.n	800d98c <_free_r+0x90>
 800d902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d906:	9001      	str	r0, [sp, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f1a1 0404 	sub.w	r4, r1, #4
 800d90e:	bfb8      	it	lt
 800d910:	18e4      	addlt	r4, r4, r3
 800d912:	f7ff ff51 	bl	800d7b8 <__malloc_lock>
 800d916:	4a1e      	ldr	r2, [pc, #120]	; (800d990 <_free_r+0x94>)
 800d918:	9801      	ldr	r0, [sp, #4]
 800d91a:	6813      	ldr	r3, [r2, #0]
 800d91c:	b933      	cbnz	r3, 800d92c <_free_r+0x30>
 800d91e:	6063      	str	r3, [r4, #4]
 800d920:	6014      	str	r4, [r2, #0]
 800d922:	b003      	add	sp, #12
 800d924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d928:	f7ff bf4c 	b.w	800d7c4 <__malloc_unlock>
 800d92c:	42a3      	cmp	r3, r4
 800d92e:	d908      	bls.n	800d942 <_free_r+0x46>
 800d930:	6825      	ldr	r5, [r4, #0]
 800d932:	1961      	adds	r1, r4, r5
 800d934:	428b      	cmp	r3, r1
 800d936:	bf01      	itttt	eq
 800d938:	6819      	ldreq	r1, [r3, #0]
 800d93a:	685b      	ldreq	r3, [r3, #4]
 800d93c:	1949      	addeq	r1, r1, r5
 800d93e:	6021      	streq	r1, [r4, #0]
 800d940:	e7ed      	b.n	800d91e <_free_r+0x22>
 800d942:	461a      	mov	r2, r3
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	b10b      	cbz	r3, 800d94c <_free_r+0x50>
 800d948:	42a3      	cmp	r3, r4
 800d94a:	d9fa      	bls.n	800d942 <_free_r+0x46>
 800d94c:	6811      	ldr	r1, [r2, #0]
 800d94e:	1855      	adds	r5, r2, r1
 800d950:	42a5      	cmp	r5, r4
 800d952:	d10b      	bne.n	800d96c <_free_r+0x70>
 800d954:	6824      	ldr	r4, [r4, #0]
 800d956:	4421      	add	r1, r4
 800d958:	1854      	adds	r4, r2, r1
 800d95a:	42a3      	cmp	r3, r4
 800d95c:	6011      	str	r1, [r2, #0]
 800d95e:	d1e0      	bne.n	800d922 <_free_r+0x26>
 800d960:	681c      	ldr	r4, [r3, #0]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	6053      	str	r3, [r2, #4]
 800d966:	440c      	add	r4, r1
 800d968:	6014      	str	r4, [r2, #0]
 800d96a:	e7da      	b.n	800d922 <_free_r+0x26>
 800d96c:	d902      	bls.n	800d974 <_free_r+0x78>
 800d96e:	230c      	movs	r3, #12
 800d970:	6003      	str	r3, [r0, #0]
 800d972:	e7d6      	b.n	800d922 <_free_r+0x26>
 800d974:	6825      	ldr	r5, [r4, #0]
 800d976:	1961      	adds	r1, r4, r5
 800d978:	428b      	cmp	r3, r1
 800d97a:	bf04      	itt	eq
 800d97c:	6819      	ldreq	r1, [r3, #0]
 800d97e:	685b      	ldreq	r3, [r3, #4]
 800d980:	6063      	str	r3, [r4, #4]
 800d982:	bf04      	itt	eq
 800d984:	1949      	addeq	r1, r1, r5
 800d986:	6021      	streq	r1, [r4, #0]
 800d988:	6054      	str	r4, [r2, #4]
 800d98a:	e7ca      	b.n	800d922 <_free_r+0x26>
 800d98c:	b003      	add	sp, #12
 800d98e:	bd30      	pop	{r4, r5, pc}
 800d990:	200089f4 	.word	0x200089f4

0800d994 <_init>:
 800d994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d996:	bf00      	nop
 800d998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d99a:	bc08      	pop	{r3}
 800d99c:	469e      	mov	lr, r3
 800d99e:	4770      	bx	lr

0800d9a0 <_fini>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	bf00      	nop
 800d9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a6:	bc08      	pop	{r3}
 800d9a8:	469e      	mov	lr, r3
 800d9aa:	4770      	bx	lr
