
STM32F469I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3cc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  0800e58c  0800e58c  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 000000a0  0800f174  0800f174  0001f174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f214  0800f214  00032b44  2**0
                  CONTENTS
  5 .ARM          00000008  0800f214  0800f214  0001f214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f21c  0800f21c  00032b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000018  0800f21c  0800f21c  0001f21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0800f234  0800f234  0001f234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000bc  20000000  0800f23c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000a454  200000bc  0800f2f8  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2000a510  0800f2f8  0002a510  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00032b44  2**0
                  CONTENTS, READONLY
 13 ExtFlashSection 00000000  90000000  90000000  00032b74  2**0
                  CONTENTS
 14 FontFlashSection 00002b44  90000000  90000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000000  90002b44  90002b44  00032b74  2**0
                  CONTENTS
 16 .comment      000000c2  00000000  00000000  00032b74  2**0
                  CONTENTS, READONLY
 17 .debug_line   00047934  00000000  00000000  00032c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  0007a56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   00085709  00000000  00000000  0007a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001056d  00000000  00000000  000ffcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 000028a0  00000000  00000000  00110248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00131be6  00000000  00000000  00112ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00002df5  00000000  00000000  002446ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 000171d5  00000000  00000000  002474c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00036c7a  00000000  00000000  0025e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  00007c78  00000000  00000000  00295314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e574 	.word	0x0800e574

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000c0 	.word	0x200000c0
 80001fc:	0800e574 	.word	0x0800e574

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005a2:	e003      	b.n	80005ac <LoopCopyDataInit>

080005a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005aa:	3104      	adds	r1, #4

080005ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005b4:	d3f6      	bcc.n	80005a4 <CopyDataInit>
  ldr  r2, =_sbss
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005b8:	e002      	b.n	80005c0 <LoopFillZerobss>

080005ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005bc:	f842 3b04 	str.w	r3, [r2], #4

080005c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005c4:	d3f9      	bcc.n	80005ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005c6:	f002 fdbb 	bl	8003140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ca:	f00d fa57 	bl	800da7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ce:	f000 fe95 	bl	80012fc <main>
  bx  lr    
 80005d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80005d8:	0800f23c 	.word	0x0800f23c
  ldr  r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005e0:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 80005e4:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 80005e8:	2000a510 	.word	0x2000a510

080005ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC_IRQHandler>

080005ee <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80005ee:	f000 bd81 	b.w	80010f4 <touchgfx_taskEntry>

080005f2 <_ZN8touchgfx7Buttons4initEv>:
extern "C" void             BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode);
extern "C" uint32_t         BSP_PB_GetState(Button_TypeDef Button);

void Buttons::init()
{
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80005f2:	2100      	movs	r1, #0
 80005f4:	4608      	mov	r0, r1
 80005f6:	f002 b90d 	b.w	8002814 <BSP_PB_Init>

080005fa <_ZN8touchgfx7Buttons6sampleEv>:

unsigned int Buttons::sample()
{
    uint32_t result = 0;

    result = BSP_PB_GetState(BUTTON_WAKEUP);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f002 b944 	b.w	8002888 <BSP_PB_GetState>

08000600 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8000600:	6840      	ldr	r0, [r0, #4]
    }
 8000602:	4770      	bx	lr

08000604 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8000604:	6041      	str	r1, [r0, #4]
    }
 8000606:	4770      	bx	lr

08000608 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Instrumentation Trace Macrocell (ITM)
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000608:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800060c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8000610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000614:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000618:	f5a2 4250 	sub.w	r2, r2, #53248	; 0xd000
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	4770      	bx	lr

08000626 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000626:	1a51      	subs	r1, r2, r1
 8000628:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 800062c:	fbb1 f0f3 	udiv	r0, r1, r3
 8000630:	4770      	bx	lr
	...

08000634 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000636:	6858      	ldr	r0, [r3, #4]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000

08000640 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000640:	4770      	bx	lr

08000642 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000642:	b510      	push	{r4, lr}
 8000644:	210c      	movs	r1, #12
 8000646:	4604      	mov	r4, r0
 8000648:	f00c ff4a 	bl	800d4e0 <_ZdlPvj>
 800064c:	4620      	mov	r0, r4
 800064e:	bd10      	pop	{r4, pc}

08000650 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000650:	6803      	ldr	r3, [r0, #0]
{
 8000652:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000654:	691b      	ldr	r3, [r3, #16]
{
 8000656:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000658:	b131      	cbz	r1, 8000668 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800065a:	4798      	blx	r3
 800065c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800065e:	6863      	ldr	r3, [r4, #4]
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	4418      	add	r0, r3
 8000664:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000666:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000668:	4798      	blx	r3
 800066a:	60a0      	str	r0, [r4, #8]
}
 800066c:	e7fb      	b.n	8000666 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

0800066e <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 800066e:	4770      	bx	lr

08000670 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8000670:	4770      	bx	lr
	...

08000674 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000674:	b508      	push	{r3, lr}
    Buttons::init();
 8000676:	f7ff ffbc 	bl	80005f2 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 800067a:	4b02      	ldr	r3, [pc, #8]	; (8000684 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	bd08      	pop	{r3, pc}
 8000682:	bf00      	nop
 8000684:	200000d8 	.word	0x200000d8

08000688 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 800068c:	f7ff ffb5 	bl	80005fa <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
 8000692:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000694:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000696:	7811      	ldrb	r1, [r2, #0]
    btnstatus[3] = btnstatus[2];
 8000698:	70d3      	strb	r3, [r2, #3]
    btnstatus[0] = buttonValue;
 800069a:	b2c4      	uxtb	r4, r0

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 800069c:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[2] = btnstatus[1];
 80006a0:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 80006a2:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 80006a4:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 80006a6:	d00a      	beq.n	80006be <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 80006a8:	f016 0001 	ands.w	r0, r6, #1
 80006ac:	d007      	beq.n	80006be <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 80006ae:	f011 0001 	ands.w	r0, r1, #1
 80006b2:	d004      	beq.n	80006be <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 80006b4:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 80006b6:	bf5a      	itte	pl
 80006b8:	2001      	movpl	r0, #1
 80006ba:	7028      	strbpl	r0, [r5, #0]
        return true;
    }

    return false;
 80006bc:	2000      	movmi	r0, #0
}
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	200000d8 	.word	0x200000d8

080006c4 <_ZN8touchgfx10KeySamplerD0Ev>:
 80006c4:	b510      	push	{r4, lr}
 80006c6:	2104      	movs	r1, #4
 80006c8:	4604      	mov	r4, r0
 80006ca:	f00c ff09 	bl	800d4e0 <_ZdlPvj>
 80006ce:	4620      	mov	r0, r4
 80006d0:	bd10      	pop	{r4, pc}

080006d2 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80006d2:	4770      	bx	lr

080006d4 <_ZN20STM32TouchControllerD0Ev>:
 80006d4:	b510      	push	{r4, lr}
 80006d6:	2104      	movs	r1, #4
 80006d8:	4604      	mov	r4, r0
 80006da:	f00c ff01 	bl	800d4e0 <_ZdlPvj>
 80006de:	4620      	mov	r0, r4
 80006e0:	bd10      	pop	{r4, pc}
	...

080006e4 <_ZN20STM32TouchController4initEv>:
#include "stm32469i_discovery_ts.h"

static bool bsp_ts_initialized = false;

void STM32TouchController::init()
{
 80006e4:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    if (BSP_TS_Init(800, 480) == TS_OK)
 80006e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80006ea:	f44f 7048 	mov.w	r0, #800	; 0x320
 80006ee:	f002 fc7b 	bl	8002fe8 <BSP_TS_Init>
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <_ZN20STM32TouchController4initEv+0x2c>)
 80006f4:	b910      	cbnz	r0, 80006fc <_ZN20STM32TouchController4initEv+0x18>
    {
        bsp_ts_initialized = true;
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 80006fa:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1fb      	bne.n	80006fa <_ZN20STM32TouchController4initEv+0x16>
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <_ZN20STM32TouchController4initEv+0x30>)
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <_ZN20STM32TouchController4initEv+0x34>)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <_ZN20STM32TouchController4initEv+0x38>)
 8000708:	2127      	movs	r1, #39	; 0x27
 800070a:	f00c ff17 	bl	800d53c <__assert_func>
 800070e:	bf00      	nop
 8000710:	200000dc 	.word	0x200000dc
 8000714:	0800e5d0 	.word	0x0800e5d0
 8000718:	0800e5e3 	.word	0x0800e5e3
 800071c:	0800e60d 	.word	0x0800e60d

08000720 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000720:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8000724:	781c      	ldrb	r4, [r3, #0]
{
 8000726:	460e      	mov	r6, r1
 8000728:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 800072a:	b15c      	cbz	r4, 8000744 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        TS_StateTypeDef state;
        BSP_TS_GetState(&state);
 800072c:	a801      	add	r0, sp, #4
 800072e:	f002 fc93 	bl	8003058 <BSP_TS_GetState>
        if (state.touchDetected)
 8000732:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000736:	b143      	cbz	r3, 800074a <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
        {
            x = state.touchX[0];
 8000738:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800073c:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 800073e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000742:	602b      	str	r3, [r5, #0]
            return true;
        }
    }
    return false;
}
 8000744:	4620      	mov	r0, r4
 8000746:	b004      	add	sp, #16
 8000748:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 800074a:	461c      	mov	r4, r3
 800074c:	e7fa      	b.n	8000744 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 800074e:	bf00      	nop
 8000750:	200000dc 	.word	0x200000dc

08000754 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000754:	2803      	cmp	r0, #3
 8000756:	d823      	bhi.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000758:	e8df f000 	tbb	[pc, r0]
 800075c:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	fab2 f282 	clz	r2, r2
 8000768:	0952      	lsrs	r2, r2, #5
 800076a:	2104      	movs	r1, #4
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800076c:	480e      	ldr	r0, [pc, #56]	; (80007a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800076e:	f003 bd03 	b.w	8004178 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	fab2 f282 	clz	r2, r2
 800077a:	0952      	lsrs	r2, r2, #5
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	e7f5      	b.n	800076c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000782:	689a      	ldr	r2, [r3, #8]
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	0952      	lsrs	r2, r2, #5
 800078a:	2102      	movs	r1, #2
 800078c:	e7ee      	b.n	800076c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000792:	68da      	ldr	r2, [r3, #12]
 8000794:	fab2 f282 	clz	r2, r2
 8000798:	0952      	lsrs	r2, r2, #5
 800079a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079e:	e7e6      	b.n	800076e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000e0 	.word	0x200000e0
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40021800 	.word	0x40021800

080007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80007b0:	2803      	cmp	r0, #3
 80007b2:	d823      	bhi.n	80007fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 80007b4:	e8df f000 	tbb	[pc, r0]
 80007b8:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	3a00      	subs	r2, #0
 80007c2:	bf18      	it	ne
 80007c4:	2201      	movne	r2, #1
 80007c6:	2104      	movs	r1, #4
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007ca:	f003 bcd5 	b.w	8004178 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	3a00      	subs	r2, #0
 80007d4:	bf18      	it	ne
 80007d6:	2201      	movne	r2, #1
 80007d8:	2140      	movs	r1, #64	; 0x40
 80007da:	e7f5      	b.n	80007c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007de:	689a      	ldr	r2, [r3, #8]
 80007e0:	3a00      	subs	r2, #0
 80007e2:	bf18      	it	ne
 80007e4:	2201      	movne	r2, #1
 80007e6:	2102      	movs	r1, #2
 80007e8:	e7ee      	b.n	80007c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	3a00      	subs	r2, #0
 80007f2:	bf18      	it	ne
 80007f4:	2201      	movne	r2, #1
 80007f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fa:	e7e6      	b.n	80007ca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200000e0 	.word	0x200000e0
 8000804:	40020000 	.word	0x40020000
 8000808:	40021800 	.word	0x40021800

0800080c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800080c:	2803      	cmp	r0, #3
 800080e:	d80f      	bhi.n	8000830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000810:	e8df f000 	tbb	[pc, r0]
 8000814:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000818:	2104      	movs	r1, #4
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800081c:	f003 bcb1 	b.w	8004182 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	e7fa      	b.n	800081a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000824:	2102      	movs	r1, #2
 8000826:	e7f8      	b.n	800081a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 800082a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082e:	e7f5      	b.n	800081c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40020000 	.word	0x40020000
 8000838:	40021800 	.word	0x40021800

0800083c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 800083c:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 800083e:	2803      	cmp	r0, #3
 8000840:	d813      	bhi.n	800086a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000842:	e8df f000 	tbb	[pc, r0]
 8000846:	0a02      	.short	0x0a02
 8000848:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800084a:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800084e:	f003 fc8d 	bl	800416c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000852:	1e43      	subs	r3, r0, #1
 8000854:	4258      	negs	r0, r3
 8000856:	4158      	adcs	r0, r3
 8000858:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	e7f6      	b.n	800084c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800085e:	2102      	movs	r1, #2
 8000860:	e7f4      	b.n	800084c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	e7f1      	b.n	800084e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 800086a:	2000      	movs	r0, #0
 800086c:	e7f1      	b.n	8000852 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 800086e:	bf00      	nop
 8000870:	40020000 	.word	0x40020000
 8000874:	40021800 	.word	0x40021800

08000878 <_ZN8touchgfx4GPIO4initEv>:
{
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	4d08      	ldr	r5, [pc, #32]	; (800089c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800087c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800087e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000880:	b2e0      	uxtb	r0, r4
 8000882:	f7ff ffdb 	bl	800083c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000886:	b118      	cbz	r0, 8000890 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000888:	682b      	ldr	r3, [r5, #0]
 800088a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800088c:	bf18      	it	ne
 800088e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000890:	3401      	adds	r4, #1
 8000892:	2c05      	cmp	r4, #5
 8000894:	f105 0504 	add.w	r5, r5, #4
 8000898:	d1f2      	bne.n	8000880 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	200000e0 	.word	0x200000e0

080008a0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80008a0:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80008a2:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
        displayOrientationChangeRequested = true;
 80008a6:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    }
 80008aa:	4770      	bx	lr

080008ac <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80008ac:	2000      	movs	r0, #0
 80008ae:	4770      	bx	lr

080008b0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80008b2:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80008b4:	3900      	subs	r1, #0
 80008b6:	bf18      	it	ne
 80008b8:	2101      	movne	r1, #1
 80008ba:	7019      	strb	r1, [r3, #0]
    }
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000a1d7 	.word	0x2000a1d7

080008c4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80008c4:	2000      	movs	r0, #0
 80008c6:	4770      	bx	lr

080008c8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80008c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80008ca:	b10b      	cbz	r3, 80008d0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80008cc:	4608      	mov	r0, r1
 80008ce:	4718      	bx	r3
        }
    }
 80008d0:	4770      	bx	lr

080008d2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008d6:	4770      	bx	lr

080008d8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008d8:	6840      	ldr	r0, [r0, #4]
 80008da:	6803      	ldr	r3, [r0, #0]
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4718      	bx	r3

080008e0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008e0:	4770      	bx	lr

080008e2 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008e2:	4770      	bx	lr

080008e4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return currFbBase;
}
 80008e4:	4b01      	ldr	r3, [pc, #4]	; (80008ec <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	200000f0 	.word	0x200000f0

080008f0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80008f0:	4770      	bx	lr
	...

080008f4 <_ZN11TouchGFXHAL10initializeEv>:
{
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4604      	mov	r4, r0
    mcuInstr.init();
 80008f8:	4d09      	ldr	r5, [pc, #36]	; (8000920 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    GPIO::init();
 80008fa:	f7ff ffbd 	bl	8000878 <_ZN8touchgfx4GPIO4initEv>
    TouchGFXGeneratedHAL::initialize();
 80008fe:	4620      	mov	r0, r4
 8000900:	f000 fc78 	bl	80011f4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000904:	2300      	movs	r3, #0
 8000906:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    mcuInstr.init();
 800090a:	4628      	mov	r0, r5
 800090c:	f7ff fe7c 	bl	8000608 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000910:	2301      	movs	r3, #1
 8000912:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        buttonController = btnCtrl;
 8000916:	4b03      	ldr	r3, [pc, #12]	; (8000924 <_ZN11TouchGFXHAL10initializeEv+0x30>)
        mcuInstrumentation = mcuInstr;
 8000918:	6125      	str	r5, [r4, #16]
        buttonController = btnCtrl;
 800091a:	6163      	str	r3, [r4, #20]
}
 800091c:	bd38      	pop	{r3, r4, r5, pc}
 800091e:	bf00      	nop
 8000920:	200000fc 	.word	0x200000fc
 8000924:	200000f8 	.word	0x200000f8

08000928 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000928:	6803      	ldr	r3, [r0, #0]
{
 800092a:	4604      	mov	r4, r0
 800092c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 800092e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000932:	4798      	blx	r3
    enableInterrupts();
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	4620      	mov	r0, r4
 8000938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800093a:	4798      	blx	r3
    OSWrappers::waitForVSync();
 800093c:	f000 fa2e 	bl	8000d9c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	4620      	mov	r0, r4
 8000944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000946:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000948:	2100      	movs	r1, #0
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800094c:	9100      	str	r1, [sp, #0]
 800094e:	2329      	movs	r3, #41	; 0x29
 8000950:	2215      	movs	r2, #21
 8000952:	f003 f9fa 	bl	8003d4a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000956:	f000 fa21 	bl	8000d9c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	4620      	mov	r0, r4
 800095e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000960:	4798      	blx	r3
    for (;;)
 8000962:	e7f8      	b.n	8000956 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8000964:	20001008 	.word	0x20001008

08000968 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000968:	b510      	push	{r4, lr}
 800096a:	4604      	mov	r4, r0
        swapFrameBuffers();
 800096c:	f008 fb02 	bl	8008f74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	4620      	mov	r0, r4
 8000974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8000978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800097c:	4718      	bx	r3

0800097e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800097e:	f000 bc38 	b.w	80011f2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000982 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000982:	f000 bc4e 	b.w	8001222 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08000986 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8000986:	f000 bc4e 	b.w	8001226 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

0800098a <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800098a:	f000 bc21 	b.w	80011d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

0800098e <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800098e:	f000 bc27 	b.w	80011e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08000992 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000992:	f000 bc4b 	b.w	800122c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08000998 <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800099e:	f007 bd91 	b.w	80084c4 <_ZN8touchgfx3HAL10beginFrameEv>
 80009a2:	bf00      	nop
 80009a4:	20000010 	.word	0x20000010

080009a8 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 80009a8:	b510      	push	{r4, lr}
 80009aa:	4604      	mov	r4, r0
    HAL::endFrame();
 80009ac:	f007 fd96 	bl	80084dc <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 80009b0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80009b4:	b113      	cbz	r3, 80009bc <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 80009b6:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
    }
}
 80009bc:	bd10      	pop	{r4, pc}
 80009be:	bf00      	nop
 80009c0:	20000010 	.word	0x20000010

080009c4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80009c4:	f007 bd41 	b.w	800844a <_ZN8touchgfx3HAL16flushFrameBufferEv>

080009c8 <_ZN11TouchGFXHALD0Ev>:
 80009c8:	b510      	push	{r4, lr}
 80009ca:	217c      	movs	r1, #124	; 0x7c
 80009cc:	4604      	mov	r4, r0
 80009ce:	f00c fd87 	bl	800d4e0 <_ZdlPvj>
 80009d2:	4620      	mov	r0, r4
 80009d4:	bd10      	pop	{r4, pc}

080009d6 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80009d6:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 80009da:	b11b      	cbz	r3, 80009e4 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80009dc:	6840      	ldr	r0, [r0, #4]
 80009de:	6803      	ldr	r3, [r0, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4718      	bx	r3
    }
 80009e4:	4618      	mov	r0, r3
 80009e6:	4770      	bx	lr

080009e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 80009e8:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80009ea:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 80009ee:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
            if (DISPLAY_ROTATION == rotate0)
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 80009f4:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 80009f6:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80009f8:	d009      	beq.n	8000a0e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80009fa:	b93a      	cbnz	r2, 8000a0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80009fe:	490b      	ldr	r1, [pc, #44]	; (8000a2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000a00:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000a02:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8000a04:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000a06:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8000a08:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8000a0a:	701a      	strb	r2, [r3, #0]
    }
 8000a0c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d0fc      	beq.n	8000a0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000a14:	4905      	ldr	r1, [pc, #20]	; (8000a2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000a16:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000a18:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000a1a:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000a1c:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8000a1e:	2200      	movs	r2, #0
 8000a20:	e7f3      	b.n	8000a0a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000a22:	bf00      	nop
 8000a24:	2000a1d0 	.word	0x2000a1d0
 8000a28:	2000a1cc 	.word	0x2000a1cc
 8000a2c:	2000a1ce 	.word	0x2000a1ce

08000a30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a30:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d803      	bhi.n	8000a42 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d905      	bls.n	8000a4e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000a46:	4808      	ldr	r0, [pc, #32]	; (8000a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000a48:	219e      	movs	r1, #158	; 0x9e
 8000a4a:	f00c fd77 	bl	800d53c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000a50:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000a54:	801a      	strh	r2, [r3, #0]
    }
 8000a56:	bd08      	pop	{r3, pc}
 8000a58:	2000a1cc 	.word	0x2000a1cc
 8000a5c:	2000a1ce 	.word	0x2000a1ce
 8000a60:	0800e674 	.word	0x0800e674
 8000a64:	0800e6d7 	.word	0x0800e6d7
 8000a68:	0800e71a 	.word	0x0800e71a
 8000a6c:	2000a1d2 	.word	0x2000a1d2
 8000a70:	2000a1d4 	.word	0x2000a1d4

08000a74 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	460d      	mov	r5, r1
 8000a78:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8000a7c:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000a7e:	b935      	cbnz	r5, 8000a8e <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8000a86:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000a8a:	f00c fd57 	bl	800d53c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000a8e:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8000a94:	3a00      	subs	r2, #0
 8000a96:	bf18      	it	ne
 8000a98:	2201      	movne	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000a9c:	6803      	ldr	r3, [r0, #0]
}
 8000a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa6:	4718      	bx	r3
 8000aa8:	200000f0 	.word	0x200000f0
 8000aac:	0800e75f 	.word	0x0800e75f
 8000ab0:	0800e797 	.word	0x0800e797
 8000ab4:	0800e71a 	.word	0x0800e71a
 8000ab8:	2000a1d6 	.word	0x2000a1d6

08000abc <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8000abc:	2801      	cmp	r0, #1
    {
 8000abe:	b507      	push	{r0, r1, r2, lr}
 8000ac0:	4603      	mov	r3, r0
        if (NbrParams <= 1)
 8000ac2:	d80a      	bhi.n	8000ada <DSI_IO_WriteCmd+0x1e>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8000ac4:	784b      	ldrb	r3, [r1, #1]
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	780b      	ldrb	r3, [r1, #0]
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <DSI_IO_WriteCmd+0x30>)
 8000acc:	2215      	movs	r2, #21
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f003 f93b 	bl	8003d4a <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 8000ad4:	b003      	add	sp, #12
 8000ad6:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8000ada:	9101      	str	r1, [sp, #4]
 8000adc:	5c0a      	ldrb	r2, [r1, r0]
 8000ade:	9200      	str	r2, [sp, #0]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2239      	movs	r2, #57	; 0x39
 8000ae4:	4801      	ldr	r0, [pc, #4]	; (8000aec <DSI_IO_WriteCmd+0x30>)
 8000ae6:	f003 f941 	bl	8003d6c <HAL_DSI_LongWrite>
    }
 8000aea:	e7f3      	b.n	8000ad4 <DSI_IO_WriteCmd+0x18>
 8000aec:	20001008 	.word	0x20001008

08000af0 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8000af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8000af6:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 8000af8:	2515      	movs	r5, #21
        ScanLineParams[0] = scanline >> 8;
 8000afa:	7013      	strb	r3, [r2, #0]
        ScanLineParams[1] = scanline & 0x00FF;
 8000afc:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000afe:	9201      	str	r2, [sp, #4]
 8000b00:	2244      	movs	r2, #68	; 0x44
 8000b02:	9200      	str	r2, [sp, #0]
 8000b04:	2100      	movs	r1, #0
 8000b06:	2239      	movs	r2, #57	; 0x39
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f003 f92f 	bl	8003d6c <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	9100      	str	r1, [sp, #0]
 8000b12:	2335      	movs	r3, #53	; 0x35
 8000b14:	462a      	mov	r2, r5
 8000b16:	4620      	mov	r0, r4
 8000b18:	f003 f917 	bl	8003d4a <HAL_DSI_ShortWrite>
    }
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	20000108 	.word	0x20000108
 8000b24:	20001008 	.word	0x20001008

08000b28 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8000b28:	b507      	push	{r0, r1, r2, lr}
 8000b2a:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 8000b2c:	f7ff ffe0 	bl	8000af0 <LCD_ReqTear>
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000b30:	9801      	ldr	r0, [sp, #4]
}
 8000b32:	b003      	add	sp, #12
 8000b34:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000b38:	f000 bb5a 	b.w	80011f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08000b3c <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
 8000b3c:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <LCD_SetUpdateRegion+0x20>)
 8000b40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b44:	232a      	movs	r3, #42	; 0x2a
 8000b46:	9001      	str	r0, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2239      	movs	r2, #57	; 0x39
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <LCD_SetUpdateRegion+0x24>)
 8000b52:	f003 f90b 	bl	8003d6c <HAL_DSI_LongWrite>
    }
 8000b56:	b003      	add	sp, #12
 8000b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20001008 	.word	0x20001008

08000b64 <HAL_DSI_TearingEffectCallback>:
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8000b64:	b570      	push	{r4, r5, r6, lr}
        return instance;
 8000b66:	4d15      	ldr	r5, [pc, #84]	; (8000bbc <HAL_DSI_TearingEffectCallback+0x58>)
 8000b68:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff fdf2 	bl	8000754 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8000b70:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8000b72:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
 8000b76:	3301      	adds	r3, #1
 8000b78:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8000b7c:	f000 f902 	bl	8000d84 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 8000b82:	6828      	ldr	r0, [r5, #0]
 8000b84:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8000b86:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 8000b88:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8000b8c:	b123      	cbz	r3, 8000b98 <HAL_DSI_TearingEffectCallback+0x34>
 8000b8e:	4d0d      	ldr	r5, [pc, #52]	; (8000bc4 <HAL_DSI_TearingEffectCallback+0x60>)
 8000b90:	782b      	ldrb	r3, [r5, #0]
 8000b92:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8000b96:	b123      	cbz	r3, 8000ba2 <HAL_DSI_TearingEffectCallback+0x3e>
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8000b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff be07 	b.w	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 8000ba2:	f008 f9e7 	bl	8008f74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 8000ba8:	4630      	mov	r0, r6
            updateRegion = 0;
 8000baa:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8000bac:	f7ff ffc6 	bl	8000b3c <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f003 f8ba 	bl	8003d2a <HAL_DSI_Refresh>
            displayRefreshing = true;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	702b      	strb	r3, [r5, #0]
    }
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	2000a1d8 	.word	0x2000a1d8
 8000bc0:	20000010 	.word	0x20000010
 8000bc4:	2000010a 	.word	0x2000010a
 8000bc8:	200000f4 	.word	0x200000f4

08000bcc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 8000bcc:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <HAL_DSI_EndOfRefreshCallback+0xd0>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	3201      	adds	r2, #1
    {
 8000bd2:	b570      	push	{r4, r5, r6, lr}
        updateRegion++;
 8000bd4:	601a      	str	r2, [r3, #0]
        if (updateRegion < 4)
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <HAL_DSI_EndOfRefreshCallback+0xd4>)
 8000bd8:	4c32      	ldr	r4, [pc, #200]	; (8000ca4 <HAL_DSI_EndOfRefreshCallback+0xd8>)
 8000bda:	6819      	ldr	r1, [r3, #0]
 8000bdc:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <HAL_DSI_EndOfRefreshCallback+0xdc>)
        if (updateRegion < 4)
 8000bde:	2a03      	cmp	r2, #3
    {
 8000be0:	4605      	mov	r5, r0
        if (updateRegion < 4)
 8000be2:	dc2e      	bgt.n	8000c42 <HAL_DSI_EndOfRefreshCallback+0x76>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8000be4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000be8:	f020 0008 	bic.w	r0, r0, #8
 8000bec:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8000bf0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000bf4:	fb00 1102 	mla	r1, r0, r2, r1
 8000bf8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

            uint16_t REAL_WIDTH = 200;
            uint16_t ADJUSTED_WIDTH = 200;
            if (updateRegion == 3)
            {
                ADJUSTED_WIDTH += 32;
 8000bfc:	bf0c      	ite	eq
 8000bfe:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 8000c00:	23c8      	movne	r3, #200	; 0xc8
            }

            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 8000c02:	3302      	adds	r3, #2
 8000c04:	4928      	ldr	r1, [pc, #160]	; (8000ca8 <HAL_DSI_EndOfRefreshCallback+0xdc>)
 8000c06:	041b      	lsls	r3, r3, #16
 8000c08:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 8000c0c:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <HAL_DSI_EndOfRefreshCallback+0xe0>)
 8000c10:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8000c12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8000c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 8000c1a:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 8000c1c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8000c20:	2301      	movs	r3, #1
            LCD_SetUpdateRegion(updateRegion);
 8000c22:	4610      	mov	r0, r2
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8000c24:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 8000c26:	f7ff ff89 	bl	8000b3c <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_DSI_EndOfRefreshCallback+0xd8>)
 8000c2c:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8000c30:	f043 0308 	orr.w	r3, r3, #8
            HAL_DSI_Refresh(hdsi);
 8000c34:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 8000c36:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            {
                // Signal to the framework that display update has finished.
                HAL::getInstance()->frontPorchEntered();
            }
        }
    }
 8000c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            HAL_DSI_Refresh(hdsi);
 8000c3e:	f003 b874 	b.w	8003d2a <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8000c42:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 8000c46:	f022 0208 	bic.w	r2, r2, #8
 8000c4a:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8000c4e:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_DSI_EndOfRefreshCallback+0xe8>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 8000c50:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8000c54:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8000c56:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8000c5a:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 8000c5c:	4a16      	ldr	r2, [pc, #88]	; (8000cb8 <HAL_DSI_EndOfRefreshCallback+0xec>)
 8000c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 8000c64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff65 	bl	8000b3c <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 8000c72:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fd96 	bl	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_DSI_EndOfRefreshCallback+0xf0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
        return instance;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_DSI_EndOfRefreshCallback+0xf4>)
 8000c8c:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 8000c8e:	b120      	cbz	r0, 8000c9a <HAL_DSI_EndOfRefreshCallback+0xce>
        allowDMATransfers();
 8000c90:	6803      	ldr	r3, [r0, #0]
    }
 8000c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	4718      	bx	r3
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	200000f4 	.word	0x200000f4
 8000ca0:	200000f0 	.word	0x200000f0
 8000ca4:	40016c00 	.word	0x40016c00
 8000ca8:	40016800 	.word	0x40016800
 8000cac:	00ca01e3 	.word	0x00ca01e3
 8000cb0:	06800193 	.word	0x06800193
 8000cb4:	00ca01e2 	.word	0x00ca01e2
 8000cb8:	00ca0003 	.word	0x00ca0003
 8000cbc:	2000010a 	.word	0x2000010a
 8000cc0:	2000a1d8 	.word	0x2000a1d8

08000cc4 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8000cc4:	b508      	push	{r3, lr}
        return instance;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <IdleTaskHook+0x14>)
 8000cc8:	4601      	mov	r1, r0
 8000cca:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8000ccc:	b101      	cbz	r1, 8000cd0 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8000cce:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8000cd0:	f008 f96a 	bl	8008fa8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	bd08      	pop	{r3, pc}
 8000cd8:	2000a1d8 	.word	0x2000a1d8

08000cdc <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <_GLOBAL__sub_I_displayRefreshing+0x18>)
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <_GLOBAL__sub_I_displayRefreshing+0x20>)
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 8000cec:	6003      	str	r3, [r0, #0]
        init();
 8000cee:	f7ff bcc1 	b.w	8000674 <_ZN8touchgfx10KeySampler4initEv>
 8000cf2:	bf00      	nop
 8000cf4:	200000fc 	.word	0x200000fc
 8000cf8:	200000f8 	.word	0x200000f8
 8000cfc:	0800e594 	.word	0x0800e594
 8000d00:	0800e5bc 	.word	0x0800e5bc

08000d04 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000d04:	2101      	movs	r1, #1
{
 8000d06:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	f005 faab 	bl	8006266 <osSemaphoreNew>
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000d12:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000d14:	b928      	cbnz	r0, 8000d22 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000d1a:	2128      	movs	r1, #40	; 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000d1e:	f00c fc0d 	bl	800d53c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	2001      	movs	r0, #1
 8000d28:	f005 fb3a 	bl	80063a0 <osMessageQueueNew>
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000d2e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000d30:	b918      	cbnz	r0, 8000d3a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000d36:	212c      	movs	r1, #44	; 0x2c
 8000d38:	e7f0      	b.n	8000d1c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000d3a:	bd08      	pop	{r3, pc}
 8000d3c:	20000110 	.word	0x20000110
 8000d40:	0800e8c0 	.word	0x0800e8c0
 8000d44:	0800e909 	.word	0x0800e909
 8000d48:	0800e938 	.word	0x0800e938
 8000d4c:	2000010c 	.word	0x2000010c
 8000d50:	0800e985 	.word	0x0800e985

08000d54 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000d56:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	f005 bacd 	b.w	80062fa <osSemaphoreAcquire>
 8000d60:	20000110 	.word	0x20000110

08000d64 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000d64:	4b01      	ldr	r3, [pc, #4]	; (8000d6c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	f005 baf2 	b.w	8006350 <osSemaphoreRelease>
 8000d6c:	20000110 	.word	0x20000110

08000d70 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	f005 bac0 	b.w	80062fa <osSemaphoreAcquire>
 8000d7a:	bf00      	nop
 8000d7c:	20000110 	.word	0x20000110

08000d80 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8000d80:	f7ff bff0 	b.w	8000d64 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000d84 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000d88:	6800      	ldr	r0, [r0, #0]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f005 bb42 	b.w	8006416 <osMessageQueuePut>
 8000d92:	bf00      	nop
 8000d94:	2000010c 	.word	0x2000010c
 8000d98:	20000014 	.word	0x20000014

08000d9c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000d9c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000d9e:	4c08      	ldr	r4, [pc, #32]	; (8000dc0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000da0:	2300      	movs	r3, #0
 8000da2:	461a      	mov	r2, r3
 8000da4:	a901      	add	r1, sp, #4
 8000da6:	6820      	ldr	r0, [r4, #0]
 8000da8:	f005 fb65 	bl	8006476 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000dac:	6820      	ldr	r0, [r4, #0]
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	2200      	movs	r2, #0
 8000db4:	a901      	add	r1, sp, #4
 8000db6:	f005 fb5e 	bl	8006476 <osMessageQueueGet>
}
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000010c 	.word	0x2000010c

08000dc4 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8000dc4:	6803      	ldr	r3, [r0, #0]
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	4718      	bx	r3

08000dca <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000dca:	2001      	movs	r0, #1
 8000dcc:	4770      	bx	lr

08000dce <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8000dce:	6803      	ldr	r3, [r0, #0]
 8000dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd2:	4718      	bx	r3

08000dd4 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8000dd4:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <_ZN8STM32DMA10initializeEv+0x3c>)
 8000ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dde:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000de2:	631a      	str	r2, [r3, #48]	; 0x30
 8000de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000dea:	9201      	str	r2, [sp, #4]
 8000dec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000df4:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000dfc:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <_ZN8STM32DMA10initializeEv+0x40>)
 8000e00:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_ZN8STM32DMA10initializeEv+0x44>)
 8000e02:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <_ZN8STM32DMA10initializeEv+0x48>)
 8000e06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e0a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8000e0c:	b002      	add	sp, #8
 8000e0e:	4770      	bx	lr
 8000e10:	40023800 	.word	0x40023800
 8000e14:	20000fc8 	.word	0x20000fc8
 8000e18:	08000e61 	.word	0x08000e61
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000e20:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000e24:	4770      	bx	lr
	...

08000e28 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <_ZN8STM32DMAD1Ev+0x18>)
 8000e2a:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <_ZN8STM32DMAD1Ev+0x1c>)
 8000e2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e3a:	f3bf 8f6f 	isb	sy
}
 8000e3e:	4770      	bx	lr
 8000e40:	0800eb24 	.word	0x0800eb24
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000e48:	b510      	push	{r4, lr}
 8000e4a:	4604      	mov	r4, r0
}
 8000e4c:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000e50:	f7ff ffea 	bl	8000e28 <_ZN8STM32DMAD1Ev>
 8000e54:	4620      	mov	r0, r4
 8000e56:	f00c fb43 	bl	800d4e0 <_ZdlPvj>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	bd10      	pop	{r4, pc}
	...

08000e60 <DMA2D_XferCpltCallback>:
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <DMA2D_XferCpltCallback+0xc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8000e66:	6803      	ldr	r3, [r0, #0]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4718      	bx	r3
 8000e6c:	2000a1d8 	.word	0x2000a1d8

08000e70 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000e74:	4625      	mov	r5, r4
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <_ZN8STM32DMAC1Ev+0x30>)
 8000e78:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	6060      	str	r0, [r4, #4]
 8000e7e:	7226      	strb	r6, [r4, #8]
 8000e80:	7266      	strb	r6, [r4, #9]
 8000e82:	f845 3b20 	str.w	r3, [r5], #32
 8000e86:	2260      	movs	r2, #96	; 0x60
 8000e88:	4629      	mov	r1, r5
 8000e8a:	f008 f9c9 	bl	8009220 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000e8e:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8000e92:	60ee      	str	r6, [r5, #12]
 8000e94:	3524      	adds	r5, #36	; 0x24
 8000e96:	42ab      	cmp	r3, r5
 8000e98:	d1fb      	bne.n	8000e92 <_ZN8STM32DMAC1Ev+0x22>
}
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	bd70      	pop	{r4, r5, r6, pc}
 8000e9e:	bf00      	nop
 8000ea0:	0800eb24 	.word	0x0800eb24

08000ea4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8000ea4:	b508      	push	{r3, lr}
    switch (format)
 8000ea6:	290b      	cmp	r1, #11
 8000ea8:	d80b      	bhi.n	8000ec2 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8000eaa:	e8df f001 	tbb	[pc, r1]
 8000eae:	0612      	.short	0x0612
 8000eb0:	0a0a0a10 	.word	0x0a0a0a10
 8000eb4:	0808080a 	.word	0x0808080a
 8000eb8:	0808      	.short	0x0808
 8000eba:	2001      	movs	r0, #1
}
 8000ebc:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8000ebe:	2005      	movs	r0, #5
        break;
 8000ec0:	e7fc      	b.n	8000ebc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8000ec8:	2165      	movs	r1, #101	; 0x65
 8000eca:	f00c fb37 	bl	800d53c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8000ece:	2000      	movs	r0, #0
 8000ed0:	e7f4      	b.n	8000ebc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000ed2:	2002      	movs	r0, #2
    return dma2dColorMode;
 8000ed4:	e7f2      	b.n	8000ebc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8000ed6:	bf00      	nop
 8000ed8:	0800e9c7 	.word	0x0800e9c7
 8000edc:	0800e9e2 	.word	0x0800e9e2
 8000ee0:	0800ea2c 	.word	0x0800ea2c

08000ee4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8000ee4:	b508      	push	{r3, lr}
    switch (format)
 8000ee6:	290a      	cmp	r1, #10
 8000ee8:	d809      	bhi.n	8000efe <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8000eea:	e8df f001 	tbb	[pc, r1]
 8000eee:	0610      	.short	0x0610
 8000ef0:	0808080e 	.word	0x0808080e
 8000ef4:	06060608 	.word	0x06060608
 8000ef8:	06          	.byte	0x06
 8000ef9:	00          	.byte	0x00
 8000efa:	2001      	movs	r0, #1
}
 8000efc:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8000f04:	2186      	movs	r1, #134	; 0x86
 8000f06:	f00c fb19 	bl	800d53c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	e7f6      	b.n	8000efc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000f0e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8000f10:	e7f4      	b.n	8000efc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8000f12:	bf00      	nop
 8000f14:	0800e9c7 	.word	0x0800e9c7
 8000f18:	0800ea77 	.word	0x0800ea77
 8000f1c:	0800ea2c 	.word	0x0800ea2c

08000f20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8000f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000f24:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8000f28:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000f2a:	4641      	mov	r1, r8
{
 8000f2c:	4607      	mov	r7, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000f2e:	f7ff ffb9 	bl	8000ea4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000f32:	f894 901e 	ldrb.w	r9, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000f36:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000f38:	4649      	mov	r1, r9
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	f7ff ffb2 	bl	8000ea4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000f40:	4649      	mov	r1, r9
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000f42:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000f44:	4638      	mov	r0, r7
 8000f46:	f7ff ffcd 	bl	8000ee4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000f4a:	8aa1      	ldrh	r1, [r4, #20]
 8000f4c:	8b62      	ldrh	r2, [r4, #26]
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000f50:	1a52      	subs	r2, r2, r1
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000f54:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000f56:	8b22      	ldrh	r2, [r4, #24]
 8000f58:	1a52      	subs	r2, r2, r1
 8000f5a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000f5c:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000f5e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000f66:	6920      	ldr	r0, [r4, #16]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000f68:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000f6a:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000f6c:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8000f6e:	6827      	ldr	r7, [r4, #0]
 8000f70:	2f80      	cmp	r7, #128	; 0x80
 8000f72:	d028      	beq.n	8000fc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8000f74:	7f22      	ldrb	r2, [r4, #28]
 8000f76:	d80f      	bhi.n	8000f98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8000f78:	2f20      	cmp	r7, #32
 8000f7a:	d065      	beq.n	8001048 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8000f7c:	2f40      	cmp	r7, #64	; 0x40
 8000f7e:	d063      	beq.n	8001048 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8000f80:	2f04      	cmp	r7, #4
 8000f82:	d01a      	beq.n	8000fba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000f86:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000f8a:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000f8e:	45c8      	cmp	r8, r9
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000f90:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000f92:	d05f      	beq.n	8001054 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000f94:	4a32      	ldr	r2, [pc, #200]	; (8001060 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8000f96:	e044      	b.n	8001022 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
    switch (blitOp.operation)
 8000f98:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8000f9c:	d004      	beq.n	8000fa8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x88>
 8000f9e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8000fa2:	d1ef      	bne.n	8000f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x64>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000fa4:	492f      	ldr	r1, [pc, #188]	; (8001064 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8000fa6:	e000      	b.n	8000faa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000fa8:	492f      	ldr	r1, [pc, #188]	; (8001068 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000faa:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8000fae:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000fb0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000fb2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000fb4:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000fb6:	6158      	str	r0, [r3, #20]
 8000fb8:	e032      	b.n	8001020 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000fba:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000fbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000fc2:	61da      	str	r2, [r3, #28]
 8000fc4:	e7f6      	b.n	8000fb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000fc6:	68a7      	ldr	r7, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000fc8:	1d3a      	adds	r2, r7, #4
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000fcc:	7f21      	ldrb	r1, [r4, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8000fce:	783a      	ldrb	r2, [r7, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000fd0:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 8000fd4:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8000fd8:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000fda:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000fdc:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8000fde:	b142      	cbz	r2, 8000ff2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d021      	beq.n	8001028 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
                assert(0 && "Unsupported format");
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8000fe6:	4a22      	ldr	r2, [pc, #136]	; (8001070 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8000fe8:	4822      	ldr	r0, [pc, #136]	; (8001074 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8000fea:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000fee:	f00c faa5 	bl	800d53c <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000ff2:	69da      	ldr	r2, [r3, #28]
 8000ff4:	8879      	ldrh	r1, [r7, #2]
 8000ff6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000ffa:	3901      	subs	r1, #1
 8000ffc:	f022 0210 	bic.w	r2, r2, #16
 8001000:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001004:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8001006:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800100a:	69da      	ldr	r2, [r3, #28]
 800100c:	f042 0220 	orr.w	r2, r2, #32
 8001010:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	0692      	lsls	r2, r2, #26
 8001016:	d4fc      	bmi.n	8001012 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001018:	2210      	movs	r2, #16
 800101a:	609a      	str	r2, [r3, #8]
            if (blend)
 800101c:	2900      	cmp	r1, #0
 800101e:	d0b9      	beq.n	8000f94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x74>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001020:	4a15      	ldr	r2, [pc, #84]	; (8001078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001022:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8001024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001028:	69da      	ldr	r2, [r3, #28]
 800102a:	8878      	ldrh	r0, [r7, #2]
 800102c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001030:	3801      	subs	r0, #1
 8001032:	f022 0210 	bic.w	r2, r2, #16
 8001036:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
                if (blitOp.alpha == 255)
 800103a:	39ff      	subs	r1, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800103c:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8001040:	bf18      	it	ne
 8001042:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001044:	61da      	str	r2, [r3, #28]
                break;
 8001046:	e7df      	b.n	8001008 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001048:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800104e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001052:	e7b6      	b.n	8000fc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001054:	f240 2201 	movw	r2, #513	; 0x201
 8001058:	e7e3      	b.n	8001022 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 800105a:	bf00      	nop
 800105c:	4002b000 	.word	0x4002b000
 8001060:	00010201 	.word	0x00010201
 8001064:	00020009 	.word	0x00020009
 8001068:	0002000a 	.word	0x0002000a
 800106c:	0800eac2 	.word	0x0800eac2
 8001070:	0800eadc 	.word	0x0800eadc
 8001074:	0800ea2c 	.word	0x0800ea2c
 8001078:	00020201 	.word	0x00020201

0800107c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001080:	7f89      	ldrb	r1, [r1, #30]
 8001082:	f7ff ff2f 	bl	8000ee4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001086:	8aa5      	ldrh	r5, [r4, #20]
 8001088:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800108c:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800108e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001090:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001094:	645a      	str	r2, [r3, #68]	; 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001096:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001098:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800109a:	1b52      	subs	r2, r2, r5
 800109c:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800109e:	6825      	ldr	r5, [r4, #0]
 80010a0:	2d08      	cmp	r5, #8
 80010a2:	d10e      	bne.n	80010c2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80010a4:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80010a6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80010a8:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80010aa:	7f20      	ldrb	r0, [r4, #28]
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80010ae:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80010b2:	61da      	str	r2, [r3, #28]
 80010b4:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80010b6:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80010b8:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80010ba:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80010bc:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80010be:	601a      	str	r2, [r3, #0]
    }
}
 80010c0:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80010c2:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80010c4:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80010ca:	0a0a      	lsrs	r2, r1, #8
 80010cc:	0948      	lsrs	r0, r1, #5
 80010ce:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80010d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80010d6:	4302      	orrs	r2, r0
 80010d8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80010dc:	430a      	orrs	r2, r1
 80010de:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 80010e2:	e7ec      	b.n	80010be <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80010e4:	4002b000 	.word	0x4002b000
 80010e8:	00010009 	.word	0x00010009
 80010ec:	00020201 	.word	0x00020201
 80010f0:	00030201 	.word	0x00030201

080010f4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80010f4:	4801      	ldr	r0, [pc, #4]	; (80010fc <touchgfx_taskEntry+0x8>)
 80010f6:	f7ff bc17 	b.w	8000928 <_ZN11TouchGFXHAL9taskEntryEv>
 80010fa:	bf00      	nop
 80010fc:	20000eb8 	.word	0x20000eb8

08001100 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001100:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001102:	4e22      	ldr	r6, [pc, #136]	; (800118c <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8001104:	4c22      	ldr	r4, [pc, #136]	; (8001190 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 8001106:	4d23      	ldr	r5, [pc, #140]	; (8001194 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 800110a:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800110c:	4630      	mov	r0, r6
 800110e:	f7ff feaf 	bl	8000e70 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8001112:	4628      	mov	r0, r5
 8001114:	f00a fe70 	bl	800bdf8 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800111a:	4821      	ldr	r0, [pc, #132]	; (80011a0 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 800111c:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 800111e:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001120:	f44f 7180 	mov.w	r1, #256	; 0x100
          auxiliaryLCD(0),
 8001124:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
          touchSampleRate(1),
 8001128:	491e      	ldr	r1, [pc, #120]	; (80011a4 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800112a:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
 800112c:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001130:	491d      	ldr	r1, [pc, #116]	; (80011a8 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8001132:	6799      	str	r1, [r3, #120]	; 0x78
        instance = this;
 8001134:	491d      	ldr	r1, [pc, #116]	; (80011ac <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 8001136:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        instance = this;
 800113a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800113c:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001140:	8001      	strh	r1, [r0, #0]
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 8001144:	665a      	str	r2, [r3, #100]	; 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001146:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001148:	481a      	ldr	r0, [pc, #104]	; (80011b4 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 800114a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800114e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
          buttonController(0),
 8001152:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8001156:	e9c3 2206 	strd	r2, r2, [r3, #24]
 800115a:	e9c3 2208 	strd	r2, r2, [r3, #32]
 800115e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
          frameBuffer0(0),
 8001162:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
 8001166:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800116a:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
          lastX(0),
 800116e:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
          cc_begin(0),
 8001172:	675a      	str	r2, [r3, #116]	; 0x74
          lcdRef(display),
 8001174:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001178:	8001      	strh	r1, [r0, #0]
 800117a:	480f      	ldr	r0, [pc, #60]	; (80011b8 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800117c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001180:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001182:	490e      	ldr	r1, [pc, #56]	; (80011bc <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8001184:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width + 32, height) /* Align to match 832 pixel for optimal DSI transfer */
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	bd70      	pop	{r4, r5, r6, pc}
 800118c:	20000118 	.word	0x20000118
 8001190:	20000114 	.word	0x20000114
 8001194:	20000f34 	.word	0x20000f34
 8001198:	0800e664 	.word	0x0800e664
 800119c:	20000eb8 	.word	0x20000eb8
 80011a0:	2000a1cc 	.word	0x2000a1cc
 80011a4:	01000001 	.word	0x01000001
 80011a8:	01010000 	.word	0x01010000
 80011ac:	2000a1d8 	.word	0x2000a1d8
 80011b0:	2000a1d2 	.word	0x2000a1d2
 80011b4:	2000a1ce 	.word	0x2000a1ce
 80011b8:	2000a1d4 	.word	0x2000a1d4
 80011bc:	2000a1d0 	.word	0x2000a1d0
 80011c0:	0800e7f0 	.word	0x0800e7f0

080011c4 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80011c4:	4801      	ldr	r0, [pc, #4]	; (80011cc <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80011c6:	f7ff be2f 	b.w	8000e28 <_ZN8STM32DMAD1Ev>
 80011ca:	bf00      	nop
 80011cc:	20000118 	.word	0x20000118

080011d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	4b02      	ldr	r3, [pc, #8]	; (80011dc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80011d2:	2290      	movs	r2, #144	; 0x90
 80011d4:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e0:	4b02      	ldr	r3, [pc, #8]	; (80011ec <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80011e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011e6:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 80011f0:	4770      	bx	lr

080011f2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80011f2:	4770      	bx	lr

080011f4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	4604      	mov	r4, r0
    HAL::initialize();
 80011f8:	f007 f97d 	bl	80084f6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001200:	f008 fee6 	bl	8009fd0 <_ZN8touchgfx11Application11getInstanceEv>
 8001204:	4601      	mov	r1, r0
 8001206:	4620      	mov	r0, r4
 8001208:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001210:	2300      	movs	r3, #0
 8001212:	4620      	mov	r0, r4
 8001214:	46ac      	mov	ip, r5
 8001216:	461a      	mov	r2, r3
}
 8001218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 800121c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001220:	4760      	bx	ip

08001222 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8001222:	f007 b918 	b.w	8008456 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08001226 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8001226:	f007 ba7a 	b.w	800871e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
	...

0800122c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800122e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001236:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800123a:	f3bf 8f6f 	isb	sy
}
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100

08001244 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */

  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8001244:	4901      	ldr	r1, [pc, #4]	; (800124c <vApplicationIdleHook+0x8>)
 8001246:	2000      	movs	r0, #0
 8001248:	f006 bc4c 	b.w	8007ae4 <vTaskSetApplicationTaskTag>
 800124c:	08000cc5 	.word	0x08000cc5

08001250 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001252:	2064      	movs	r0, #100	; 0x64
 8001254:	f004 fffb 	bl	800624e <osDelay>
  for(;;)
 8001258:	e7fb      	b.n	8001252 <StartDefaultTask+0x2>
	...

0800125c <SystemClock_Config>:
{
 800125c:	b530      	push	{r4, r5, lr}
 800125e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001260:	2210      	movs	r2, #16
 8001262:	2100      	movs	r1, #0
 8001264:	a809      	add	r0, sp, #36	; 0x24
 8001266:	f00c fb60 	bl	800d92a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126a:	2214      	movs	r2, #20
 800126c:	2100      	movs	r1, #0
 800126e:	a802      	add	r0, sp, #8
 8001270:	f00c fb5b 	bl	800d92a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2400      	movs	r4, #0
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <SystemClock_Config+0x98>)
 8001278:	9400      	str	r4, [sp, #0]
 800127a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <SystemClock_Config+0x9c>)
 800128e:	9401      	str	r4, [sp, #4]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800129e:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a2:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a8:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ac:	2502      	movs	r5, #2
 80012ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 360;
 80012b2:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b4:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 360;
 80012b8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80012bc:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 6;
 80012c0:	2004      	movs	r0, #4
 80012c2:	2306      	movs	r3, #6
 80012c4:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ca:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f004 fb02 	bl	80058d4 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012d0:	f003 fd52 	bl	8004d78 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	e9cd 3502 	strd	r3, r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e4:	2105      	movs	r1, #5
 80012e6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e8:	e9cd 4305 	strd	r4, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ec:	f004 f8c8 	bl	8005480 <HAL_RCC_ClockConfig>
}
 80012f0:	b015      	add	sp, #84	; 0x54
 80012f2:	bd30      	pop	{r4, r5, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <main>:
{
 80012fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001300:	b0bb      	sub	sp, #236	; 0xec
  HAL_Init();
 8001302:	f001 ff2b 	bl	800315c <HAL_Init>
  SystemClock_Config();
 8001306:	f7ff ffa9 	bl	800125c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	2214      	movs	r2, #20
 800130c:	2100      	movs	r1, #0
 800130e:	a82d      	add	r0, sp, #180	; 0xb4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001310:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f00c fb0a 	bl	800d92a <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001316:	4bc8      	ldr	r3, [pc, #800]	; (8001638 <main+0x33c>)
 8001318:	9403      	str	r4, [sp, #12]
 800131a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800131c:	48c7      	ldr	r0, [pc, #796]	; (800163c <main+0x340>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131e:	f042 0210 	orr.w	r2, r2, #16
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
 8001324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001326:	f002 0210 	and.w	r2, r2, #16
 800132a:	9203      	str	r2, [sp, #12]
 800132c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	9404      	str	r4, [sp, #16]
 8001330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001332:	f042 0202 	orr.w	r2, r2, #2
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
 8001338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800133a:	f002 0202 	and.w	r2, r2, #2
 800133e:	9204      	str	r2, [sp, #16]
 8001340:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001342:	9405      	str	r4, [sp, #20]
 8001344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800134a:	631a      	str	r2, [r3, #48]	; 0x30
 800134c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800134e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001352:	9205      	str	r2, [sp, #20]
 8001354:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001356:	9406      	str	r4, [sp, #24]
 8001358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135a:	f042 0208 	orr.w	r2, r2, #8
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
 8001360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001362:	f002 0208 	and.w	r2, r2, #8
 8001366:	9206      	str	r2, [sp, #24]
 8001368:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800136a:	9407      	str	r4, [sp, #28]
 800136c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
 8001374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001376:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800137a:	9207      	str	r2, [sp, #28]
 800137c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	9408      	str	r4, [sp, #32]
 8001380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
 8001388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138a:	f002 0220 	and.w	r2, r2, #32
 800138e:	9208      	str	r2, [sp, #32]
 8001390:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001392:	9409      	str	r4, [sp, #36]	; 0x24
 8001394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
 800139c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80013a2:	9209      	str	r2, [sp, #36]	; 0x24
 80013a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	940a      	str	r4, [sp, #40]	; 0x28
 80013a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
 80013b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013b6:	920a      	str	r2, [sp, #40]	; 0x28
 80013b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013be:	f042 0204 	orr.w	r2, r2, #4
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c6:	f002 0204 	and.w	r2, r2, #4
 80013ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80013cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	940c      	str	r4, [sp, #48]	; 0x30
 80013d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
 80013d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013da:	f002 0201 	and.w	r2, r2, #1
 80013de:	920c      	str	r2, [sp, #48]	; 0x30
 80013e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013e2:	940d      	str	r4, [sp, #52]	; 0x34
 80013e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013f2:	4622      	mov	r2, r4
 80013f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013f8:	930d      	str	r3, [sp, #52]	; 0x34
 80013fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013fc:	f002 febc 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001400:	488f      	ldr	r0, [pc, #572]	; (8001640 <main+0x344>)
 8001402:	2201      	movs	r2, #1
 8001404:	2108      	movs	r1, #8
 8001406:	f002 feb7 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FRAME_RATE_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 800140a:	488e      	ldr	r0, [pc, #568]	; (8001644 <main+0x348>)
 800140c:	4622      	mov	r2, r4
 800140e:	2146      	movs	r1, #70	; 0x46
 8001410:	f002 feb2 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8001414:	4622      	mov	r2, r4
 8001416:	488c      	ldr	r0, [pc, #560]	; (8001648 <main+0x34c>)
 8001418:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800141c:	f002 feac 	bl	8004178 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2503      	movs	r5, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001426:	4885      	ldr	r0, [pc, #532]	; (800163c <main+0x340>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	9530      	str	r5, [sp, #192]	; 0xc0
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800142a:	a92d      	add	r1, sp, #180	; 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	e9cd 372d 	strd	r3, r7, [sp, #180]	; 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001430:	2611      	movs	r6, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	942f      	str	r4, [sp, #188]	; 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001434:	f002 fd14 	bl	8003e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001438:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800143a:	4881      	ldr	r0, [pc, #516]	; (8001640 <main+0x344>)
 800143c:	a92d      	add	r1, sp, #180	; 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800143e:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001446:	f002 fd0b 	bl	8003e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 800144a:	2246      	movs	r2, #70	; 0x46
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	487d      	ldr	r0, [pc, #500]	; (8001644 <main+0x348>)
 800144e:	a92d      	add	r1, sp, #180	; 0xb4
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001450:	f04f 0880 	mov.w	r8, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	e9cd 272d 	strd	r2, r7, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	e9cd 452f 	strd	r4, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f002 fd00 	bl	8003e60 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001460:	a92d      	add	r1, sp, #180	; 0xb4
 8001462:	4879      	ldr	r0, [pc, #484]	; (8001648 <main+0x34c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001464:	e9cd 862d 	strd	r8, r6, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	e9cd 452f 	strd	r4, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800146c:	f002 fcf8 	bl	8003e60 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001470:	4876      	ldr	r0, [pc, #472]	; (800164c <main+0x350>)
  hdma2d.Instance = DMA2D;
 8001472:	4e77      	ldr	r6, [pc, #476]	; (8001650 <main+0x354>)
  hcrc.Instance = CRC;
 8001474:	4a77      	ldr	r2, [pc, #476]	; (8001654 <main+0x358>)
 8001476:	6002      	str	r2, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001478:	f001 ff14 	bl	80032a4 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 800147c:	4a76      	ldr	r2, [pc, #472]	; (8001658 <main+0x35c>)
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800147e:	e9c6 440a 	strd	r4, r4, [r6, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001482:	e9c6 440c 	strd	r4, r4, [r6, #48]	; 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001486:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 8001488:	e9c6 2400 	strd	r2, r4, [r6]
  hdma2d.Init.OutputOffset = 0;
 800148c:	e9c6 4402 	strd	r4, r4, [r6, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001490:	f002 f815 	bl	80034be <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001494:	4639      	mov	r1, r7
 8001496:	4630      	mov	r0, r6
 8001498:	f002 f8ca 	bl	8003630 <HAL_DMA2D_ConfigLayer>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800149c:	4641      	mov	r1, r8
 800149e:	4622      	mov	r2, r4
 80014a0:	4869      	ldr	r0, [pc, #420]	; (8001648 <main+0x34c>)
  hdsi.Instance = DSI;
 80014a2:	4e6e      	ldr	r6, [pc, #440]	; (800165c <main+0x360>)
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80014a4:	f002 fe68 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 80014a8:	2014      	movs	r0, #20
 80014aa:	f001 fe83 	bl	80031b4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 80014ae:	4641      	mov	r1, r8
 80014b0:	463a      	mov	r2, r7
 80014b2:	4865      	ldr	r0, [pc, #404]	; (8001648 <main+0x34c>)
 80014b4:	f002 fe60 	bl	8004178 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f001 fe7b 	bl	80031b4 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80014be:	2224      	movs	r2, #36	; 0x24
 80014c0:	4621      	mov	r1, r4
 80014c2:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 80014c4:	9410      	str	r4, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80014c6:	f00c fa30 	bl	800d92a <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80014ca:	2218      	movs	r2, #24
 80014cc:	4621      	mov	r1, r4
 80014ce:	a811      	add	r0, sp, #68	; 0x44
 80014d0:	f00c fa2b 	bl	800d92a <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80014d4:	2234      	movs	r2, #52	; 0x34
 80014d6:	4621      	mov	r1, r4
 80014d8:	a82d      	add	r0, sp, #180	; 0xb4
 80014da:	f00c fa26 	bl	800d92a <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80014de:	222c      	movs	r2, #44	; 0x2c
 80014e0:	4621      	mov	r1, r4
 80014e2:	eb0d 0008 	add.w	r0, sp, r8
 80014e6:	f00c fa20 	bl	800d92a <memset>
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 80014ea:	f04f 0802 	mov.w	r8, #2
  hdsi.Instance = DSI;
 80014ee:	4a5c      	ldr	r2, [pc, #368]	; (8001660 <main+0x364>)
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 80014f0:	217d      	movs	r1, #125	; 0x7d
  hdsi.Init.TXEscapeCkdiv = 4;
 80014f2:	f04f 0904 	mov.w	r9, #4
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 80014f6:	e9cd 180e 	strd	r1, r8, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80014fa:	4630      	mov	r0, r6
 80014fc:	a90e      	add	r1, sp, #56	; 0x38
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80014fe:	e9c6 2400 	strd	r2, r4, [r6]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001502:	e9c6 9702 	strd	r9, r7, [r6, #8]
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001506:	f002 f95b 	bl	80037c0 <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800150a:	a917      	add	r1, sp, #92	; 0x5c
 800150c:	4630      	mov	r0, r6
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800150e:	e9cd 7417 	strd	r7, r4, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001512:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001516:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 800151a:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 800151e:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001520:	f002 fb7a 	bl	8003c18 <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001524:	231c      	movs	r3, #28
 8001526:	2121      	movs	r1, #33	; 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 8001528:	220f      	movs	r2, #15
  PhyTimings.ClockLaneLP2HSTime = 33;
 800152a:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 800152e:	2119      	movs	r1, #25
 8001530:	e9cd 2113 	strd	r2, r1, [sp, #76]	; 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8001534:	4630      	mov	r0, r6
 8001536:	a911      	add	r1, sp, #68	; 0x44
  PhyTimings.StopWaitTime = 0;
 8001538:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800153c:	f002 fb2f 	bl	8003b9e <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001540:	4649      	mov	r1, r9
 8001542:	4630      	mov	r0, r6
 8001544:	f002 fb1a 	bl	8003b7c <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001548:	f242 7110 	movw	r1, #10000	; 0x2710
 800154c:	4630      	mov	r0, r6
 800154e:	f002 fc70 	bl	8003e32 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001552:	4621      	mov	r1, r4
 8001554:	4630      	mov	r0, r6
 8001556:	f002 f8d0 	bl	80036fa <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800155a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800155e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001562:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8001566:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800156a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800156e:	e9cd a12f 	strd	sl, r1, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157a:	e9cd 3131 	strd	r3, r1, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800157e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001582:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8001586:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800158a:	e9cd 3133 	strd	r3, r1, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800158e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8001592:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8001596:	e9cd c135 	strd	ip, r1, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800159a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800159e:	e9cd e137 	strd	lr, r1, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80015a2:	4630      	mov	r0, r6
 80015a4:	a92d      	add	r1, sp, #180	; 0xb4
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80015a6:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 80015aa:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80015ae:	f002 fab1 	bl	8003b14 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80015b2:	2310      	movs	r3, #16
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80015b4:	a920      	add	r1, sp, #128	; 0x80
 80015b6:	4630      	mov	r0, r6
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80015b8:	e9cd b322 	strd	fp, r3, [sp, #136]	; 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80015bc:	e9cd 8426 	strd	r8, r4, [sp, #152]	; 0x98
  CmdCfg.ColorCoding = DSI_RGB565;
 80015c0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80015c4:	e9cd 4924 	strd	r4, r9, [sp, #144]	; 0x90
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80015c8:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80015cc:	972a      	str	r7, [sp, #168]	; 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80015ce:	f002 fa2f 	bl	8003a30 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80015d2:	4621      	mov	r1, r4
 80015d4:	4630      	mov	r0, r6
 80015d6:	f002 fa1a 	bl	8003a0e <HAL_DSI_SetGenericVCID>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015da:	4822      	ldr	r0, [pc, #136]	; (8001664 <main+0x368>)
 80015dc:	4922      	ldr	r1, [pc, #136]	; (8001668 <main+0x36c>)
  SdramTiming.LoadToActiveDelay = 2;
 80015de:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015e2:	e9c0 1400 	strd	r1, r4, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015e6:	2320      	movs	r3, #32
 80015e8:	2140      	movs	r1, #64	; 0x40
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80015ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015ee:	e9c0 3104 	strd	r3, r1, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015f2:	f44f 71c0 	mov.w	r1, #384	; 0x180
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80015f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015fa:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015fe:	e9c0 1406 	strd	r1, r4, [r0, #24]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001602:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001604:	a92d      	add	r1, sp, #180	; 0xb4
  SdramTiming.WriteRecoveryTime = 3;
 8001606:	e9cd 3530 	strd	r3, r5, [sp, #192]	; 0xc0
  SdramTiming.SelfRefreshTime = 4;
 800160a:	e9cd 392e 	strd	r3, r9, [sp, #184]	; 0xb8
  SdramTiming.RCDDelay = 2;
 800160e:	e9cd 8832 	strd	r8, r8, [sp, #200]	; 0xc8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001612:	e9c0 4902 	strd	r4, r9, [r0, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001616:	6204      	str	r4, [r0, #32]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001618:	f004 fb12 	bl	8005c40 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit();
 800161c:	f001 fcce 	bl	8002fbc <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init() != SDRAM_OK)
 8001620:	f001 fc7e 	bl	8002f20 <BSP_SDRAM_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001624:	2234      	movs	r2, #52	; 0x34
 8001626:	4621      	mov	r1, r4
 8001628:	a820      	add	r0, sp, #128	; 0x80
 800162a:	f00c f97e 	bl	800d92a <memset>
  hltdc.Instance = LTDC;
 800162e:	4d0f      	ldr	r5, [pc, #60]	; (800166c <main+0x370>)
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <main+0x374>)
  hltdc.Init.Backcolor.Blue = 0;
 8001632:	86ac      	strh	r4, [r5, #52]	; 0x34
 8001634:	e01e      	b.n	8001674 <main+0x378>
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40021800 	.word	0x40021800
 8001640:	40022800 	.word	0x40022800
 8001644:	40020000 	.word	0x40020000
 8001648:	40021c00 	.word	0x40021c00
 800164c:	20000fc0 	.word	0x20000fc0
 8001650:	20000fc8 	.word	0x20000fc8
 8001654:	40023000 	.word	0x40023000
 8001658:	4002b000 	.word	0x4002b000
 800165c:	20001008 	.word	0x20001008
 8001660:	40016c00 	.word	0x40016c00
 8001664:	2000116c 	.word	0x2000116c
 8001668:	a0000140 	.word	0xa0000140
 800166c:	20001078 	.word	0x20001078
 8001670:	40016800 	.word	0x40016800
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001674:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.AccumulatedActiveH = 482;
 8001678:	21ca      	movs	r1, #202	; 0xca
 800167a:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800167e:	e9c5 1309 	strd	r1, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8001682:	20cb      	movs	r0, #203	; 0xcb
 8001684:	f240 13e3 	movw	r3, #483	; 0x1e3
 8001688:	e9c5 030b 	strd	r0, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800168c:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedHBP = 2;
 800168e:	e9c5 7806 	strd	r7, r8, [r5, #24]
  hltdc.Init.AccumulatedVBP = 2;
 8001692:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001696:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.HorizontalSync = 1;
 800169a:	e9c5 4704 	strd	r4, r7, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 800169e:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80016a2:	f003 fa33 	bl	8004b0c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80016a6:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.FBStartAdress = 0xC0000000;
 80016a8:	f04f 0c05 	mov.w	ip, #5
  pLayerCfg.Alpha0 = 0;
 80016ac:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
  pLayerCfg.FBStartAdress = 0xC0000000;
 80016b0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80016b4:	e9cd c228 	strd	ip, r2, [sp, #160]	; 0xa0
  pLayerCfg.WindowY1 = 480;
 80016b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016bc:	a920      	add	r1, sp, #128	; 0x80
 80016be:	4622      	mov	r2, r4
 80016c0:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80016c2:	e9cd 3823 	strd	r3, r8, [sp, #140]	; 0x8c
  pLayerCfg.ImageHeight = 480;
 80016c6:	e9cd b32a 	strd	fp, r3, [sp, #168]	; 0xa8
  pLayerCfg.WindowX1 = 200;
 80016ca:	e9cd 4b20 	strd	r4, fp, [sp, #128]	; 0x80
  pLayerCfg.WindowY0 = 0;
 80016ce:	9422      	str	r4, [sp, #136]	; 0x88
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80016d0:	f8cd a09c 	str.w	sl, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Blue = 0;
 80016d4:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
  pLayerCfg.Backcolor.Red = 0;
 80016d8:	f88d 40b2 	strb.w	r4, [sp, #178]	; 0xb2
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016dc:	f003 fae2 	bl	8004ca4 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 80016e0:	682a      	ldr	r2, [r5, #0]
 80016e2:	6993      	ldr	r3, [r2, #24]
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 80016ea:	4630      	mov	r0, r6
 80016ec:	f002 fafa 	bl	8003ce4 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 80016f0:	4639      	mov	r1, r7
 80016f2:	4640      	mov	r0, r8
 80016f4:	f000 fde2 	bl	80022bc <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 80016f8:	2328      	movs	r3, #40	; 0x28
 80016fa:	2215      	movs	r2, #21
 80016fc:	4621      	mov	r1, r4
 80016fe:	9400      	str	r4, [sp, #0]
 8001700:	4630      	mov	r0, r6
 8001702:	f002 fb22 	bl	8003d4a <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8001706:	a92d      	add	r1, sp, #180	; 0xb4
 8001708:	4630      	mov	r0, r6
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800170a:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800170e:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8001712:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8001716:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800171a:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800171e:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8001720:	f002 f9f8 	bl	8003b14 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8001724:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001728:	4622      	mov	r2, r4
 800172a:	4628      	mov	r0, r5
 800172c:	f003 fae8 	bl	8004d00 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8001730:	682a      	ldr	r2, [r5, #0]
  hqspi.Instance = QUADSPI;
 8001732:	4820      	ldr	r0, [pc, #128]	; (80017b4 <main+0x4b8>)
  __HAL_LTDC_ENABLE(&hltdc);
 8001734:	6993      	ldr	r3, [r2, #24]
  hi2c1.Instance = I2C1;
 8001736:	4d20      	ldr	r5, [pc, #128]	; (80017b8 <main+0x4bc>)
  hi2c1.Init.ClockSpeed = 400000;
 8001738:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80017dc <main+0x4e0>
  hqspi.Init.FifoThreshold = 1;
 800173c:	6087      	str	r7, [r0, #8]
  __HAL_LTDC_ENABLE(&hltdc);
 800173e:	433b      	orrs	r3, r7
 8001740:	6193      	str	r3, [r2, #24]
  hqspi.Instance = QUADSPI;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <main+0x4c0>)
  hqspi.Init.FlashSize = 27;
 8001744:	f04f 0e10 	mov.w	lr, #16
  hqspi.Init.ClockPrescaler = 1;
 8001748:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.FlashSize = 27;
 800174c:	231b      	movs	r3, #27
 800174e:	e9c0 e303 	strd	lr, r3, [r0, #12]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001752:	e9c0 a405 	strd	sl, r4, [r0, #20]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001756:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800175a:	f003 fc21 	bl	8004fa0 <HAL_QSPI_Init>
  BSP_QSPI_DeInit();
 800175e:	f001 faa5 	bl	8002cac <BSP_QSPI_DeInit>
  if(BSP_QSPI_Init() != QSPI_OK)
 8001762:	f001 f9d9 	bl	8002b18 <BSP_QSPI_Init>
  if(BSP_QSPI_EnableMemoryMappedMode() != QSPI_OK)
 8001766:	f001 f94f 	bl	8002a08 <BSP_QSPI_EnableMemoryMappedMode>
  hi2c1.Init.ClockSpeed = 400000;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <main+0x4c4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176c:	622c      	str	r4, [r5, #32]
  hi2c1.Init.ClockSpeed = 400000;
 800176e:	e9c5 8300 	strd	r8, r3, [r5]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001772:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001774:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001778:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c1.Init.OwnAddress1 = 0;
 800177c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001780:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001784:	f002 fee2 	bl	800454c <HAL_I2C_Init>
  HAL_I2C_DeInit(&hi2c1);
 8001788:	4628      	mov	r0, r5
 800178a:	f002 ff87 	bl	800469c <HAL_I2C_DeInit>
  osKernelInitialize();
 800178e:	f004 fceb 	bl	8006168 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <main+0x4c8>)
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <main+0x4cc>)
 8001796:	4621      	mov	r1, r4
 8001798:	f004 fd12 	bl	80061c0 <osThreadNew>
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <main+0x4d0>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <main+0x4d4>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017a0:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80017a2:	4621      	mov	r1, r4
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <main+0x4d8>)
 80017a6:	f004 fd0b 	bl	80061c0 <osThreadNew>
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <main+0x4dc>)
 80017ac:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80017ae:	f004 fced 	bl	800618c <osKernelStart>
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <main+0x4b6>
 80017b4:	20001120 	.word	0x20001120
 80017b8:	20001024 	.word	0x20001024
 80017bc:	a0001000 	.word	0xa0001000
 80017c0:	00061a80 	.word	0x00061a80
 80017c4:	0800ebac 	.word	0x0800ebac
 80017c8:	08001251 	.word	0x08001251
 80017cc:	20000fbc 	.word	0x20000fbc
 80017d0:	0800eb88 	.word	0x0800eb88
 80017d4:	080005ef 	.word	0x080005ef
 80017d8:	20000fb8 	.word	0x20000fb8
 80017dc:	40005400 	.word	0x40005400

080017e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017e0:	6802      	ldr	r2, [r0, #0]
 80017e2:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d101      	bne.n	80017ec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80017e8:	f001 bcd2 	b.w	8003190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40001000 	.word	0x40001000

080017f4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_MspInit+0x3c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	9200      	str	r2, [sp, #0]
 8001800:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001802:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001806:	6459      	str	r1, [r3, #68]	; 0x44
 8001808:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800180a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800180e:	9100      	str	r1, [sp, #0]
 8001810:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	9201      	str	r2, [sp, #4]
 8001814:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001816:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800181a:	6419      	str	r1, [r3, #64]	; 0x40
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001826:	210f      	movs	r1, #15
 8001828:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800182e:	f001 bce7 	b.w	8003200 <HAL_NVIC_SetPriority>
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001838:	6802      	ldr	r2, [r0, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_CRC_MspInit+0x28>)
 800183c:	429a      	cmp	r2, r3
{
 800183e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001840:	d10b      	bne.n	800185a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_CRC_MspInit+0x2c>)
 8001848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800185a:	b002      	add	sp, #8
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023000 	.word	0x40023000
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001868:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_DMA2D_MspInit+0x40>)
 800186c:	6802      	ldr	r2, [r0, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d116      	bne.n	80018a0 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001872:	2200      	movs	r2, #0
 8001874:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800187c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001880:	6319      	str	r1, [r3, #48]	; 0x30
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001888:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800188a:	2105      	movs	r1, #5
 800188c:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800188e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001890:	f001 fcb6 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001894:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001896:	b003      	add	sp, #12
 8001898:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800189c:	f001 bce2 	b.w	8003264 <HAL_NVIC_EnableIRQ>
}
 80018a0:	b003      	add	sp, #12
 80018a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a6:	bf00      	nop
 80018a8:	4002b000 	.word	0x4002b000

080018ac <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80018ac:	b510      	push	{r4, lr}
 80018ae:	4604      	mov	r4, r0
 80018b0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	2214      	movs	r2, #20
 80018b4:	2100      	movs	r1, #0
 80018b6:	a803      	add	r0, sp, #12
 80018b8:	f00c f837 	bl	800d92a <memset>
  if(hdsi->Instance==DSI)
 80018bc:	6822      	ldr	r2, [r4, #0]
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_DSI_MspInit+0x70>)
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d128      	bne.n	8001916 <HAL_DSI_MspInit+0x6a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80018c4:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 80018c8:	2400      	movs	r4, #0
 80018ca:	9401      	str	r4, [sp, #4]
 80018cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018ce:	4814      	ldr	r0, [pc, #80]	; (8001920 <HAL_DSI_MspInit+0x74>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80018d0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
 80018d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018d8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018e0:	9402      	str	r4, [sp, #8]
 80018e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80018fe:	230d      	movs	r3, #13
 8001900:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001902:	f002 faad 	bl	8003e60 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8001906:	205c      	movs	r0, #92	; 0x5c
 8001908:	4622      	mov	r2, r4
 800190a:	2105      	movs	r1, #5
 800190c:	f001 fc78 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001910:	205c      	movs	r0, #92	; 0x5c
 8001912:	f001 fca7 	bl	8003264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001916:	b008      	add	sp, #32
 8001918:	bd10      	pop	{r4, pc}
 800191a:	bf00      	nop
 800191c:	40016c00 	.word	0x40016c00
 8001920:	40022400 	.word	0x40022400

08001924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001924:	b530      	push	{r4, r5, lr}
 8001926:	4604      	mov	r4, r0
 8001928:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	2214      	movs	r2, #20
 800192c:	2100      	movs	r1, #0
 800192e:	a803      	add	r0, sp, #12
 8001930:	f00b fffb 	bl	800d92a <memset>
  if(hi2c->Instance==I2C1)
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_I2C_MspInit+0x7c>)
 8001938:	429a      	cmp	r2, r3
 800193a:	d12f      	bne.n	800199c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
//
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	4c19      	ldr	r4, [pc, #100]	; (80019a4 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	481a      	ldr	r0, [pc, #104]	; (80019a8 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	2500      	movs	r5, #0
 8001942:	9501      	str	r5, [sp, #4]
 8001944:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	6323      	str	r3, [r4, #48]	; 0x30
 800194c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	f44f 7240 	mov.w	r2, #768	; 0x300
 800195a:	2312      	movs	r3, #18
 800195c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2101      	movs	r1, #1
 8001962:	2303      	movs	r3, #3
 8001964:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001968:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f002 fa77 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001972:	9502      	str	r5, [sp, #8]
 8001974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197a:	6423      	str	r3, [r4, #64]	; 0x40
 800197c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800197e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    /* Force the I2C peripheral clock reset */
    __HAL_RCC_I2C1_FORCE_RESET();
 8001986:	6a23      	ldr	r3, [r4, #32]
 8001988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800198c:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    __HAL_RCC_I2C1_RELEASE_RESET();
 800198e:	6a23      	ldr	r3, [r4, #32]
 8001990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001994:	6223      	str	r3, [r4, #32]

    /* Wait for 100 ms */
    HAL_Delay(100);
 8001996:	2064      	movs	r0, #100	; 0x64
 8001998:	f001 fc0c 	bl	80031b4 <HAL_Delay>
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800199c:	b009      	add	sp, #36	; 0x24
 800199e:	bd30      	pop	{r4, r5, pc}
 80019a0:	40005400 	.word	0x40005400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019ac:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 80019ae:	6802      	ldr	r2, [r0, #0]
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_I2C_MspDeInit+0x30>)
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d110      	bne.n	80019d8 <HAL_I2C_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_I2C_MspDeInit+0x34>)

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80019b8:	480a      	ldr	r0, [pc, #40]	; (80019e4 <HAL_I2C_MspDeInit+0x38>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 80019ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80019c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c6:	f002 fb31 	bl	800402c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80019ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_I2C_MspDeInit+0x38>)
 80019d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d4:	f002 bb2a 	b.w	800402c <HAL_GPIO_DeInit>
}
 80019d8:	bd08      	pop	{r3, pc}
 80019da:	bf00      	nop
 80019dc:	40005400 	.word	0x40005400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4604      	mov	r4, r0
 80019ec:	b090      	sub	sp, #64	; 0x40
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ee:	223c      	movs	r2, #60	; 0x3c
 80019f0:	2100      	movs	r1, #0
 80019f2:	a801      	add	r0, sp, #4
 80019f4:	f00b ff99 	bl	800d92a <memset>
  if(hltdc->Instance==LTDC)
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_LTDC_MspInit+0x5c>)
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d11f      	bne.n	8001a40 <HAL_LTDC_MspInit+0x58>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a00:	2308      	movs	r3, #8
 8001a02:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 360;
 8001a04:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a08:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 6;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0a:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 6;
 8001a0c:	2306      	movs	r3, #6
 8001a0e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a10:	f003 fdfe 	bl	8005610 <HAL_RCCEx_PeriphCLKConfig>
 8001a14:	b108      	cbz	r0, 8001a1a <HAL_LTDC_MspInit+0x32>
    {
      Error_Handler();
 8001a16:	f7ff feed 	bl	80017f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_LTDC_MspInit+0x60>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	9200      	str	r2, [sp, #0]
 8001a20:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a22:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001a26:	6459      	str	r1, [r3, #68]	; 0x44
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2e:	9300      	str	r3, [sp, #0]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001a30:	2058      	movs	r0, #88	; 0x58
 8001a32:	2105      	movs	r1, #5
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a34:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001a36:	f001 fbe3 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001a3a:	2058      	movs	r0, #88	; 0x58
 8001a3c:	f001 fc12 	bl	8003264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001a40:	b010      	add	sp, #64	; 0x40
 8001a42:	bd10      	pop	{r4, pc}
 8001a44:	40016800 	.word	0x40016800
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	4604      	mov	r4, r0
 8001a50:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	2214      	movs	r2, #20
 8001a54:	2100      	movs	r1, #0
 8001a56:	a803      	add	r0, sp, #12
 8001a58:	f00b ff67 	bl	800d92a <memset>
  if(hqspi->Instance==QUADSPI)
 8001a5c:	6822      	ldr	r2, [r4, #0]
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_QSPI_MspInit+0xa4>)
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d142      	bne.n	8001aea <HAL_QSPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_QSPI_MspInit+0xa8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	4824      	ldr	r0, [pc, #144]	; (8001af8 <HAL_QSPI_MspInit+0xac>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a68:	2400      	movs	r4, #0
 8001a6a:	9400      	str	r4, [sp, #0]
 8001a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a6e:	f042 0202 	orr.w	r2, r2, #2
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38
 8001a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a76:	f002 0202 	and.w	r2, r2, #2
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	9401      	str	r4, [sp, #4]
 8001a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a82:	f042 0202 	orr.w	r2, r2, #2
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
 8001a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8a:	f002 0202 	and.w	r2, r2, #2
 8001a8e:	9201      	str	r2, [sp, #4]
 8001a90:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a92:	9402      	str	r4, [sp, #8]
 8001a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a96:	f042 0220 	orr.w	r2, r2, #32
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001aa6:	2503      	movs	r5, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001aaa:	270a      	movs	r7, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001ab4:	e9cd 5706 	strd	r5, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f002 f9d2 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001abc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <HAL_QSPI_MspInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ac6:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ac8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001aca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	e9cd 4505 	strd	r4, r5, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad0:	f002 f9c6 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001ad4:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <HAL_QSPI_MspInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001ada:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001adc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	e9cd 4505 	strd	r4, r5, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae6:	f002 f9bb 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001aea:	b009      	add	sp, #36	; 0x24
 8001aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aee:	bf00      	nop
 8001af0:	a0001000 	.word	0xa0001000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40021400 	.word	0x40021400

08001b00 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001b00:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8001b02:	6802      	ldr	r2, [r0, #0]
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_QSPI_MspDeInit+0x2c>)
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d10f      	bne.n	8001b2a <HAL_QSPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_QSPI_MspDeInit+0x30>)
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <HAL_QSPI_MspDeInit+0x34>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001b0e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001b10:	f023 0302 	bic.w	r3, r3, #2
 8001b14:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001b16:	2140      	movs	r1, #64	; 0x40
 8001b18:	f002 fa88 	bl	800402c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001b1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_QSPI_MspDeInit+0x38>)
 8001b22:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8001b26:	f002 ba81 	b.w	800402c <HAL_GPIO_DeInit>
}
 8001b2a:	bd08      	pop	{r3, pc}
 8001b2c:	a0001000 	.word	0xa0001000
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40021400 	.word	0x40021400

08001b3c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b40:	2300      	movs	r3, #0
 8001b42:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001b44:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_SDRAM_MspInit+0xcc>)
 8001b46:	681c      	ldr	r4, [r3, #0]
 8001b48:	2c00      	cmp	r4, #0
 8001b4a:	d15a      	bne.n	8001c02 <HAL_SDRAM_MspInit+0xc6>
  FMC_Initialized = 1;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <HAL_SDRAM_MspInit+0xd0>)
 8001b52:	9400      	str	r4, [sp, #0]
 8001b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b56:	482e      	ldr	r0, [pc, #184]	; (8001c10 <HAL_SDRAM_MspInit+0xd4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b68:	2603      	movs	r6, #3
 8001b6a:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b6c:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b6e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b74:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b78:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7c:	f002 f970 	bl	8003e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001b80:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b84:	4823      	ldr	r0, [pc, #140]	; (8001c14 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b86:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b88:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b92:	f002 f965 	bl	8003e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001b96:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9a:	481f      	ldr	r0, [pc, #124]	; (8001c18 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b9c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba8:	f002 f95a 	bl	8003e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8001bac:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bb0:	481a      	ldr	r0, [pc, #104]	; (8001c1c <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bb4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bbe:	f002 f94f 	bl	8003e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bc2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc6:	4816      	ldr	r0, [pc, #88]	; (8001c20 <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bca:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd4:	f002 f944 	bl	8003e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8001bd8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bdc:	4811      	ldr	r0, [pc, #68]	; (8001c24 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bde:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001be0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bea:	f002 f939 	bl	8003e60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_2;
 8001bee:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f002 f92f 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c02:	b007      	add	sp, #28
 8001c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200011a4 	.word	0x200011a4
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40021c00 	.word	0x40021c00
 8001c28:	40020800 	.word	0x40020800

08001c2c <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001c2c:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_SDRAM_MspDeInit+0x60>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	bb52      	cbnz	r2, 8001c8a <HAL_SDRAM_MspDeInit+0x5e>
  FMC_DeInitialized = 1;
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001c38:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <HAL_SDRAM_MspDeInit+0x64>)
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001c3a:	4816      	ldr	r0, [pc, #88]	; (8001c94 <HAL_SDRAM_MspDeInit+0x68>)
  __HAL_RCC_FMC_CLK_DISABLE();
 8001c3c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	6393      	str	r3, [r2, #56]	; 0x38
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001c44:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001c48:	f002 f9f0 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001c4c:	4812      	ldr	r0, [pc, #72]	; (8001c98 <HAL_SDRAM_MspDeInit+0x6c>)
 8001c4e:	f248 1133 	movw	r1, #33075	; 0x8133
 8001c52:	f002 f9eb 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001c56:	4811      	ldr	r0, [pc, #68]	; (8001c9c <HAL_SDRAM_MspDeInit+0x70>)
 8001c58:	f24c 7103 	movw	r1, #50947	; 0xc703
 8001c5c:	f002 f9e6 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8001c60:	480f      	ldr	r0, [pc, #60]	; (8001ca0 <HAL_SDRAM_MspDeInit+0x74>)
 8001c62:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8001c66:	f002 f9e1 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c6a:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <HAL_SDRAM_MspDeInit+0x78>)
 8001c6c:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001c70:	f002 f9dc 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <HAL_SDRAM_MspDeInit+0x7c>)
 8001c76:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001c7a:	f002 f9d7 	bl	800402c <HAL_GPIO_DeInit>
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_2);
 8001c82:	480a      	ldr	r0, [pc, #40]	; (8001cac <HAL_SDRAM_MspDeInit+0x80>)
 8001c84:	210d      	movs	r1, #13
 8001c86:	f002 b9d1 	b.w	800402c <HAL_GPIO_DeInit>
}
 8001c8a:	bd08      	pop	{r3, pc}
 8001c8c:	200011a0 	.word	0x200011a0
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40021800 	.word	0x40021800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021c00 	.word	0x40021c00
 8001cac:	40020800 	.word	0x40020800

08001cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b570      	push	{r4, r5, r6, lr}
 8001cb2:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_InitTick+0x8c>)
 8001cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cbc:	f042 0210 	orr.w	r2, r2, #16
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	9302      	str	r3, [sp, #8]
{
 8001cca:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ccc:	a901      	add	r1, sp, #4
 8001cce:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cd0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd2:	f003 fc7f 	bl	80055d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cd6:	9b06      	ldr	r3, [sp, #24]
 8001cd8:	bb4b      	cbnz	r3, 8001d2e <HAL_InitTick+0x7e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cda:	f003 fc6b 	bl	80055b4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cde:	4e18      	ldr	r6, [pc, #96]	; (8001d40 <HAL_InitTick+0x90>)
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_InitTick+0x94>)
 8001ce2:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ce4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001ce8:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_InitTick+0x98>)
 8001cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf0:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cf2:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8001cf4:	4630      	mov	r0, r6
  htim6.Init.ClockDivision = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfc:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8001cfe:	f004 f94b 	bl	8005f98 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001d02:	4604      	mov	r4, r0
 8001d04:	b980      	cbnz	r0, 8001d28 <HAL_InitTick+0x78>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d06:	4630      	mov	r0, r6
 8001d08:	f004 f800 	bl	8005d0c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	b958      	cbnz	r0, 8001d28 <HAL_InitTick+0x78>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d10:	2036      	movs	r0, #54	; 0x36
 8001d12:	f001 faa7 	bl	8003264 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	2d0f      	cmp	r5, #15
 8001d18:	d80d      	bhi.n	8001d36 <HAL_InitTick+0x86>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	2036      	movs	r0, #54	; 0x36
 8001d20:	f001 fa6e 	bl	8003200 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_InitTick+0x9c>)
 8001d26:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001d28:	4620      	mov	r0, r4
 8001d2a:	b008      	add	sp, #32
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d2e:	f003 fc41 	bl	80055b4 <HAL_RCC_GetPCLK1Freq>
 8001d32:	0040      	lsls	r0, r0, #1
 8001d34:	e7d3      	b.n	8001cde <HAL_InitTick+0x2e>
        status = HAL_ERROR;
 8001d36:	2401      	movs	r4, #1
 8001d38:	e7f6      	b.n	8001d28 <HAL_InitTick+0x78>
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	200011a8 	.word	0x200011a8
 8001d44:	40001000 	.word	0x40001000
 8001d48:	000f4240 	.word	0x000f4240
 8001d4c:	20000050 	.word	0x20000050

08001d50 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d50:	4770      	bx	lr

08001d52 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <HardFault_Handler>

08001d54 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <MemManage_Handler>

08001d56 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler>

08001d58 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler>

08001d5a <DebugMon_Handler>:
 8001d5a:	4770      	bx	lr

08001d5c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d5c:	4801      	ldr	r0, [pc, #4]	; (8001d64 <TIM6_DAC_IRQHandler+0x8>)
 8001d5e:	f004 b813 	b.w	8005d88 <HAL_TIM_IRQHandler>
 8001d62:	bf00      	nop
 8001d64:	200011a8 	.word	0x200011a8

08001d68 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001d68:	4801      	ldr	r0, [pc, #4]	; (8001d70 <LTDC_IRQHandler+0x8>)
 8001d6a:	f002 bf3e 	b.w	8004bea <HAL_LTDC_IRQHandler>
 8001d6e:	bf00      	nop
 8001d70:	20001078 	.word	0x20001078

08001d74 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001d74:	4801      	ldr	r0, [pc, #4]	; (8001d7c <DMA2D_IRQHandler+0x8>)
 8001d76:	f001 bbd0 	b.w	800351a <HAL_DMA2D_IRQHandler>
 8001d7a:	bf00      	nop
 8001d7c:	20000fc8 	.word	0x20000fc8

08001d80 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001d80:	4801      	ldr	r0, [pc, #4]	; (8001d88 <DSI_IRQHandler+0x8>)
 8001d82:	f001 bdd2 	b.w	800392a <HAL_DSI_IRQHandler>
 8001d86:	bf00      	nop
 8001d88:	20001008 	.word	0x20001008

08001d8c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	4770      	bx	lr

08001d90 <_kill>:

int _kill(int pid, int sig)
{
 8001d90:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d92:	f00b fe6d 	bl	800da70 <__errno>
 8001d96:	2316      	movs	r3, #22
 8001d98:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9e:	bd08      	pop	{r3, pc}

08001da0 <_exit>:

void _exit (int status)
{
 8001da0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001da2:	f00b fe65 	bl	800da70 <__errno>
 8001da6:	2316      	movs	r3, #22
 8001da8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001daa:	e7fe      	b.n	8001daa <_exit+0xa>

08001dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	460d      	mov	r5, r1
 8001db0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	460e      	mov	r6, r1
 8001db4:	1b73      	subs	r3, r6, r5
 8001db6:	429c      	cmp	r4, r3
 8001db8:	dc01      	bgt.n	8001dbe <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001dba:	4620      	mov	r0, r4
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001dbe:	f3af 8000 	nop.w
 8001dc2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	e7f5      	b.n	8001db4 <_read+0x8>

08001dc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	460d      	mov	r5, r1
 8001dcc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	460e      	mov	r6, r1
 8001dd0:	1b73      	subs	r3, r6, r5
 8001dd2:	429c      	cmp	r4, r3
 8001dd4:	dc01      	bgt.n	8001dda <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001dda:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001dde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	e7f5      	b.n	8001dd0 <_write+0x8>

08001de4 <_close>:

int _close(int file)
{
	return -1;
}
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	4770      	bx	lr

08001dea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dee:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001df0:	2000      	movs	r0, #0
 8001df2:	4770      	bx	lr

08001df4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001df4:	2001      	movs	r0, #1
 8001df6:	4770      	bx	lr

08001df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001df8:	2000      	movs	r0, #0
 8001dfa:	4770      	bx	lr

08001dfc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <_sbrk+0x2c>)
 8001dfe:	6811      	ldr	r1, [r2, #0]
{
 8001e00:	b508      	push	{r3, lr}
 8001e02:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001e04:	b909      	cbnz	r1, 8001e0a <_sbrk+0xe>
		heap_end = &end;
 8001e06:	4909      	ldr	r1, [pc, #36]	; (8001e2c <_sbrk+0x30>)
 8001e08:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001e0a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001e0c:	4669      	mov	r1, sp
 8001e0e:	4403      	add	r3, r0
 8001e10:	428b      	cmp	r3, r1
 8001e12:	d906      	bls.n	8001e22 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001e14:	f00b fe2c 	bl	800da70 <__errno>
 8001e18:	230c      	movs	r3, #12
 8001e1a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001e20:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001e22:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001e24:	e7fc      	b.n	8001e20 <_sbrk+0x24>
 8001e26:	bf00      	nop
 8001e28:	200011f0 	.word	0x200011f0
 8001e2c:	2000a510 	.word	0x2000a510

08001e30 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001e30:	b513      	push	{r0, r1, r4, lr}
 8001e32:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001e34:	b151      	cbz	r1, 8001e4c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001e36:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8001e38:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8001e3a:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001e3e:	aa01      	add	r2, sp, #4
 8001e40:	689c      	ldr	r4, [r3, #8]
 8001e42:	f10d 0303 	add.w	r3, sp, #3
 8001e46:	47a0      	blx	r4
        return glyph;
    }
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd10      	pop	{r4, pc}
            return 0;
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	e7fb      	b.n	8001e48 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001e50 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001e50:	89c0      	ldrh	r0, [r0, #14]
 8001e52:	4770      	bx	lr

08001e54 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001e54:	8a00      	ldrh	r0, [r0, #16]
 8001e56:	4770      	bx	lr

08001e58 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8001e58:	88c0      	ldrh	r0, [r0, #6]
 8001e5a:	4770      	bx	lr

08001e5c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8001e5c:	8880      	ldrh	r0, [r0, #4]
 8001e5e:	4770      	bx	lr

08001e60 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001e60:	7a80      	ldrb	r0, [r0, #10]
    }
 8001e62:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001e66:	4770      	bx	lr

08001e68 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001e68:	7a80      	ldrb	r0, [r0, #10]
    }
 8001e6a:	09c0      	lsrs	r0, r0, #7
 8001e6c:	4770      	bx	lr
	...

08001e70 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001e78:	b10a      	cbz	r2, 8001e7e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8001e7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001e7c:	b900      	cbnz	r0, 8001e80 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8001e7e:	6898      	ldr	r0, [r3, #8]
    }
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000a1d8 	.word	0x2000a1d8

08001e88 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8001e88:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001e8a:	4770      	bx	lr

08001e8c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8001e8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001e8e:	4770      	bx	lr

08001e90 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8001e90:	4770      	bx	lr

08001e92 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8001e92:	888b      	ldrh	r3, [r1, #4]
 8001e94:	69c0      	ldr	r0, [r0, #28]
 8001e96:	680a      	ldr	r2, [r1, #0]
 8001e98:	0adb      	lsrs	r3, r3, #11
 8001e9a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8001e9e:	4410      	add	r0, r2
 8001ea0:	4770      	bx	lr

08001ea2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8001ea2:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8001ea4:	b1c2      	cbz	r2, 8001ed8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8001ea6:	7b13      	ldrb	r3, [r2, #12]
 8001ea8:	b1b3      	cbz	r3, 8001ed8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8001eaa:	7b54      	ldrb	r4, [r2, #13]
 8001eac:	7ad2      	ldrb	r2, [r2, #11]
 8001eae:	0224      	lsls	r4, r4, #8
 8001eb0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8001eb4:	4314      	orrs	r4, r2
 8001eb6:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8001eb8:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8001eba:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8001ebe:	8813      	ldrh	r3, [r2, #0]
 8001ec0:	428b      	cmp	r3, r1
 8001ec2:	d102      	bne.n	8001eca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8001ec4:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8001ec8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8001eca:	d805      	bhi.n	8001ed8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8001ecc:	3801      	subs	r0, #1
 8001ece:	b280      	uxth	r0, r0
 8001ed0:	3204      	adds	r2, #4
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d1f3      	bne.n	8001ebe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8001ed6:	e7f7      	b.n	8001ec8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e7f5      	b.n	8001ec8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08001edc <_ZN8touchgfx13GeneratedFontD0Ev>:
 8001edc:	b510      	push	{r4, lr}
 8001ede:	212c      	movs	r1, #44	; 0x2c
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	f00b fafd 	bl	800d4e0 <_ZdlPvj>
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	bd10      	pop	{r4, pc}
	...

08001eec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8001eec:	b530      	push	{r4, r5, lr}
 8001eee:	b08b      	sub	sp, #44	; 0x2c
 8001ef0:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8001ef2:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8001ef6:	9508      	str	r5, [sp, #32]
 8001ef8:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8001efc:	9507      	str	r5, [sp, #28]
 8001efe:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8001f02:	9506      	str	r5, [sp, #24]
 8001f04:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8001f08:	9505      	str	r5, [sp, #20]
 8001f0a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8001f0e:	9504      	str	r5, [sp, #16]
 8001f10:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8001f14:	9503      	str	r5, [sp, #12]
 8001f16:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8001f1a:	9502      	str	r5, [sp, #8]
 8001f1c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8001f20:	9501      	str	r5, [sp, #4]
 8001f22:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8001f26:	9500      	str	r5, [sp, #0]
 8001f28:	f008 f98c 	bl	800a244 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8001f2e:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8001f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001f32:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8001f34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001f36:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8001f38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001f3a:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
 8001f3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001f3e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001f40:	4620      	mov	r0, r4
 8001f42:	b00b      	add	sp, #44	; 0x2c
 8001f44:	bd30      	pop	{r4, r5, pc}
 8001f46:	bf00      	nop
 8001f48:	0800ebd8 	.word	0x0800ebd8

08001f4c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8001f4c:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 8001f4e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8001f50:	4604      	mov	r4, r0
        setX(x);
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8001f54:	4615      	mov	r5, r2
        setX(x);
 8001f56:	4798      	blx	r3
        setY(y);
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8001f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8001f64:	4718      	bx	r3

08001f66 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8001f66:	4770      	bx	lr

08001f68 <_Z23getFont_verdana_10_4bppv>:
{
 8001f68:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8001f6a:	4d16      	ldr	r5, [pc, #88]	; (8001fc4 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8001f6c:	682c      	ldr	r4, [r5, #0]
 8001f6e:	f3bf 8f5b 	dmb	ish
 8001f72:	f014 0401 	ands.w	r4, r4, #1
{
 8001f76:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8001f78:	d120      	bne.n	8001fbc <_Z23getFont_verdana_10_4bppv+0x54>
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	f00b fab2 	bl	800d4e4 <__cxa_guard_acquire>
 8001f80:	b1e0      	cbz	r0, 8001fbc <_Z23getFont_verdana_10_4bppv+0x54>
 8001f82:	233f      	movs	r3, #63	; 0x3f
 8001f84:	9309      	str	r3, [sp, #36]	; 0x24
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <_Z23getFont_verdana_10_4bppv+0x60>)
 8001f88:	9308      	str	r3, [sp, #32]
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_Z23getFont_verdana_10_4bppv+0x64>)
 8001f8c:	4910      	ldr	r1, [pc, #64]	; (8001fd0 <_Z23getFont_verdana_10_4bppv+0x68>)
 8001f8e:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8001f90:	940a      	str	r4, [sp, #40]	; 0x28
 8001f92:	2201      	movs	r2, #1
 8001f94:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001fa6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001faa:	9405      	str	r4, [sp, #20]
 8001fac:	f7ff ff9e 	bl	8001eec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <_Z23getFont_verdana_10_4bppv+0x70>)
 8001fb2:	f00b fae1 	bl	800d578 <atexit>
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	f00b faa0 	bl	800d4fc <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8001fbe:	b00f      	add	sp, #60	; 0x3c
 8001fc0:	bd30      	pop	{r4, r5, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200011f4 	.word	0x200011f4
 8001fc8:	0800f174 	.word	0x0800f174
 8001fcc:	0800f208 	.word	0x0800f208
 8001fd0:	900027ec 	.word	0x900027ec
 8001fd4:	200011f8 	.word	0x200011f8
 8001fd8:	08001f67 	.word	0x08001f67

08001fdc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 30, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8001fdc:	4770      	bx	lr
	...

08001fe0 <_Z23getFont_verdana_20_4bppv>:
{
 8001fe0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 30, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8001fe2:	4d17      	ldr	r5, [pc, #92]	; (8002040 <_Z23getFont_verdana_20_4bppv+0x60>)
 8001fe4:	682c      	ldr	r4, [r5, #0]
 8001fe6:	f3bf 8f5b 	dmb	ish
 8001fea:	f014 0401 	ands.w	r4, r4, #1
{
 8001fee:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 30, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8001ff0:	d122      	bne.n	8002038 <_Z23getFont_verdana_20_4bppv+0x58>
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f00b fa76 	bl	800d4e4 <__cxa_guard_acquire>
 8001ff8:	b1f0      	cbz	r0, 8002038 <_Z23getFont_verdana_20_4bppv+0x58>
 8001ffa:	233f      	movs	r3, #63	; 0x3f
 8001ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002000:	9308      	str	r3, [sp, #32]
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002004:	9307      	str	r3, [sp, #28]
 8002006:	2301      	movs	r3, #1
 8002008:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800200c:	9304      	str	r3, [sp, #16]
 800200e:	2304      	movs	r3, #4
 8002010:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8002014:	2314      	movs	r3, #20
 8002016:	490d      	ldr	r1, [pc, #52]	; (800204c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	221e      	movs	r2, #30
 800201c:	2318      	movs	r3, #24
 800201e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002022:	480b      	ldr	r0, [pc, #44]	; (8002050 <_Z23getFont_verdana_20_4bppv+0x70>)
 8002024:	940a      	str	r4, [sp, #40]	; 0x28
 8002026:	9401      	str	r4, [sp, #4]
 8002028:	f7ff ff60 	bl	8001eec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800202c:	4809      	ldr	r0, [pc, #36]	; (8002054 <_Z23getFont_verdana_20_4bppv+0x74>)
 800202e:	f00b faa3 	bl	800d578 <atexit>
 8002032:	4628      	mov	r0, r5
 8002034:	f00b fa62 	bl	800d4fc <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <_Z23getFont_verdana_20_4bppv+0x70>)
 800203a:	b00f      	add	sp, #60	; 0x3c
 800203c:	bd30      	pop	{r4, r5, pc}
 800203e:	bf00      	nop
 8002040:	20001224 	.word	0x20001224
 8002044:	0800f178 	.word	0x0800f178
 8002048:	0800f20c 	.word	0x0800f20c
 800204c:	900027fc 	.word	0x900027fc
 8002050:	20001228 	.word	0x20001228
 8002054:	08001fdd 	.word	0x08001fdd

08002058 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 30, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002058:	4770      	bx	lr
	...

0800205c <_Z23getFont_verdana_40_4bppv>:
{
 800205c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 30, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800205e:	4d17      	ldr	r5, [pc, #92]	; (80020bc <_Z23getFont_verdana_40_4bppv+0x60>)
 8002060:	682c      	ldr	r4, [r5, #0]
 8002062:	f3bf 8f5b 	dmb	ish
 8002066:	f014 0401 	ands.w	r4, r4, #1
{
 800206a:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 30, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800206c:	d122      	bne.n	80020b4 <_Z23getFont_verdana_40_4bppv+0x58>
 800206e:	4628      	mov	r0, r5
 8002070:	f00b fa38 	bl	800d4e4 <__cxa_guard_acquire>
 8002074:	b1f0      	cbz	r0, 80020b4 <_Z23getFont_verdana_40_4bppv+0x58>
 8002076:	233f      	movs	r3, #63	; 0x3f
 8002078:	9309      	str	r3, [sp, #36]	; 0x24
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <_Z23getFont_verdana_40_4bppv+0x64>)
 800207c:	9308      	str	r3, [sp, #32]
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002080:	9307      	str	r3, [sp, #28]
 8002082:	2301      	movs	r3, #1
 8002084:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8002088:	9304      	str	r3, [sp, #16]
 800208a:	2304      	movs	r3, #4
 800208c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8002090:	2328      	movs	r3, #40	; 0x28
 8002092:	490d      	ldr	r1, [pc, #52]	; (80020c8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	221e      	movs	r2, #30
 8002098:	2330      	movs	r3, #48	; 0x30
 800209a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800209e:	480b      	ldr	r0, [pc, #44]	; (80020cc <_Z23getFont_verdana_40_4bppv+0x70>)
 80020a0:	940a      	str	r4, [sp, #40]	; 0x28
 80020a2:	9401      	str	r4, [sp, #4]
 80020a4:	f7ff ff22 	bl	8001eec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80020a8:	4809      	ldr	r0, [pc, #36]	; (80020d0 <_Z23getFont_verdana_40_4bppv+0x74>)
 80020aa:	f00b fa65 	bl	800d578 <atexit>
 80020ae:	4628      	mov	r0, r5
 80020b0:	f00b fa24 	bl	800d4fc <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80020b4:	4805      	ldr	r0, [pc, #20]	; (80020cc <_Z23getFont_verdana_40_4bppv+0x70>)
 80020b6:	b00f      	add	sp, #60	; 0x3c
 80020b8:	bd30      	pop	{r4, r5, pc}
 80020ba:	bf00      	nop
 80020bc:	20001254 	.word	0x20001254
 80020c0:	0800f1ac 	.word	0x0800f1ac
 80020c4:	0800f210 	.word	0x0800f210
 80020c8:	900029a0 	.word	0x900029a0
 80020cc:	20001258 	.word	0x20001258
 80020d0:	08002059 	.word	0x08002059

080020d4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80020d4:	2000      	movs	r0, #0
 80020d6:	4770      	bx	lr

080020d8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80020d8:	2000      	movs	r0, #0
 80020da:	4770      	bx	lr

080020dc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80020dc:	b40e      	push	{r1, r2, r3}
 80020de:	b503      	push	{r0, r1, lr}
 80020e0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80020e2:	2100      	movs	r1, #0
{
 80020e4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80020e8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80020ea:	f007 ff81 	bl	8009ff0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80020ee:	b002      	add	sp, #8
 80020f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80020f4:	b003      	add	sp, #12
 80020f6:	4770      	bx	lr

080020f8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80020f8:	b40c      	push	{r2, r3}
 80020fa:	b507      	push	{r0, r1, r2, lr}
 80020fc:	ab04      	add	r3, sp, #16
 80020fe:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002102:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002104:	f007 ff74 	bl	8009ff0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002108:	b003      	add	sp, #12
 800210a:	f85d eb04 	ldr.w	lr, [sp], #4
 800210e:	b002      	add	sp, #8
 8002110:	4770      	bx	lr
	...

08002114 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8002114:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002116:	b510      	push	{r4, lr}
 8002118:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800211a:	b373      	cbz	r3, 800217a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800211c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800211e:	b92b      	cbnz	r3, 800212c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 8002124:	21c5      	movs	r1, #197	; 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002126:	4819      	ldr	r0, [pc, #100]	; (800218c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002128:	f00b fa08 	bl	800d53c <__assert_func>
            return buffer[pos];
 800212c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800212e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002132:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002134:	b30b      	cbz	r3, 800217a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8002136:	f008 fdf8 	bl	800ad2a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800213a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800213c:	2b01      	cmp	r3, #1
 800213e:	d803      	bhi.n	8002148 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8002144:	21cb      	movs	r1, #203	; 0xcb
 8002146:	e7ee      	b.n	8002126 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002148:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800214a:	1c53      	adds	r3, r2, #1
 800214c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800214e:	2b09      	cmp	r3, #9
 8002150:	4619      	mov	r1, r3
 8002152:	bf88      	it	hi
 8002154:	f1a3 010a 	subhi.w	r1, r3, #10
 8002158:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800215c:	f640 103f 	movw	r0, #2367	; 0x93f
 8002160:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8002162:	4281      	cmp	r1, r0
 8002164:	d109      	bne.n	800217a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8002166:	2b0a      	cmp	r3, #10
 8002168:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800216c:	bf28      	it	cs
 800216e:	2300      	movcs	r3, #0

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002170:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8002174:	8c50      	ldrh	r0, [r2, #34]	; 0x22
            buffer[index < size ? index : 0] = newChar;
 8002176:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002178:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800217a:	4620      	mov	r0, r4
}
 800217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002180:	f008 bcd6 	b.w	800ab30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8002184:	0800ec30 	.word	0x0800ec30
 8002188:	0800ec39 	.word	0x0800ec39
 800218c:	0800ece4 	.word	0x0800ece4
 8002190:	0800ed2e 	.word	0x0800ed2e
 8002194:	0800ed3c 	.word	0x0800ed3c

08002198 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002198:	f008 bc91 	b.w	800aabe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800219c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800219c:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800219e:	f7ff ff1f 	bl	8001fe0 <_Z23getFont_verdana_20_4bppv>
};
 80021a2:	4c04      	ldr	r4, [pc, #16]	; (80021b4 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 80021a4:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80021a6:	f7ff ff59 	bl	800205c <_Z23getFont_verdana_40_4bppv>
};
 80021aa:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80021ac:	f7ff fedc 	bl	8001f68 <_Z23getFont_verdana_10_4bppv>
};
 80021b0:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80021b2:	bd10      	pop	{r4, pc}
 80021b4:	20001284 	.word	0x20001284

080021b8 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80021b8:	4770      	bx	lr

080021ba <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80021ba:	2000      	movs	r0, #0
 80021bc:	4770      	bx	lr

080021be <ft6x06_ReadID>:
{
 80021be:	b510      	push	{r4, lr}
 80021c0:	4604      	mov	r4, r0
  TS_IO_Init();
 80021c2:	f000 fb6b 	bl	800289c <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80021c6:	21a8      	movs	r1, #168	; 0xa8
 80021c8:	b2e0      	uxtb	r0, r4
 80021ca:	f000 fb83 	bl	80028d4 <TS_IO_Read>
}
 80021ce:	b280      	uxth	r0, r0
 80021d0:	bd10      	pop	{r4, pc}
	...

080021d4 <ft6x06_TS_DetectTouch>:
{
 80021d4:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80021d6:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80021d8:	2102      	movs	r1, #2
 80021da:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80021dc:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80021e0:	f000 fb78 	bl	80028d4 <TS_IO_Read>
 80021e4:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 80021e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80021f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021f8:	2b02      	cmp	r3, #2
    nbTouch = 0;
 80021fa:	bf88      	it	hi
 80021fc:	f88d 4007 	strbhi.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <ft6x06_TS_DetectTouch+0x40>)
 8002202:	f89d 2007 	ldrb.w	r2, [sp, #7]
  return(nbTouch);
 8002206:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800220a:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 800220c:	2200      	movs	r2, #0
 800220e:	709a      	strb	r2, [r3, #2]
}
 8002210:	b002      	add	sp, #8
 8002212:	bd10      	pop	{r4, pc}
 8002214:	20001292 	.word	0x20001292

08002218 <ft6x06_TS_GetXY>:
{
 8002218:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800221a:	4c15      	ldr	r4, [pc, #84]	; (8002270 <ft6x06_TS_GetXY+0x58>)
{
 800221c:	4615      	mov	r5, r2
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800221e:	78a3      	ldrb	r3, [r4, #2]
 8002220:	7862      	ldrb	r2, [r4, #1]
 8002222:	429a      	cmp	r2, r3
{
 8002224:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002226:	d91f      	bls.n	8002268 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8002228:	b303      	cbz	r3, 800226c <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 800222a:	2b01      	cmp	r3, #1
 800222c:	bf14      	ite	ne
 800222e:	2100      	movne	r1, #0
 8002230:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002232:	2304      	movs	r3, #4
 8002234:	eb0d 0203 	add.w	r2, sp, r3
 8002238:	b2c0      	uxtb	r0, r0
 800223a:	f000 fb69 	bl	8002910 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800223e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002242:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800224c:	4313      	orrs	r3, r2
 800224e:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002250:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002254:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800225e:	4313      	orrs	r3, r2
 8002260:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 8002262:	78a3      	ldrb	r3, [r4, #2]
 8002264:	3301      	adds	r3, #1
 8002266:	70a3      	strb	r3, [r4, #2]
}
 8002268:	b002      	add	sp, #8
 800226a:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 800226c:	2103      	movs	r1, #3
 800226e:	e7e0      	b.n	8002232 <ft6x06_TS_GetXY+0x1a>
 8002270:	20001292 	.word	0x20001292

08002274 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002274:	2201      	movs	r2, #1
 8002276:	21a4      	movs	r1, #164	; 0xa4
 8002278:	b2c0      	uxtb	r0, r0
 800227a:	f000 bb11 	b.w	80028a0 <TS_IO_Write>

0800227e <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800227e:	2200      	movs	r2, #0
 8002280:	21a4      	movs	r1, #164	; 0xa4
 8002282:	b2c0      	uxtb	r0, r0
 8002284:	f000 bb0c 	b.w	80028a0 <TS_IO_Write>

08002288 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8002288:	f7ff bff9 	b.w	800227e <ft6x06_TS_DisableIT>

0800228c <ft6x06_TS_ClearIT>:
 800228c:	4770      	bx	lr
	...

08002290 <ft6x06_Init>:
{  
 8002290:	b410      	push	{r4}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <ft6x06_Init+0x28>)
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	4290      	cmp	r0, r2
 8002298:	d00a      	beq.n	80022b0 <ft6x06_Init+0x20>
 800229a:	7859      	ldrb	r1, [r3, #1]
 800229c:	4288      	cmp	r0, r1
 800229e:	d007      	beq.n	80022b0 <ft6x06_Init+0x20>
 80022a0:	b10a      	cbz	r2, 80022a6 <ft6x06_Init+0x16>
 80022a2:	b929      	cbnz	r1, 80022b0 <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80022a4:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 80022a6:	5498      	strb	r0, [r3, r2]
}
 80022a8:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 80022ac:	f000 baf6 	b.w	800289c <TS_IO_Init>
}
 80022b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20001290 	.word	0x20001290

080022bc <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80022bc:	b538      	push	{r3, r4, r5, lr}
 80022be:	4604      	mov	r4, r0
 80022c0:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80022c2:	2000      	movs	r0, #0
 80022c4:	49c9      	ldr	r1, [pc, #804]	; (80025ec <OTM8009A_Init+0x330>)
 80022c6:	f7fe fbf9 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80022ca:	49c9      	ldr	r1, [pc, #804]	; (80025f0 <OTM8009A_Init+0x334>)
 80022cc:	2003      	movs	r0, #3
 80022ce:	f7fe fbf5 	bl	8000abc <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80022d2:	49c8      	ldr	r1, [pc, #800]	; (80025f4 <OTM8009A_Init+0x338>)
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7fe fbf1 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80022da:	49c7      	ldr	r1, [pc, #796]	; (80025f8 <OTM8009A_Init+0x33c>)
 80022dc:	2002      	movs	r0, #2
 80022de:	f7fe fbed 	bl	8000abc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80022e2:	49c4      	ldr	r1, [pc, #784]	; (80025f4 <OTM8009A_Init+0x338>)
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7fe fbe9 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80022ea:	49c4      	ldr	r1, [pc, #784]	; (80025fc <OTM8009A_Init+0x340>)
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7fe fbe5 	bl	8000abc <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80022f2:	200a      	movs	r0, #10
 80022f4:	f000 fb24 	bl	8002940 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80022f8:	49c1      	ldr	r1, [pc, #772]	; (8002600 <OTM8009A_Init+0x344>)
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7fe fbde 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002300:	49c0      	ldr	r1, [pc, #768]	; (8002604 <OTM8009A_Init+0x348>)
 8002302:	2000      	movs	r0, #0
 8002304:	f7fe fbda 	bl	8000abc <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002308:	200a      	movs	r0, #10
 800230a:	f000 fb19 	bl	8002940 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800230e:	49be      	ldr	r1, [pc, #760]	; (8002608 <OTM8009A_Init+0x34c>)
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fbd3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8002316:	49bd      	ldr	r1, [pc, #756]	; (800260c <OTM8009A_Init+0x350>)
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fbcf 	bl	8000abc <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800231e:	49bc      	ldr	r1, [pc, #752]	; (8002610 <OTM8009A_Init+0x354>)
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fbcb 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002326:	49bb      	ldr	r1, [pc, #748]	; (8002614 <OTM8009A_Init+0x358>)
 8002328:	2000      	movs	r0, #0
 800232a:	f7fe fbc7 	bl	8000abc <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800232e:	49ba      	ldr	r1, [pc, #744]	; (8002618 <OTM8009A_Init+0x35c>)
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe fbc3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8002336:	49b9      	ldr	r1, [pc, #740]	; (800261c <OTM8009A_Init+0x360>)
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fbbf 	bl	8000abc <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800233e:	49ab      	ldr	r1, [pc, #684]	; (80025ec <OTM8009A_Init+0x330>)
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe fbbb 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8002346:	49b6      	ldr	r1, [pc, #728]	; (8002620 <OTM8009A_Init+0x364>)
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fbb7 	bl	8000abc <DSI_IO_WriteCmd>
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  //DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
  //DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800234e:	49b5      	ldr	r1, [pc, #724]	; (8002624 <OTM8009A_Init+0x368>)
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fbb3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8002356:	49b4      	ldr	r1, [pc, #720]	; (8002628 <OTM8009A_Init+0x36c>)
 8002358:	2000      	movs	r0, #0
 800235a:	f7fe fbaf 	bl	8000abc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800235e:	49b3      	ldr	r1, [pc, #716]	; (800262c <OTM8009A_Init+0x370>)
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fbab 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8002366:	49b2      	ldr	r1, [pc, #712]	; (8002630 <OTM8009A_Init+0x374>)
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe fba7 	bl	8000abc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800236e:	49b1      	ldr	r1, [pc, #708]	; (8002634 <OTM8009A_Init+0x378>)
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fba3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002376:	49a7      	ldr	r1, [pc, #668]	; (8002614 <OTM8009A_Init+0x358>)
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe fb9f 	bl	8000abc <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800237e:	499b      	ldr	r1, [pc, #620]	; (80025ec <OTM8009A_Init+0x330>)
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fb9b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8002386:	49ac      	ldr	r1, [pc, #688]	; (8002638 <OTM8009A_Init+0x37c>)
 8002388:	2002      	movs	r0, #2
 800238a:	f7fe fb97 	bl	8000abc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800238e:	49ab      	ldr	r1, [pc, #684]	; (800263c <OTM8009A_Init+0x380>)
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe fb93 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8002396:	49aa      	ldr	r1, [pc, #680]	; (8002640 <OTM8009A_Init+0x384>)
 8002398:	2000      	movs	r0, #0
 800239a:	f7fe fb8f 	bl	8000abc <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800239e:	49a9      	ldr	r1, [pc, #676]	; (8002644 <OTM8009A_Init+0x388>)
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe fb8b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80023a6:	49a8      	ldr	r1, [pc, #672]	; (8002648 <OTM8009A_Init+0x38c>)
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fb87 	bl	8000abc <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80023ae:	49a7      	ldr	r1, [pc, #668]	; (800264c <OTM8009A_Init+0x390>)
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe fb83 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80023b6:	49a6      	ldr	r1, [pc, #664]	; (8002650 <OTM8009A_Init+0x394>)
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7fe fb7f 	bl	8000abc <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80023be:	49a5      	ldr	r1, [pc, #660]	; (8002654 <OTM8009A_Init+0x398>)
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fb7b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80023c6:	49a4      	ldr	r1, [pc, #656]	; (8002658 <OTM8009A_Init+0x39c>)
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fb77 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80023ce:	4995      	ldr	r1, [pc, #596]	; (8002624 <OTM8009A_Init+0x368>)
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7fe fb73 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80023d6:	49a1      	ldr	r1, [pc, #644]	; (800265c <OTM8009A_Init+0x3a0>)
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe fb6f 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80023de:	49a0      	ldr	r1, [pc, #640]	; (8002660 <OTM8009A_Init+0x3a4>)
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fb6b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80023e6:	499f      	ldr	r1, [pc, #636]	; (8002664 <OTM8009A_Init+0x3a8>)
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7fe fb67 	bl	8000abc <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80023ee:	4981      	ldr	r1, [pc, #516]	; (80025f4 <OTM8009A_Init+0x338>)
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe fb63 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80023f6:	499c      	ldr	r1, [pc, #624]	; (8002668 <OTM8009A_Init+0x3ac>)
 80023f8:	2006      	movs	r0, #6
 80023fa:	f7fe fb5f 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80023fe:	499b      	ldr	r1, [pc, #620]	; (800266c <OTM8009A_Init+0x3b0>)
 8002400:	2000      	movs	r0, #0
 8002402:	f7fe fb5b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8002406:	499a      	ldr	r1, [pc, #616]	; (8002670 <OTM8009A_Init+0x3b4>)
 8002408:	200e      	movs	r0, #14
 800240a:	f7fe fb57 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800240e:	4999      	ldr	r1, [pc, #612]	; (8002674 <OTM8009A_Init+0x3b8>)
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe fb53 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8002416:	4998      	ldr	r1, [pc, #608]	; (8002678 <OTM8009A_Init+0x3bc>)
 8002418:	200e      	movs	r0, #14
 800241a:	f7fe fb4f 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800241e:	4997      	ldr	r1, [pc, #604]	; (800267c <OTM8009A_Init+0x3c0>)
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fb4b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8002426:	4996      	ldr	r1, [pc, #600]	; (8002680 <OTM8009A_Init+0x3c4>)
 8002428:	200a      	movs	r0, #10
 800242a:	f7fe fb47 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800242e:	4995      	ldr	r1, [pc, #596]	; (8002684 <OTM8009A_Init+0x3c8>)
 8002430:	2000      	movs	r0, #0
 8002432:	f7fe fb43 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8002436:	4994      	ldr	r1, [pc, #592]	; (8002688 <OTM8009A_Init+0x3cc>)
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fb3f 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800243e:	496d      	ldr	r1, [pc, #436]	; (80025f4 <OTM8009A_Init+0x338>)
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fb3b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8002446:	4991      	ldr	r1, [pc, #580]	; (800268c <OTM8009A_Init+0x3d0>)
 8002448:	200a      	movs	r0, #10
 800244a:	f7fe fb37 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800244e:	4990      	ldr	r1, [pc, #576]	; (8002690 <OTM8009A_Init+0x3d4>)
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fb33 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8002456:	498f      	ldr	r1, [pc, #572]	; (8002694 <OTM8009A_Init+0x3d8>)
 8002458:	200f      	movs	r0, #15
 800245a:	f7fe fb2f 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800245e:	4983      	ldr	r1, [pc, #524]	; (800266c <OTM8009A_Init+0x3b0>)
 8002460:	2000      	movs	r0, #0
 8002462:	f7fe fb2b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8002466:	498c      	ldr	r1, [pc, #560]	; (8002698 <OTM8009A_Init+0x3dc>)
 8002468:	200f      	movs	r0, #15
 800246a:	f7fe fb27 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800246e:	4981      	ldr	r1, [pc, #516]	; (8002674 <OTM8009A_Init+0x3b8>)
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe fb23 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8002476:	4989      	ldr	r1, [pc, #548]	; (800269c <OTM8009A_Init+0x3e0>)
 8002478:	200a      	movs	r0, #10
 800247a:	f7fe fb1f 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800247e:	497f      	ldr	r1, [pc, #508]	; (800267c <OTM8009A_Init+0x3c0>)
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe fb1b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8002486:	4986      	ldr	r1, [pc, #536]	; (80026a0 <OTM8009A_Init+0x3e4>)
 8002488:	200f      	movs	r0, #15
 800248a:	f7fe fb17 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800248e:	497d      	ldr	r1, [pc, #500]	; (8002684 <OTM8009A_Init+0x3c8>)
 8002490:	2000      	movs	r0, #0
 8002492:	f7fe fb13 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8002496:	4983      	ldr	r1, [pc, #524]	; (80026a4 <OTM8009A_Init+0x3e8>)
 8002498:	200f      	movs	r0, #15
 800249a:	f7fe fb0f 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800249e:	4982      	ldr	r1, [pc, #520]	; (80026a8 <OTM8009A_Init+0x3ec>)
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe fb0b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80024a6:	4981      	ldr	r1, [pc, #516]	; (80026ac <OTM8009A_Init+0x3f0>)
 80024a8:	200a      	movs	r0, #10
 80024aa:	f7fe fb07 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80024ae:	4980      	ldr	r1, [pc, #512]	; (80026b0 <OTM8009A_Init+0x3f4>)
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fb03 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80024b6:	497f      	ldr	r1, [pc, #508]	; (80026b4 <OTM8009A_Init+0x3f8>)
 80024b8:	200a      	movs	r0, #10
 80024ba:	f7fe faff 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80024be:	494d      	ldr	r1, [pc, #308]	; (80025f4 <OTM8009A_Init+0x338>)
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7fe fafb 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80024c6:	497c      	ldr	r1, [pc, #496]	; (80026b8 <OTM8009A_Init+0x3fc>)
 80024c8:	200a      	movs	r0, #10
 80024ca:	f7fe faf7 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80024ce:	4970      	ldr	r1, [pc, #448]	; (8002690 <OTM8009A_Init+0x3d4>)
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe faf3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80024d6:	4979      	ldr	r1, [pc, #484]	; (80026bc <OTM8009A_Init+0x400>)
 80024d8:	200f      	movs	r0, #15
 80024da:	f7fe faef 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80024de:	4963      	ldr	r1, [pc, #396]	; (800266c <OTM8009A_Init+0x3b0>)
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7fe faeb 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80024e6:	4976      	ldr	r1, [pc, #472]	; (80026c0 <OTM8009A_Init+0x404>)
 80024e8:	200f      	movs	r0, #15
 80024ea:	f7fe fae7 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80024ee:	4961      	ldr	r1, [pc, #388]	; (8002674 <OTM8009A_Init+0x3b8>)
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe fae3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80024f6:	4973      	ldr	r1, [pc, #460]	; (80026c4 <OTM8009A_Init+0x408>)
 80024f8:	200a      	movs	r0, #10
 80024fa:	f7fe fadf 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80024fe:	495f      	ldr	r1, [pc, #380]	; (800267c <OTM8009A_Init+0x3c0>)
 8002500:	2000      	movs	r0, #0
 8002502:	f7fe fadb 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8002506:	4970      	ldr	r1, [pc, #448]	; (80026c8 <OTM8009A_Init+0x40c>)
 8002508:	200f      	movs	r0, #15
 800250a:	f7fe fad7 	bl	8000abc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800250e:	495d      	ldr	r1, [pc, #372]	; (8002684 <OTM8009A_Init+0x3c8>)
 8002510:	2000      	movs	r0, #0
 8002512:	f7fe fad3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8002516:	496d      	ldr	r1, [pc, #436]	; (80026cc <OTM8009A_Init+0x410>)
 8002518:	200f      	movs	r0, #15
 800251a:	f7fe facf 	bl	8000abc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800251e:	494d      	ldr	r1, [pc, #308]	; (8002654 <OTM8009A_Init+0x398>)
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe facb 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8002526:	496a      	ldr	r1, [pc, #424]	; (80026d0 <OTM8009A_Init+0x414>)
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe fac7 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800252e:	4969      	ldr	r1, [pc, #420]	; (80026d4 <OTM8009A_Init+0x418>)
 8002530:	2000      	movs	r0, #0
 8002532:	f7fe fac3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8002536:	4968      	ldr	r1, [pc, #416]	; (80026d8 <OTM8009A_Init+0x41c>)
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe fabf 	bl	8000abc <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800253e:	4967      	ldr	r1, [pc, #412]	; (80026dc <OTM8009A_Init+0x420>)
 8002540:	2000      	movs	r0, #0
 8002542:	f7fe fabb 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8002546:	4966      	ldr	r1, [pc, #408]	; (80026e0 <OTM8009A_Init+0x424>)
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe fab7 	bl	8000abc <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800254e:	4927      	ldr	r1, [pc, #156]	; (80025ec <OTM8009A_Init+0x330>)
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fab3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8002556:	4963      	ldr	r1, [pc, #396]	; (80026e4 <OTM8009A_Init+0x428>)
 8002558:	2003      	movs	r0, #3
 800255a:	f7fe faaf 	bl	8000abc <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800255e:	4923      	ldr	r1, [pc, #140]	; (80025ec <OTM8009A_Init+0x330>)
 8002560:	2000      	movs	r0, #0
 8002562:	f7fe faab 	bl	8000abc <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002566:	4921      	ldr	r1, [pc, #132]	; (80025ec <OTM8009A_Init+0x330>)
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe faa7 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800256e:	495e      	ldr	r1, [pc, #376]	; (80026e8 <OTM8009A_Init+0x42c>)
 8002570:	2010      	movs	r0, #16
 8002572:	f7fe faa3 	bl	8000abc <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002576:	491d      	ldr	r1, [pc, #116]	; (80025ec <OTM8009A_Init+0x330>)
 8002578:	2000      	movs	r0, #0
 800257a:	f7fe fa9f 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800257e:	495b      	ldr	r1, [pc, #364]	; (80026ec <OTM8009A_Init+0x430>)
 8002580:	2010      	movs	r0, #16
 8002582:	f7fe fa9b 	bl	8000abc <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8002586:	2000      	movs	r0, #0
 8002588:	4959      	ldr	r1, [pc, #356]	; (80026f0 <OTM8009A_Init+0x434>)
 800258a:	f7fe fa97 	bl	8000abc <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800258e:	2078      	movs	r0, #120	; 0x78
 8002590:	f000 f9d6 	bl	8002940 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8002594:	2c00      	cmp	r4, #0
 8002596:	f000 80c9 	beq.w	800272c <OTM8009A_Init+0x470>
 800259a:	2c02      	cmp	r4, #2
 800259c:	d103      	bne.n	80025a6 <OTM8009A_Init+0x2ea>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800259e:	4955      	ldr	r1, [pc, #340]	; (80026f4 <OTM8009A_Init+0x438>)
 80025a0:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80025a2:	f7fe fa8b 	bl	8000abc <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80025a6:	2d01      	cmp	r5, #1
 80025a8:	d10b      	bne.n	80025c2 <OTM8009A_Init+0x306>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80025aa:	4953      	ldr	r1, [pc, #332]	; (80026f8 <OTM8009A_Init+0x43c>)
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe fa85 	bl	8000abc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80025b2:	4952      	ldr	r1, [pc, #328]	; (80026fc <OTM8009A_Init+0x440>)
 80025b4:	2004      	movs	r0, #4
 80025b6:	f7fe fa81 	bl	8000abc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80025ba:	4951      	ldr	r1, [pc, #324]	; (8002700 <OTM8009A_Init+0x444>)
 80025bc:	2004      	movs	r0, #4
 80025be:	f7fe fa7d 	bl	8000abc <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80025c2:	4950      	ldr	r1, [pc, #320]	; (8002704 <OTM8009A_Init+0x448>)
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe fa79 	bl	8000abc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80025ca:	494f      	ldr	r1, [pc, #316]	; (8002708 <OTM8009A_Init+0x44c>)
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe fa75 	bl	8000abc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80025d2:	494e      	ldr	r1, [pc, #312]	; (800270c <OTM8009A_Init+0x450>)
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe fa71 	bl	8000abc <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80025da:	494d      	ldr	r1, [pc, #308]	; (8002710 <OTM8009A_Init+0x454>)
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe fa6d 	bl	8000abc <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80025e2:	494c      	ldr	r1, [pc, #304]	; (8002714 <OTM8009A_Init+0x458>)
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe fa69 	bl	8000abc <DSI_IO_WriteCmd>
 80025ea:	e095      	b.n	8002718 <OTM8009A_Init+0x45c>
 80025ec:	0800ee0e 	.word	0x0800ee0e
 80025f0:	0800ee72 	.word	0x0800ee72
 80025f4:	0800ee22 	.word	0x0800ee22
 80025f8:	0800eef8 	.word	0x0800eef8
 80025fc:	0800ee38 	.word	0x0800ee38
 8002600:	0800ee4e 	.word	0x0800ee4e
 8002604:	0800ee64 	.word	0x0800ee64
 8002608:	0800ee6a 	.word	0x0800ee6a
 800260c:	0800ee6c 	.word	0x0800ee6c
 8002610:	0800ee6e 	.word	0x0800ee6e
 8002614:	0800ee70 	.word	0x0800ee70
 8002618:	0800ee10 	.word	0x0800ee10
 800261c:	0800ee12 	.word	0x0800ee12
 8002620:	0800ee14 	.word	0x0800ee14
 8002624:	0800ee18 	.word	0x0800ee18
 8002628:	0800ee1a 	.word	0x0800ee1a
 800262c:	0800ee1c 	.word	0x0800ee1c
 8002630:	0800ee1e 	.word	0x0800ee1e
 8002634:	0800ee20 	.word	0x0800ee20
 8002638:	0800ef76 	.word	0x0800ef76
 800263c:	0800ee24 	.word	0x0800ee24
 8002640:	0800ee26 	.word	0x0800ee26
 8002644:	0800ee28 	.word	0x0800ee28
 8002648:	0800ee2a 	.word	0x0800ee2a
 800264c:	0800ee2c 	.word	0x0800ee2c
 8002650:	0800ee2e 	.word	0x0800ee2e
 8002654:	0800ee16 	.word	0x0800ee16
 8002658:	0800ee30 	.word	0x0800ee30
 800265c:	0800ee32 	.word	0x0800ee32
 8002660:	0800ee34 	.word	0x0800ee34
 8002664:	0800ef79 	.word	0x0800ef79
 8002668:	0800ef7c 	.word	0x0800ef7c
 800266c:	0800ee36 	.word	0x0800ee36
 8002670:	0800ef83 	.word	0x0800ef83
 8002674:	0800ee3a 	.word	0x0800ee3a
 8002678:	0800ef92 	.word	0x0800ef92
 800267c:	0800ee3c 	.word	0x0800ee3c
 8002680:	0800ee76 	.word	0x0800ee76
 8002684:	0800ee3e 	.word	0x0800ee3e
 8002688:	0800ee5c 	.word	0x0800ee5c
 800268c:	0800ee81 	.word	0x0800ee81
 8002690:	0800ee40 	.word	0x0800ee40
 8002694:	0800ee8c 	.word	0x0800ee8c
 8002698:	0800ee9c 	.word	0x0800ee9c
 800269c:	0800eeac 	.word	0x0800eeac
 80026a0:	0800eeb7 	.word	0x0800eeb7
 80026a4:	0800eec7 	.word	0x0800eec7
 80026a8:	0800ee42 	.word	0x0800ee42
 80026ac:	0800eed7 	.word	0x0800eed7
 80026b0:	0800ee44 	.word	0x0800ee44
 80026b4:	0800eee2 	.word	0x0800eee2
 80026b8:	0800eeed 	.word	0x0800eeed
 80026bc:	0800eefb 	.word	0x0800eefb
 80026c0:	0800ef0b 	.word	0x0800ef0b
 80026c4:	0800ef1b 	.word	0x0800ef1b
 80026c8:	0800ef26 	.word	0x0800ef26
 80026cc:	0800ef36 	.word	0x0800ef36
 80026d0:	0800ee5e 	.word	0x0800ee5e
 80026d4:	0800ee60 	.word	0x0800ee60
 80026d8:	0800ee62 	.word	0x0800ee62
 80026dc:	0800ee66 	.word	0x0800ee66
 80026e0:	0800ee68 	.word	0x0800ee68
 80026e4:	0800ef46 	.word	0x0800ef46
 80026e8:	0800ef54 	.word	0x0800ef54
 80026ec:	0800ef65 	.word	0x0800ef65
 80026f0:	0800ee46 	.word	0x0800ee46
 80026f4:	0800ee48 	.word	0x0800ee48
 80026f8:	0800ee4c 	.word	0x0800ee4c
 80026fc:	0800ef4a 	.word	0x0800ef4a
 8002700:	0800ef4f 	.word	0x0800ef4f
 8002704:	0800ee50 	.word	0x0800ee50
 8002708:	0800ee52 	.word	0x0800ee52
 800270c:	0800ee54 	.word	0x0800ee54
 8002710:	0800ee56 	.word	0x0800ee56
 8002714:	0800ee58 	.word	0x0800ee58

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002718:	4906      	ldr	r1, [pc, #24]	; (8002734 <OTM8009A_Init+0x478>)
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe f9ce 	bl	8000abc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002720:	4905      	ldr	r1, [pc, #20]	; (8002738 <OTM8009A_Init+0x47c>)
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe f9ca 	bl	8000abc <DSI_IO_WriteCmd>

  return 0;
}
 8002728:	2000      	movs	r0, #0
 800272a:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <OTM8009A_Init+0x480>)
 800272e:	4620      	mov	r0, r4
 8002730:	e737      	b.n	80025a2 <OTM8009A_Init+0x2e6>
 8002732:	bf00      	nop
 8002734:	0800ee0e 	.word	0x0800ee0e
 8002738:	0800ee5a 	.word	0x0800ee5a
 800273c:	0800ee4a 	.word	0x0800ee4a

08002740 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 8002740:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8002742:	4d2f      	ldr	r5, [pc, #188]	; (8002800 <I2C1_Init+0xc0>)
{
 8002744:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8002746:	4628      	mov	r0, r5
 8002748:	f002 f95a 	bl	8004a00 <HAL_I2C_GetState>
 800274c:	4604      	mov	r4, r0
 800274e:	2800      	cmp	r0, #0
 8002750:	d154      	bne.n	80027fc <I2C1_Init+0xbc>
  {
    heval_I2c1.Instance = I2C1;
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 8002752:	4a2c      	ldr	r2, [pc, #176]	; (8002804 <I2C1_Init+0xc4>)
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <I2C1_Init+0xc8>)
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 8002756:	4e2d      	ldr	r6, [pc, #180]	; (800280c <I2C1_Init+0xcc>)
 8002758:	9001      	str	r0, [sp, #4]
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 800275a:	e9c5 2300 	strd	r2, r3, [r5]
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
    heval_I2c1.Init.OwnAddress1     = 0;
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 800275e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    heval_I2c1.Init.OwnAddress1     = 0;
 8002762:	e9c5 0002 	strd	r0, r0, [r5, #8]
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002766:	e9c5 3004 	strd	r3, r0, [r5, #16]
    heval_I2c1.Init.OwnAddress2     = 0;
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800276a:	e9c5 0006 	strd	r0, r0, [r5, #24]
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800276e:	6228      	str	r0, [r5, #32]
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 8002770:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	6333      	str	r3, [r6, #48]	; 0x30
 8002778:	6b33      	ldr	r3, [r6, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 800277a:	9005      	str	r0, [sp, #20]
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002788:	2312      	movs	r3, #18
 800278a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 800278e:	2002      	movs	r0, #2
 8002790:	2304      	movs	r3, #4
 8002792:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002796:	a903      	add	r1, sp, #12
 8002798:	481d      	ldr	r0, [pc, #116]	; (8002810 <I2C1_Init+0xd0>)
 800279a:	f001 fb61 	bl	8003e60 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 800279e:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027a2:	a903      	add	r1, sp, #12
 80027a4:	481a      	ldr	r0, [pc, #104]	; (8002810 <I2C1_Init+0xd0>)
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 80027a6:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80027a8:	f001 fb5a 	bl	8003e60 <HAL_GPIO_Init>
  DISCO_I2C1_CLK_ENABLE();
 80027ac:	9402      	str	r4, [sp, #8]
 80027ae:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80027b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027b4:	6433      	str	r3, [r6, #64]	; 0x40
 80027b6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	9b02      	ldr	r3, [sp, #8]
  DISCO_I2C1_FORCE_RESET();
 80027c0:	6a33      	ldr	r3, [r6, #32]
 80027c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c6:	6233      	str	r3, [r6, #32]
  DISCO_I2C1_RELEASE_RESET();
 80027c8:	6a33      	ldr	r3, [r6, #32]
 80027ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027ce:	6233      	str	r3, [r6, #32]
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 80027d0:	4622      	mov	r2, r4
 80027d2:	2105      	movs	r1, #5
 80027d4:	201f      	movs	r0, #31
 80027d6:	f000 fd13 	bl	8003200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 80027da:	201f      	movs	r0, #31
 80027dc:	f000 fd42 	bl	8003264 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 80027e0:	4622      	mov	r2, r4
 80027e2:	2105      	movs	r1, #5
 80027e4:	2020      	movs	r0, #32
 80027e6:	f000 fd0b 	bl	8003200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 80027ea:	2020      	movs	r0, #32
 80027ec:	f000 fd3a 	bl	8003264 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2C1_MspInit();
    HAL_I2C_Init(&heval_I2c1);
 80027f0:	4628      	mov	r0, r5
  }
}
 80027f2:	b008      	add	sp, #32
 80027f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(&heval_I2c1);
 80027f8:	f001 bea8 	b.w	800454c <HAL_I2C_Init>
}
 80027fc:	b008      	add	sp, #32
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	20001298 	.word	0x20001298
 8002804:	40005400 	.word	0x40005400
 8002808:	00061a80 	.word	0x00061a80
 800280c:	40023800 	.word	0x40023800
 8002810:	40020400 	.word	0x40020400

08002814 <BSP_PB_Init>:
{
 8002814:	b510      	push	{r4, lr}
 8002816:	b086      	sub	sp, #24
  BUTTON_GPIO_CLK_ENABLE();
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <BSP_PB_Init+0x6c>)
 800281a:	2400      	movs	r4, #0
 800281c:	9400      	str	r4, [sp, #0]
 800281e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	9b00      	ldr	r3, [sp, #0]
  if(Button_Mode == BUTTON_MODE_GPIO)
 8002830:	b969      	cbnz	r1, 800284e <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002832:	2301      	movs	r3, #1
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002834:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002838:	2302      	movs	r3, #2
 800283a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <BSP_PB_Init+0x70>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 800283e:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002840:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002844:	a901      	add	r1, sp, #4
 8002846:	f001 fb0b 	bl	8003e60 <HAL_GPIO_Init>
}
 800284a:	b006      	add	sp, #24
 800284c:	bd10      	pop	{r4, pc}
  if(Button_Mode == BUTTON_MODE_EXTI)
 800284e:	2901      	cmp	r1, #1
 8002850:	d1fb      	bne.n	800284a <BSP_PB_Init+0x36>
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002852:	2302      	movs	r3, #2
 8002854:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800285a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <BSP_PB_Init+0x70>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800285e:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002860:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002864:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002866:	a901      	add	r1, sp, #4
 8002868:	f001 fafa 	bl	8003e60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800286c:	4622      	mov	r2, r4
 800286e:	210f      	movs	r1, #15
 8002870:	2006      	movs	r0, #6
 8002872:	f000 fcc5 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002876:	2006      	movs	r0, #6
 8002878:	f000 fcf4 	bl	8003264 <HAL_NVIC_EnableIRQ>
}
 800287c:	e7e5      	b.n	800284a <BSP_PB_Init+0x36>
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	20000040 	.word	0x20000040

08002888 <BSP_PB_GetState>:
{
 8002888:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800288a:	4b03      	ldr	r3, [pc, #12]	; (8002898 <BSP_PB_GetState+0x10>)
 800288c:	2101      	movs	r1, #1
 800288e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002892:	f001 fc6b 	bl	800416c <HAL_GPIO_ReadPin>
}
 8002896:	bd08      	pop	{r3, pc}
 8002898:	20000040 	.word	0x20000040

0800289c <TS_IO_Init>:
 800289c:	f7ff bf50 	b.w	8002740 <I2C1_Init>

080028a0 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80028a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&heval_I2c1,
 80028a2:	2301      	movs	r3, #1
 80028a4:	f88d 2017 	strb.w	r2, [sp, #23]
 80028a8:	2264      	movs	r2, #100	; 0x64
 80028aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80028ae:	f10d 0217 	add.w	r2, sp, #23
 80028b2:	9200      	str	r2, [sp, #0]
 80028b4:	460a      	mov	r2, r1
 80028b6:	4601      	mov	r1, r0
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <TS_IO_Write+0x30>)
 80028ba:	f001 ff09 	bl	80046d0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80028be:	b120      	cbz	r0, 80028ca <TS_IO_Write+0x2a>
  HAL_I2C_DeInit(&heval_I2c1);
 80028c0:	4803      	ldr	r0, [pc, #12]	; (80028d0 <TS_IO_Write+0x30>)
 80028c2:	f001 feeb 	bl	800469c <HAL_I2C_DeInit>
  I2C1_Init();
 80028c6:	f7ff ff3b 	bl	8002740 <I2C1_Init>
  I2C1_Write(Addr, Reg, Value);
}
 80028ca:	b007      	add	sp, #28
 80028cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80028d0:	20001298 	.word	0x20001298

080028d4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80028d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Value = 0;
 80028d6:	2300      	movs	r3, #0
{
 80028d8:	460a      	mov	r2, r1
  uint8_t Value = 0;
 80028da:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 80028de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028e2:	2301      	movs	r3, #1
 80028e4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80028e8:	f10d 0117 	add.w	r1, sp, #23
 80028ec:	9100      	str	r1, [sp, #0]
 80028ee:	4601      	mov	r1, r0
 80028f0:	4806      	ldr	r0, [pc, #24]	; (800290c <TS_IO_Read+0x38>)
 80028f2:	f001 ff7d 	bl	80047f0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80028f6:	b120      	cbz	r0, 8002902 <TS_IO_Read+0x2e>
  HAL_I2C_DeInit(&heval_I2c1);
 80028f8:	4804      	ldr	r0, [pc, #16]	; (800290c <TS_IO_Read+0x38>)
 80028fa:	f001 fecf 	bl	800469c <HAL_I2C_DeInit>
  I2C1_Init();
 80028fe:	f7ff ff1f 	bl	8002740 <I2C1_Init>
  return I2C1_Read(Addr, Reg);
}
 8002902:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002906:	b007      	add	sp, #28
 8002908:	f85d fb04 	ldr.w	pc, [sp], #4
 800290c:	20001298 	.word	0x20001298

08002910 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8002912:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002916:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800291a:	9200      	str	r2, [sp, #0]
 800291c:	2301      	movs	r3, #1
 800291e:	460a      	mov	r2, r1
 8002920:	4601      	mov	r1, r0
 8002922:	4806      	ldr	r0, [pc, #24]	; (800293c <TS_IO_ReadMultiple+0x2c>)
 8002924:	f001 ff64 	bl	80047f0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8002928:	4604      	mov	r4, r0
 800292a:	b120      	cbz	r0, 8002936 <TS_IO_ReadMultiple+0x26>
  HAL_I2C_DeInit(&heval_I2c1);
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <TS_IO_ReadMultiple+0x2c>)
 800292e:	f001 feb5 	bl	800469c <HAL_I2C_DeInit>
  I2C1_Init();
 8002932:	f7ff ff05 	bl	8002740 <I2C1_Init>
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8002936:	b2a0      	uxth	r0, r4
 8002938:	b004      	add	sp, #16
 800293a:	bd10      	pop	{r4, pc}
 800293c:	20001298 	.word	0x20001298

08002940 <OTM8009A_IO_Delay>:
 8002940:	f000 bc38 	b.w	80031b4 <HAL_Delay>

08002944 <QSPI_AutoPollingMemReady.constprop.0>:
/**
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout: timeout value before returning an error
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002944:	b500      	push	{lr}
 8002946:	b095      	sub	sp, #84	; 0x54
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294c:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800294e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002952:	2205      	movs	r2, #5
 8002954:	9206      	str	r2, [sp, #24]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002956:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002958:	2200      	movs	r2, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 800295a:	2101      	movs	r1, #1
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
 800295c:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002960:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002964:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8002968:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800296a:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 800296c:	9200      	str	r2, [sp, #0]
  s_config.Interval        = 0x10;
 800296e:	2210      	movs	r2, #16
 8002970:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002972:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002976:	4603      	mov	r3, r0
  s_config.Mask            = N25Q128A_SR_WIP;
 8002978:	9101      	str	r1, [sp, #4]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800297a:	9205      	str	r2, [sp, #20]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800297c:	a906      	add	r1, sp, #24
 800297e:	466a      	mov	r2, sp
 8002980:	4804      	ldr	r0, [pc, #16]	; (8002994 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
 8002982:	f002 fbb8 	bl	80050f6 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8002986:	3800      	subs	r0, #0
 8002988:	bf18      	it	ne
 800298a:	2001      	movne	r0, #1
 800298c:	b015      	add	sp, #84	; 0x54
 800298e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002992:	bf00      	nop
 8002994:	200012ec 	.word	0x200012ec

08002998 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002998:	b500      	push	{lr}
 800299a:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800299c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a0:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80029a2:	2306      	movs	r3, #6
 80029a4:	9306      	str	r3, [sp, #24]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029a6:	4817      	ldr	r0, [pc, #92]	; (8002a04 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80029a8:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	a906      	add	r1, sp, #24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80029b0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80029b4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_command.DataMode          = QSPI_DATA_NONE;
 80029b8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 80029ba:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80029bc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029be:	f002 fb56 	bl	800506e <HAL_QSPI_Command>
 80029c2:	b9e0      	cbnz	r0, 80029fe <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 80029c4:	2302      	movs	r3, #2
  s_config.Mask            = N25Q128A_SR_WREN;
 80029c6:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80029ca:	2201      	movs	r2, #1
 80029cc:	2310      	movs	r3, #16
 80029ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80029d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029d6:	2305      	movs	r3, #5
 80029d8:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80029dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80029e0:	9004      	str	r0, [sp, #16]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80029e2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029e4:	4807      	ldr	r0, [pc, #28]	; (8002a04 <QSPI_WriteEnable.constprop.0+0x6c>)
 80029e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80029ea:	466a      	mov	r2, sp
 80029ec:	a906      	add	r1, sp, #24
 80029ee:	f002 fb82 	bl	80050f6 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 80029f2:	3800      	subs	r0, #0
 80029f4:	bf18      	it	ne
 80029f6:	2001      	movne	r0, #1
}
 80029f8:	b015      	add	sp, #84	; 0x54
 80029fa:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 80029fe:	2001      	movs	r0, #1
 8002a00:	e7fa      	b.n	80029f8 <QSPI_WriteEnable.constprop.0+0x60>
 8002a02:	bf00      	nop
 8002a04:	200012ec 	.word	0x200012ec

08002a08 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8002a08:	b500      	push	{lr}
 8002a0a:	b091      	sub	sp, #68	; 0x44
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a10:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002a12:	23eb      	movs	r3, #235	; 0xeb
 8002a14:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002a16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a1a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a20:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002a22:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8002a26:	2300      	movs	r3, #0
 8002a28:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002a2c:	220a      	movs	r2, #10
 8002a2e:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002a30:	a902      	add	r1, sp, #8
 8002a32:	466a      	mov	r2, sp
 8002a34:	4806      	ldr	r0, [pc, #24]	; (8002a50 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002a36:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002a38:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002a3c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002a3e:	f002 fbaa 	bl	8005196 <HAL_QSPI_MemoryMapped>
}
 8002a42:	3800      	subs	r0, #0
 8002a44:	bf18      	it	ne
 8002a46:	2001      	movne	r0, #1
 8002a48:	b011      	add	sp, #68	; 0x44
 8002a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a4e:	bf00      	nop
 8002a50:	200012ec 	.word	0x200012ec

08002a54 <BSP_QSPI_MspInit>:
{
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	b088      	sub	sp, #32
  QSPI_CLK_ENABLE();
 8002a58:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <BSP_QSPI_MspInit+0xb8>)
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002a5a:	482d      	ldr	r0, [pc, #180]	; (8002b10 <BSP_QSPI_MspInit+0xbc>)
  QSPI_CLK_ENABLE();
 8002a5c:	2400      	movs	r4, #0
 8002a5e:	9400      	str	r4, [sp, #0]
 8002a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a62:	f042 0202 	orr.w	r2, r2, #2
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
 8002a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6a:	f002 0202 	and.w	r2, r2, #2
 8002a6e:	9200      	str	r2, [sp, #0]
 8002a70:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	f042 0202 	orr.w	r2, r2, #2
 8002a78:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	f022 0202 	bic.w	r2, r2, #2
 8002a80:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8002a82:	9401      	str	r4, [sp, #4]
 8002a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a86:	f042 0202 	orr.w	r2, r2, #2
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8e:	f002 0202 	and.w	r2, r2, #2
 8002a92:	9201      	str	r2, [sp, #4]
 8002a94:	9a01      	ldr	r2, [sp, #4]
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 8002a96:	9402      	str	r4, [sp, #8]
 8002a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9a:	f042 0220 	orr.w	r2, r2, #32
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002aa8:	2240      	movs	r2, #64	; 0x40
  QSPI_DX_CLK_GPIO_CLK_ENABLE();
 8002aaa:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	e9cd 2303 	strd	r2, r3, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e9cd 1305 	strd	r1, r3, [sp, #20]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8002aba:	260a      	movs	r6, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002abc:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8002abe:	2509      	movs	r5, #9
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8002ac0:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002ac2:	f001 f9cd 	bl	8003e60 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002aca:	a903      	add	r1, sp, #12
 8002acc:	4811      	ldr	r0, [pc, #68]	; (8002b14 <BSP_QSPI_MspInit+0xc0>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002ace:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002ad0:	9405      	str	r4, [sp, #20]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8002ad2:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002ad4:	f001 f9c4 	bl	8003e60 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = (QSPI_D0_PIN | QSPI_D1_PIN);
 8002ad8:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8002adc:	a903      	add	r1, sp, #12
 8002ade:	480d      	ldr	r0, [pc, #52]	; (8002b14 <BSP_QSPI_MspInit+0xc0>)
  gpio_init_structure.Pin       = (QSPI_D0_PIN | QSPI_D1_PIN);
 8002ae0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF10_QSPI;
 8002ae2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8002ae4:	f001 f9bc 	bl	8003e60 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 8002ae8:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8002aea:	a903      	add	r1, sp, #12
 8002aec:	4809      	ldr	r0, [pc, #36]	; (8002b14 <BSP_QSPI_MspInit+0xc0>)
  gpio_init_structure.Pin       = (QSPI_D2_PIN | QSPI_D3_PIN) ;
 8002aee:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF9_QSPI;
 8002af0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(QSPI_DX_GPIO_PORT, &gpio_init_structure);
 8002af2:	f001 f9b5 	bl	8003e60 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002af6:	4622      	mov	r2, r4
 8002af8:	210f      	movs	r1, #15
 8002afa:	205b      	movs	r0, #91	; 0x5b
 8002afc:	f000 fb80 	bl	8003200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002b00:	205b      	movs	r0, #91	; 0x5b
 8002b02:	f000 fbaf 	bl	8003264 <HAL_NVIC_EnableIRQ>
}
 8002b06:	b008      	add	sp, #32
 8002b08:	bd70      	pop	{r4, r5, r6, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40021400 	.word	0x40021400

08002b18 <BSP_QSPI_Init>:
{
 8002b18:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8002b1a:	4c48      	ldr	r4, [pc, #288]	; (8002c3c <BSP_QSPI_Init+0x124>)
 8002b1c:	4b48      	ldr	r3, [pc, #288]	; (8002c40 <BSP_QSPI_Init+0x128>)
 8002b1e:	6023      	str	r3, [r4, #0]
{
 8002b20:	b091      	sub	sp, #68	; 0x44
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002b22:	4620      	mov	r0, r4
 8002b24:	f002 fa90 	bl	8005048 <HAL_QSPI_DeInit>
 8002b28:	4605      	mov	r5, r0
 8002b2a:	b110      	cbz	r0, 8002b32 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8002b2c:	2001      	movs	r0, #1
}
 8002b2e:	b011      	add	sp, #68	; 0x44
 8002b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002b32:	4601      	mov	r1, r0
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff ff8d 	bl	8002a54 <BSP_QSPI_MspInit>
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI Freq= 180 MHz / (1+1) = 90 MHz */
 8002b3a:	2601      	movs	r6, #1
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002b3c:	2310      	movs	r3, #16
  QSPIHandle.Init.FifoThreshold      = 1;
 8002b3e:	e9c4 6601 	strd	r6, r6, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002b42:	60e3      	str	r3, [r4, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8002b48:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	6123      	str	r3, [r4, #16]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002b54:	4620      	mov	r0, r4
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8002b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002b5a:	e9c4 3505 	strd	r3, r5, [r4, #20]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002b5e:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002b62:	f002 fa1d 	bl	8004fa0 <HAL_QSPI_Init>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d1e0      	bne.n	8002b2c <BSP_QSPI_Init+0x14>
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002b6a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b6e:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002b72:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002b76:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8002b78:	900b      	str	r0, [sp, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002b7a:	9007      	str	r0, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b7c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	a902      	add	r1, sp, #8
 8002b84:	4620      	mov	r0, r4
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002b86:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002b88:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b8a:	f002 fa70 	bl	800506e <HAL_QSPI_Command>
 8002b8e:	b108      	cbz	r0, 8002b94 <BSP_QSPI_Init+0x7c>
    return QSPI_NOT_SUPPORTED;
 8002b90:	2004      	movs	r0, #4
 8002b92:	e7cc      	b.n	8002b2e <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8002b94:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	a902      	add	r1, sp, #8
 8002b9c:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8002b9e:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ba0:	f002 fa65 	bl	800506e <HAL_QSPI_Command>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d1f3      	bne.n	8002b90 <BSP_QSPI_Init+0x78>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002ba8:	f241 3088 	movw	r0, #5000	; 0x1388
 8002bac:	f7ff feca 	bl	8002944 <QSPI_AutoPollingMemReady.constprop.0>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d1ed      	bne.n	8002b90 <BSP_QSPI_Init+0x78>
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002bb4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002bb8:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002bbc:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8002bc0:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8002bc2:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	a902      	add	r1, sp, #8
 8002bca:	4620      	mov	r0, r4
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002bcc:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8002bce:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002bd0:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002bd2:	f002 fa4c 	bl	800506e <HAL_QSPI_Command>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d1da      	bne.n	8002b90 <BSP_QSPI_Init+0x78>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	f10d 0107 	add.w	r1, sp, #7
 8002be2:	4620      	mov	r0, r4
 8002be4:	f002 fbbc 	bl	8005360 <HAL_QSPI_Receive>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d1d1      	bne.n	8002b90 <BSP_QSPI_Init+0x78>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8002bec:	f7ff fed4 	bl	8002998 <QSPI_WriteEnable.constprop.0>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d1cd      	bne.n	8002b90 <BSP_QSPI_Init+0x78>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8002bf4:	2381      	movs	r3, #129	; 0x81
 8002bf6:	9302      	str	r3, [sp, #8]
 8002bf8:	22f0      	movs	r2, #240	; 0xf0
 8002bfa:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8002bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c02:	210a      	movs	r1, #10
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c12:	a902      	add	r1, sp, #8
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8002c1a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c1e:	f002 fa26 	bl	800506e <HAL_QSPI_Command>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d1b4      	bne.n	8002b90 <BSP_QSPI_Init+0x78>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	f10d 0107 	add.w	r1, sp, #7
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f002 fb3a 	bl	80052a8 <HAL_QSPI_Transmit>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	f43f af7a 	beq.w	8002b2e <BSP_QSPI_Init+0x16>
 8002c3a:	e7a9      	b.n	8002b90 <BSP_QSPI_Init+0x78>
 8002c3c:	200012ec 	.word	0x200012ec
 8002c40:	a0001000 	.word	0xa0001000

08002c44 <BSP_QSPI_MspDeInit>:
{
 8002c44:	b508      	push	{r3, lr}
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002c46:	205b      	movs	r0, #91	; 0x5b
 8002c48:	f000 fb1a 	bl	8003280 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_DeInit(QSPI_CS_GPIO_PORT, QSPI_CS_PIN);
 8002c4c:	4814      	ldr	r0, [pc, #80]	; (8002ca0 <BSP_QSPI_MspDeInit+0x5c>)
 8002c4e:	2140      	movs	r1, #64	; 0x40
 8002c50:	f001 f9ec 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_CLK_GPIO_PORT, QSPI_CLK_PIN);
 8002c54:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <BSP_QSPI_MspDeInit+0x60>)
 8002c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c5a:	f001 f9e7 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_DX_GPIO_PORT, QSPI_D0_PIN);
 8002c5e:	4811      	ldr	r0, [pc, #68]	; (8002ca4 <BSP_QSPI_MspDeInit+0x60>)
 8002c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c64:	f001 f9e2 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_DX_GPIO_PORT, QSPI_D1_PIN);
 8002c68:	480e      	ldr	r0, [pc, #56]	; (8002ca4 <BSP_QSPI_MspDeInit+0x60>)
 8002c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c6e:	f001 f9dd 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_DX_GPIO_PORT, QSPI_D2_PIN);
 8002c72:	480c      	ldr	r0, [pc, #48]	; (8002ca4 <BSP_QSPI_MspDeInit+0x60>)
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	f001 f9d9 	bl	800402c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_DX_GPIO_PORT, QSPI_D3_PIN);
 8002c7a:	480a      	ldr	r0, [pc, #40]	; (8002ca4 <BSP_QSPI_MspDeInit+0x60>)
 8002c7c:	2140      	movs	r1, #64	; 0x40
 8002c7e:	f001 f9d5 	bl	800402c <HAL_GPIO_DeInit>
  QSPI_FORCE_RESET();
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <BSP_QSPI_MspDeInit+0x64>)
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	f042 0202 	orr.w	r2, r2, #2
 8002c8a:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	f022 0202 	bic.w	r2, r2, #2
 8002c92:	619a      	str	r2, [r3, #24]
  QSPI_CLK_DISABLE();
 8002c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c96:	f022 0202 	bic.w	r2, r2, #2
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c9c:	bd08      	pop	{r3, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40021400 	.word	0x40021400
 8002ca8:	40023800 	.word	0x40023800

08002cac <BSP_QSPI_DeInit>:
{
 8002cac:	b538      	push	{r3, r4, r5, lr}
  QSPIHandle.Instance = QUADSPI;
 8002cae:	4d08      	ldr	r5, [pc, #32]	; (8002cd0 <BSP_QSPI_DeInit+0x24>)
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <BSP_QSPI_DeInit+0x28>)
 8002cb2:	602b      	str	r3, [r5, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f002 f9c7 	bl	8005048 <HAL_QSPI_DeInit>
 8002cba:	4604      	mov	r4, r0
 8002cbc:	b928      	cbnz	r0, 8002cca <BSP_QSPI_DeInit+0x1e>
  BSP_QSPI_MspDeInit(&QSPIHandle, NULL);
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f7ff ffbf 	bl	8002c44 <BSP_QSPI_MspDeInit>
}
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
    return QSPI_ERROR;
 8002cca:	2401      	movs	r4, #1
 8002ccc:	e7fb      	b.n	8002cc6 <BSP_QSPI_DeInit+0x1a>
 8002cce:	bf00      	nop
 8002cd0:	200012ec 	.word	0x200012ec
 8002cd4:	a0001000 	.word	0xa0001000

08002cd8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002cdc:	4c21      	ldr	r4, [pc, #132]	; (8002d64 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002cde:	4d22      	ldr	r5, [pc, #136]	; (8002d68 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ce0:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8002ce2:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ce6:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ce8:	4621      	mov	r1, r4
{
 8002cea:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf0:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002cf2:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002cf6:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd = 0;
 8002cfa:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002cfe:	f002 ffcd 	bl	8005c9c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002d02:	4630      	mov	r0, r6
 8002d04:	f000 fa56 	bl	80031b4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002d08:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d10:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d12:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002d16:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d1a:	f002 ffbf 	bl	8005c9c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d1e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d20:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d24:	4621      	mov	r1, r4
  Command.AutoRefreshNumber      = 8;
 8002d26:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d2c:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 8002d2e:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d32:	f002 ffb3 	bl	8005c9c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002d36:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002d3a:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002d3c:	2304      	movs	r3, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d3e:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d42:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = tmpmrd;
 8002d44:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 8002d46:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d4c:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = tmpmrd;
 8002d4e:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d50:	f002 ffa4 	bl	8005c9c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8002d54:	4649      	mov	r1, r9
 8002d56:	4628      	mov	r0, r5
}
 8002d58:	b003      	add	sp, #12
 8002d5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8002d5e:	f002 bfbb 	b.w	8005cd8 <HAL_SDRAM_ProgramRefreshRate>
 8002d62:	bf00      	nop
 8002d64:	20001338 	.word	0x20001338
 8002d68:	20001424 	.word	0x20001424

08002d6c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002d6c:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002d6e:	4606      	mov	r6, r0
{
 8002d70:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002d72:	2800      	cmp	r0, #0
 8002d74:	f000 80bd 	beq.w	8002ef2 <BSP_SDRAM_MspInit+0x186>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002d78:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <BSP_SDRAM_MspInit+0x18c>)
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = GPIO_AF12_FMC;

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002d7a:	4860      	ldr	r0, [pc, #384]	; (8002efc <BSP_SDRAM_MspInit+0x190>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002d7c:	4c60      	ldr	r4, [pc, #384]	; (8002f00 <BSP_SDRAM_MspInit+0x194>)
    __HAL_RCC_FMC_CLK_ENABLE();
 8002d7e:	2500      	movs	r5, #0
 8002d80:	9500      	str	r5, [sp, #0]
 8002d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
 8002d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8c:	f002 0201 	and.w	r2, r2, #1
 8002d90:	9200      	str	r2, [sp, #0]
 8002d92:	9a00      	ldr	r2, [sp, #0]
    __DMAx_CLK_ENABLE();
 8002d94:	9501      	str	r5, [sp, #4]
 8002d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d98:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002da4:	9201      	str	r2, [sp, #4]
 8002da6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da8:	9502      	str	r5, [sp, #8]
 8002daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dac:	f042 0204 	orr.w	r2, r2, #4
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
 8002db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db4:	f002 0204 	and.w	r2, r2, #4
 8002db8:	9202      	str	r2, [sp, #8]
 8002dba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dbc:	9503      	str	r5, [sp, #12]
 8002dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc0:	f042 0208 	orr.w	r2, r2, #8
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc8:	f002 0208 	and.w	r2, r2, #8
 8002dcc:	9203      	str	r2, [sp, #12]
 8002dce:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dd0:	9504      	str	r5, [sp, #16]
 8002dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd4:	f042 0210 	orr.w	r2, r2, #16
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ddc:	f002 0210 	and.w	r2, r2, #16
 8002de0:	9204      	str	r2, [sp, #16]
 8002de2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002de4:	9505      	str	r5, [sp, #20]
 8002de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de8:	f042 0220 	orr.w	r2, r2, #32
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
 8002dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df0:	f002 0220 	and.w	r2, r2, #32
 8002df4:	9205      	str	r2, [sp, #20]
 8002df6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002df8:	9506      	str	r5, [sp, #24]
 8002dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002e08:	9206      	str	r2, [sp, #24]
 8002e0a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e0c:	9507      	str	r5, [sp, #28]
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
 8002e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e18:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002e1c:	9207      	str	r2, [sp, #28]
 8002e1e:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e20:	9508      	str	r5, [sp, #32]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8002e32:	2202      	movs	r2, #2
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e34:	9b08      	ldr	r3, [sp, #32]
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002e36:	920c      	str	r2, [sp, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002e3e:	a909      	add	r1, sp, #36	; 0x24
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002e40:	220c      	movs	r2, #12
 8002e42:	920d      	str	r2, [sp, #52]	; 0x34
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8002e44:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002e46:	f001 f80b 	bl	8003e60 <HAL_GPIO_Init>
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002e4a:	f24c 7303 	movw	r3, #50947	; 0xc703
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002e4e:	482d      	ldr	r0, [pc, #180]	; (8002f04 <BSP_SDRAM_MspInit+0x198>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002e50:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002e52:	a909      	add	r1, sp, #36	; 0x24
 8002e54:	f001 f804 	bl	8003e60 <HAL_GPIO_Init>
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002e58:	f64f 7383 	movw	r3, #65411	; 0xff83
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002e5c:	482a      	ldr	r0, [pc, #168]	; (8002f08 <BSP_SDRAM_MspInit+0x19c>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002e5e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002e60:	a909      	add	r1, sp, #36	; 0x24
 8002e62:	f000 fffd 	bl	8003e60 <HAL_GPIO_Init>
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002e66:	f64f 033f 	movw	r3, #63551	; 0xf83f
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002e6a:	4828      	ldr	r0, [pc, #160]	; (8002f0c <BSP_SDRAM_MspInit+0x1a0>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002e6c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002e6e:	a909      	add	r1, sp, #36	; 0x24
 8002e70:	f000 fff6 	bl	8003e60 <HAL_GPIO_Init>
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002e74:	f248 1333 	movw	r3, #33075	; 0x8133
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002e78:	4825      	ldr	r0, [pc, #148]	; (8002f10 <BSP_SDRAM_MspInit+0x1a4>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002e7a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002e7c:	a909      	add	r1, sp, #36	; 0x24
 8002e7e:	f000 ffef 	bl	8003e60 <HAL_GPIO_Init>
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002e82:	f64f 730c 	movw	r3, #65292	; 0xff0c
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002e86:	4823      	ldr	r0, [pc, #140]	; (8002f14 <BSP_SDRAM_MspInit+0x1a8>)
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002e88:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002e8a:	a909      	add	r1, sp, #36	; 0x24
 8002e8c:	f000 ffe8 	bl	8003e60 <HAL_GPIO_Init>
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002e90:	f240 63ff 	movw	r3, #1791	; 0x6ff
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002e94:	4820      	ldr	r0, [pc, #128]	; (8002f18 <BSP_SDRAM_MspInit+0x1ac>)
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002e96:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002e98:	a909      	add	r1, sp, #36	; 0x24
 8002e9a:	f000 ffe1 	bl	8003e60 <HAL_GPIO_Init>
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	e9c4 1304 	strd	r1, r3, [r4, #16]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002eb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    dma_handle.Init.Mode                = DMA_NORMAL;
 8002eb8:	e9c4 3506 	strd	r3, r5, [r4, #24]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002ec0:	e9c4 3508 	strd	r3, r5, [r4, #32]
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002ec4:	2303      	movs	r3, #3
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002ec6:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002eca:	6325      	str	r5, [r4, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <BSP_SDRAM_MspInit+0x1b0>)

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002ece:	6334      	str	r4, [r6, #48]	; 0x30

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8002ed0:	4620      	mov	r0, r4
    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002ed2:	6023      	str	r3, [r4, #0]
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002ed4:	6065      	str	r5, [r4, #4]
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002ed6:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&dma_handle);
 8002ed8:	f000 fa88 	bl	80033ec <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8002edc:	4620      	mov	r0, r4
 8002ede:	f000 fa07 	bl	80032f0 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8002ee2:	2038      	movs	r0, #56	; 0x38
 8002ee4:	462a      	mov	r2, r5
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	f000 f98a 	bl	8003200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002eec:	2038      	movs	r0, #56	; 0x38
 8002eee:	f000 f9b9 	bl	8003264 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002ef2:	b00e      	add	sp, #56	; 0x38
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020800 	.word	0x40020800
 8002f00:	200013c4 	.word	0x200013c4
 8002f04:	40020c00 	.word	0x40020c00
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40021400 	.word	0x40021400
 8002f10:	40021800 	.word	0x40021800
 8002f14:	40021c00 	.word	0x40021c00
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40026410 	.word	0x40026410

08002f20 <BSP_SDRAM_Init>:
{
 8002f20:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002f22:	4c19      	ldr	r4, [pc, #100]	; (8002f88 <BSP_SDRAM_Init+0x68>)
  Timing.LoadToActiveDelay    = 2;
 8002f24:	4d19      	ldr	r5, [pc, #100]	; (8002f8c <BSP_SDRAM_Init+0x6c>)
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <BSP_SDRAM_Init+0x70>)
 8002f28:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002f2a:	2107      	movs	r1, #7
 8002f2c:	2302      	movs	r3, #2
  Timing.SelfRefreshTime      = 4;
 8002f2e:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 8002f30:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 8002f34:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 8002f38:	e9c5 3304 	strd	r3, r3, [r5, #16]
  Timing.RCDDelay             = 2;
 8002f3c:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f3e:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002f40:	2340      	movs	r3, #64	; 0x40
 8002f42:	2220      	movs	r2, #32
 8002f44:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002f48:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002f4a:	f44f 73c0 	mov.w	r3, #384	; 0x180
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002f4e:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002f52:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f5a:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8002f5e:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002f60:	e9c4 1101 	strd	r1, r1, [r4, #4]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002f64:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8002f66:	f7ff ff01 	bl	8002d6c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f002 fe67 	bl	8005c40 <HAL_SDRAM_Init>
 8002f72:	4c08      	ldr	r4, [pc, #32]	; (8002f94 <BSP_SDRAM_Init+0x74>)
 8002f74:	3800      	subs	r0, #0
 8002f76:	bf18      	it	ne
 8002f78:	2001      	movne	r0, #1
 8002f7a:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002f7c:	f240 5069 	movw	r0, #1385	; 0x569
 8002f80:	f7ff feaa 	bl	8002cd8 <BSP_SDRAM_Initialization_sequence>
}
 8002f84:	7820      	ldrb	r0, [r4, #0]
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	20001424 	.word	0x20001424
 8002f8c:	20001348 	.word	0x20001348
 8002f90:	a0000140 	.word	0xa0000140
 8002f94:	20000045 	.word	0x20000045

08002f98 <BSP_SDRAM_MspDeInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002f98:	b508      	push	{r3, lr}
    static DMA_HandleTypeDef dma_handle;

    if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002f9a:	b148      	cbz	r0, 8002fb0 <BSP_SDRAM_MspDeInit+0x18>
    {
      /* Disable NVIC configuration for DMA interrupt */
      HAL_NVIC_DisableIRQ(SDRAM_DMAx_IRQn);
 8002f9c:	2038      	movs	r0, #56	; 0x38
 8002f9e:	f000 f96f 	bl	8003280 <HAL_NVIC_DisableIRQ>

      /* Deinitialize the stream for new transfer */
      dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002fa2:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <BSP_SDRAM_MspDeInit+0x1c>)
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <BSP_SDRAM_MspDeInit+0x20>)
 8002fa6:	6003      	str	r3, [r0, #0]

      /* GPIO pins clock, FMC clock and DMA clock can be shut down in the application
       by surcharging this __weak function */

    } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HAL_DMA_DeInit(&dma_handle);
 8002fac:	f000 ba1e 	b.w	80033ec <HAL_DMA_DeInit>
}
 8002fb0:	bd08      	pop	{r3, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20001364 	.word	0x20001364
 8002fb8:	40026410 	.word	0x40026410

08002fbc <BSP_SDRAM_DeInit>:
{
 8002fbc:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002fbe:	4c07      	ldr	r4, [pc, #28]	; (8002fdc <BSP_SDRAM_DeInit+0x20>)
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <BSP_SDRAM_DeInit+0x24>)
 8002fc2:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_DeInit(&sdramHandle) == HAL_OK)
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f002 fe5b 	bl	8005c80 <HAL_SDRAM_DeInit>
 8002fca:	4d06      	ldr	r5, [pc, #24]	; (8002fe4 <BSP_SDRAM_DeInit+0x28>)
 8002fcc:	4601      	mov	r1, r0
 8002fce:	b918      	cbnz	r0, 8002fd8 <BSP_SDRAM_DeInit+0x1c>
    sdramstatus = SDRAM_OK;
 8002fd0:	7028      	strb	r0, [r5, #0]
   BSP_SDRAM_MspDeInit(&sdramHandle, (void *)NULL);
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f7ff ffe0 	bl	8002f98 <BSP_SDRAM_MspDeInit>
}
 8002fd8:	7828      	ldrb	r0, [r5, #0]
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	20001424 	.word	0x20001424
 8002fe0:	a0000140 	.word	0xa0000140
 8002fe4:	20000044 	.word	0x20000044

08002fe8 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8002fec:	4d16      	ldr	r5, [pc, #88]	; (8003048 <BSP_TS_Init+0x60>)
 8002fee:	4c17      	ldr	r4, [pc, #92]	; (800304c <BSP_TS_Init+0x64>)
 8002ff0:	682b      	ldr	r3, [r5, #0]
{
 8002ff2:	4606      	mov	r6, r0
  ft6x06_ts_drv.Init(I2C_Address);
 8002ff4:	7820      	ldrb	r0, [r4, #0]
{
 8002ff6:	460f      	mov	r7, r1
  ft6x06_ts_drv.Init(I2C_Address);
 8002ff8:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002ffa:	686b      	ldr	r3, [r5, #4]
 8002ffc:	2054      	movs	r0, #84	; 0x54
 8002ffe:	4798      	blx	r3
  if(ts_id1 != FT6206_ID_VALUE)
 8003000:	b2c0      	uxtb	r0, r0
 8003002:	2811      	cmp	r0, #17
 8003004:	d00a      	beq.n	800301c <BSP_TS_Init+0x34>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8003006:	686b      	ldr	r3, [r5, #4]
 8003008:	2070      	movs	r0, #112	; 0x70
 800300a:	4798      	blx	r3
    I2C_Address    = TS_I2C_ADDRESS;    
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800300c:	b2c0      	uxtb	r0, r0
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 800300e:	2370      	movs	r3, #112	; 0x70
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8003010:	2811      	cmp	r0, #17
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8003012:	7023      	strb	r3, [r4, #0]
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8003014:	d004      	beq.n	8003020 <BSP_TS_Init+0x38>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8003016:	2003      	movs	r0, #3
  }

  return (ts_status);
}
 8003018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    I2C_Address    = TS_I2C_ADDRESS;    
 800301c:	2354      	movs	r3, #84	; 0x54
 800301e:	7023      	strb	r3, [r4, #0]
    ts_driver = &ft6x06_ts_drv;
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <BSP_TS_Init+0x68>)
 8003022:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8003054 <BSP_TS_Init+0x6c>
      ts_driver->Reset(I2C_Address);
 8003026:	7820      	ldrb	r0, [r4, #0]
    ts_driver = &ft6x06_ts_drv;
 8003028:	f8c8 5000 	str.w	r5, [r8]
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 800302c:	42be      	cmp	r6, r7
 800302e:	bf34      	ite	cc
 8003030:	2101      	movcc	r1, #1
 8003032:	210c      	movcs	r1, #12
 8003034:	7019      	strb	r1, [r3, #0]
      ts_driver->Reset(I2C_Address);
 8003036:	68ab      	ldr	r3, [r5, #8]
 8003038:	4798      	blx	r3
      ts_driver->Start(I2C_Address);
 800303a:	f8d8 3000 	ldr.w	r3, [r8]
 800303e:	7820      	ldrb	r0, [r4, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 8003044:	2000      	movs	r0, #0
 8003046:	e7e7      	b.n	8003018 <BSP_TS_Init+0x30>
 8003048:	20000018 	.word	0x20000018
 800304c:	20001458 	.word	0x20001458
 8003050:	20001470 	.word	0x20001470
 8003054:	2000146c 	.word	0x2000146c

08003058 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 800305c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8003138 <BSP_TS_GetState+0xe0>
 8003060:	4a32      	ldr	r2, [pc, #200]	; (800312c <BSP_TS_GetState+0xd4>)
 8003062:	f8db 3000 	ldr.w	r3, [fp]
{
 8003066:	4606      	mov	r6, r0
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	7810      	ldrb	r0, [r2, #0]
{
 800306c:	b085      	sub	sp, #20
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 800306e:	4798      	blx	r3
 8003070:	7030      	strb	r0, [r6, #0]
  if(TS_State->touchDetected)
 8003072:	b150      	cbz	r0, 800308a <BSP_TS_GetState+0x32>
 8003074:	4f2e      	ldr	r7, [pc, #184]	; (8003130 <BSP_TS_GetState+0xd8>)
 8003076:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800313c <BSP_TS_GetState+0xe4>
 800307a:	46b2      	mov	sl, r6
 800307c:	ad03      	add	r5, sp, #12
 800307e:	a902      	add	r1, sp, #8
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003080:	f04f 0900 	mov.w	r9, #0
 8003084:	7833      	ldrb	r3, [r6, #0]
 8003086:	454b      	cmp	r3, r9
 8003088:	d803      	bhi.n	8003092 <BSP_TS_GetState+0x3a>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 800308a:	2000      	movs	r0, #0
 800308c:	b005      	add	sp, #20
 800308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8003092:	f8db 3000 	ldr.w	r3, [fp]
 8003096:	4825      	ldr	r0, [pc, #148]	; (800312c <BSP_TS_GetState+0xd4>)
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	7800      	ldrb	r0, [r0, #0]
 800309c:	9101      	str	r1, [sp, #4]
 800309e:	462a      	mov	r2, r5
 80030a0:	4798      	blx	r3
      if(ts_orientation & TS_SWAP_XY)
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <BSP_TS_GetState+0xdc>)
 80030a4:	9901      	ldr	r1, [sp, #4]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	f013 0f08 	tst.w	r3, #8
        tmp = Raw_x[index];
 80030ac:	bf1f      	itttt	ne
 80030ae:	880a      	ldrhne	r2, [r1, #0]
        Raw_x[index] = Raw_y[index]; 
 80030b0:	8828      	ldrhne	r0, [r5, #0]
 80030b2:	8008      	strhne	r0, [r1, #0]
        Raw_y[index] = tmp;
 80030b4:	802a      	strhne	r2, [r5, #0]
      if(ts_orientation & TS_SWAP_X)
 80030b6:	079a      	lsls	r2, r3, #30
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80030b8:	bf41      	itttt	mi
 80030ba:	880a      	ldrhmi	r2, [r1, #0]
 80030bc:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 80030c0:	3203      	addmi	r2, #3
 80030c2:	800a      	strhmi	r2, [r1, #0]
      if(ts_orientation & TS_SWAP_Y)
 80030c4:	075b      	lsls	r3, r3, #29
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80030c6:	bf48      	it	mi
 80030c8:	882b      	ldrhmi	r3, [r5, #0]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	f831 0b02 	ldrh.w	r0, [r1], #2
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80030d0:	bf42      	ittt	mi
 80030d2:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 80030d6:	3301      	addmi	r3, #1
 80030d8:	802b      	strhmi	r3, [r5, #0]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80030da:	b293      	uxth	r3, r2
 80030dc:	4290      	cmp	r0, r2
 80030de:	bf8c      	ite	hi
 80030e0:	1ac3      	subhi	r3, r0, r3
 80030e2:	1a1b      	subls	r3, r3, r0
 80030e4:	b29b      	uxth	r3, r3
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80030e6:	f835 2b02 	ldrh.w	r2, [r5], #2
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80030ea:	9301      	str	r3, [sp, #4]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80030ec:	f8d8 3000 	ldr.w	r3, [r8]
 80030f0:	b29c      	uxth	r4, r3
 80030f2:	429a      	cmp	r2, r3
 80030f4:	bf8c      	ite	hi
 80030f6:	1b14      	subhi	r4, r2, r4
 80030f8:	1aa4      	subls	r4, r4, r2
      if ((xDiff + yDiff) > 5)
 80030fa:	9b01      	ldr	r3, [sp, #4]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80030fc:	b2a4      	uxth	r4, r4
      if ((xDiff + yDiff) > 5)
 80030fe:	4423      	add	r3, r4
 8003100:	2b05      	cmp	r3, #5
        _x[index] = Raw_x[index];
 8003102:	46bc      	mov	ip, r7
 8003104:	bfc8      	it	gt
 8003106:	6038      	strgt	r0, [r7, #0]
      TS_State->touchX[index] = _x[index];
 8003108:	f8dc 3000 	ldr.w	r3, [ip]
        _y[index] = Raw_y[index];
 800310c:	bfc8      	it	gt
 800310e:	f8c8 2000 	strgt.w	r2, [r8]
      TS_State->touchX[index] = _x[index];
 8003112:	46c6      	mov	lr, r8
 8003114:	f82a 3f02 	strh.w	r3, [sl, #2]!
      TS_State->touchY[index] = _y[index];
 8003118:	f8de 3000 	ldr.w	r3, [lr]
 800311c:	f8aa 3004 	strh.w	r3, [sl, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 8003120:	3704      	adds	r7, #4
 8003122:	f108 0804 	add.w	r8, r8, #4
 8003126:	f109 0901 	add.w	r9, r9, #1
 800312a:	e7ab      	b.n	8003084 <BSP_TS_GetState+0x2c>
 800312c:	20001458 	.word	0x20001458
 8003130:	2000145c 	.word	0x2000145c
 8003134:	20001470 	.word	0x20001470
 8003138:	2000146c 	.word	0x2000146c
 800313c:	20001464 	.word	0x20001464

08003140 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SystemInit+0x18>)
 8003142:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003146:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800314a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800314e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003152:	609a      	str	r2, [r3, #8]
#endif
}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800315c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_Init+0x30>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800316e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003176:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003178:	2003      	movs	r0, #3
 800317a:	f000 f82f 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800317e:	2000      	movs	r0, #0
 8003180:	f7fe fd96 	bl	8001cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003184:	f7fe fb38 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003188:	2000      	movs	r0, #0
 800318a:	bd08      	pop	{r3, pc}
 800318c:	40023c00 	.word	0x40023c00

08003190 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003190:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_IncTick+0x10>)
 8003192:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <HAL_IncTick+0x14>)
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	440b      	add	r3, r1
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20001474 	.word	0x20001474
 80031a4:	2000004c 	.word	0x2000004c

080031a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80031a8:	4b01      	ldr	r3, [pc, #4]	; (80031b0 <HAL_GetTick+0x8>)
 80031aa:	6818      	ldr	r0, [r3, #0]
}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20001474 	.word	0x20001474

080031b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff fff6 	bl	80031a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031bc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80031be:	bf1c      	itt	ne
 80031c0:	4b05      	ldrne	r3, [pc, #20]	; (80031d8 <HAL_Delay+0x24>)
 80031c2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80031c4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80031c6:	bf18      	it	ne
 80031c8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ca:	f7ff ffed 	bl	80031a8 <HAL_GetTick>
 80031ce:	1b43      	subs	r3, r0, r5
 80031d0:	42a3      	cmp	r3, r4
 80031d2:	d3fa      	bcc.n	80031ca <HAL_Delay+0x16>
  {
  }
}
 80031d4:	bd38      	pop	{r3, r4, r5, pc}
 80031d6:	bf00      	nop
 80031d8:	2000004c 	.word	0x2000004c

080031dc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031dc:	4907      	ldr	r1, [pc, #28]	; (80031fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80031de:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ec:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80031f8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003202:	b530      	push	{r4, r5, lr}
 8003204:	68dc      	ldr	r4, [r3, #12]
 8003206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800320a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	2b04      	cmp	r3, #4
 8003212:	bf28      	it	cs
 8003214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321c:	bf8c      	ite	hi
 800321e:	3c03      	subhi	r4, #3
 8003220:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003222:	fa05 f303 	lsl.w	r3, r5, r3
 8003226:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322a:	40a5      	lsls	r5, r4
 800322c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003232:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003238:	bfac      	ite	ge
 800323a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323e:	4a08      	ldrlt	r2, [pc, #32]	; (8003260 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003244:	bfb8      	it	lt
 8003246:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	b2db      	uxtb	r3, r3
 800324c:	bfaa      	itet	ge
 800324e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003252:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003258:	bd30      	pop	{r4, r5, pc}
 800325a:	bf00      	nop
 800325c:	e000ed00 	.word	0xe000ed00
 8003260:	e000ed14 	.word	0xe000ed14

08003264 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003264:	2800      	cmp	r0, #0
 8003266:	db07      	blt.n	8003278 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003268:	0941      	lsrs	r1, r0, #5
 800326a:	4a04      	ldr	r2, [pc, #16]	; (800327c <HAL_NVIC_EnableIRQ+0x18>)
 800326c:	f000 001f 	and.w	r0, r0, #31
 8003270:	2301      	movs	r3, #1
 8003272:	4083      	lsls	r3, r0
 8003274:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100

08003280 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003280:	2800      	cmp	r0, #0
 8003282:	db0c      	blt.n	800329e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003284:	0943      	lsrs	r3, r0, #5
 8003286:	4906      	ldr	r1, [pc, #24]	; (80032a0 <HAL_NVIC_DisableIRQ+0x20>)
 8003288:	f000 001f 	and.w	r0, r0, #31
 800328c:	3320      	adds	r3, #32
 800328e:	2201      	movs	r2, #1
 8003290:	4082      	lsls	r2, r0
 8003292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003296:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800329a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800329e:	4770      	bx	lr
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032a4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032a6:	4604      	mov	r4, r0
 80032a8:	b150      	cbz	r0, 80032c0 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032aa:	7943      	ldrb	r3, [r0, #5]
 80032ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032b0:	b913      	cbnz	r3, 80032b8 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032b2:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032b4:	f7fe fac0 	bl	8001838 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032b8:	2301      	movs	r3, #1
 80032ba:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80032bc:	2000      	movs	r0, #0
}
 80032be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80032c0:	2001      	movs	r0, #1
 80032c2:	e7fc      	b.n	80032be <HAL_CRC_Init+0x1a>

080032c4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c4:	6803      	ldr	r3, [r0, #0]
{
 80032c6:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032cc:	4c07      	ldr	r4, [pc, #28]	; (80032ec <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032d2:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80032d6:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032d8:	bf88      	it	hi
 80032da:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032dc:	2118      	movs	r1, #24
 80032de:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032e2:	5c61      	ldrb	r1, [r4, r1]
 80032e4:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032e6:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd10      	pop	{r4, pc}
 80032ec:	0800efb9 	.word	0x0800efb9

080032f0 <HAL_DMA_Init>:
{
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff ff58 	bl	80031a8 <HAL_GetTick>
 80032f8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80032fa:	2c00      	cmp	r4, #0
 80032fc:	d071      	beq.n	80033e2 <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003304:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003306:	2300      	movs	r3, #0
 8003308:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	07d8      	lsls	r0, r3, #31
 800331a:	d42e      	bmi.n	800337a <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 800331c:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800331e:	4832      	ldr	r0, [pc, #200]	; (80033e8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003320:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003322:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003324:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8003328:	432b      	orrs	r3, r5
 800332a:	68e5      	ldr	r5, [r4, #12]
 800332c:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332e:	6925      	ldr	r5, [r4, #16]
 8003330:	432b      	orrs	r3, r5
 8003332:	6965      	ldr	r5, [r4, #20]
 8003334:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	69e5      	ldr	r5, [r4, #28]
 8003338:	430b      	orrs	r3, r1
 800333a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800333c:	6a25      	ldr	r5, [r4, #32]
 800333e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003340:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003342:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003344:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003346:	bf02      	ittt	eq
 8003348:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800334c:	4335      	orreq	r5, r6
 800334e:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8003350:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8003352:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003354:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003356:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800335a:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800335e:	d132      	bne.n	80033c6 <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 8003360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003362:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003364:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003366:	b375      	cbz	r5, 80033c6 <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003368:	b991      	cbnz	r1, 8003390 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 800336a:	2801      	cmp	r0, #1
 800336c:	d020      	beq.n	80033b0 <HAL_DMA_Init+0xc0>
 800336e:	f030 0102 	bics.w	r1, r0, #2
 8003372:	d128      	bne.n	80033c6 <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003374:	01e9      	lsls	r1, r5, #7
 8003376:	d526      	bpl.n	80033c6 <HAL_DMA_Init+0xd6>
 8003378:	e01d      	b.n	80033b6 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800337a:	f7ff ff15 	bl	80031a8 <HAL_GetTick>
 800337e:	1b40      	subs	r0, r0, r5
 8003380:	2805      	cmp	r0, #5
 8003382:	d9c7      	bls.n	8003314 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003384:	2320      	movs	r3, #32
 8003386:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003388:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800338a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800338e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003390:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003394:	d113      	bne.n	80033be <HAL_DMA_Init+0xce>
    switch (tmp)
 8003396:	2803      	cmp	r0, #3
 8003398:	d815      	bhi.n	80033c6 <HAL_DMA_Init+0xd6>
 800339a:	a101      	add	r1, pc, #4	; (adr r1, 80033a0 <HAL_DMA_Init+0xb0>)
 800339c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80033a0:	080033b7 	.word	0x080033b7
 80033a4:	08003375 	.word	0x08003375
 80033a8:	080033b7 	.word	0x080033b7
 80033ac:	080033b1 	.word	0x080033b1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80033b4:	d107      	bne.n	80033c6 <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80033ba:	2001      	movs	r0, #1
 80033bc:	e7e5      	b.n	800338a <HAL_DMA_Init+0x9a>
    switch (tmp)
 80033be:	2802      	cmp	r0, #2
 80033c0:	d9f9      	bls.n	80033b6 <HAL_DMA_Init+0xc6>
 80033c2:	2803      	cmp	r0, #3
 80033c4:	d0d6      	beq.n	8003374 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 80033c6:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff ff7b 	bl	80032c4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80033d0:	233f      	movs	r3, #63	; 0x3f
 80033d2:	4093      	lsls	r3, r2
 80033d4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80033d8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033da:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80033dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80033e0:	e7d5      	b.n	800338e <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 80033e2:	2001      	movs	r0, #1
 80033e4:	e7d3      	b.n	800338e <HAL_DMA_Init+0x9e>
 80033e6:	bf00      	nop
 80033e8:	f010803f 	.word	0xf010803f

080033ec <HAL_DMA_DeInit>:
{
 80033ec:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80033ee:	4605      	mov	r5, r0
 80033f0:	b320      	cbz	r0, 800343c <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80033f2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	b2dc      	uxtb	r4, r3
 80033fa:	d01d      	beq.n	8003438 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80033fc:	6803      	ldr	r3, [r0, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8003404:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8003406:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8003408:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800340a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800340c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800340e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003410:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003412:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8003414:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003416:	f7ff ff55 	bl	80032c4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800341c:	233f      	movs	r3, #63	; 0x3f
 800341e:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8003420:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8003424:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8003428:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800342e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8003430:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003434:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8003438:	4620      	mov	r0, r4
 800343a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800343c:	2401      	movs	r4, #1
 800343e:	e7fb      	b.n	8003438 <HAL_DMA_DeInit+0x4c>

08003440 <HAL_DMA_Abort>:
{
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003444:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8003446:	f7ff feaf 	bl	80031a8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800344a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800344e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8003450:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003452:	d006      	beq.n	8003462 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003458:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800345a:	2300      	movs	r3, #0
 800345c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003460:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	f022 0216 	bic.w	r2, r2, #22
 800346a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003472:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003474:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003476:	b90a      	cbnz	r2, 800347c <HAL_DMA_Abort+0x3c>
 8003478:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800347a:	b11a      	cbz	r2, 8003484 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f022 0208 	bic.w	r2, r2, #8
 8003482:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f013 0301 	ands.w	r3, r3, #1
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003496:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	408a      	lsls	r2, r1
 800349c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800349e:	2201      	movs	r2, #1
 80034a0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 80034a4:	4618      	mov	r0, r3
 80034a6:	e7d8      	b.n	800345a <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034a8:	f7ff fe7e 	bl	80031a8 <HAL_GetTick>
 80034ac:	1b40      	subs	r0, r0, r5
 80034ae:	2805      	cmp	r0, #5
 80034b0:	d9ec      	bls.n	800348c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b2:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034b4:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034b8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80034bc:	e7cd      	b.n	800345a <HAL_DMA_Abort+0x1a>

080034be <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80034be:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80034c0:	4604      	mov	r4, r0
 80034c2:	b330      	cbz	r0, 8003512 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80034c4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80034c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034cc:	b91b      	cbnz	r3, 80034d6 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80034ce:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80034d2:	f7fe f9c9 	bl	8001868 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034da:	2302      	movs	r3, #2
 80034dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80034e0:	6813      	ldr	r3, [r2, #0]
 80034e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80034e6:	430b      	orrs	r3, r1
 80034e8:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80034ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80034ec:	68a1      	ldr	r1, [r4, #8]
 80034ee:	f023 0307 	bic.w	r3, r3, #7
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80034f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80034f8:	68e1      	ldr	r1, [r4, #12]
 80034fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003502:	430b      	orrs	r3, r1
 8003504:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003506:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003508:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800350a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800350c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8003510:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003512:	2001      	movs	r0, #1
 8003514:	e7fc      	b.n	8003510 <HAL_DMA2D_Init+0x52>

08003516 <HAL_DMA2D_LineEventCallback>:
 8003516:	4770      	bx	lr

08003518 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8003518:	4770      	bx	lr

0800351a <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800351a:	6803      	ldr	r3, [r0, #0]
{
 800351c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800351e:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003520:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003522:	07f2      	lsls	r2, r6, #31
{
 8003524:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003526:	d514      	bpl.n	8003552 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003528:	05e9      	lsls	r1, r5, #23
 800352a:	d512      	bpl.n	8003552 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003532:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003534:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800353c:	2201      	movs	r2, #1
 800353e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003540:	2304      	movs	r3, #4
 8003542:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003546:	2300      	movs	r3, #0
 8003548:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800354c:	6943      	ldr	r3, [r0, #20]
 800354e:	b103      	cbz	r3, 8003552 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003550:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003552:	06b2      	lsls	r2, r6, #26
 8003554:	d516      	bpl.n	8003584 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003556:	04ab      	lsls	r3, r5, #18
 8003558:	d514      	bpl.n	8003584 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003562:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003564:	2220      	movs	r2, #32
 8003566:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003570:	2304      	movs	r3, #4
 8003572:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003576:	2300      	movs	r3, #0
 8003578:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800357c:	6963      	ldr	r3, [r4, #20]
 800357e:	b10b      	cbz	r3, 8003584 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003580:	4620      	mov	r0, r4
 8003582:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003584:	0730      	lsls	r0, r6, #28
 8003586:	d516      	bpl.n	80035b6 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003588:	0529      	lsls	r1, r5, #20
 800358a:	d514      	bpl.n	80035b6 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003594:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003596:	2208      	movs	r2, #8
 8003598:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800359a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800359c:	f043 0304 	orr.w	r3, r3, #4
 80035a0:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035a2:	2304      	movs	r3, #4
 80035a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035a8:	2300      	movs	r3, #0
 80035aa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80035ae:	6963      	ldr	r3, [r4, #20]
 80035b0:	b10b      	cbz	r3, 80035b6 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80035b2:	4620      	mov	r0, r4
 80035b4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80035b6:	0772      	lsls	r2, r6, #29
 80035b8:	d50b      	bpl.n	80035d2 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80035ba:	056b      	lsls	r3, r5, #21
 80035bc:	d509      	bpl.n	80035d2 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80035c8:	2204      	movs	r2, #4
 80035ca:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7ff ffa2 	bl	8003516 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80035d2:	07b0      	lsls	r0, r6, #30
 80035d4:	d514      	bpl.n	8003600 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80035d6:	05a9      	lsls	r1, r5, #22
 80035d8:	d512      	bpl.n	8003600 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80035e4:	2202      	movs	r2, #2
 80035e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80035e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035ea:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035f2:	2300      	movs	r3, #0
 80035f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	b10b      	cbz	r3, 8003600 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80035fc:	4620      	mov	r0, r4
 80035fe:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003600:	06f2      	lsls	r2, r6, #27
 8003602:	d513      	bpl.n	800362c <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003604:	04eb      	lsls	r3, r5, #19
 8003606:	d511      	bpl.n	800362c <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003610:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003612:	2210      	movs	r2, #16
 8003614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003616:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003618:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800361a:	2301      	movs	r3, #1
 800361c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003620:	2300      	movs	r3, #0
 8003622:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003626:	4620      	mov	r0, r4
 8003628:	f7ff ff76 	bl	8003518 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800362c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003630 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003632:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003636:	2b01      	cmp	r3, #1
 8003638:	f04f 0302 	mov.w	r3, #2
 800363c:	d02b      	beq.n	8003696 <HAL_DMA2D_ConfigLayer+0x66>
 800363e:	2201      	movs	r2, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003640:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8003644:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003648:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800364c:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8003650:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003652:	4f18      	ldr	r7, [pc, #96]	; (80036b4 <HAL_DMA2D_ConfigLayer+0x84>)
 8003654:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003658:	3c09      	subs	r4, #9
 800365a:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800365c:	bf9c      	itt	ls
 800365e:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 8003662:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003664:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003668:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800366a:	bf88      	it	hi
 800366c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003670:	b999      	cbnz	r1, 800369a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003672:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003674:	4039      	ands	r1, r7
 8003676:	430a      	orrs	r2, r1
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800367a:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800367c:	6982      	ldr	r2, [r0, #24]
 800367e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003680:	d803      	bhi.n	800368a <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003682:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003684:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003688:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800368a:	2301      	movs	r3, #1
 800368c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003690:	2300      	movs	r3, #0
 8003692:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8003696:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	4039      	ands	r1, r7
 800369e:	430a      	orrs	r2, r1
 80036a0:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80036a2:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80036a4:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80036a6:	6992      	ldr	r2, [r2, #24]
 80036a8:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80036aa:	bf9c      	itt	ls
 80036ac:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 80036b0:	621d      	strls	r5, [r3, #32]
 80036b2:	e7ea      	b.n	800368a <HAL_DMA2D_ConfigLayer+0x5a>
 80036b4:	00fcfff0 	.word	0x00fcfff0

080036b8 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 80036b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036bc:	4607      	mov	r7, r0
 80036be:	460d      	mov	r5, r1
 80036c0:	4614      	mov	r4, r2
 80036c2:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80036c4:	f7ff fd70 	bl	80031a8 <HAL_GetTick>
 80036c8:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80036ce:	07db      	lsls	r3, r3, #31
 80036d0:	d50a      	bpl.n	80036e8 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80036d2:	9906      	ldr	r1, [sp, #24]
 80036d4:	ea44 2306 	orr.w	r3, r4, r6, lsl #8
 80036d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80036dc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80036e0:	66d3      	str	r3, [r2, #108]	; 0x6c

  return HAL_OK;
 80036e2:	2000      	movs	r0, #0
}
 80036e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80036e8:	f7ff fd5e 	bl	80031a8 <HAL_GetTick>
 80036ec:	eba0 0008 	sub.w	r0, r0, r8
 80036f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036f4:	d9e9      	bls.n	80036ca <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 80036f6:	2003      	movs	r0, #3
 80036f8:	e7f4      	b.n	80036e4 <DSI_ShortWrite.constprop.0+0x2c>

080036fa <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036fa:	7c03      	ldrb	r3, [r0, #16]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d05d      	beq.n	80037bc <HAL_DSI_ConfigErrorMonitor+0xc2>

  hdsi->Instance->IER[0U] = 0U;
 8003700:	6803      	ldr	r3, [r0, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003708:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800370c:	07ca      	lsls	r2, r1, #31
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800370e:	bf48      	it	mi
 8003710:	f8d3 20c4 	ldrmi.w	r2, [r3, #196]	; 0xc4
  hdsi->ErrorMsk = ActiveErrors;
 8003714:	6181      	str	r1, [r0, #24]
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003716:	bf42      	ittt	mi
 8003718:	ea6f 4212 	mvnmi.w	r2, r2, lsr #16
 800371c:	ea6f 4202 	mvnmi.w	r2, r2, lsl #16
 8003720:	f8c3 20c4 	strmi.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003724:	078a      	lsls	r2, r1, #30
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003726:	bf42      	ittt	mi
 8003728:	f8d3 20c4 	ldrmi.w	r2, [r3, #196]	; 0xc4
 800372c:	f442 12f8 	orrmi.w	r2, r2, #2031616	; 0x1f0000
 8003730:	f8c3 20c4 	strmi.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003734:	074a      	lsls	r2, r1, #29
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003736:	bf42      	ittt	mi
 8003738:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 800373c:	f042 0201 	orrmi.w	r2, r2, #1
 8003740:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003744:	070a      	lsls	r2, r1, #28
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003746:	bf42      	ittt	mi
 8003748:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 800374c:	f042 0202 	orrmi.w	r2, r2, #2
 8003750:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003754:	06ca      	lsls	r2, r1, #27
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003756:	bf42      	ittt	mi
 8003758:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 800375c:	f042 020c 	orrmi.w	r2, r2, #12
 8003760:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003764:	068a      	lsls	r2, r1, #26
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003766:	bf42      	ittt	mi
 8003768:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 800376c:	f042 0210 	orrmi.w	r2, r2, #16
 8003770:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003774:	064a      	lsls	r2, r1, #25
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003776:	bf42      	ittt	mi
 8003778:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 800377c:	f042 0220 	orrmi.w	r2, r2, #32
 8003780:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003784:	060a      	lsls	r2, r1, #24
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003786:	bf42      	ittt	mi
 8003788:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 800378c:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 8003790:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003794:	05ca      	lsls	r2, r1, #23
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003796:	bf42      	ittt	mi
 8003798:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 800379c:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 80037a0:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80037a4:	058a      	lsls	r2, r1, #22
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80037a6:	bf42      	ittt	mi
 80037a8:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 80037ac:	f442 52f8 	orrmi.w	r2, r2, #7936	; 0x1f00
 80037b0:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80037b4:	2300      	movs	r3, #0
 80037b6:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80037b8:	4618      	mov	r0, r3
 80037ba:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80037bc:	2002      	movs	r0, #2
}
 80037be:	4770      	bx	lr

080037c0 <HAL_DSI_Init>:
{
 80037c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037c2:	460d      	mov	r5, r1
  if (hdsi == NULL)
 80037c4:	4604      	mov	r4, r0
 80037c6:	2800      	cmp	r0, #0
 80037c8:	f000 80a9 	beq.w	800391e <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80037cc:	7c43      	ldrb	r3, [r0, #17]
 80037ce:	b90b      	cbnz	r3, 80037d4 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 80037d0:	f7fe f86c 	bl	80018ac <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80037d4:	2303      	movs	r3, #3
 80037d6:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80037d8:	2300      	movs	r3, #0
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80037e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80037e6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80037ea:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80037ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80037f6:	f7ff fcd7 	bl	80031a8 <HAL_GetTick>
 80037fa:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003802:	04d9      	lsls	r1, r3, #19
 8003804:	d57a      	bpl.n	80038fc <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003806:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800380a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800380e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003812:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003816:	e9d5 0300 	ldrd	r0, r3, [r5]
 800381a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800381c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003820:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003822:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003826:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800382a:	430b      	orrs	r3, r1
 800382c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003830:	2300      	movs	r3, #0
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003840:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	9301      	str	r3, [sp, #4]
  HAL_Delay(1);
 800384a:	2001      	movs	r0, #1
  __HAL_DSI_PLL_ENABLE(hdsi);
 800384c:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800384e:	f7ff fcb1 	bl	80031b4 <HAL_Delay>
  tickstart = HAL_GetTick();
 8003852:	f7ff fca9 	bl	80031a8 <HAL_GetTick>
 8003856:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800385e:	05d2      	lsls	r2, r2, #23
 8003860:	d556      	bpl.n	8003910 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003862:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003866:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003868:	f042 0206 	orr.w	r2, r2, #6
 800386c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003870:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003874:	f022 0203 	bic.w	r2, r2, #3
 8003878:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800387c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003880:	430a      	orrs	r2, r1
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800388a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800388e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003890:	f022 0203 	bic.w	r2, r2, #3
 8003894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003898:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800389c:	430a      	orrs	r2, r1
 800389e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80038a2:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80038a4:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80038a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038aa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80038b2:	686a      	ldr	r2, [r5, #4]
 80038b4:	491b      	ldr	r1, [pc, #108]	; (8003924 <HAL_DSI_Init+0x164>)
 80038b6:	2a01      	cmp	r2, #1
 80038b8:	bf38      	it	cc
 80038ba:	2201      	movcc	r2, #1
 80038bc:	434a      	muls	r2, r1
 80038be:	68a9      	ldr	r1, [r5, #8]
 80038c0:	f001 0103 	and.w	r1, r1, #3
 80038c4:	408a      	lsls	r2, r1
 80038c6:	6829      	ldr	r1, [r5, #0]
 80038c8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80038cc:	4341      	muls	r1, r0
 80038ce:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80038d2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80038d6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80038da:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80038de:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 80038e2:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80038e4:	430a      	orrs	r2, r1
 80038e6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 80038ea:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80038ee:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 80038f2:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80038f4:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 80038f6:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 80038f8:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 80038fa:	e007      	b.n	800390c <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80038fc:	f7ff fc54 	bl	80031a8 <HAL_GetTick>
 8003900:	1b80      	subs	r0, r0, r6
 8003902:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003906:	f67f af79 	bls.w	80037fc <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800390a:	2003      	movs	r0, #3
}
 800390c:	b002      	add	sp, #8
 800390e:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003910:	f7ff fc4a 	bl	80031a8 <HAL_GetTick>
 8003914:	1b80      	subs	r0, r0, r6
 8003916:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800391a:	d99d      	bls.n	8003858 <HAL_DSI_Init+0x98>
 800391c:	e7f5      	b.n	800390a <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 800391e:	2001      	movs	r0, #1
 8003920:	e7f4      	b.n	800390c <HAL_DSI_Init+0x14c>
 8003922:	bf00      	nop
 8003924:	003d0900 	.word	0x003d0900

08003928 <HAL_DSI_ErrorCallback>:
 8003928:	4770      	bx	lr

0800392a <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800392a:	6803      	ldr	r3, [r0, #0]
 800392c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003930:	07d1      	lsls	r1, r2, #31
{
 8003932:	b510      	push	{r4, lr}
 8003934:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003936:	d508      	bpl.n	800394a <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003938:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800393c:	07d2      	lsls	r2, r2, #31
 800393e:	d504      	bpl.n	800394a <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003940:	2201      	movs	r2, #1
 8003942:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003946:	f7fd f90d 	bl	8000b64 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003950:	0791      	lsls	r1, r2, #30
 8003952:	d509      	bpl.n	8003968 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003954:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003958:	0792      	lsls	r2, r2, #30
 800395a:	d505      	bpl.n	8003968 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800395c:	2202      	movs	r2, #2
 800395e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003962:	4620      	mov	r0, r4
 8003964:	f7fd f932 	bl	8000bcc <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003968:	69a3      	ldr	r3, [r4, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d04e      	beq.n	8003a0c <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800396e:	6821      	ldr	r1, [r4, #0]
 8003970:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003974:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 8003978:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800397a:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800397e:	f8d1 10c8 	ldr.w	r1, [r1, #200]	; 0xc8
 8003982:	400b      	ands	r3, r1

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003984:	b291      	uxth	r1, r2
 8003986:	b119      	cbz	r1, 8003990 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003988:	6961      	ldr	r1, [r4, #20]
 800398a:	f041 0101 	orr.w	r1, r1, #1
 800398e:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003990:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003994:	bf1e      	ittt	ne
 8003996:	6962      	ldrne	r2, [r4, #20]
 8003998:	f042 0202 	orrne.w	r2, r2, #2
 800399c:	6162      	strne	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800399e:	07d8      	lsls	r0, r3, #31
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80039a0:	bf42      	ittt	mi
 80039a2:	6962      	ldrmi	r2, [r4, #20]
 80039a4:	f042 0204 	orrmi.w	r2, r2, #4
 80039a8:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80039aa:	0799      	lsls	r1, r3, #30
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80039ac:	bf42      	ittt	mi
 80039ae:	6962      	ldrmi	r2, [r4, #20]
 80039b0:	f042 0208 	orrmi.w	r2, r2, #8
 80039b4:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80039b6:	f013 0f0c 	tst.w	r3, #12
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80039ba:	bf1e      	ittt	ne
 80039bc:	6962      	ldrne	r2, [r4, #20]
 80039be:	f042 0210 	orrne.w	r2, r2, #16
 80039c2:	6162      	strne	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80039c4:	06da      	lsls	r2, r3, #27
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80039c6:	bf42      	ittt	mi
 80039c8:	6962      	ldrmi	r2, [r4, #20]
 80039ca:	f042 0220 	orrmi.w	r2, r2, #32
 80039ce:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80039d0:	0698      	lsls	r0, r3, #26
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80039d2:	bf42      	ittt	mi
 80039d4:	6962      	ldrmi	r2, [r4, #20]
 80039d6:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 80039da:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80039dc:	0659      	lsls	r1, r3, #25
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80039de:	bf42      	ittt	mi
 80039e0:	6962      	ldrmi	r2, [r4, #20]
 80039e2:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 80039e6:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80039e8:	061a      	lsls	r2, r3, #24
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80039ea:	bf42      	ittt	mi
 80039ec:	6962      	ldrmi	r2, [r4, #20]
 80039ee:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 80039f2:	6162      	strmi	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80039f4:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80039f8:	bf1e      	ittt	ne
 80039fa:	6963      	ldrne	r3, [r4, #20]
 80039fc:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 8003a00:	6163      	strne	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003a02:	6963      	ldr	r3, [r4, #20]
 8003a04:	b113      	cbz	r3, 8003a0c <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff ff8e 	bl	8003928 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003a0c:	bd10      	pop	{r4, pc}

08003a0e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a0e:	7c03      	ldrb	r3, [r0, #16]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d00b      	beq.n	8003a2c <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003a14:	6803      	ldr	r3, [r0, #0]
 8003a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a18:	f022 0203 	bic.w	r2, r2, #3
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a20:	4311      	orrs	r1, r2
 8003a22:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a24:	2300      	movs	r3, #0
 8003a26:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003a28:	4618      	mov	r0, r3
 8003a2a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003a2c:	2002      	movs	r0, #2
}
 8003a2e:	4770      	bx	lr

08003a30 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8003a30:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a32:	7c03      	ldrb	r3, [r0, #16]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d06a      	beq.n	8003b0e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003a38:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003a3a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003a44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003a50:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	f022 0203 	bic.w	r2, r2, #3
 8003a62:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	4322      	orrs	r2, r4
 8003a68:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	f022 0207 	bic.w	r2, r2, #7
 8003a70:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003a72:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8003a76:	432a      	orrs	r2, r5
 8003a78:	694d      	ldr	r5, [r1, #20]
 8003a7a:	695c      	ldr	r4, [r3, #20]
 8003a7c:	432a      	orrs	r2, r5
 8003a7e:	4322      	orrs	r2, r4
 8003a80:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003a82:	691a      	ldr	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003a84:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003a86:	f022 020f 	bic.w	r2, r2, #15
 8003a8a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	4322      	orrs	r2, r4
 8003a90:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003a92:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003a96:	f022 020e 	bic.w	r2, r2, #14
 8003a9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8003a9e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003aa2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8003aa6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003aaa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003aac:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003aae:	0c12      	lsrs	r2, r2, #16
 8003ab0:	0412      	lsls	r2, r2, #16
 8003ab2:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003ab4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ab6:	4322      	orrs	r2, r4
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003aba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003abe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ac2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003ac6:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8003aca:	432a      	orrs	r2, r5
 8003acc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8003ace:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8003ad2:	432a      	orrs	r2, r5
 8003ad4:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003ad6:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003ad8:	432a      	orrs	r2, r5
 8003ada:	4322      	orrs	r2, r4
 8003adc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003ae0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003ae8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003aea:	430a      	orrs	r2, r1
 8003aec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003aee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003afa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003afe:	f042 0202 	orr.w	r2, r2, #2
 8003b02:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b06:	2300      	movs	r3, #0
 8003b08:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003b0a:	4618      	mov	r0, r3
}
 8003b0c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8003b0e:	2002      	movs	r0, #2
 8003b10:	e7fc      	b.n	8003b0c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08003b14 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003b14:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b16:	7c03      	ldrb	r3, [r0, #16]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d02a      	beq.n	8003b72 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003b1c:	6802      	ldr	r2, [r0, #0]
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_DSI_ConfigCommand+0x64>)
 8003b20:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8003b22:	4023      	ands	r3, r4
 8003b24:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003b26:	e9d1 3500 	ldrd	r3, r5, [r1]
 8003b2a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8003b2c:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003b2e:	6e94      	ldr	r4, [r2, #104]	; 0x68
                           LPCmd->LPGenShortWriteOneP | \
 8003b30:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8003b32:	68cd      	ldr	r5, [r1, #12]
 8003b34:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8003b36:	690d      	ldr	r5, [r1, #16]
 8003b38:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8003b3a:	694d      	ldr	r5, [r1, #20]
 8003b3c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8003b3e:	698d      	ldr	r5, [r1, #24]
 8003b40:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8003b42:	69cd      	ldr	r5, [r1, #28]
 8003b44:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8003b46:	6a0d      	ldr	r5, [r1, #32]
 8003b48:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8003b4a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8003b4c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8003b4e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8003b50:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8003b52:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003b54:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8003b56:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003b58:	4323      	orrs	r3, r4
 8003b5a:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003b5c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003b5e:	f023 0302 	bic.w	r3, r3, #2
 8003b62:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003b64:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003b66:	430b      	orrs	r3, r1
 8003b68:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003b6e:	4618      	mov	r0, r3
}
 8003b70:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8003b72:	2002      	movs	r0, #2
 8003b74:	e7fc      	b.n	8003b70 <HAL_DSI_ConfigCommand+0x5c>
 8003b76:	bf00      	nop
 8003b78:	fef080ff 	.word	0xfef080ff

08003b7c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b7c:	7c03      	ldrb	r3, [r0, #16]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d00b      	beq.n	8003b9a <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b86:	f022 021f 	bic.w	r2, r2, #31
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8e:	4311      	orrs	r1, r2
 8003b90:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b92:	2300      	movs	r3, #0
 8003b94:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003b96:	4618      	mov	r0, r3
 8003b98:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003b9a:	2002      	movs	r0, #2
}
 8003b9c:	4770      	bx	lr

08003b9e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003b9e:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ba0:	7c03      	ldrb	r3, [r0, #16]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d035      	beq.n	8003c12 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003ba6:	e9d1 4300 	ldrd	r4, r3, [r1]
 8003baa:	429c      	cmp	r4, r3
 8003bac:	bf38      	it	cc
 8003bae:	461c      	movcc	r4, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003bb0:	6803      	ldr	r3, [r0, #0]
 8003bb2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003bb6:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003bba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003bbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003bc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003bc6:	4322      	orrs	r2, r4
 8003bc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003bcc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003bd0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003bd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003bd8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003bdc:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003bde:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8003be2:	690d      	ldr	r5, [r1, #16]
 8003be4:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003be8:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003bea:	432a      	orrs	r2, r5
 8003bec:	4322      	orrs	r2, r4
 8003bee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003bf2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003bf6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003bfa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003bfe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003c0e:	4618      	mov	r0, r3
}
 8003c10:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8003c12:	2002      	movs	r0, #2
 8003c14:	e7fc      	b.n	8003c10 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08003c18 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003c18:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c1a:	7c03      	ldrb	r3, [r0, #16]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d05c      	beq.n	8003cda <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003c20:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003c22:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003c24:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003c26:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003c28:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003c2c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8003c34:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003c36:	6f9a      	ldr	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003c38:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003c3e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003c40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003c44:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003c46:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8003c4a:	4014      	ands	r4, r2
 8003c4c:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003c4e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8003c50:	432c      	orrs	r4, r5
 8003c52:	679c      	str	r4, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003c54:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003c56:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003c58:	4014      	ands	r4, r2
 8003c5a:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003c5c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8003c5e:	432c      	orrs	r4, r5
 8003c60:	67dc      	str	r4, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003c62:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003c66:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003c68:	4014      	ands	r4, r2
 8003c6a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003c6e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8003c72:	432c      	orrs	r4, r5
 8003c74:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003c78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003c7c:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003c7e:	4014      	ands	r4, r2
 8003c80:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003c84:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8003c88:	432c      	orrs	r4, r5
 8003c8a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003c8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8003c92:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003c96:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003c9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8003c9e:	698d      	ldr	r5, [r1, #24]
 8003ca0:	432c      	orrs	r4, r5
 8003ca2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003ca6:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003caa:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003cac:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003cae:	4014      	ands	r4, r2
 8003cb0:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003cb4:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8003cb8:	432c      	orrs	r4, r5
 8003cba:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003cbe:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8003cc2:	4022      	ands	r2, r4
 8003cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003cc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003cd6:	4618      	mov	r0, r3
}
 8003cd8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8003cda:	2002      	movs	r0, #2
 8003cdc:	e7fc      	b.n	8003cd8 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8003cde:	bf00      	nop
 8003ce0:	ffff0000 	.word	0xffff0000

08003ce4 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ce4:	7c03      	ldrb	r3, [r0, #16]
 8003ce6:	2b01      	cmp	r3, #1
{
 8003ce8:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8003cea:	d01c      	beq.n	8003d26 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003cec:	6802      	ldr	r2, [r0, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6851      	ldr	r1, [r2, #4]
 8003cf4:	f041 0101 	orr.w	r1, r1, #1
 8003cf8:	6051      	str	r1, [r2, #4]
 8003cfa:	6851      	ldr	r1, [r2, #4]
 8003cfc:	f001 0101 	and.w	r1, r1, #1
 8003d00:	9100      	str	r1, [sp, #0]
 8003d02:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8003d0a:	f041 0108 	orr.w	r1, r1, #8
 8003d0e:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8003d12:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d16:	7403      	strb	r3, [r0, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003d18:	f002 0208 	and.w	r2, r2, #8
 8003d1c:	9201      	str	r2, [sp, #4]
 8003d1e:	9a01      	ldr	r2, [sp, #4]

  return HAL_OK;
 8003d20:	4618      	mov	r0, r3
}
 8003d22:	b002      	add	sp, #8
 8003d24:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003d26:	2002      	movs	r0, #2
 8003d28:	e7fb      	b.n	8003d22 <HAL_DSI_Start+0x3e>

08003d2a <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d2a:	7c03      	ldrb	r3, [r0, #16]
 8003d2c:	2b01      	cmp	r3, #1

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8003d2e:	bf1f      	itttt	ne
 8003d30:	6802      	ldrne	r2, [r0, #0]
 8003d32:	f8d2 3404 	ldrne.w	r3, [r2, #1028]	; 0x404
 8003d36:	f043 0304 	orrne.w	r3, r3, #4
 8003d3a:	f8c2 3404 	strne.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d3e:	bf1d      	ittte	ne
 8003d40:	2300      	movne	r3, #0
 8003d42:	7403      	strbne	r3, [r0, #16]

  return HAL_OK;
 8003d44:	4618      	movne	r0, r3
  __HAL_LOCK(hdsi);
 8003d46:	2002      	moveq	r0, #2
}
 8003d48:	4770      	bx	lr

08003d4a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003d4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d4c:	7c05      	ldrb	r5, [r0, #16]
 8003d4e:	2d01      	cmp	r5, #1
{
 8003d50:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8003d52:	d009      	beq.n	8003d68 <HAL_DSI_ShortWrite+0x1e>
 8003d54:	2501      	movs	r5, #1
 8003d56:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003d58:	9d06      	ldr	r5, [sp, #24]
 8003d5a:	9500      	str	r5, [sp, #0]
 8003d5c:	f7ff fcac 	bl	80036b8 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d60:	2300      	movs	r3, #0
 8003d62:	7423      	strb	r3, [r4, #16]

  return status;
}
 8003d64:	b003      	add	sp, #12
 8003d66:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8003d68:	2002      	movs	r0, #2
 8003d6a:	e7fb      	b.n	8003d64 <HAL_DSI_ShortWrite+0x1a>

08003d6c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d72:	7c03      	ldrb	r3, [r0, #16]
 8003d74:	2b01      	cmp	r3, #1
{
 8003d76:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	460f      	mov	r7, r1
 8003d7e:	4615      	mov	r5, r2
  __HAL_LOCK(hdsi);
 8003d80:	d055      	beq.n	8003e2e <HAL_DSI_LongWrite+0xc2>
 8003d82:	2301      	movs	r3, #1
 8003d84:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d86:	f7ff fa0f 	bl	80031a8 <HAL_GetTick>
 8003d8a:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003d8c:	f8d6 c000 	ldr.w	ip, [r6]
 8003d90:	f8dc 3074 	ldr.w	r3, [ip, #116]	; 0x74
 8003d94:	f013 0a01 	ands.w	sl, r3, #1
 8003d98:	d01c      	beq.n	8003dd4 <HAL_DSI_LongWrite+0x68>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003d9a:	2c03      	cmp	r4, #3
 8003d9c:	4621      	mov	r1, r4

  for (count = 0U; count < nbBytes; count++)
 8003d9e:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003da2:	bf28      	it	cs
 8003da4:	2103      	movcs	r1, #3
  for (count = 0U; count < nbBytes; count++)
 8003da6:	428a      	cmp	r2, r1
 8003da8:	d120      	bne.n	8003dec <HAL_DSI_LongWrite+0x80>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8003daa:	1aa3      	subs	r3, r4, r2
  hdsi->Instance->GPDR = fifoword;
 8003dac:	f8cc 9070 	str.w	r9, [ip, #112]	; 0x70
  pparams += nbBytes;
 8003db0:	4442      	add	r2, r8
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003db2:	bb1b      	cbnz	r3, 8003dfc <HAL_DSI_LongWrite+0x90>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003db4:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003db6:	0222      	lsls	r2, r4, #8
 8003db8:	ea45 1187 	orr.w	r1, r5, r7, lsl #6
 8003dbc:	b292      	uxth	r2, r2
 8003dbe:	0224      	lsls	r4, r4, #8
 8003dc0:	ea41 0502 	orr.w	r5, r1, r2
 8003dc4:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8003dc8:	4325      	orrs	r5, r4
 8003dca:	f8cc 506c 	str.w	r5, [ip, #108]	; 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8003dce:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 8003dd0:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8003dd2:	e009      	b.n	8003de8 <HAL_DSI_LongWrite+0x7c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003dd4:	f7ff f9e8 	bl	80031a8 <HAL_GetTick>
 8003dd8:	eba0 000b 	sub.w	r0, r0, fp
 8003ddc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003de0:	d9d4      	bls.n	8003d8c <HAL_DSI_LongWrite+0x20>
      __HAL_UNLOCK(hdsi);
 8003de2:	f886 a010 	strb.w	sl, [r6, #16]
      return HAL_TIMEOUT;
 8003de6:	2003      	movs	r0, #3
}
 8003de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003dec:	f818 3002 	ldrb.w	r3, [r8, r2]
 8003df0:	3201      	adds	r2, #1
 8003df2:	00d0      	lsls	r0, r2, #3
 8003df4:	4083      	lsls	r3, r0
 8003df6:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8003dfa:	e7d4      	b.n	8003da6 <HAL_DSI_LongWrite+0x3a>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003dfc:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8003dfe:	f04f 0000 	mov.w	r0, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003e02:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 8003e04:	4601      	mov	r1, r0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003e06:	bf28      	it	cs
 8003e08:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003e0c:	f812 8001 	ldrb.w	r8, [r2, r1]
 8003e10:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8003e14:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003e16:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8003e1a:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003e1c:	ea40 0008 	orr.w	r0, r0, r8
    for (count = 0U; count < nbBytes; count++)
 8003e20:	d1f4      	bne.n	8003e0c <HAL_DSI_LongWrite+0xa0>
    hdsi->Instance->GPDR = fifoword;
 8003e22:	f8cc 0070 	str.w	r0, [ip, #112]	; 0x70
    uicounter -= nbBytes;
 8003e26:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8003e2a:	4472      	add	r2, lr
 8003e2c:	e7c1      	b.n	8003db2 <HAL_DSI_LongWrite+0x46>
  __HAL_LOCK(hdsi);
 8003e2e:	2002      	movs	r0, #2
 8003e30:	e7da      	b.n	8003de8 <HAL_DSI_LongWrite+0x7c>

08003e32 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e32:	7c03      	ldrb	r3, [r0, #16]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d010      	beq.n	8003e5a <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003e38:	6803      	ldr	r3, [r0, #0]
 8003e3a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003e3e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003e42:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003e46:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003e4a:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 8003e4e:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e52:	2300      	movs	r3, #0
 8003e54:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003e56:	4618      	mov	r0, r3
 8003e58:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003e5a:	2002      	movs	r0, #2
}
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e64:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8004028 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e68:	4a6d      	ldr	r2, [pc, #436]	; (8004020 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e6c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8003e6e:	2401      	movs	r4, #1
 8003e70:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e72:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8003e76:	43ac      	bics	r4, r5
 8003e78:	f040 80b9 	bne.w	8003fee <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7c:	684d      	ldr	r5, [r1, #4]
 8003e7e:	f005 0403 	and.w	r4, r5, #3
 8003e82:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e86:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e88:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e8a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e90:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e94:	d834      	bhi.n	8003f00 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8003e96:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e98:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e9c:	68cf      	ldr	r7, [r1, #12]
 8003e9e:	fa07 f708 	lsl.w	r7, r7, r8
 8003ea2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003ea6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ea8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eaa:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eae:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003eb2:	409f      	lsls	r7, r3
 8003eb4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003eb8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003eba:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ebc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ec0:	688f      	ldr	r7, [r1, #8]
 8003ec2:	fa07 f708 	lsl.w	r7, r7, r8
 8003ec6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8003ecc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ece:	d119      	bne.n	8003f04 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8003ed0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003ed4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ed8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003edc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ee0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003ee4:	f04f 0e0f 	mov.w	lr, #15
 8003ee8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003eec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ef0:	690f      	ldr	r7, [r1, #16]
 8003ef2:	fa07 f70b 	lsl.w	r7, r7, fp
 8003ef6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003efa:	f8ca 7020 	str.w	r7, [sl, #32]
 8003efe:	e001      	b.n	8003f04 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f00:	2c03      	cmp	r4, #3
 8003f02:	d1da      	bne.n	8003eba <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8003f04:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f06:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f0a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f0c:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f0e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003f12:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f14:	d06b      	beq.n	8003fee <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f16:	f04f 0a00 	mov.w	sl, #0
 8003f1a:	f8cd a004 	str.w	sl, [sp, #4]
 8003f1e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f22:	4c40      	ldr	r4, [pc, #256]	; (8004024 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f24:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8003f28:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8003f2c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8003f30:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003f34:	9601      	str	r6, [sp, #4]
 8003f36:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f38:	f023 0603 	bic.w	r6, r3, #3
 8003f3c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003f40:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f44:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f48:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f4c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003f50:	270f      	movs	r7, #15
 8003f52:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f56:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f58:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f5c:	d04e      	beq.n	8003ffc <HAL_GPIO_Init+0x19c>
 8003f5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f62:	42a0      	cmp	r0, r4
 8003f64:	d04c      	beq.n	8004000 <HAL_GPIO_Init+0x1a0>
 8003f66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f6a:	42a0      	cmp	r0, r4
 8003f6c:	d04a      	beq.n	8004004 <HAL_GPIO_Init+0x1a4>
 8003f6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f72:	42a0      	cmp	r0, r4
 8003f74:	d048      	beq.n	8004008 <HAL_GPIO_Init+0x1a8>
 8003f76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f7a:	42a0      	cmp	r0, r4
 8003f7c:	d046      	beq.n	800400c <HAL_GPIO_Init+0x1ac>
 8003f7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f82:	42a0      	cmp	r0, r4
 8003f84:	d044      	beq.n	8004010 <HAL_GPIO_Init+0x1b0>
 8003f86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f8a:	42a0      	cmp	r0, r4
 8003f8c:	d042      	beq.n	8004014 <HAL_GPIO_Init+0x1b4>
 8003f8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f92:	42a0      	cmp	r0, r4
 8003f94:	d040      	beq.n	8004018 <HAL_GPIO_Init+0x1b8>
 8003f96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f9a:	42a0      	cmp	r0, r4
 8003f9c:	d03e      	beq.n	800401c <HAL_GPIO_Init+0x1bc>
 8003f9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003fa2:	42a0      	cmp	r0, r4
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2409      	moveq	r4, #9
 8003fa8:	240a      	movne	r4, #10
 8003faa:	fa04 f40e 	lsl.w	r4, r4, lr
 8003fae:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8003fb2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003fb4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fb8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8003fba:	bf54      	ite	pl
 8003fbc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003fbe:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8003fc2:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8003fc4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fc6:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8003fc8:	bf54      	ite	pl
 8003fca:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003fcc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8003fd0:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8003fd2:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fd4:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8003fd6:	bf54      	ite	pl
 8003fd8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003fda:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8003fde:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe2:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8003fe4:	bf54      	ite	pl
 8003fe6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003fe8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8003fec:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	3301      	adds	r3, #1
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	f47f af3b 	bne.w	8003e6c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003ff6:	b003      	add	sp, #12
 8003ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ffc:	4654      	mov	r4, sl
 8003ffe:	e7d4      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 8004000:	2401      	movs	r4, #1
 8004002:	e7d2      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 8004004:	2402      	movs	r4, #2
 8004006:	e7d0      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 8004008:	2403      	movs	r4, #3
 800400a:	e7ce      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 800400c:	2404      	movs	r4, #4
 800400e:	e7cc      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 8004010:	2405      	movs	r4, #5
 8004012:	e7ca      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 8004014:	2406      	movs	r4, #6
 8004016:	e7c8      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 8004018:	2407      	movs	r4, #7
 800401a:	e7c6      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 800401c:	2408      	movs	r4, #8
 800401e:	e7c4      	b.n	8003faa <HAL_GPIO_Init+0x14a>
 8004020:	40013c00 	.word	0x40013c00
 8004024:	40020000 	.word	0x40020000
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004030:	4c49      	ldr	r4, [pc, #292]	; (8004158 <HAL_GPIO_DeInit+0x12c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004032:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004160 <HAL_GPIO_DeInit+0x134>
 8004036:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8004164 <HAL_GPIO_DeInit+0x138>
 800403a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004168 <HAL_GPIO_DeInit+0x13c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800403e:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8004040:	2301      	movs	r3, #1
 8004042:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8004046:	ea3e 0501 	bics.w	r5, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800404a:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 800404e:	d16c      	bne.n	800412a <HAL_GPIO_DeInit+0xfe>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004050:	f022 0503 	bic.w	r5, r2, #3
 8004054:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004058:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800405c:	4b3f      	ldr	r3, [pc, #252]	; (800415c <HAL_GPIO_DeInit+0x130>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800405e:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004062:	f002 0c03 	and.w	ip, r2, #3
 8004066:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800406a:	260f      	movs	r6, #15
 800406c:	fa06 f60c 	lsl.w	r6, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004070:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004072:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004076:	d05d      	beq.n	8004134 <HAL_GPIO_DeInit+0x108>
 8004078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800407c:	4298      	cmp	r0, r3
 800407e:	d05b      	beq.n	8004138 <HAL_GPIO_DeInit+0x10c>
 8004080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004084:	4298      	cmp	r0, r3
 8004086:	d059      	beq.n	800413c <HAL_GPIO_DeInit+0x110>
 8004088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408c:	4298      	cmp	r0, r3
 800408e:	d057      	beq.n	8004140 <HAL_GPIO_DeInit+0x114>
 8004090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004094:	4298      	cmp	r0, r3
 8004096:	d055      	beq.n	8004144 <HAL_GPIO_DeInit+0x118>
 8004098:	4548      	cmp	r0, r9
 800409a:	d055      	beq.n	8004148 <HAL_GPIO_DeInit+0x11c>
 800409c:	4550      	cmp	r0, sl
 800409e:	d055      	beq.n	800414c <HAL_GPIO_DeInit+0x120>
 80040a0:	4558      	cmp	r0, fp
 80040a2:	d055      	beq.n	8004150 <HAL_GPIO_DeInit+0x124>
 80040a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a8:	4298      	cmp	r0, r3
 80040aa:	d053      	beq.n	8004154 <HAL_GPIO_DeInit+0x128>
 80040ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b0:	4298      	cmp	r0, r3
 80040b2:	bf0c      	ite	eq
 80040b4:	2309      	moveq	r3, #9
 80040b6:	230a      	movne	r3, #10
 80040b8:	fa03 f30c 	lsl.w	r3, r3, ip
 80040bc:	4543      	cmp	r3, r8
 80040be:	d113      	bne.n	80040e8 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	ea23 0307 	bic.w	r3, r3, r7
 80040c6:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	ea23 0307 	bic.w	r3, r3, r7
 80040ce:	6063      	str	r3, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80040d0:	68e3      	ldr	r3, [r4, #12]
 80040d2:	ea23 0307 	bic.w	r3, r3, r7
 80040d6:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80040d8:	68a3      	ldr	r3, [r4, #8]
 80040da:	ea23 0307 	bic.w	r3, r3, r7
 80040de:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80040e0:	68ab      	ldr	r3, [r5, #8]
 80040e2:	ea23 0306 	bic.w	r3, r3, r6
 80040e6:	60ab      	str	r3, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040e8:	6805      	ldr	r5, [r0, #0]
 80040ea:	0056      	lsls	r6, r2, #1
 80040ec:	2303      	movs	r3, #3
 80040ee:	40b3      	lsls	r3, r6
 80040f0:	ea25 0503 	bic.w	r5, r5, r3
 80040f4:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040f6:	08d5      	lsrs	r5, r2, #3
 80040f8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80040fc:	f002 0c07 	and.w	ip, r2, #7
 8004100:	6a2e      	ldr	r6, [r5, #32]
 8004102:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004106:	270f      	movs	r7, #15
 8004108:	fa07 f70c 	lsl.w	r7, r7, ip
 800410c:	ea26 0607 	bic.w	r6, r6, r7
 8004110:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004112:	68c5      	ldr	r5, [r0, #12]
 8004114:	ea25 0503 	bic.w	r5, r5, r3
 8004118:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800411a:	6845      	ldr	r5, [r0, #4]
 800411c:	ea25 050e 	bic.w	r5, r5, lr
 8004120:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004122:	6885      	ldr	r5, [r0, #8]
 8004124:	ea25 0303 	bic.w	r3, r5, r3
 8004128:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412a:	3201      	adds	r2, #1
 800412c:	2a10      	cmp	r2, #16
 800412e:	d187      	bne.n	8004040 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8004130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004134:	2300      	movs	r3, #0
 8004136:	e7bf      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 8004138:	2301      	movs	r3, #1
 800413a:	e7bd      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 800413c:	2302      	movs	r3, #2
 800413e:	e7bb      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 8004140:	2303      	movs	r3, #3
 8004142:	e7b9      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 8004144:	2304      	movs	r3, #4
 8004146:	e7b7      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 8004148:	2305      	movs	r3, #5
 800414a:	e7b5      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 800414c:	2306      	movs	r3, #6
 800414e:	e7b3      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 8004150:	2307      	movs	r3, #7
 8004152:	e7b1      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 8004154:	2308      	movs	r3, #8
 8004156:	e7af      	b.n	80040b8 <HAL_GPIO_DeInit+0x8c>
 8004158:	40013c00 	.word	0x40013c00
 800415c:	40020000 	.word	0x40020000
 8004160:	40021400 	.word	0x40021400
 8004164:	40021800 	.word	0x40021800
 8004168:	40021c00 	.word	0x40021c00

0800416c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800416c:	6903      	ldr	r3, [r0, #16]
 800416e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004170:	bf14      	ite	ne
 8004172:	2001      	movne	r0, #1
 8004174:	2000      	moveq	r0, #0
 8004176:	4770      	bx	lr

08004178 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004178:	b10a      	cbz	r2, 800417e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800417a:	6181      	str	r1, [r0, #24]
  }
}
 800417c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800417e:	0409      	lsls	r1, r1, #16
 8004180:	e7fb      	b.n	800417a <HAL_GPIO_WritePin+0x2>

08004182 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004182:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004184:	ea01 0203 	and.w	r2, r1, r3
 8004188:	ea21 0103 	bic.w	r1, r1, r3
 800418c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004190:	6181      	str	r1, [r0, #24]
}
 8004192:	4770      	bx	lr

08004194 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004194:	6801      	ldr	r1, [r0, #0]
 8004196:	694b      	ldr	r3, [r1, #20]
 8004198:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	d010      	beq.n	80041c4 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80041a6:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b4:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
 80041c2:	4770      	bx	lr
  }
  return HAL_OK;
 80041c4:	4618      	mov	r0, r3
}
 80041c6:	4770      	bx	lr

080041c8 <I2C_WaitOnFlagUntilTimeout>:
{
 80041c8:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80041cc:	4606      	mov	r6, r0
 80041ce:	460f      	mov	r7, r1
 80041d0:	4691      	mov	r9, r2
 80041d2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80041d8:	6833      	ldr	r3, [r6, #0]
 80041da:	f1ba 0f01 	cmp.w	sl, #1
 80041de:	bf0c      	ite	eq
 80041e0:	695c      	ldreq	r4, [r3, #20]
 80041e2:	699c      	ldrne	r4, [r3, #24]
 80041e4:	ea27 0404 	bic.w	r4, r7, r4
 80041e8:	b2a4      	uxth	r4, r4
 80041ea:	fab4 f484 	clz	r4, r4
 80041ee:	0964      	lsrs	r4, r4, #5
 80041f0:	45a1      	cmp	r9, r4
 80041f2:	d001      	beq.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80041f4:	2000      	movs	r0, #0
 80041f6:	e017      	b.n	8004228 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80041f8:	1c6a      	adds	r2, r5, #1
 80041fa:	d0ee      	beq.n	80041da <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fc:	f7fe ffd4 	bl	80031a8 <HAL_GetTick>
 8004200:	9b08      	ldr	r3, [sp, #32]
 8004202:	1ac0      	subs	r0, r0, r3
 8004204:	42a8      	cmp	r0, r5
 8004206:	d801      	bhi.n	800420c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004208:	2d00      	cmp	r5, #0
 800420a:	d1e5      	bne.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800420c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800420e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004210:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004212:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004216:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800421a:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800421c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004220:	f042 0220 	orr.w	r2, r2, #32
 8004224:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004226:	2001      	movs	r0, #1
}
 8004228:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800422c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004230:	4604      	mov	r4, r0
 8004232:	460f      	mov	r7, r1
 8004234:	4616      	mov	r6, r2
 8004236:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004238:	6825      	ldr	r5, [r4, #0]
 800423a:	6968      	ldr	r0, [r5, #20]
 800423c:	ea27 0000 	bic.w	r0, r7, r0
 8004240:	b280      	uxth	r0, r0
 8004242:	b1b8      	cbz	r0, 8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004244:	696b      	ldr	r3, [r5, #20]
 8004246:	055a      	lsls	r2, r3, #21
 8004248:	d516      	bpl.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424a:	682b      	ldr	r3, [r5, #0]
 800424c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004250:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004256:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004258:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800425a:	2300      	movs	r3, #0
 800425c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800425e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004262:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004266:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004268:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800426c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800426e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004272:	2001      	movs	r0, #1
}
 8004274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004278:	1c73      	adds	r3, r6, #1
 800427a:	d0de      	beq.n	800423a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427c:	f7fe ff94 	bl	80031a8 <HAL_GetTick>
 8004280:	eba0 0008 	sub.w	r0, r0, r8
 8004284:	42b0      	cmp	r0, r6
 8004286:	d801      	bhi.n	800428c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8004288:	2e00      	cmp	r6, #0
 800428a:	d1d5      	bne.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800428c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800428e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004290:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004292:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004296:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800429c:	f042 0220 	orr.w	r2, r2, #32
 80042a0:	e7e4      	b.n	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080042a2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80042a2:	b570      	push	{r4, r5, r6, lr}
 80042a4:	4604      	mov	r4, r0
 80042a6:	460d      	mov	r5, r1
 80042a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	694b      	ldr	r3, [r1, #20]
 80042ae:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80042b2:	d001      	beq.n	80042b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80042b4:	2000      	movs	r0, #0
 80042b6:	e010      	b.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042b8:	694a      	ldr	r2, [r1, #20]
 80042ba:	06d2      	lsls	r2, r2, #27
 80042bc:	d50e      	bpl.n	80042dc <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042be:	f06f 0210 	mvn.w	r2, #16
 80042c2:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80042c4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80042d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80042d8:	2001      	movs	r0, #1
}
 80042da:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fe ff64 	bl	80031a8 <HAL_GetTick>
 80042e0:	1b80      	subs	r0, r0, r6
 80042e2:	42a8      	cmp	r0, r5
 80042e4:	d801      	bhi.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	d1df      	bne.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ea:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ec:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ee:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042fa:	f042 0220 	orr.w	r2, r2, #32
 80042fe:	e7e8      	b.n	80042d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08004300 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	4604      	mov	r4, r0
 8004304:	460d      	mov	r5, r1
 8004306:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	d501      	bpl.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004310:	2000      	movs	r0, #0
}
 8004312:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004314:	4620      	mov	r0, r4
 8004316:	f7ff ff3d 	bl	8004194 <I2C_IsAcknowledgeFailed>
 800431a:	b9a8      	cbnz	r0, 8004348 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800431c:	1c6a      	adds	r2, r5, #1
 800431e:	d0f3      	beq.n	8004308 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004320:	f7fe ff42 	bl	80031a8 <HAL_GetTick>
 8004324:	1b80      	subs	r0, r0, r6
 8004326:	42a8      	cmp	r0, r5
 8004328:	d801      	bhi.n	800432e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800432a:	2d00      	cmp	r5, #0
 800432c:	d1ec      	bne.n	8004308 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800432e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004330:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004334:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004338:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800433e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004342:	f042 0220 	orr.w	r2, r2, #32
 8004346:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004348:	2001      	movs	r0, #1
 800434a:	e7e2      	b.n	8004312 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

0800434c <I2C_RequestMemoryWrite>:
{
 800434c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004350:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004352:	6802      	ldr	r2, [r0, #0]
{
 8004354:	b085      	sub	sp, #20
 8004356:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800435a:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435c:	6813      	ldr	r3, [r2, #0]
 800435e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004362:	6013      	str	r3, [r2, #0]
{
 8004364:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004366:	463b      	mov	r3, r7
 8004368:	f8cd 8000 	str.w	r8, [sp]
 800436c:	2200      	movs	r2, #0
 800436e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8004372:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004374:	f7ff ff28 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	b138      	cbz	r0, 800438c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	05db      	lsls	r3, r3, #23
 8004380:	d502      	bpl.n	8004388 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004386:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004388:	2003      	movs	r0, #3
 800438a:	e00a      	b.n	80043a2 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800438c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8004390:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004392:	4919      	ldr	r1, [pc, #100]	; (80043f8 <I2C_RequestMemoryWrite+0xac>)
 8004394:	4643      	mov	r3, r8
 8004396:	463a      	mov	r2, r7
 8004398:	4620      	mov	r0, r4
 800439a:	f7ff ff47 	bl	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439e:	b118      	cbz	r0, 80043a8 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80043a0:	2001      	movs	r0, #1
}
 80043a2:	b005      	add	sp, #20
 80043a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	9003      	str	r0, [sp, #12]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	9203      	str	r2, [sp, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b4:	4642      	mov	r2, r8
 80043b6:	4639      	mov	r1, r7
 80043b8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043bc:	f7ff ffa0 	bl	8004300 <I2C_WaitOnTXEFlagUntilTimeout>
 80043c0:	b140      	cbz	r0, 80043d4 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043c4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	bf01      	itttt	eq
 80043c8:	6822      	ldreq	r2, [r4, #0]
 80043ca:	6813      	ldreq	r3, [r2, #0]
 80043cc:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80043d0:	6013      	streq	r3, [r2, #0]
 80043d2:	e7e5      	b.n	80043a0 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043d4:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043da:	d102      	bne.n	80043e2 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043dc:	b2ed      	uxtb	r5, r5
 80043de:	611d      	str	r5, [r3, #16]
 80043e0:	e7df      	b.n	80043a2 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043e2:	0a2a      	lsrs	r2, r5, #8
 80043e4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e6:	4639      	mov	r1, r7
 80043e8:	4642      	mov	r2, r8
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7ff ff88 	bl	8004300 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d1e6      	bne.n	80043c2 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	e7f1      	b.n	80043dc <I2C_RequestMemoryWrite+0x90>
 80043f8:	00010002 	.word	0x00010002

080043fc <I2C_RequestMemoryRead>:
{
 80043fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004402:	6803      	ldr	r3, [r0, #0]
{
 8004404:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800440c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440e:	681a      	ldr	r2, [r3, #0]
{
 8004410:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004418:	601a      	str	r2, [r3, #0]
{
 800441a:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441c:	463b      	mov	r3, r7
 800441e:	f8cd 8000 	str.w	r8, [sp]
 8004422:	2200      	movs	r2, #0
 8004424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8004428:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800442a:	f7ff fecd 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	b148      	cbz	r0, 8004446 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004432:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004434:	05db      	lsls	r3, r3, #23
 8004436:	d502      	bpl.n	800443e <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800443c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800443e:	2003      	movs	r0, #3
}
 8004440:	b004      	add	sp, #16
 8004442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004446:	fa5f f986 	uxtb.w	r9, r6
 800444a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800444e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004450:	492a      	ldr	r1, [pc, #168]	; (80044fc <I2C_RequestMemoryRead+0x100>)
 8004452:	4643      	mov	r3, r8
 8004454:	463a      	mov	r2, r7
 8004456:	4620      	mov	r0, r4
 8004458:	f7ff fee8 	bl	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445c:	b108      	cbz	r0, 8004462 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800445e:	2001      	movs	r0, #1
 8004460:	e7ee      	b.n	8004440 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	9003      	str	r0, [sp, #12]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	9203      	str	r2, [sp, #12]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446e:	4642      	mov	r2, r8
 8004470:	4639      	mov	r1, r7
 8004472:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004474:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004476:	f7ff ff43 	bl	8004300 <I2C_WaitOnTXEFlagUntilTimeout>
 800447a:	b140      	cbz	r0, 800448e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800447e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	bf01      	itttt	eq
 8004482:	6822      	ldreq	r2, [r4, #0]
 8004484:	6813      	ldreq	r3, [r2, #0]
 8004486:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800448a:	6013      	streq	r3, [r2, #0]
 800448c:	e7e7      	b.n	800445e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800448e:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004494:	d11a      	bne.n	80044cc <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004496:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004498:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800449a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449c:	4639      	mov	r1, r7
 800449e:	4620      	mov	r0, r4
 80044a0:	f7ff ff2e 	bl	8004300 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a4:	4602      	mov	r2, r0
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d1e8      	bne.n	800447c <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044aa:	6821      	ldr	r1, [r4, #0]
 80044ac:	680b      	ldr	r3, [r1, #0]
 80044ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b2:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b4:	4620      	mov	r0, r4
 80044b6:	f8cd 8000 	str.w	r8, [sp]
 80044ba:	463b      	mov	r3, r7
 80044bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c0:	f7ff fe82 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	b160      	cbz	r0, 80044e2 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	e7b3      	b.n	8004434 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044cc:	0a2a      	lsrs	r2, r5, #8
 80044ce:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d0:	4639      	mov	r1, r7
 80044d2:	4642      	mov	r2, r8
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7ff ff13 	bl	8004300 <I2C_WaitOnTXEFlagUntilTimeout>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d1ce      	bne.n	800447c <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	e7d9      	b.n	8004496 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044e2:	f049 0301 	orr.w	r3, r9, #1
 80044e6:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e8:	4904      	ldr	r1, [pc, #16]	; (80044fc <I2C_RequestMemoryRead+0x100>)
 80044ea:	4643      	mov	r3, r8
 80044ec:	463a      	mov	r2, r7
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7ff fe9c 	bl	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80044f4:	3800      	subs	r0, #0
 80044f6:	bf18      	it	ne
 80044f8:	2001      	movne	r0, #1
 80044fa:	e7a1      	b.n	8004440 <I2C_RequestMemoryRead+0x44>
 80044fc:	00010002 	.word	0x00010002

08004500 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	4604      	mov	r4, r0
 8004504:	460d      	mov	r5, r1
 8004506:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	075b      	lsls	r3, r3, #29
 800450e:	d501      	bpl.n	8004514 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8004510:	2000      	movs	r0, #0
}
 8004512:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff fe3d 	bl	8004194 <I2C_IsAcknowledgeFailed>
 800451a:	b9a8      	cbnz	r0, 8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800451c:	1c6a      	adds	r2, r5, #1
 800451e:	d0f3      	beq.n	8004508 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004520:	f7fe fe42 	bl	80031a8 <HAL_GetTick>
 8004524:	1b80      	subs	r0, r0, r6
 8004526:	42a8      	cmp	r0, r5
 8004528:	d801      	bhi.n	800452e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800452a:	2d00      	cmp	r5, #0
 800452c:	d1ec      	bne.n	8004508 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004530:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004532:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004538:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800453e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004542:	f042 0220 	orr.w	r2, r2, #32
 8004546:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004548:	2001      	movs	r0, #1
 800454a:	e7e2      	b.n	8004512 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800454c <HAL_I2C_Init>:
{
 800454c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800454e:	4604      	mov	r4, r0
 8004550:	b908      	cbnz	r0, 8004556 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8004552:	2001      	movs	r0, #1
}
 8004554:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004556:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800455a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800455e:	b91b      	cbnz	r3, 8004568 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8004560:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004564:	f7fd f9de 	bl	8001924 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004568:	2324      	movs	r3, #36	; 0x24
 800456a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004586:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004588:	f001 f814 	bl	80055b4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800458c:	4b3f      	ldr	r3, [pc, #252]	; (800468c <HAL_I2C_Init+0x140>)
 800458e:	6865      	ldr	r5, [r4, #4]
 8004590:	429d      	cmp	r5, r3
 8004592:	bf94      	ite	ls
 8004594:	4b3e      	ldrls	r3, [pc, #248]	; (8004690 <HAL_I2C_Init+0x144>)
 8004596:	4b3f      	ldrhi	r3, [pc, #252]	; (8004694 <HAL_I2C_Init+0x148>)
 8004598:	4298      	cmp	r0, r3
 800459a:	bf8c      	ite	hi
 800459c:	2300      	movhi	r3, #0
 800459e:	2301      	movls	r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1d6      	bne.n	8004552 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045a4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045a6:	4e39      	ldr	r6, [pc, #228]	; (800468c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045a8:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80045aa:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <HAL_I2C_Init+0x14c>)
 80045ac:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045b0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80045b4:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045b6:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045b8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ba:	bf88      	it	hi
 80045bc:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 80045c0:	6a11      	ldr	r1, [r2, #32]
 80045c2:	bf88      	it	hi
 80045c4:	4373      	mulhi	r3, r6
 80045c6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80045ca:	bf84      	itt	hi
 80045cc:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80045d0:	fbb3 f3f6 	udivhi	r3, r3, r6
 80045d4:	3301      	adds	r3, #1
 80045d6:	430b      	orrs	r3, r1
 80045d8:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045da:	69d1      	ldr	r1, [r2, #28]
 80045dc:	1e43      	subs	r3, r0, #1
 80045de:	482b      	ldr	r0, [pc, #172]	; (800468c <HAL_I2C_Init+0x140>)
 80045e0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80045e4:	4285      	cmp	r5, r0
 80045e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80045ea:	d832      	bhi.n	8004652 <HAL_I2C_Init+0x106>
 80045ec:	006d      	lsls	r5, r5, #1
 80045ee:	f640 70fc 	movw	r0, #4092	; 0xffc
 80045f2:	fbb3 f3f5 	udiv	r3, r3, r5
 80045f6:	3301      	adds	r3, #1
 80045f8:	4203      	tst	r3, r0
 80045fa:	d042      	beq.n	8004682 <HAL_I2C_Init+0x136>
 80045fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004600:	4319      	orrs	r1, r3
 8004602:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004604:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004608:	6811      	ldr	r1, [r2, #0]
 800460a:	4303      	orrs	r3, r0
 800460c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004610:	430b      	orrs	r3, r1
 8004612:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004614:	6891      	ldr	r1, [r2, #8]
 8004616:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800461a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800461e:	4303      	orrs	r3, r0
 8004620:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004624:	430b      	orrs	r3, r1
 8004626:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004628:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800462c:	68d1      	ldr	r1, [r2, #12]
 800462e:	4303      	orrs	r3, r0
 8004630:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004634:	430b      	orrs	r3, r1
 8004636:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004640:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004642:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004644:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004646:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800464a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8004650:	e780      	b.n	8004554 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004652:	68a0      	ldr	r0, [r4, #8]
 8004654:	b950      	cbnz	r0, 800466c <HAL_I2C_Init+0x120>
 8004656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800465a:	fbb3 f3f5 	udiv	r3, r3, r5
 800465e:	3301      	adds	r3, #1
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	b17b      	cbz	r3, 8004686 <HAL_I2C_Init+0x13a>
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	e7c9      	b.n	8004600 <HAL_I2C_Init+0xb4>
 800466c:	2019      	movs	r0, #25
 800466e:	4368      	muls	r0, r5
 8004670:	fbb3 f3f0 	udiv	r3, r3, r0
 8004674:	3301      	adds	r3, #1
 8004676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467a:	b123      	cbz	r3, 8004686 <HAL_I2C_Init+0x13a>
 800467c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004680:	e7be      	b.n	8004600 <HAL_I2C_Init+0xb4>
 8004682:	2304      	movs	r3, #4
 8004684:	e7bc      	b.n	8004600 <HAL_I2C_Init+0xb4>
 8004686:	2301      	movs	r3, #1
 8004688:	e7ba      	b.n	8004600 <HAL_I2C_Init+0xb4>
 800468a:	bf00      	nop
 800468c:	000186a0 	.word	0x000186a0
 8004690:	001e847f 	.word	0x001e847f
 8004694:	003d08ff 	.word	0x003d08ff
 8004698:	000f4240 	.word	0x000f4240

0800469c <HAL_I2C_DeInit>:
{
 800469c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800469e:	4604      	mov	r4, r0
 80046a0:	b198      	cbz	r0, 80046ca <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80046a2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a4:	2324      	movs	r3, #36	; 0x24
 80046a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80046aa:	6813      	ldr	r3, [r2, #0]
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80046b2:	f7fd f97b 	bl	80019ac <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046b6:	2000      	movs	r0, #0
 80046b8:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80046ba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80046be:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046c2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046c4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80046c8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046ca:	2001      	movs	r0, #1
 80046cc:	e7fc      	b.n	80046c8 <HAL_I2C_DeInit+0x2c>
	...

080046d0 <HAL_I2C_Mem_Write>:
{
 80046d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80046d4:	4604      	mov	r4, r0
 80046d6:	4699      	mov	r9, r3
 80046d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80046da:	460f      	mov	r7, r1
 80046dc:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80046de:	f7fe fd63 	bl	80031a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80046e6:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80046e8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ea:	d003      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80046ec:	2002      	movs	r0, #2
}
 80046ee:	b003      	add	sp, #12
 80046f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046f4:	9000      	str	r0, [sp, #0]
 80046f6:	493c      	ldr	r1, [pc, #240]	; (80047e8 <HAL_I2C_Mem_Write+0x118>)
 80046f8:	2319      	movs	r3, #25
 80046fa:	2201      	movs	r2, #1
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7ff fd63 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8004702:	2800      	cmp	r0, #0
 8004704:	d1f2      	bne.n	80046ec <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8004706:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d0ee      	beq.n	80046ec <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800470e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004710:	2301      	movs	r3, #1
 8004712:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004716:	6803      	ldr	r3, [r0, #0]
 8004718:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800471a:	bf5e      	ittt	pl
 800471c:	6803      	ldrpl	r3, [r0, #0]
 800471e:	f043 0301 	orrpl.w	r3, r3, #1
 8004722:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004724:	6803      	ldr	r3, [r0, #0]
 8004726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800472a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800472c:	2321      	movs	r3, #33	; 0x21
 800472e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004732:	2340      	movs	r3, #64	; 0x40
 8004734:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004738:	2300      	movs	r3, #0
 800473a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800473c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004740:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8004744:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004746:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004748:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800474a:	4b28      	ldr	r3, [pc, #160]	; (80047ec <HAL_I2C_Mem_Write+0x11c>)
 800474c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800474e:	e9cd 6500 	strd	r6, r5, [sp]
 8004752:	464b      	mov	r3, r9
 8004754:	4642      	mov	r2, r8
 8004756:	4639      	mov	r1, r7
 8004758:	4620      	mov	r0, r4
 800475a:	f7ff fdf7 	bl	800434c <I2C_RequestMemoryWrite>
 800475e:	2800      	cmp	r0, #0
 8004760:	d02a      	beq.n	80047b8 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8004762:	2001      	movs	r0, #1
 8004764:	e7c3      	b.n	80046ee <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004766:	f7ff fdcb 	bl	8004300 <I2C_WaitOnTXEFlagUntilTimeout>
 800476a:	b140      	cbz	r0, 800477e <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800476c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800476e:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	bf01      	itttt	eq
 8004772:	6822      	ldreq	r2, [r4, #0]
 8004774:	6813      	ldreq	r3, [r2, #0]
 8004776:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800477a:	6013      	streq	r3, [r2, #0]
 800477c:	e7f1      	b.n	8004762 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800477e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004780:	6827      	ldr	r7, [r4, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004788:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800478a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800478c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800478e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004790:	3a01      	subs	r2, #1
 8004792:	b292      	uxth	r2, r2
 8004794:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004796:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8004798:	1e48      	subs	r0, r1, #1
 800479a:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800479c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800479e:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047a0:	d50a      	bpl.n	80047b8 <HAL_I2C_Mem_Write+0xe8>
 80047a2:	b148      	cbz	r0, 80047b8 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047a4:	785a      	ldrb	r2, [r3, #1]
 80047a6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80047a8:	3302      	adds	r3, #2
 80047aa:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80047ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80047ae:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80047b0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80047b2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80047b4:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80047b6:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ba:	462a      	mov	r2, r5
 80047bc:	4631      	mov	r1, r6
 80047be:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1d0      	bne.n	8004766 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c4:	f7ff fe9c 	bl	8004500 <I2C_WaitOnBTFFlagUntilTimeout>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d1cf      	bne.n	800476c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	6822      	ldr	r2, [r4, #0]
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	2320      	movs	r3, #32
 80047d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80047dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80047e4:	e783      	b.n	80046ee <HAL_I2C_Mem_Write+0x1e>
 80047e6:	bf00      	nop
 80047e8:	00100002 	.word	0x00100002
 80047ec:	ffff0000 	.word	0xffff0000

080047f0 <HAL_I2C_Mem_Read>:
{
 80047f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047f4:	4604      	mov	r4, r0
 80047f6:	b087      	sub	sp, #28
 80047f8:	4699      	mov	r9, r3
 80047fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80047fc:	460d      	mov	r5, r1
 80047fe:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7fe fcd2 	bl	80031a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004804:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004808:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800480a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800480c:	d004      	beq.n	8004818 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800480e:	2502      	movs	r5, #2
}
 8004810:	4628      	mov	r0, r5
 8004812:	b007      	add	sp, #28
 8004814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004818:	9000      	str	r0, [sp, #0]
 800481a:	4976      	ldr	r1, [pc, #472]	; (80049f4 <HAL_I2C_Mem_Read+0x204>)
 800481c:	2319      	movs	r3, #25
 800481e:	2201      	movs	r2, #1
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff fcd1 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8004826:	2800      	cmp	r0, #0
 8004828:	d1f1      	bne.n	800480e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800482a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d0ed      	beq.n	800480e <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004832:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004834:	2301      	movs	r3, #1
 8004836:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800483a:	6803      	ldr	r3, [r0, #0]
 800483c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800483e:	bf5e      	ittt	pl
 8004840:	6803      	ldrpl	r3, [r0, #0]
 8004842:	f043 0301 	orrpl.w	r3, r3, #1
 8004846:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004848:	6803      	ldr	r3, [r0, #0]
 800484a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800484e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004850:	2322      	movs	r3, #34	; 0x22
 8004852:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004856:	2340      	movs	r3, #64	; 0x40
 8004858:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	2300      	movs	r3, #0
 800485e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004862:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004864:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004868:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800486a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800486c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486e:	4b62      	ldr	r3, [pc, #392]	; (80049f8 <HAL_I2C_Mem_Read+0x208>)
 8004870:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004872:	4629      	mov	r1, r5
 8004874:	e9cd 7600 	strd	r7, r6, [sp]
 8004878:	464b      	mov	r3, r9
 800487a:	4642      	mov	r2, r8
 800487c:	4620      	mov	r0, r4
 800487e:	f7ff fdbd 	bl	80043fc <I2C_RequestMemoryRead>
 8004882:	4605      	mov	r5, r0
 8004884:	b108      	cbz	r0, 800488a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8004886:	2501      	movs	r5, #1
 8004888:	e7c2      	b.n	8004810 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800488a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800488e:	b9b2      	cbnz	r2, 80048be <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004890:	9002      	str	r0, [sp, #8]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	9202      	str	r2, [sp, #8]
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	9202      	str	r2, [sp, #8]
 800489a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a2:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048a4:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80049fc <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80048a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d12c      	bne.n	8004908 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	2220      	movs	r2, #32
 80048b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80048b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80048bc:	e7a8      	b.n	8004810 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80048be:	2a01      	cmp	r2, #1
 80048c0:	d10a      	bne.n	80048d8 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	9003      	str	r0, [sp, #12]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	9203      	str	r2, [sp, #12]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	9203      	str	r2, [sp, #12]
 80048d4:	9a03      	ldr	r2, [sp, #12]
 80048d6:	e7e1      	b.n	800489c <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80048d8:	2a02      	cmp	r2, #2
 80048da:	d10e      	bne.n	80048fa <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ea:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ec:	9004      	str	r0, [sp, #16]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	9204      	str	r2, [sp, #16]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	9304      	str	r3, [sp, #16]
 80048f6:	9b04      	ldr	r3, [sp, #16]
 80048f8:	e7d4      	b.n	80048a4 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fa:	9005      	str	r0, [sp, #20]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	9205      	str	r2, [sp, #20]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	9305      	str	r3, [sp, #20]
 8004904:	9b05      	ldr	r3, [sp, #20]
 8004906:	e7cd      	b.n	80048a4 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8004908:	2b03      	cmp	r3, #3
 800490a:	d856      	bhi.n	80049ba <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 800490c:	2b01      	cmp	r3, #1
 800490e:	d115      	bne.n	800493c <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004910:	4632      	mov	r2, r6
 8004912:	4639      	mov	r1, r7
 8004914:	4620      	mov	r0, r4
 8004916:	f7ff fcc4 	bl	80042a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800491a:	2800      	cmp	r0, #0
 800491c:	d1b3      	bne.n	8004886 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004924:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004928:	3301      	adds	r3, #1
 800492a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800492c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800492e:	3b01      	subs	r3, #1
 8004930:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004932:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004934:	3b01      	subs	r3, #1
 8004936:	b29b      	uxth	r3, r3
 8004938:	8563      	strh	r3, [r4, #42]	; 0x2a
 800493a:	e7b5      	b.n	80048a8 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 800493c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800493e:	9600      	str	r6, [sp, #0]
 8004940:	463b      	mov	r3, r7
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	4641      	mov	r1, r8
 8004948:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800494a:	d119      	bne.n	8004980 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800494c:	f7ff fc3c 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8004950:	2800      	cmp	r0, #0
 8004952:	d198      	bne.n	8004886 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004962:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004964:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004966:	1c53      	adds	r3, r2, #1
 8004968:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800496a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800496c:	3b01      	subs	r3, #1
 800496e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004970:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004972:	3b01      	subs	r3, #1
 8004974:	b29b      	uxth	r3, r3
 8004976:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004978:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	7053      	strb	r3, [r2, #1]
 800497e:	e7d2      	b.n	8004926 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004980:	f7ff fc22 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8004984:	4602      	mov	r2, r0
 8004986:	2800      	cmp	r0, #0
 8004988:	f47f af7d 	bne.w	8004886 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004994:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004996:	6919      	ldr	r1, [r3, #16]
 8004998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800499a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800499c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800499e:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 80049a0:	3301      	adds	r3, #1
 80049a2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80049a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049a6:	3b01      	subs	r3, #1
 80049a8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80049aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b2:	4641      	mov	r1, r8
 80049b4:	463b      	mov	r3, r7
 80049b6:	4620      	mov	r0, r4
 80049b8:	e7c8      	b.n	800494c <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ba:	4632      	mov	r2, r6
 80049bc:	4639      	mov	r1, r7
 80049be:	4620      	mov	r0, r4
 80049c0:	f7ff fc6f 	bl	80042a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f47f af5e 	bne.w	8004886 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049d4:	1c53      	adds	r3, r2, #1
 80049d6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80049d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049da:	3b01      	subs	r3, #1
 80049dc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80049de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	6959      	ldr	r1, [r3, #20]
 80049ea:	0749      	lsls	r1, r1, #29
 80049ec:	f57f af5c 	bpl.w	80048a8 <HAL_I2C_Mem_Read+0xb8>
 80049f0:	e7c3      	b.n	800497a <HAL_I2C_Mem_Read+0x18a>
 80049f2:	bf00      	nop
 80049f4:	00100002 	.word	0x00100002
 80049f8:	ffff0000 	.word	0xffff0000
 80049fc:	00010004 	.word	0x00010004

08004a00 <HAL_I2C_GetState>:
  return hi2c->State;
 8004a00:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004a04:	4770      	bx	lr
	...

08004a08 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a08:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a0a:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a0e:	01d2      	lsls	r2, r2, #7
 8004a10:	3284      	adds	r2, #132	; 0x84
 8004a12:	1883      	adds	r3, r0, r2
{
 8004a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a18:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a1a:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a1c:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a1e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a22:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8004a26:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a28:	68c5      	ldr	r5, [r0, #12]
 8004a2a:	f10c 0701 	add.w	r7, ip, #1
 8004a2e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a32:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a36:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a38:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a3a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a3e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a40:	68c6      	ldr	r6, [r0, #12]
 8004a42:	68cd      	ldr	r5, [r1, #12]
 8004a44:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004a48:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a4a:	689d      	ldr	r5, [r3, #8]
 8004a4c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8004a50:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a52:	68c7      	ldr	r7, [r0, #12]
 8004a54:	688d      	ldr	r5, [r1, #8]
 8004a56:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004a5a:	3501      	adds	r5, #1
 8004a5c:	443d      	add	r5, r7
 8004a5e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004a62:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a64:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a66:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a68:	f025 0507 	bic.w	r5, r5, #7
 8004a6c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004a6e:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a72:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004a74:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a76:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a7a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004a7e:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a82:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004a86:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004a8a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004a8e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004a92:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a94:	695d      	ldr	r5, [r3, #20]
 8004a96:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004a9a:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a9c:	694d      	ldr	r5, [r1, #20]
 8004a9e:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004aa0:	69dd      	ldr	r5, [r3, #28]
 8004aa2:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8004aa6:	f025 0507 	bic.w	r5, r5, #7
 8004aaa:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004aac:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004ab0:	433d      	orrs	r5, r7
 8004ab2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ab4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ab6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ab8:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004abc:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004abe:	b1fe      	cbz	r6, 8004b00 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ac0:	3e01      	subs	r6, #1
 8004ac2:	2e06      	cmp	r6, #6
 8004ac4:	d81e      	bhi.n	8004b04 <LTDC_SetConfig+0xfc>
 8004ac6:	4d10      	ldr	r5, [pc, #64]	; (8004b08 <LTDC_SetConfig+0x100>)
 8004ac8:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004aca:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8004acc:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
 8004ad0:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ad2:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ad6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ad8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ada:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004adc:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ade:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ae0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004ae4:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ae6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004ae8:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8004aec:	f024 0407 	bic.w	r4, r4, #7
 8004af0:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004af2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004af4:	5883      	ldr	r3, [r0, r2]
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	5083      	str	r3, [r0, r2]
}
 8004afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8004b00:	2504      	movs	r5, #4
 8004b02:	e7e2      	b.n	8004aca <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b04:	2501      	movs	r5, #1
 8004b06:	e7e0      	b.n	8004aca <LTDC_SetConfig+0xc2>
 8004b08:	0800efc1 	.word	0x0800efc1

08004b0c <HAL_LTDC_Init>:
{
 8004b0c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004b0e:	4604      	mov	r4, r0
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d063      	beq.n	8004bdc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004b14:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004b18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b1c:	b91b      	cbnz	r3, 8004b26 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004b1e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004b22:	f7fc ff61 	bl	80019e8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b26:	2302      	movs	r3, #2
 8004b28:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004b34:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b36:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004b3a:	4302      	orrs	r2, r0
 8004b3c:	68e0      	ldr	r0, [r4, #12]
 8004b3e:	6999      	ldr	r1, [r3, #24]
 8004b40:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b42:	6920      	ldr	r0, [r4, #16]
 8004b44:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b46:	430a      	orrs	r2, r1
 8004b48:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	4924      	ldr	r1, [pc, #144]	; (8004be0 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b4e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b50:	400a      	ands	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004b5a:	69a0      	ldr	r0, [r4, #24]
 8004b5c:	4302      	orrs	r2, r0
 8004b5e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b60:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b62:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b64:	400a      	ands	r2, r1
 8004b66:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004b6e:	6a20      	ldr	r0, [r4, #32]
 8004b70:	4302      	orrs	r2, r0
 8004b72:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b74:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004b76:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b78:	400a      	ands	r2, r1
 8004b7a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004b82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004b84:	4302      	orrs	r2, r0
 8004b86:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	400a      	ands	r2, r1
 8004b8c:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004b8e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004b90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004b92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004b96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004b9e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004ba2:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ba6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004bac:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004bae:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004bb2:	432a      	orrs	r2, r5
 8004bb4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004bb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc0:	f042 0206 	orr.w	r2, r2, #6
 8004bc4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004bce:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8004bd0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004bd2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004bd6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004bdc:	2001      	movs	r0, #1
 8004bde:	e7fc      	b.n	8004bda <HAL_LTDC_Init+0xce>
 8004be0:	f000f800 	.word	0xf000f800

08004be4 <HAL_LTDC_ErrorCallback>:
 8004be4:	4770      	bx	lr

08004be6 <HAL_LTDC_LineEventCallback>:
 8004be6:	4770      	bx	lr

08004be8 <HAL_LTDC_ReloadEventCallback>:
 8004be8:	4770      	bx	lr

08004bea <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004bea:	6803      	ldr	r3, [r0, #0]
{
 8004bec:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004bee:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004bf0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004bf2:	0772      	lsls	r2, r6, #29
{
 8004bf4:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004bf6:	d514      	bpl.n	8004c22 <HAL_LTDC_IRQHandler+0x38>
 8004bf8:	0769      	lsls	r1, r5, #29
 8004bfa:	d512      	bpl.n	8004c22 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfe:	f022 0204 	bic.w	r2, r2, #4
 8004c02:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004c04:	2204      	movs	r2, #4
 8004c06:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004c08:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8004c14:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004c16:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004c1a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004c1e:	f7ff ffe1 	bl	8004be4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004c22:	07b2      	lsls	r2, r6, #30
 8004c24:	d516      	bpl.n	8004c54 <HAL_LTDC_IRQHandler+0x6a>
 8004c26:	07ab      	lsls	r3, r5, #30
 8004c28:	d514      	bpl.n	8004c54 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2e:	f022 0202 	bic.w	r2, r2, #2
 8004c32:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004c34:	2202      	movs	r2, #2
 8004c36:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004c38:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004c42:	2304      	movs	r3, #4
 8004c44:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f7ff ffc8 	bl	8004be4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004c54:	07f0      	lsls	r0, r6, #31
 8004c56:	d510      	bpl.n	8004c7a <HAL_LTDC_IRQHandler+0x90>
 8004c58:	07e9      	lsls	r1, r5, #31
 8004c5a:	d50e      	bpl.n	8004c7a <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004c66:	2201      	movs	r2, #1
 8004c68:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8004c6a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8004c6c:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004c70:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7ff ffb6 	bl	8004be6 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004c7a:	0732      	lsls	r2, r6, #28
 8004c7c:	d511      	bpl.n	8004ca2 <HAL_LTDC_IRQHandler+0xb8>
 8004c7e:	072b      	lsls	r3, r5, #28
 8004c80:	d50f      	bpl.n	8004ca2 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c86:	f022 0208 	bic.w	r2, r2, #8
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8004c96:	2300      	movs	r3, #0
 8004c98:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f7ff ffa3 	bl	8004be8 <HAL_LTDC_ReloadEventCallback>
}
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}

08004ca4 <HAL_LTDC_ConfigLayer>:
{
 8004ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004ca8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004cac:	2b01      	cmp	r3, #1
{
 8004cae:	4606      	mov	r6, r0
 8004cb0:	460f      	mov	r7, r1
 8004cb2:	4694      	mov	ip, r2
 8004cb4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004cb8:	d01f      	beq.n	8004cfa <HAL_LTDC_ConfigLayer+0x56>
 8004cba:	f04f 0801 	mov.w	r8, #1
 8004cbe:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cc2:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004cc6:	2434      	movs	r4, #52	; 0x34
 8004cc8:	460d      	mov	r5, r1
 8004cca:	fb04 6402 	mla	r4, r4, r2, r6
 8004cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cd0:	3438      	adds	r4, #56	; 0x38
 8004cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	4662      	mov	r2, ip
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	f7ff fe8f 	bl	8004a08 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004cea:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004cec:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004cee:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004cf2:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004cf6:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004d00 <HAL_LTDC_SetPitch>:
{
 8004d00:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8004d02:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	f04f 0302 	mov.w	r3, #2
 8004d0c:	d029      	beq.n	8004d62 <HAL_LTDC_SetPitch+0x62>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d0e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8004d12:	2334      	movs	r3, #52	; 0x34
 8004d14:	fb03 0302 	mla	r3, r3, r2, r0
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d1a:	b323      	cbz	r3, 8004d66 <HAL_LTDC_SetPitch+0x66>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	2b06      	cmp	r3, #6
 8004d20:	d823      	bhi.n	8004d6a <HAL_LTDC_SetPitch+0x6a>
 8004d22:	4c13      	ldr	r4, [pc, #76]	; (8004d70 <HAL_LTDC_SetPitch+0x70>)
 8004d24:	5ce4      	ldrb	r4, [r4, r3]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8004d26:	6803      	ldr	r3, [r0, #0]
 8004d28:	01d2      	lsls	r2, r2, #7
 8004d2a:	3284      	adds	r2, #132	; 0x84
 8004d2c:	4413      	add	r3, r2
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8004d2e:	4361      	muls	r1, r4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8004d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d32:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8004d36:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8004d3c:	4a0d      	ldr	r2, [pc, #52]	; (8004d74 <HAL_LTDC_SetPitch+0x74>)
 8004d3e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8004d40:	f045 0501 	orr.w	r5, r5, #1
 8004d44:	6255      	str	r5, [r2, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8004d46:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004d48:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8004d4c:	62d9      	str	r1, [r3, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8004d4e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8004d62:	4618      	mov	r0, r3
}
 8004d64:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8004d66:	2404      	movs	r4, #4
 8004d68:	e7dd      	b.n	8004d26 <HAL_LTDC_SetPitch+0x26>
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d6a:	2401      	movs	r4, #1
 8004d6c:	e7db      	b.n	8004d26 <HAL_LTDC_SetPitch+0x26>
 8004d6e:	bf00      	nop
 8004d70:	0800efc1 	.word	0x0800efc1
 8004d74:	40016800 	.word	0x40016800

08004d78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d80:	4d18      	ldr	r5, [pc, #96]	; (8004de4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d94:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <HAL_PWREx_EnableOverDrive+0x70>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8004d9a:	f7fe fa05 	bl	80031a8 <HAL_GetTick>
 8004d9e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004da0:	686b      	ldr	r3, [r5, #4]
 8004da2:	03da      	lsls	r2, r3, #15
 8004da4:	d50b      	bpl.n	8004dbe <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004da8:	4d0e      	ldr	r5, [pc, #56]	; (8004de4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004daa:	2201      	movs	r2, #1
 8004dac:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8004dae:	f7fe f9fb 	bl	80031a8 <HAL_GetTick>
 8004db2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004db4:	686b      	ldr	r3, [r5, #4]
 8004db6:	039b      	lsls	r3, r3, #14
 8004db8:	d50a      	bpl.n	8004dd0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e006      	b.n	8004dcc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dbe:	f7fe f9f3 	bl	80031a8 <HAL_GetTick>
 8004dc2:	1b00      	subs	r0, r0, r4
 8004dc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004dc8:	d9ea      	bls.n	8004da0 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8004dca:	2003      	movs	r0, #3
}
 8004dcc:	b003      	add	sp, #12
 8004dce:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dd0:	f7fe f9ea 	bl	80031a8 <HAL_GetTick>
 8004dd4:	1b00      	subs	r0, r0, r4
 8004dd6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004dda:	d9eb      	bls.n	8004db4 <HAL_PWREx_EnableOverDrive+0x3c>
 8004ddc:	e7f5      	b.n	8004dca <HAL_PWREx_EnableOverDrive+0x52>
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40007000 	.word	0x40007000
 8004de8:	420e0000 	.word	0x420e0000

08004dec <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004df0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004df2:	b13e      	cbz	r6, 8004e04 <QSPI_Config+0x18>
 8004df4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004df8:	bf1f      	itttt	ne
 8004dfa:	6a8b      	ldrne	r3, [r1, #40]	; 0x28
 8004dfc:	6804      	ldrne	r4, [r0, #0]
 8004dfe:	f103 33ff 	addne.w	r3, r3, #4294967295
 8004e02:	6123      	strne	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004e04:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004e08:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004e0c:	f1ba 0f00 	cmp.w	sl, #0
 8004e10:	d04c      	beq.n	8004eac <QSPI_Config+0xc0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e12:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004e14:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e16:	680b      	ldr	r3, [r1, #0]
 8004e18:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
 8004e1c:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8004e20:	ea4a 0406 	orr.w	r4, sl, r6
 8004e24:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	; 0x2c
 8004e28:	ea44 0a02 	orr.w	sl, r4, r2
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004e2c:	f1be 0f00 	cmp.w	lr, #0
 8004e30:	d024      	beq.n	8004e7c <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004e32:	688e      	ldr	r6, [r1, #8]
 8004e34:	61ee      	str	r6, [r5, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004e36:	ea4a 040e 	orr.w	r4, sl, lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e3a:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004e3c:	b19f      	cbz	r7, 8004e66 <QSPI_Config+0x7a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e3e:	433b      	orrs	r3, r7
 8004e40:	4303      	orrs	r3, r0
 8004e42:	ea43 0309 	orr.w	r3, r3, r9
 8004e46:	68c8      	ldr	r0, [r1, #12]
 8004e48:	ea43 0308 	orr.w	r3, r3, r8
 8004e4c:	4333      	orrs	r3, r6
 8004e4e:	4303      	orrs	r3, r0
 8004e50:	ea43 030c 	orr.w	r3, r3, ip
 8004e54:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004e56:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e5a:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004e5c:	d001      	beq.n	8004e62 <QSPI_Config+0x76>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004e5e:	684b      	ldr	r3, [r1, #4]
 8004e60:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e66:	4303      	orrs	r3, r0
 8004e68:	ea43 0309 	orr.w	r3, r3, r9
 8004e6c:	ea43 0308 	orr.w	r3, r3, r8
 8004e70:	4333      	orrs	r3, r6
 8004e72:	ea43 030c 	orr.w	r3, r3, ip
 8004e76:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e78:	616b      	str	r3, [r5, #20]
 8004e7a:	e7f2      	b.n	8004e62 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004e7c:	b167      	cbz	r7, 8004e98 <QSPI_Config+0xac>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e7e:	433b      	orrs	r3, r7
 8004e80:	4303      	orrs	r3, r0
 8004e82:	ea43 0309 	orr.w	r3, r3, r9
 8004e86:	68c8      	ldr	r0, [r1, #12]
 8004e88:	ea43 0308 	orr.w	r3, r3, r8
 8004e8c:	4303      	orrs	r3, r0
 8004e8e:	ea43 030c 	orr.w	r3, r3, ip
 8004e92:	ea43 030a 	orr.w	r3, r3, sl
 8004e96:	e7de      	b.n	8004e56 <QSPI_Config+0x6a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004e98:	4303      	orrs	r3, r0
 8004e9a:	ea43 0309 	orr.w	r3, r3, r9
 8004e9e:	ea43 0408 	orr.w	r4, r3, r8
 8004ea2:	ea44 030c 	orr.w	r3, r4, ip
 8004ea6:	ea43 030a 	orr.w	r3, r3, sl
 8004eaa:	e7e5      	b.n	8004e78 <QSPI_Config+0x8c>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004eac:	f1be 0f00 	cmp.w	lr, #0
 8004eb0:	d029      	beq.n	8004f06 <QSPI_Config+0x11a>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004eb2:	ea46 050e 	orr.w	r5, r6, lr
 8004eb6:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004eb8:	694e      	ldr	r6, [r1, #20]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004eba:	688b      	ldr	r3, [r1, #8]
 8004ebc:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ebe:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	; 0x2c
 8004ec2:	690b      	ldr	r3, [r1, #16]
 8004ec4:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8004ec8:	4315      	orrs	r5, r2
 8004eca:	04b6      	lsls	r6, r6, #18
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ecc:	b18f      	cbz	r7, 8004ef2 <QSPI_Config+0x106>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ece:	433b      	orrs	r3, r7
 8004ed0:	ea43 0308 	orr.w	r3, r3, r8
 8004ed4:	68c8      	ldr	r0, [r1, #12]
 8004ed6:	ea43 030e 	orr.w	r3, r3, lr
 8004eda:	ea43 030c 	orr.w	r3, r3, ip
 8004ede:	4303      	orrs	r3, r0
 8004ee0:	4333      	orrs	r3, r6
 8004ee2:	432b      	orrs	r3, r5
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004ee4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ee8:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004eea:	d0ba      	beq.n	8004e62 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004eec:	684b      	ldr	r3, [r1, #4]
 8004eee:	61a3      	str	r3, [r4, #24]
 8004ef0:	e7b7      	b.n	8004e62 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ef2:	ea43 0308 	orr.w	r3, r3, r8
 8004ef6:	ea43 030e 	orr.w	r3, r3, lr
 8004efa:	ea43 030c 	orr.w	r3, r3, ip
 8004efe:	4333      	orrs	r3, r6
 8004f00:	432b      	orrs	r3, r5
 8004f02:	6163      	str	r3, [r4, #20]
 8004f04:	e7ad      	b.n	8004e62 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004f06:	b1af      	cbz	r7, 8004f34 <QSPI_Config+0x148>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004f08:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004f0a:	6800      	ldr	r0, [r0, #0]
 8004f0c:	ea46 0307 	orr.w	r3, r6, r7
 8004f10:	4313      	orrs	r3, r2
 8004f12:	4323      	orrs	r3, r4
 8004f14:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8004f16:	4323      	orrs	r3, r4
 8004f18:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8004f1a:	4323      	orrs	r3, r4
 8004f1c:	68cc      	ldr	r4, [r1, #12]
 8004f1e:	4323      	orrs	r3, r4
 8004f20:	694c      	ldr	r4, [r1, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004f22:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004f26:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8004f2a:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004f2c:	d099      	beq.n	8004e62 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004f2e:	684b      	ldr	r3, [r1, #4]
 8004f30:	6183      	str	r3, [r0, #24]
 8004f32:	e796      	b.n	8004e62 <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004f34:	2e00      	cmp	r6, #0
 8004f36:	d094      	beq.n	8004e62 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004f38:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	4333      	orrs	r3, r6
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004f42:	4313      	orrs	r3, r2
 8004f44:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004f46:	4313      	orrs	r3, r2
 8004f48:	694a      	ldr	r2, [r1, #20]
 8004f4a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8004f4e:	6143      	str	r3, [r0, #20]
}
 8004f50:	e787      	b.n	8004e62 <QSPI_Config+0x76>

08004f52 <QSPI_WaitFlagStateUntilTimeout>:
{
 8004f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f56:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	460e      	mov	r6, r1
 8004f5e:	4615      	mov	r5, r2
 8004f60:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	6893      	ldr	r3, [r2, #8]
 8004f66:	4233      	tst	r3, r6
 8004f68:	bf14      	ite	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	42ab      	cmp	r3, r5
 8004f70:	d101      	bne.n	8004f76 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8004f72:	2000      	movs	r0, #0
 8004f74:	e012      	b.n	8004f9c <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004f76:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004f7a:	d0f3      	beq.n	8004f64 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7c:	f7fe f914 	bl	80031a8 <HAL_GetTick>
 8004f80:	1bc0      	subs	r0, r0, r7
 8004f82:	4540      	cmp	r0, r8
 8004f84:	d802      	bhi.n	8004f8c <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8004f86:	f1b8 0f00 	cmp.w	r8, #0
 8004f8a:	d1ea      	bne.n	8004f62 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004f92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6463      	str	r3, [r4, #68]	; 0x44
 8004f9a:	2001      	movs	r0, #1
}
 8004f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fa0 <HAL_QSPI_Init>:
{
 8004fa0:	b530      	push	{r4, r5, lr}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004fa6:	f7fe f8ff 	bl	80031a8 <HAL_GetTick>
 8004faa:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	d047      	beq.n	8005040 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004fb0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004fb4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8004fb8:	b94a      	cbnz	r2, 8004fce <HAL_QSPI_Init+0x2e>
 8004fba:	9003      	str	r0, [sp, #12]
    hqspi->Lock = HAL_UNLOCKED;
 8004fbc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f7fc fd43 	bl	8001a4c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fce:	6820      	ldr	r0, [r4, #0]
 8004fd0:	68a1      	ldr	r1, [r4, #8]
 8004fd2:	6802      	ldr	r2, [r0, #0]
 8004fd4:	3901      	subs	r1, #1
 8004fd6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004fda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004fde:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004fe0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004fe2:	9200      	str	r2, [sp, #0]
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7ff ffb2 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8004fee:	bb10      	cbnz	r0, 8005036 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004ff0:	69e5      	ldr	r5, [r4, #28]
 8004ff2:	68e3      	ldr	r3, [r4, #12]
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	432b      	orrs	r3, r5
 8004ff8:	6a25      	ldr	r5, [r4, #32]
 8004ffa:	6811      	ldr	r1, [r2, #0]
 8004ffc:	432b      	orrs	r3, r5
 8004ffe:	6865      	ldr	r5, [r4, #4]
 8005000:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005004:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005008:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800500c:	430b      	orrs	r3, r1
 800500e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005010:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005014:	430b      	orrs	r3, r1
 8005016:	6921      	ldr	r1, [r4, #16]
 8005018:	6855      	ldr	r5, [r2, #4]
 800501a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800501e:	4909      	ldr	r1, [pc, #36]	; (8005044 <HAL_QSPI_Init+0xa4>)
 8005020:	4029      	ands	r1, r5
 8005022:	430b      	orrs	r3, r1
 8005024:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800502e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005030:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005032:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005036:	2300      	movs	r3, #0
 8005038:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800503c:	b005      	add	sp, #20
 800503e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005040:	2001      	movs	r0, #1
 8005042:	e7fb      	b.n	800503c <HAL_QSPI_Init+0x9c>
 8005044:	ffe0f8fe 	.word	0xffe0f8fe

08005048 <HAL_QSPI_DeInit>:
{
 8005048:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 800504a:	4604      	mov	r4, r0
 800504c:	b168      	cbz	r0, 800506a <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 800504e:	6802      	ldr	r2, [r0, #0]
 8005050:	6813      	ldr	r3, [r2, #0]
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005058:	f7fc fd52 	bl	8001b00 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800505c:	2000      	movs	r0, #0
 800505e:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005060:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005064:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005068:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800506a:	2001      	movs	r0, #1
 800506c:	e7fc      	b.n	8005068 <HAL_QSPI_DeInit+0x20>

0800506e <HAL_QSPI_Command>:
{
 800506e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005072:	4604      	mov	r4, r0
 8005074:	b085      	sub	sp, #20
 8005076:	4617      	mov	r7, r2
 8005078:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800507a:	f7fe f895 	bl	80031a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800507e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005082:	2a01      	cmp	r2, #1
  uint32_t tickstart = HAL_GetTick();
 8005084:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005086:	d034      	beq.n	80050f2 <HAL_QSPI_Command+0x84>
 8005088:	2201      	movs	r2, #1
 800508a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800508e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005092:	2a01      	cmp	r2, #1
 8005094:	fa5f f882 	uxtb.w	r8, r2
 8005098:	f04f 0602 	mov.w	r6, #2
 800509c:	d127      	bne.n	80050ee <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800509e:	2200      	movs	r2, #0
 80050a0:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80050a2:	9003      	str	r0, [sp, #12]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80050a4:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80050a8:	9700      	str	r7, [sp, #0]
 80050aa:	2120      	movs	r1, #32
 80050ac:	4620      	mov	r0, r4
 80050ae:	f7ff ff50 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80050b2:	4605      	mov	r5, r0
 80050b4:	b9a0      	cbnz	r0, 80050e0 <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80050b6:	4602      	mov	r2, r0
 80050b8:	4649      	mov	r1, r9
 80050ba:	4620      	mov	r0, r4
 80050bc:	f7ff fe96 	bl	8004dec <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80050c0:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	b94a      	cbnz	r2, 80050dc <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80050c8:	9700      	str	r7, [sp, #0]
 80050ca:	4642      	mov	r2, r8
 80050cc:	4631      	mov	r1, r6
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7ff ff3f 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80050d4:	4605      	mov	r5, r0
 80050d6:	b918      	cbnz	r0, 80050e0 <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80050dc:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80050e0:	2300      	movs	r3, #0
 80050e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80050e6:	4628      	mov	r0, r5
 80050e8:	b005      	add	sp, #20
 80050ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80050ee:	4635      	mov	r5, r6
 80050f0:	e7f6      	b.n	80050e0 <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 80050f2:	2502      	movs	r5, #2
 80050f4:	e7f7      	b.n	80050e6 <HAL_QSPI_Command+0x78>

080050f6 <HAL_QSPI_AutoPolling>:
{
 80050f6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80050fa:	4604      	mov	r4, r0
 80050fc:	4615      	mov	r5, r2
 80050fe:	461e      	mov	r6, r3
 8005100:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8005102:	f7fe f851 	bl	80031a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005106:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800510a:	2a01      	cmp	r2, #1
  uint32_t tickstart = HAL_GetTick();
 800510c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800510e:	d040      	beq.n	8005192 <HAL_QSPI_AutoPolling+0x9c>
 8005110:	2201      	movs	r2, #1
 8005112:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005116:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800511a:	2a01      	cmp	r2, #1
 800511c:	b2d7      	uxtb	r7, r2
 800511e:	d136      	bne.n	800518e <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005120:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005122:	2200      	movs	r2, #0
 8005124:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005126:	9003      	str	r0, [sp, #12]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005128:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800512c:	9600      	str	r6, [sp, #0]
 800512e:	2120      	movs	r1, #32
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff ff0e 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005136:	bb20      	cbnz	r0, 8005182 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005138:	6821      	ldr	r1, [r4, #0]
 800513a:	682a      	ldr	r2, [r5, #0]
 800513c:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800513e:	686a      	ldr	r2, [r5, #4]
 8005140:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005142:	68aa      	ldr	r2, [r5, #8]
 8005144:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005146:	680a      	ldr	r2, [r1, #0]
 8005148:	6928      	ldr	r0, [r5, #16]
 800514a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800514e:	4302      	orrs	r2, r0
 8005150:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005154:	600a      	str	r2, [r1, #0]
      cmd->NbData = cfg->StatusBytesSize;
 8005156:	68ea      	ldr	r2, [r5, #12]
 8005158:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800515c:	4641      	mov	r1, r8
 800515e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005162:	4620      	mov	r0, r4
 8005164:	f7ff fe42 	bl	8004dec <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005168:	9b03      	ldr	r3, [sp, #12]
 800516a:	9600      	str	r6, [sp, #0]
 800516c:	463a      	mov	r2, r7
 800516e:	2108      	movs	r1, #8
 8005170:	4620      	mov	r0, r4
 8005172:	f7ff feee 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005176:	b920      	cbnz	r0, 8005182 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	2208      	movs	r2, #8
 800517c:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800517e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005182:	2300      	movs	r3, #0
 8005184:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005188:	b004      	add	sp, #16
 800518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800518e:	2002      	movs	r0, #2
 8005190:	e7f7      	b.n	8005182 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005192:	2002      	movs	r0, #2
 8005194:	e7f8      	b.n	8005188 <HAL_QSPI_AutoPolling+0x92>

08005196 <HAL_QSPI_MemoryMapped>:
{
 8005196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005198:	4604      	mov	r4, r0
 800519a:	4616      	mov	r6, r2
 800519c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800519e:	f7fe f803 	bl	80031a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80051a2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80051a6:	2a01      	cmp	r2, #1
  uint32_t tickstart = HAL_GetTick();
 80051a8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80051aa:	d032      	beq.n	8005212 <HAL_QSPI_MemoryMapped+0x7c>
 80051ac:	2201      	movs	r2, #1
 80051ae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80051b2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80051b6:	2a01      	cmp	r2, #1
 80051b8:	d129      	bne.n	800520e <HAL_QSPI_MemoryMapped+0x78>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80051ba:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80051bc:	2182      	movs	r1, #130	; 0x82
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80051be:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80051c0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80051c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80051c6:	9100      	str	r1, [sp, #0]
 80051c8:	4620      	mov	r0, r4
 80051ca:	2120      	movs	r1, #32
 80051cc:	f7ff fec1 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80051d0:	4605      	mov	r5, r0
 80051d2:	b9b0      	cbnz	r0, 8005202 <HAL_QSPI_MemoryMapped+0x6c>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	6872      	ldr	r2, [r6, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	f020 0008 	bic.w	r0, r0, #8
 80051de:	4310      	orrs	r0, r2
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80051e0:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80051e2:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80051e4:	d107      	bne.n	80051f6 <HAL_QSPI_MemoryMapped+0x60>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80051e6:	6832      	ldr	r2, [r6, #0]
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80051ea:	2210      	movs	r2, #16
 80051ec:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051f4:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80051f6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80051fa:	4639      	mov	r1, r7
 80051fc:	4620      	mov	r0, r4
 80051fe:	f7ff fdf5 	bl	8004dec <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8005202:	2300      	movs	r3, #0
 8005204:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005208:	4628      	mov	r0, r5
 800520a:	b003      	add	sp, #12
 800520c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800520e:	2502      	movs	r5, #2
 8005210:	e7f7      	b.n	8005202 <HAL_QSPI_MemoryMapped+0x6c>
  __HAL_LOCK(hqspi);
 8005212:	2502      	movs	r5, #2
 8005214:	e7f8      	b.n	8005208 <HAL_QSPI_MemoryMapped+0x72>

08005216 <HAL_QSPI_Abort>:
{
 8005216:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005218:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800521a:	f7fd ffc5 	bl	80031a8 <HAL_GetTick>
 800521e:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005220:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8005224:	f010 0002 	ands.w	r0, r0, #2
 8005228:	d03a      	beq.n	80052a0 <HAL_QSPI_Abort+0x8a>
    __HAL_UNLOCK(hqspi);
 800522a:	2200      	movs	r2, #0
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800522c:	6821      	ldr	r1, [r4, #0]
    __HAL_UNLOCK(hqspi);
 800522e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005232:	680a      	ldr	r2, [r1, #0]
 8005234:	f012 0204 	ands.w	r2, r2, #4
 8005238:	d034      	beq.n	80052a4 <HAL_QSPI_Abort+0x8e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800523a:	680a      	ldr	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800523c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800523e:	9303      	str	r3, [sp, #12]
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005240:	f022 0204 	bic.w	r2, r2, #4
 8005244:	600a      	str	r2, [r1, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005246:	f7fe f8fb 	bl	8003440 <HAL_DMA_Abort>
      if(status != HAL_OK)
 800524a:	9b03      	ldr	r3, [sp, #12]
 800524c:	b118      	cbz	r0, 8005256 <HAL_QSPI_Abort+0x40>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800524e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005250:	f042 0204 	orr.w	r2, r2, #4
 8005254:	6462      	str	r2, [r4, #68]	; 0x44
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	6891      	ldr	r1, [r2, #8]
 800525a:	0689      	lsls	r1, r1, #26
 800525c:	d51d      	bpl.n	800529a <HAL_QSPI_Abort+0x84>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800525e:	6811      	ldr	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005260:	9303      	str	r3, [sp, #12]
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005262:	f041 0102 	orr.w	r1, r1, #2
 8005266:	6011      	str	r1, [r2, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005268:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800526a:	9200      	str	r2, [sp, #0]
 800526c:	2102      	movs	r1, #2
 800526e:	2201      	movs	r2, #1
 8005270:	4620      	mov	r0, r4
 8005272:	f7ff fe6e 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	b990      	cbnz	r0, 80052a0 <HAL_QSPI_Abort+0x8a>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	2102      	movs	r1, #2
 800527e:	60d1      	str	r1, [r2, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005280:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005282:	9200      	str	r2, [sp, #0]
 8005284:	2120      	movs	r1, #32
 8005286:	4602      	mov	r2, r0
 8005288:	4620      	mov	r0, r4
 800528a:	f7ff fe62 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800528e:	b938      	cbnz	r0, 80052a0 <HAL_QSPI_Abort+0x8a>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005290:	6822      	ldr	r2, [r4, #0]
 8005292:	6953      	ldr	r3, [r2, #20]
 8005294:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005298:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800529a:	2301      	movs	r3, #1
 800529c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80052a0:	b004      	add	sp, #16
 80052a2:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	4610      	mov	r0, r2
 80052a6:	e7d6      	b.n	8005256 <HAL_QSPI_Abort+0x40>

080052a8 <HAL_QSPI_Transmit>:
{
 80052a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052aa:	4604      	mov	r4, r0
 80052ac:	b085      	sub	sp, #20
 80052ae:	4616      	mov	r6, r2
 80052b0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80052b2:	f7fd ff79 	bl	80031a8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80052b6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80052ba:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80052bc:	2a01      	cmp	r2, #1
  uint32_t tickstart = HAL_GetTick();
 80052be:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80052c0:	d04c      	beq.n	800535c <HAL_QSPI_Transmit+0xb4>
 80052c2:	2201      	movs	r2, #1
 80052c4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052c8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80052cc:	2a01      	cmp	r2, #1
 80052ce:	b2d0      	uxtb	r0, r2
 80052d0:	d142      	bne.n	8005358 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052d2:	2200      	movs	r2, #0
 80052d4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80052d6:	2f00      	cmp	r7, #0
 80052d8:	d039      	beq.n	800534e <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80052da:	2212      	movs	r2, #18
 80052dc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80052e0:	692a      	ldr	r2, [r5, #16]
 80052e2:	3201      	adds	r2, #1
 80052e4:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80052e6:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80052e8:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80052ea:	3201      	adds	r2, #1
 80052ec:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80052ee:	696a      	ldr	r2, [r5, #20]
 80052f0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80052f4:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80052f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80052f8:	b9a2      	cbnz	r2, 8005324 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80052fa:	9600      	str	r6, [sp, #0]
 80052fc:	2201      	movs	r2, #1
 80052fe:	2102      	movs	r1, #2
 8005300:	4620      	mov	r0, r4
 8005302:	f7ff fe26 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005306:	b928      	cbnz	r0, 8005314 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	2202      	movs	r2, #2
 800530c:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 800530e:	4620      	mov	r0, r4
 8005310:	f7ff ff81 	bl	8005216 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005314:	2301      	movs	r3, #1
 8005316:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800531a:	2300      	movs	r3, #0
 800531c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005320:	b005      	add	sp, #20
 8005322:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005324:	9600      	str	r6, [sp, #0]
 8005326:	2201      	movs	r2, #1
 8005328:	2104      	movs	r1, #4
 800532a:	4620      	mov	r0, r4
 800532c:	9303      	str	r3, [sp, #12]
 800532e:	f7ff fe10 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005332:	2800      	cmp	r0, #0
 8005334:	d1ee      	bne.n	8005314 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005336:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005338:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005340:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005342:	3201      	adds	r2, #1
 8005344:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005346:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005348:	3a01      	subs	r2, #1
 800534a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800534c:	e7d3      	b.n	80052f6 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800534e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005350:	f043 0308 	orr.w	r3, r3, #8
 8005354:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005356:	e7e0      	b.n	800531a <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8005358:	2002      	movs	r0, #2
 800535a:	e7de      	b.n	800531a <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800535c:	2002      	movs	r0, #2
 800535e:	e7df      	b.n	8005320 <HAL_QSPI_Transmit+0x78>

08005360 <HAL_QSPI_Receive>:
{
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	4604      	mov	r4, r0
 8005364:	b085      	sub	sp, #20
 8005366:	4616      	mov	r6, r2
 8005368:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800536a:	f7fd ff1d 	bl	80031a8 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8005374:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005378:	2a01      	cmp	r2, #1
  uint32_t tickstart = HAL_GetTick();
 800537a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800537c:	d050      	beq.n	8005420 <HAL_QSPI_Receive+0xc0>
 800537e:	2201      	movs	r2, #1
 8005380:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005384:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005388:	2a01      	cmp	r2, #1
 800538a:	b2d0      	uxtb	r0, r2
 800538c:	d146      	bne.n	800541c <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800538e:	2200      	movs	r2, #0
 8005390:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005392:	2f00      	cmp	r7, #0
 8005394:	d03d      	beq.n	8005412 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005396:	2222      	movs	r2, #34	; 0x22
 8005398:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800539c:	692a      	ldr	r2, [r5, #16]
 800539e:	3201      	adds	r2, #1
 80053a0:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80053a2:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80053a4:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80053a6:	3201      	adds	r2, #1
 80053a8:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80053aa:	6969      	ldr	r1, [r5, #20]
 80053ac:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80053b0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80053b4:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80053b6:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80053ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80053bc:	b9a2      	cbnz	r2, 80053e8 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80053be:	9600      	str	r6, [sp, #0]
 80053c0:	2201      	movs	r2, #1
 80053c2:	2102      	movs	r1, #2
 80053c4:	4620      	mov	r0, r4
 80053c6:	f7ff fdc4 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80053ca:	b928      	cbnz	r0, 80053d8 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	2202      	movs	r2, #2
 80053d0:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80053d2:	4620      	mov	r0, r4
 80053d4:	f7ff ff1f 	bl	8005216 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80053d8:	2301      	movs	r3, #1
 80053da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80053de:	2300      	movs	r3, #0
 80053e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80053e4:	b005      	add	sp, #20
 80053e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80053e8:	9600      	str	r6, [sp, #0]
 80053ea:	2201      	movs	r2, #1
 80053ec:	2106      	movs	r1, #6
 80053ee:	4620      	mov	r0, r4
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	f7ff fdae 	bl	8004f52 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d1ee      	bne.n	80053d8 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80053fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80053fc:	f895 1020 	ldrb.w	r1, [r5, #32]
 8005400:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8005402:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005404:	9b03      	ldr	r3, [sp, #12]
        hqspi->pRxBuffPtr++;
 8005406:	3201      	adds	r2, #1
 8005408:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800540a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800540c:	3a01      	subs	r2, #1
 800540e:	63a2      	str	r2, [r4, #56]	; 0x38
 8005410:	e7d3      	b.n	80053ba <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005412:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005414:	f043 0308 	orr.w	r3, r3, #8
 8005418:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800541a:	e7e0      	b.n	80053de <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 800541c:	2002      	movs	r0, #2
 800541e:	e7de      	b.n	80053de <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8005420:	2002      	movs	r0, #2
 8005422:	e7df      	b.n	80053e4 <HAL_QSPI_Receive+0x84>

08005424 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005424:	4913      	ldr	r1, [pc, #76]	; (8005474 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005426:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005428:	688b      	ldr	r3, [r1, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b04      	cmp	r3, #4
 8005430:	d01c      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0x48>
 8005432:	2b08      	cmp	r3, #8
 8005434:	d11c      	bne.n	8005470 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005436:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005438:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800543c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005440:	bf14      	ite	ne
 8005442:	480d      	ldrne	r0, [pc, #52]	; (8005478 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005444:	480d      	ldreq	r0, [pc, #52]	; (800547c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005446:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800544a:	bf18      	it	ne
 800544c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800544e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005452:	fba1 0100 	umull	r0, r1, r1, r0
 8005456:	f7fa ff23 	bl	80002a0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <HAL_RCC_GetSysClockFreq+0x50>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005462:	3301      	adds	r3, #1
 8005464:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005466:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800546a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800546c:	4802      	ldr	r0, [pc, #8]	; (8005478 <HAL_RCC_GetSysClockFreq+0x54>)
 800546e:	e7fc      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8005470:	4802      	ldr	r0, [pc, #8]	; (800547c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005472:	e7fa      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x46>
 8005474:	40023800 	.word	0x40023800
 8005478:	007a1200 	.word	0x007a1200
 800547c:	00f42400 	.word	0x00f42400

08005480 <HAL_RCC_ClockConfig>:
{
 8005480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005484:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005486:	4604      	mov	r4, r0
 8005488:	b910      	cbnz	r0, 8005490 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800548a:	2001      	movs	r0, #1
}
 800548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b43      	ldr	r3, [pc, #268]	; (80055a0 <HAL_RCC_ClockConfig+0x120>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	f002 020f 	and.w	r2, r2, #15
 8005498:	428a      	cmp	r2, r1
 800549a:	d328      	bcc.n	80054ee <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800549c:	6821      	ldr	r1, [r4, #0]
 800549e:	078f      	lsls	r7, r1, #30
 80054a0:	d42d      	bmi.n	80054fe <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054a2:	07c8      	lsls	r0, r1, #31
 80054a4:	d440      	bmi.n	8005528 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a6:	4b3e      	ldr	r3, [pc, #248]	; (80055a0 <HAL_RCC_ClockConfig+0x120>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f002 020f 	and.w	r2, r2, #15
 80054ae:	42aa      	cmp	r2, r5
 80054b0:	d865      	bhi.n	800557e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	0751      	lsls	r1, r2, #29
 80054b6:	d46b      	bmi.n	8005590 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b8:	0713      	lsls	r3, r2, #28
 80054ba:	d507      	bpl.n	80054cc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054bc:	4a39      	ldr	r2, [pc, #228]	; (80055a4 <HAL_RCC_ClockConfig+0x124>)
 80054be:	6921      	ldr	r1, [r4, #16]
 80054c0:	6893      	ldr	r3, [r2, #8]
 80054c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80054c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80054ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054cc:	f7ff ffaa 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80054d0:	4b34      	ldr	r3, [pc, #208]	; (80055a4 <HAL_RCC_ClockConfig+0x124>)
 80054d2:	4a35      	ldr	r2, [pc, #212]	; (80055a8 <HAL_RCC_ClockConfig+0x128>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80054da:	5cd3      	ldrb	r3, [r2, r3]
 80054dc:	40d8      	lsrs	r0, r3
 80054de:	4b33      	ldr	r3, [pc, #204]	; (80055ac <HAL_RCC_ClockConfig+0x12c>)
 80054e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80054e2:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <HAL_RCC_ClockConfig+0x130>)
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	f7fc fbe3 	bl	8001cb0 <HAL_InitTick>
  return HAL_OK;
 80054ea:	2000      	movs	r0, #0
 80054ec:	e7ce      	b.n	800548c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	b2ca      	uxtb	r2, r1
 80054f0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	428b      	cmp	r3, r1
 80054fa:	d1c6      	bne.n	800548a <HAL_RCC_ClockConfig+0xa>
 80054fc:	e7ce      	b.n	800549c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fe:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <HAL_RCC_ClockConfig+0x124>)
 8005500:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005504:	bf1e      	ittt	ne
 8005506:	689a      	ldrne	r2, [r3, #8]
 8005508:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800550c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005510:	bf42      	ittt	mi
 8005512:	689a      	ldrmi	r2, [r3, #8]
 8005514:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8005518:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68a0      	ldr	r0, [r4, #8]
 800551e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005522:	4302      	orrs	r2, r0
 8005524:	609a      	str	r2, [r3, #8]
 8005526:	e7bc      	b.n	80054a2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005528:	6862      	ldr	r2, [r4, #4]
 800552a:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <HAL_RCC_ClockConfig+0x124>)
 800552c:	2a01      	cmp	r2, #1
 800552e:	d11c      	bne.n	800556a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005536:	d0a8      	beq.n	800548a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005538:	4e1a      	ldr	r6, [pc, #104]	; (80055a4 <HAL_RCC_ClockConfig+0x124>)
 800553a:	68b3      	ldr	r3, [r6, #8]
 800553c:	f023 0303 	bic.w	r3, r3, #3
 8005540:	4313      	orrs	r3, r2
 8005542:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005544:	f7fd fe30 	bl	80031a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005548:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800554c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554e:	68b3      	ldr	r3, [r6, #8]
 8005550:	6862      	ldr	r2, [r4, #4]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800555a:	d0a4      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555c:	f7fd fe24 	bl	80031a8 <HAL_GetTick>
 8005560:	1bc0      	subs	r0, r0, r7
 8005562:	4540      	cmp	r0, r8
 8005564:	d9f3      	bls.n	800554e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8005566:	2003      	movs	r0, #3
 8005568:	e790      	b.n	800548c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556a:	1e91      	subs	r1, r2, #2
 800556c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005570:	d802      	bhi.n	8005578 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005572:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005576:	e7de      	b.n	8005536 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005578:	f013 0f02 	tst.w	r3, #2
 800557c:	e7db      	b.n	8005536 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	b2ea      	uxtb	r2, r5
 8005580:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	42ab      	cmp	r3, r5
 800558a:	f47f af7e 	bne.w	800548a <HAL_RCC_ClockConfig+0xa>
 800558e:	e790      	b.n	80054b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005590:	4904      	ldr	r1, [pc, #16]	; (80055a4 <HAL_RCC_ClockConfig+0x124>)
 8005592:	68e0      	ldr	r0, [r4, #12]
 8005594:	688b      	ldr	r3, [r1, #8]
 8005596:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800559a:	4303      	orrs	r3, r0
 800559c:	608b      	str	r3, [r1, #8]
 800559e:	e78b      	b.n	80054b8 <HAL_RCC_ClockConfig+0x38>
 80055a0:	40023c00 	.word	0x40023c00
 80055a4:	40023800 	.word	0x40023800
 80055a8:	0800efa1 	.word	0x0800efa1
 80055ac:	20000048 	.word	0x20000048
 80055b0:	20000050 	.word	0x20000050

080055b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80055b6:	4a05      	ldr	r2, [pc, #20]	; (80055cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80055be:	5cd3      	ldrb	r3, [r2, r3]
 80055c0:	4a03      	ldr	r2, [pc, #12]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80055c2:	6810      	ldr	r0, [r2, #0]
}
 80055c4:	40d8      	lsrs	r0, r3
 80055c6:	4770      	bx	lr
 80055c8:	40023800 	.word	0x40023800
 80055cc:	0800efb1 	.word	0x0800efb1
 80055d0:	20000048 	.word	0x20000048

080055d4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055d4:	230f      	movs	r3, #15
 80055d6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055d8:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <HAL_RCC_GetClockConfig+0x34>)
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	f002 0203 	and.w	r2, r2, #3
 80055e0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80055e8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80055f0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80055fa:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <HAL_RCC_GetClockConfig+0x38>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	600b      	str	r3, [r1, #0]
}
 8005606:	4770      	bx	lr
 8005608:	40023800 	.word	0x40023800
 800560c:	40023c00 	.word	0x40023c00

08005610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005612:	6802      	ldr	r2, [r0, #0]
{
 8005614:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005616:	0610      	lsls	r0, r2, #24
 8005618:	d508      	bpl.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800561a:	49aa      	ldr	r1, [pc, #680]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800561c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800561e:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8005622:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005626:	4303      	orrs	r3, r0
 8005628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800562c:	05d1      	lsls	r1, r2, #23
 800562e:	d508      	bpl.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005630:	49a4      	ldr	r1, [pc, #656]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005632:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005634:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8005638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563c:	4303      	orrs	r3, r0
 800563e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005642:	f012 0f43 	tst.w	r2, #67	; 0x43
 8005646:	d173      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x120>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	f013 0f0c 	tst.w	r3, #12
 800564e:	f000 80c1 	beq.w	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005652:	4b9d      	ldr	r3, [pc, #628]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005654:	4d9b      	ldr	r5, [pc, #620]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005656:	2200      	movs	r2, #0
 8005658:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 800565a:	f7fd fda5 	bl	80031a8 <HAL_GetTick>
 800565e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	f100 80fd 	bmi.w	8005862 <HAL_RCCEx_PeriphCLKConfig+0x252>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005668:	6821      	ldr	r1, [r4, #0]
 800566a:	074f      	lsls	r7, r1, #29
 800566c:	d51a      	bpl.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800566e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005672:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8005676:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800567a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800567e:	4313      	orrs	r3, r2
 8005680:	6922      	ldr	r2, [r4, #16]
 8005682:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005686:	69a2      	ldr	r2, [r4, #24]
 8005688:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800568c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005690:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8005694:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005696:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800569a:	3a01      	subs	r2, #1
 800569c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80056a0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056a4:	070e      	lsls	r6, r1, #28
 80056a6:	d519      	bpl.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80056a8:	4a86      	ldr	r2, [pc, #536]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80056aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056ae:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80056b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056b6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80056ba:	4303      	orrs	r3, r0
 80056bc:	6920      	ldr	r0, [r4, #16]
 80056be:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80056c2:	69e0      	ldr	r0, [r4, #28]
 80056c4:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 80056c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056cc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80056d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80056d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80056d6:	4303      	orrs	r3, r0
 80056d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80056dc:	060d      	lsls	r5, r1, #24
 80056de:	d517      	bpl.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80056e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e6:	d113      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x100>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056e8:	4976      	ldr	r1, [pc, #472]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80056ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80056f2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80056f6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80056fa:	4313      	orrs	r3, r2
 80056fc:	6922      	ldr	r2, [r4, #16]
 80056fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005702:	6962      	ldr	r2, [r4, #20]
 8005704:	0852      	lsrs	r2, r2, #1
 8005706:	3a01      	subs	r2, #1
 8005708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005710:	4b6d      	ldr	r3, [pc, #436]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005712:	4e6c      	ldr	r6, [pc, #432]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005714:	2201      	movs	r2, #1
 8005716:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8005718:	f7fd fd46 	bl	80031a8 <HAL_GetTick>
 800571c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800571e:	6833      	ldr	r3, [r6, #0]
 8005720:	0098      	lsls	r0, r3, #2
 8005722:	d459      	bmi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005724:	f7fd fd40 	bl	80031a8 <HAL_GetTick>
 8005728:	1b40      	subs	r0, r0, r5
 800572a:	2802      	cmp	r0, #2
 800572c:	d9f7      	bls.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800572e:	e04e      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 8005730:	4b65      	ldr	r3, [pc, #404]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005732:	4e64      	ldr	r6, [pc, #400]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    __HAL_RCC_PLLI2S_DISABLE();
 8005734:	2200      	movs	r2, #0
 8005736:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8005738:	f7fd fd36 	bl	80031a8 <HAL_GetTick>
 800573c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800573e:	6833      	ldr	r3, [r6, #0]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	d43f      	bmi.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005744:	6821      	ldr	r1, [r4, #0]
 8005746:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005748:	bf41      	itttt	mi
 800574a:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 800574e:	071b      	lslmi	r3, r3, #28
 8005750:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8005754:	f8c6 3084 	strmi.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005758:	078e      	lsls	r6, r1, #30
 800575a:	d515      	bpl.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x178>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800575c:	4a59      	ldr	r2, [pc, #356]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800575e:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005760:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005764:	6865      	ldr	r5, [r4, #4]
 8005766:	061b      	lsls	r3, r3, #24
 8005768:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800576c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005770:	4303      	orrs	r3, r0
 8005772:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005776:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800577a:	6a23      	ldr	r3, [r4, #32]
 800577c:	f020 001f 	bic.w	r0, r0, #31
 8005780:	3b01      	subs	r3, #1
 8005782:	4303      	orrs	r3, r0
 8005784:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005788:	064d      	lsls	r5, r1, #25
 800578a:	d50a      	bpl.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800578c:	68e3      	ldr	r3, [r4, #12]
 800578e:	6862      	ldr	r2, [r4, #4]
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005796:	68a2      	ldr	r2, [r4, #8]
 8005798:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800579c:	4a49      	ldr	r2, [pc, #292]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800579e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80057a2:	4b49      	ldr	r3, [pc, #292]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057a4:	4e47      	ldr	r6, [pc, #284]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    __HAL_RCC_PLLI2S_ENABLE();
 80057a6:	2201      	movs	r2, #1
 80057a8:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80057aa:	f7fd fcfd 	bl	80031a8 <HAL_GetTick>
 80057ae:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057b0:	6833      	ldr	r3, [r6, #0]
 80057b2:	0118      	lsls	r0, r3, #4
 80057b4:	f53f af48 	bmi.w	8005648 <HAL_RCCEx_PeriphCLKConfig+0x38>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057b8:	f7fd fcf6 	bl	80031a8 <HAL_GetTick>
 80057bc:	1b40      	subs	r0, r0, r5
 80057be:	2802      	cmp	r0, #2
 80057c0:	d9f6      	bls.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80057c2:	e004      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057c4:	f7fd fcf0 	bl	80031a8 <HAL_GetTick>
 80057c8:	1b40      	subs	r0, r0, r5
 80057ca:	2802      	cmp	r0, #2
 80057cc:	d9b7      	bls.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x12e>
        return HAL_TIMEOUT;
 80057ce:	2003      	movs	r0, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
}
 80057d0:	b003      	add	sp, #12
 80057d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80057d4:	0619      	lsls	r1, r3, #24
 80057d6:	d43f      	bmi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x248>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	069a      	lsls	r2, r3, #26
 80057dc:	d531      	bpl.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PWR_CLK_ENABLE();
 80057de:	2300      	movs	r3, #0
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    PWR->CR |= PWR_CR_DBP;
 80057e4:	4d39      	ldr	r5, [pc, #228]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fe:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005800:	f7fd fcd2 	bl	80031a8 <HAL_GetTick>
 8005804:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	05d9      	lsls	r1, r3, #23
 800580a:	d531      	bpl.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x260>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800580c:	4d2d      	ldr	r5, [pc, #180]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800580e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005810:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005812:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005816:	d131      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800581a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800581e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005822:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005824:	d14a      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005826:	6891      	ldr	r1, [r2, #8]
 8005828:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800582c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005830:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8005834:	4301      	orrs	r1, r0
 8005836:	6091      	str	r1, [r2, #8]
 8005838:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800583a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583e:	430b      	orrs	r3, r1
 8005840:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	f010 0010 	ands.w	r0, r0, #16
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005848:	bf1f      	itttt	ne
 800584a:	4b21      	ldrne	r3, [pc, #132]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800584c:	f894 2030 	ldrbne.w	r2, [r4, #48]	; 0x30
 8005850:	f8c3 21e0 	strne.w	r2, [r3, #480]	; 0x1e0
  return HAL_OK;
 8005854:	2000      	movne	r0, #0
 8005856:	e7bb      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800585a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800585e:	d1bb      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005860:	e6f7      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x42>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005862:	f7fd fca1 	bl	80031a8 <HAL_GetTick>
 8005866:	1b80      	subs	r0, r0, r6
 8005868:	2802      	cmp	r0, #2
 800586a:	f67f aef9 	bls.w	8005660 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800586e:	e7ae      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005870:	f7fd fc9a 	bl	80031a8 <HAL_GetTick>
 8005874:	1b80      	subs	r0, r0, r6
 8005876:	2802      	cmp	r0, #2
 8005878:	d9c5      	bls.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800587a:	e7a8      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800587c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005880:	4293      	cmp	r3, r2
 8005882:	d0c9      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x208>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005884:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005886:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005888:	2101      	movs	r1, #1
 800588a:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800588e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005892:	2100      	movs	r1, #0
 8005894:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8005898:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800589a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800589c:	07da      	lsls	r2, r3, #31
 800589e:	d5bb      	bpl.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x208>
        tickstart = HAL_GetTick();
 80058a0:	f7fd fc82 	bl	80031a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a4:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80058a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80058ac:	079b      	lsls	r3, r3, #30
 80058ae:	d4b3      	bmi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x208>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b0:	f7fd fc7a 	bl	80031a8 <HAL_GetTick>
 80058b4:	1b80      	subs	r0, r0, r6
 80058b6:	42b8      	cmp	r0, r7
 80058b8:	d9f7      	bls.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80058ba:	e788      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058bc:	6891      	ldr	r1, [r2, #8]
 80058be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80058c2:	e7b8      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x226>
 80058c4:	40023800 	.word	0x40023800
 80058c8:	42470000 	.word	0x42470000
 80058cc:	40007000 	.word	0x40007000
 80058d0:	42471000 	.word	0x42471000

080058d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058d8:	4604      	mov	r4, r0
 80058da:	b340      	cbz	r0, 800592e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058dc:	6803      	ldr	r3, [r0, #0]
 80058de:	07dd      	lsls	r5, r3, #31
 80058e0:	d410      	bmi.n	8005904 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	0798      	lsls	r0, r3, #30
 80058e6:	d45b      	bmi.n	80059a0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	071a      	lsls	r2, r3, #28
 80058ec:	f100 809d 	bmi.w	8005a2a <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	075b      	lsls	r3, r3, #29
 80058f4:	f100 80bd 	bmi.w	8005a72 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058f8:	69a0      	ldr	r0, [r4, #24]
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f040 8124 	bne.w	8005b48 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005900:	2000      	movs	r0, #0
 8005902:	e02c      	b.n	800595e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005904:	4b8d      	ldr	r3, [pc, #564]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	f002 020c 	and.w	r2, r2, #12
 800590c:	2a04      	cmp	r2, #4
 800590e:	d007      	beq.n	8005920 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005916:	2a08      	cmp	r2, #8
 8005918:	d10b      	bne.n	8005932 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	0259      	lsls	r1, r3, #9
 800591e:	d508      	bpl.n	8005932 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005920:	4b86      	ldr	r3, [pc, #536]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	039a      	lsls	r2, r3, #14
 8005926:	d5dc      	bpl.n	80058e2 <HAL_RCC_OscConfig+0xe>
 8005928:	6863      	ldr	r3, [r4, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1d9      	bne.n	80058e2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800592e:	2001      	movs	r0, #1
 8005930:	e015      	b.n	800595e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005932:	6863      	ldr	r3, [r4, #4]
 8005934:	4d81      	ldr	r5, [pc, #516]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
 8005936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593a:	d113      	bne.n	8005964 <HAL_RCC_OscConfig+0x90>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005942:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005944:	f7fd fc30 	bl	80031a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005948:	4e7c      	ldr	r6, [pc, #496]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800594a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594c:	6833      	ldr	r3, [r6, #0]
 800594e:	039b      	lsls	r3, r3, #14
 8005950:	d4c7      	bmi.n	80058e2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005952:	f7fd fc29 	bl	80031a8 <HAL_GetTick>
 8005956:	1b40      	subs	r0, r0, r5
 8005958:	2864      	cmp	r0, #100	; 0x64
 800595a:	d9f7      	bls.n	800594c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800595c:	2003      	movs	r0, #3
}
 800595e:	b002      	add	sp, #8
 8005960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005968:	d104      	bne.n	8005974 <HAL_RCC_OscConfig+0xa0>
 800596a:	682b      	ldr	r3, [r5, #0]
 800596c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	e7e3      	b.n	800593c <HAL_RCC_OscConfig+0x68>
 8005974:	682a      	ldr	r2, [r5, #0]
 8005976:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800597a:	602a      	str	r2, [r5, #0]
 800597c:	682a      	ldr	r2, [r5, #0]
 800597e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005982:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1dd      	bne.n	8005944 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8005988:	f7fd fc0e 	bl	80031a8 <HAL_GetTick>
 800598c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	039f      	lsls	r7, r3, #14
 8005992:	d5a6      	bpl.n	80058e2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005994:	f7fd fc08 	bl	80031a8 <HAL_GetTick>
 8005998:	1b80      	subs	r0, r0, r6
 800599a:	2864      	cmp	r0, #100	; 0x64
 800599c:	d9f7      	bls.n	800598e <HAL_RCC_OscConfig+0xba>
 800599e:	e7dd      	b.n	800595c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059a0:	4b66      	ldr	r3, [pc, #408]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	f012 0f0c 	tst.w	r2, #12
 80059a8:	d007      	beq.n	80059ba <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059b0:	2a08      	cmp	r2, #8
 80059b2:	d111      	bne.n	80059d8 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	025e      	lsls	r6, r3, #9
 80059b8:	d40e      	bmi.n	80059d8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ba:	4a60      	ldr	r2, [pc, #384]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
 80059bc:	6813      	ldr	r3, [r2, #0]
 80059be:	079d      	lsls	r5, r3, #30
 80059c0:	d502      	bpl.n	80059c8 <HAL_RCC_OscConfig+0xf4>
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d1b2      	bne.n	800592e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c8:	6813      	ldr	r3, [r2, #0]
 80059ca:	6921      	ldr	r1, [r4, #16]
 80059cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80059d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80059d4:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d6:	e787      	b.n	80058e8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059d8:	68e2      	ldr	r2, [r4, #12]
 80059da:	4b59      	ldr	r3, [pc, #356]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	b1b2      	cbz	r2, 8005a0c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80059e2:	f7fd fbe1 	bl	80031a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e6:	4d55      	ldr	r5, [pc, #340]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80059e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ea:	682b      	ldr	r3, [r5, #0]
 80059ec:	0798      	lsls	r0, r3, #30
 80059ee:	d507      	bpl.n	8005a00 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	6922      	ldr	r2, [r4, #16]
 80059f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80059f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	e773      	b.n	80058e8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a00:	f7fd fbd2 	bl	80031a8 <HAL_GetTick>
 8005a04:	1b80      	subs	r0, r0, r6
 8005a06:	2802      	cmp	r0, #2
 8005a08:	d9ef      	bls.n	80059ea <HAL_RCC_OscConfig+0x116>
 8005a0a:	e7a7      	b.n	800595c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005a0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a0e:	f7fd fbcb 	bl	80031a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a12:	4e4a      	ldr	r6, [pc, #296]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005a14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a16:	6833      	ldr	r3, [r6, #0]
 8005a18:	0799      	lsls	r1, r3, #30
 8005a1a:	f57f af65 	bpl.w	80058e8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a1e:	f7fd fbc3 	bl	80031a8 <HAL_GetTick>
 8005a22:	1b40      	subs	r0, r0, r5
 8005a24:	2802      	cmp	r0, #2
 8005a26:	d9f6      	bls.n	8005a16 <HAL_RCC_OscConfig+0x142>
 8005a28:	e798      	b.n	800595c <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a2a:	6962      	ldr	r2, [r4, #20]
 8005a2c:	4b44      	ldr	r3, [pc, #272]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a2e:	b182      	cbz	r2, 8005a52 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8005a30:	2201      	movs	r2, #1
 8005a32:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8005a36:	f7fd fbb7 	bl	80031a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3a:	4e40      	ldr	r6, [pc, #256]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005a3c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005a40:	079f      	lsls	r7, r3, #30
 8005a42:	f53f af55 	bmi.w	80058f0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a46:	f7fd fbaf 	bl	80031a8 <HAL_GetTick>
 8005a4a:	1b40      	subs	r0, r0, r5
 8005a4c:	2802      	cmp	r0, #2
 8005a4e:	d9f6      	bls.n	8005a3e <HAL_RCC_OscConfig+0x16a>
 8005a50:	e784      	b.n	800595c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8005a52:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8005a56:	f7fd fba7 	bl	80031a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5a:	4e38      	ldr	r6, [pc, #224]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005a5c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005a60:	0798      	lsls	r0, r3, #30
 8005a62:	f57f af45 	bpl.w	80058f0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a66:	f7fd fb9f 	bl	80031a8 <HAL_GetTick>
 8005a6a:	1b40      	subs	r0, r0, r5
 8005a6c:	2802      	cmp	r0, #2
 8005a6e:	d9f6      	bls.n	8005a5e <HAL_RCC_OscConfig+0x18a>
 8005a70:	e774      	b.n	800595c <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a72:	4b32      	ldr	r3, [pc, #200]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
 8005a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a76:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8005a7a:	d128      	bne.n	8005ace <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a7c:	9201      	str	r2, [sp, #4]
 8005a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005a90:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a92:	4d2c      	ldr	r5, [pc, #176]	; (8005b44 <HAL_RCC_OscConfig+0x270>)
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	05d9      	lsls	r1, r3, #23
 8005a98:	d51b      	bpl.n	8005ad2 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	4d27      	ldr	r5, [pc, #156]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d127      	bne.n	8005af2 <HAL_RCC_OscConfig+0x21e>
 8005aa2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005aaa:	f7fd fb7d 	bl	80031a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aae:	4e23      	ldr	r6, [pc, #140]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005ab0:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005ab8:	079b      	lsls	r3, r3, #30
 8005aba:	d539      	bpl.n	8005b30 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f43f af1b 	beq.w	80058f8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <HAL_RCC_OscConfig+0x268>)
 8005ac4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aca:	6413      	str	r3, [r2, #64]	; 0x40
 8005acc:	e714      	b.n	80058f8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005ace:	2700      	movs	r7, #0
 8005ad0:	e7df      	b.n	8005a92 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ad2:	682b      	ldr	r3, [r5, #0]
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005ada:	f7fd fb65 	bl	80031a8 <HAL_GetTick>
 8005ade:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	05da      	lsls	r2, r3, #23
 8005ae4:	d4d9      	bmi.n	8005a9a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae6:	f7fd fb5f 	bl	80031a8 <HAL_GetTick>
 8005aea:	1b80      	subs	r0, r0, r6
 8005aec:	2802      	cmp	r0, #2
 8005aee:	d9f7      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x20c>
 8005af0:	e734      	b.n	800595c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af2:	2b05      	cmp	r3, #5
 8005af4:	d104      	bne.n	8005b00 <HAL_RCC_OscConfig+0x22c>
 8005af6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005af8:	f043 0304 	orr.w	r3, r3, #4
 8005afc:	672b      	str	r3, [r5, #112]	; 0x70
 8005afe:	e7d0      	b.n	8005aa2 <HAL_RCC_OscConfig+0x1ce>
 8005b00:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	672a      	str	r2, [r5, #112]	; 0x70
 8005b08:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005b0a:	f022 0204 	bic.w	r2, r2, #4
 8005b0e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ca      	bne.n	8005aaa <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005b14:	f7fd fb48 	bl	80031a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b18:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005b1c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005b20:	0798      	lsls	r0, r3, #30
 8005b22:	d5cb      	bpl.n	8005abc <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b24:	f7fd fb40 	bl	80031a8 <HAL_GetTick>
 8005b28:	1b80      	subs	r0, r0, r6
 8005b2a:	4540      	cmp	r0, r8
 8005b2c:	d9f7      	bls.n	8005b1e <HAL_RCC_OscConfig+0x24a>
 8005b2e:	e715      	b.n	800595c <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b30:	f7fd fb3a 	bl	80031a8 <HAL_GetTick>
 8005b34:	1b40      	subs	r0, r0, r5
 8005b36:	4540      	cmp	r0, r8
 8005b38:	d9bd      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x1e2>
 8005b3a:	e70f      	b.n	800595c <HAL_RCC_OscConfig+0x88>
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	42470000 	.word	0x42470000
 8005b44:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b48:	4d3b      	ldr	r5, [pc, #236]	; (8005c38 <HAL_RCC_OscConfig+0x364>)
 8005b4a:	68ab      	ldr	r3, [r5, #8]
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d040      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x302>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b54:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <HAL_RCC_OscConfig+0x368>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005b5a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b5c:	d12e      	bne.n	8005bbc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8005b5e:	f7fd fb23 	bl	80031a8 <HAL_GetTick>
 8005b62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	0199      	lsls	r1, r3, #6
 8005b68:	d422      	bmi.n	8005bb0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b6a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b72:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005b7e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005b82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005b84:	0852      	lsrs	r2, r2, #1
 8005b86:	3a01      	subs	r2, #1
 8005b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b8c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005b8e:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <HAL_RCC_OscConfig+0x368>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b90:	4d29      	ldr	r5, [pc, #164]	; (8005c38 <HAL_RCC_OscConfig+0x364>)
        __HAL_RCC_PLL_ENABLE();
 8005b92:	2201      	movs	r2, #1
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005b96:	f7fd fb07 	bl	80031a8 <HAL_GetTick>
 8005b9a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	019a      	lsls	r2, r3, #6
 8005ba0:	f53f aeae 	bmi.w	8005900 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba4:	f7fd fb00 	bl	80031a8 <HAL_GetTick>
 8005ba8:	1b00      	subs	r0, r0, r4
 8005baa:	2802      	cmp	r0, #2
 8005bac:	d9f6      	bls.n	8005b9c <HAL_RCC_OscConfig+0x2c8>
 8005bae:	e6d5      	b.n	800595c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fd fafa 	bl	80031a8 <HAL_GetTick>
 8005bb4:	1b80      	subs	r0, r0, r6
 8005bb6:	2802      	cmp	r0, #2
 8005bb8:	d9d4      	bls.n	8005b64 <HAL_RCC_OscConfig+0x290>
 8005bba:	e6cf      	b.n	800595c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8005bbc:	f7fd faf4 	bl	80031a8 <HAL_GetTick>
 8005bc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	019b      	lsls	r3, r3, #6
 8005bc6:	f57f ae9b 	bpl.w	8005900 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bca:	f7fd faed 	bl	80031a8 <HAL_GetTick>
 8005bce:	1b00      	subs	r0, r0, r4
 8005bd0:	2802      	cmp	r0, #2
 8005bd2:	d9f6      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x2ee>
 8005bd4:	e6c2      	b.n	800595c <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd6:	2801      	cmp	r0, #1
 8005bd8:	f43f aec1 	beq.w	800595e <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
 8005bdc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bde:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005be4:	4291      	cmp	r1, r2
 8005be6:	f47f aea2 	bne.w	800592e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bea:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf0:	428a      	cmp	r2, r1
 8005bf2:	f47f ae9c 	bne.w	800592e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bf6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bf8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005bfc:	401a      	ands	r2, r3
 8005bfe:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005c02:	f47f ae94 	bne.w	800592e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005c08:	0852      	lsrs	r2, r2, #1
 8005c0a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005c0e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c10:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005c14:	f47f ae8b 	bne.w	800592e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c1e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8005c22:	f47f ae84 	bne.w	800592e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c26:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005c28:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c2c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8005c30:	f43f ae66 	beq.w	8005900 <HAL_RCC_OscConfig+0x2c>
 8005c34:	e67b      	b.n	800592e <HAL_RCC_OscConfig+0x5a>
 8005c36:	bf00      	nop
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	42470000 	.word	0x42470000

08005c40 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005c44:	4604      	mov	r4, r0
 8005c46:	b1c8      	cbz	r0, 8005c7c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005c48:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005c4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c50:	b91b      	cbnz	r3, 8005c5a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005c52:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005c56:	f7fb ff71 	bl	8001b3c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005c60:	1d21      	adds	r1, r4, #4
 8005c62:	6820      	ldr	r0, [r4, #0]
 8005c64:	f000 f9c6 	bl	8005ff4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005c68:	6862      	ldr	r2, [r4, #4]
 8005c6a:	6820      	ldr	r0, [r4, #0]
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f000 f9f9 	bl	8006064 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8005c78:	2000      	movs	r0, #0
}
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	e7fc      	b.n	8005c7a <HAL_SDRAM_Init+0x3a>

08005c80 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8005c80:	b510      	push	{r4, lr}
 8005c82:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8005c84:	f7fb ffd2 	bl	8001c2c <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8005c88:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c8c:	f000 fa20 	bl	80060d0 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8005c90:	2000      	movs	r0, #0
 8005c92:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8005c96:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 8005c9a:	bd10      	pop	{r4, pc}

08005c9c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005c9c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005c9e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005ca2:	2b02      	cmp	r3, #2
{
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005ca8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005caa:	d012      	beq.n	8005cd2 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005cac:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8005cb0:	2c01      	cmp	r4, #1
 8005cb2:	d10f      	bne.n	8005cd4 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005cba:	6828      	ldr	r0, [r5, #0]
 8005cbc:	f000 fa17 	bl	80060ee <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005cc4:	bf06      	itte	eq
 8005cc6:	2305      	moveq	r3, #5
 8005cc8:	f885 302c 	strbeq.w	r3, [r5, #44]	; 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005ccc:	f885 402c 	strbne.w	r4, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005cd0:	2000      	movs	r0, #0
}
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e7fc      	b.n	8005cd2 <HAL_SDRAM_SendCommand+0x36>

08005cd8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005cd8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005cda:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005cde:	2b02      	cmp	r3, #2
{
 8005ce0:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005ce2:	b2d8      	uxtb	r0, r3
 8005ce4:	d00d      	beq.n	8005d02 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005ce6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	b2dd      	uxtb	r5, r3
 8005cee:	d109      	bne.n	8005d04 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005cf0:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005cf2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005cf4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005cf8:	f000 fa1f 	bl	800613a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005cfc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005d00:	2000      	movs	r0, #0
}
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005d04:	2001      	movs	r0, #1
 8005d06:	e7fc      	b.n	8005d02 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005d08 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d08:	4770      	bx	lr
	...

08005d0c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d130      	bne.n	8005d76 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	2302      	movs	r3, #2
 8005d16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d1a:	6803      	ldr	r3, [r0, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <HAL_TIM_Base_Start_IT+0x70>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01a      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x54>
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d017      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x54>
 8005d30:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x54>
 8005d38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00f      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x54>
 8005d40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x54>
 8005d48:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x54>
 8005d50:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x54>
 8005d58:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d104      	bne.n	8005d6a <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d66:	2a06      	cmp	r2, #6
 8005d68:	d003      	beq.n	8005d72 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d72:	2000      	movs	r0, #0
}
 8005d74:	4770      	bx	lr
    return HAL_ERROR;
 8005d76:	2001      	movs	r0, #1
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000

08005d80 <HAL_TIM_OC_DelayElapsedCallback>:
 8005d80:	4770      	bx	lr

08005d82 <HAL_TIM_IC_CaptureCallback>:
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIM_TriggerCallback>:
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d88:	6803      	ldr	r3, [r0, #0]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	0791      	lsls	r1, r2, #30
{
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d92:	d50e      	bpl.n	8005db2 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	0792      	lsls	r2, r2, #30
 8005d98:	d50b      	bpl.n	8005db2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d9a:	f06f 0202 	mvn.w	r2, #2
 8005d9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005da0:	2201      	movs	r2, #1
 8005da2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	079b      	lsls	r3, r3, #30
 8005da8:	d077      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	f7ff ffea 	bl	8005d82 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	2300      	movs	r3, #0
 8005db0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	0750      	lsls	r0, r2, #29
 8005db8:	d510      	bpl.n	8005ddc <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	0751      	lsls	r1, r2, #29
 8005dbe:	d50d      	bpl.n	8005ddc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc0:	f06f 0204 	mvn.w	r2, #4
 8005dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd2:	d068      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd4:	f7ff ffd5 	bl	8005d82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	0712      	lsls	r2, r2, #28
 8005de2:	d50f      	bpl.n	8005e04 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	0710      	lsls	r0, r2, #28
 8005de8:	d50c      	bpl.n	8005e04 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dea:	f06f 0208 	mvn.w	r2, #8
 8005dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005df0:	2204      	movs	r2, #4
 8005df2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dfa:	d05a      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfc:	f7ff ffc1 	bl	8005d82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e00:	2300      	movs	r3, #0
 8005e02:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	06d2      	lsls	r2, r2, #27
 8005e0a:	d510      	bpl.n	8005e2e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	06d0      	lsls	r0, r2, #27
 8005e10:	d50d      	bpl.n	8005e2e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e12:	f06f 0210 	mvn.w	r2, #16
 8005e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e18:	2208      	movs	r2, #8
 8005e1a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e24:	d04b      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	f7ff ffac 	bl	8005d82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	07d1      	lsls	r1, r2, #31
 8005e34:	d508      	bpl.n	8005e48 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	07d2      	lsls	r2, r2, #31
 8005e3a:	d505      	bpl.n	8005e48 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e3c:	f06f 0201 	mvn.w	r2, #1
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e42:	4620      	mov	r0, r4
 8005e44:	f7fb fccc 	bl	80017e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	0610      	lsls	r0, r2, #24
 8005e4e:	d508      	bpl.n	8005e62 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	0611      	lsls	r1, r2, #24
 8005e54:	d505      	bpl.n	8005e62 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 f8c8 	bl	8005ff2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	0652      	lsls	r2, r2, #25
 8005e68:	d508      	bpl.n	8005e7c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	0650      	lsls	r0, r2, #25
 8005e6e:	d505      	bpl.n	8005e7c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7ff ff85 	bl	8005d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	0691      	lsls	r1, r2, #26
 8005e82:	d522      	bpl.n	8005eca <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	0692      	lsls	r2, r2, #26
 8005e88:	d51f      	bpl.n	8005eca <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e8a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e90:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005e96:	f000 b8ab 	b.w	8005ff0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	f7ff ff71 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f7ff ff70 	bl	8005d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ea4:	e783      	b.n	8005dae <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea6:	f7ff ff6b 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7ff ff6a 	bl	8005d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8005eb0:	e792      	b.n	8005dd8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	f7ff ff65 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7ff ff64 	bl	8005d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ebc:	e7a0      	b.n	8005e00 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	f7ff ff5f 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f7ff ff5e 	bl	8005d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ec8:	e7af      	b.n	8005e2a <HAL_TIM_IRQHandler+0xa2>
}
 8005eca:	bd10      	pop	{r4, pc}

08005ecc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ecc:	4a30      	ldr	r2, [pc, #192]	; (8005f90 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005ece:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ed0:	4290      	cmp	r0, r2
 8005ed2:	d012      	beq.n	8005efa <TIM_Base_SetConfig+0x2e>
 8005ed4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005ed8:	d00f      	beq.n	8005efa <TIM_Base_SetConfig+0x2e>
 8005eda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005ede:	4290      	cmp	r0, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_Base_SetConfig+0x2e>
 8005ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ee6:	4290      	cmp	r0, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_Base_SetConfig+0x2e>
 8005eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eee:	4290      	cmp	r0, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_Base_SetConfig+0x2e>
 8005ef2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005ef6:	4290      	cmp	r0, r2
 8005ef8:	d119      	bne.n	8005f2e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005efa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f00:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f02:	4a23      	ldr	r2, [pc, #140]	; (8005f90 <TIM_Base_SetConfig+0xc4>)
 8005f04:	4290      	cmp	r0, r2
 8005f06:	d029      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f0c:	d026      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f0e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005f12:	4290      	cmp	r0, r2
 8005f14:	d022      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f1a:	4290      	cmp	r0, r2
 8005f1c:	d01e      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f22:	4290      	cmp	r0, r2
 8005f24:	d01a      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f26:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005f2a:	4290      	cmp	r0, r2
 8005f2c:	d016      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f2e:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <TIM_Base_SetConfig+0xc8>)
 8005f30:	4290      	cmp	r0, r2
 8005f32:	d013      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f38:	4290      	cmp	r0, r2
 8005f3a:	d00f      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f40:	4290      	cmp	r0, r2
 8005f42:	d00b      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f44:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005f48:	4290      	cmp	r0, r2
 8005f4a:	d007      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f50:	4290      	cmp	r0, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_Base_SetConfig+0x90>
 8005f54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f58:	4290      	cmp	r0, r2
 8005f5a:	d103      	bne.n	8005f64 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f62:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f64:	694a      	ldr	r2, [r1, #20]
 8005f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f6a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005f6c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f6e:	688b      	ldr	r3, [r1, #8]
 8005f70:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f72:	680b      	ldr	r3, [r1, #0]
 8005f74:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <TIM_Base_SetConfig+0xc4>)
 8005f78:	4298      	cmp	r0, r3
 8005f7a:	d003      	beq.n	8005f84 <TIM_Base_SetConfig+0xb8>
 8005f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f80:	4298      	cmp	r0, r3
 8005f82:	d101      	bne.n	8005f88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f84:	690b      	ldr	r3, [r1, #16]
 8005f86:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	6143      	str	r3, [r0, #20]
}
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40014000 	.word	0x40014000

08005f98 <HAL_TIM_Base_Init>:
{
 8005f98:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	b330      	cbz	r0, 8005fec <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005fa2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005fa6:	b91b      	cbnz	r3, 8005fb0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005fa8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005fac:	f7ff feac 	bl	8005d08 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb8:	1d21      	adds	r1, r4, #4
 8005fba:	f7ff ff87 	bl	8005ecc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8005fc4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005fca:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005fce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005fd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005fe6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005fea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005fec:	2001      	movs	r0, #1
 8005fee:	e7fc      	b.n	8005fea <HAL_TIM_Base_Init+0x52>

08005ff0 <HAL_TIMEx_CommutCallback>:
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_TIMEx_BreakCallback>:
 8005ff2:	4770      	bx	lr

08005ff4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005ff8:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8005ffc:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8006000:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8006004:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 8006008:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800600c:	6809      	ldr	r1, [r1, #0]
 800600e:	ea43 0308 	orr.w	r3, r3, r8
 8006012:	b991      	cbnz	r1, 800603a <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006014:	ea43 030e 	orr.w	r3, r3, lr
 8006018:	4313      	orrs	r3, r2
 800601a:	ea43 030c 	orr.w	r3, r3, ip
 800601e:	6801      	ldr	r1, [r0, #0]
 8006020:	433b      	orrs	r3, r7
 8006022:	4333      	orrs	r3, r6
 8006024:	432b      	orrs	r3, r5
 8006026:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800602a:	4323      	orrs	r3, r4
 800602c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8006030:	430b      	orrs	r3, r1
 8006032:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006034:	2000      	movs	r0, #0
 8006036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800603a:	6801      	ldr	r1, [r0, #0]
 800603c:	ea43 030e 	orr.w	r3, r3, lr
 8006040:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006044:	430b      	orrs	r3, r1
 8006046:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006048:	ea42 030c 	orr.w	r3, r2, ip
 800604c:	6841      	ldr	r1, [r0, #4]
 800604e:	433b      	orrs	r3, r7
 8006050:	4333      	orrs	r3, r6
 8006052:	432b      	orrs	r3, r5
 8006054:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 8006058:	4323      	orrs	r3, r4
 800605a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800605e:	4313      	orrs	r3, r2
 8006060:	6043      	str	r3, [r0, #4]
 8006062:	e7e7      	b.n	8006034 <FMC_SDRAM_Init+0x40>

08006064 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006064:	68cb      	ldr	r3, [r1, #12]
 8006066:	f103 3cff 	add.w	ip, r3, #4294967295
 800606a:	694b      	ldr	r3, [r1, #20]
{
 800606c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800606e:	680f      	ldr	r7, [r1, #0]
 8006070:	684c      	ldr	r4, [r1, #4]
 8006072:	688e      	ldr	r6, [r1, #8]
 8006074:	690d      	ldr	r5, [r1, #16]
 8006076:	6989      	ldr	r1, [r1, #24]
 8006078:	3b01      	subs	r3, #1
 800607a:	051b      	lsls	r3, r3, #20
 800607c:	3c01      	subs	r4, #1
 800607e:	3e01      	subs	r6, #1
 8006080:	3d01      	subs	r5, #1
 8006082:	3901      	subs	r1, #1
 8006084:	3f01      	subs	r7, #1
 8006086:	0124      	lsls	r4, r4, #4
 8006088:	0236      	lsls	r6, r6, #8
 800608a:	042d      	lsls	r5, r5, #16
 800608c:	0609      	lsls	r1, r1, #24
 800608e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006092:	b95a      	cbnz	r2, 80060ac <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006094:	433b      	orrs	r3, r7
 8006096:	4323      	orrs	r3, r4
 8006098:	6882      	ldr	r2, [r0, #8]
 800609a:	4333      	orrs	r3, r6
 800609c:	432b      	orrs	r3, r5
 800609e:	430b      	orrs	r3, r1
 80060a0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80060a4:	4313      	orrs	r3, r2
 80060a6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80060a8:	2000      	movs	r0, #0
 80060aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060ac:	6882      	ldr	r2, [r0, #8]
 80060ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80060b2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80060b6:	431a      	orrs	r2, r3
 80060b8:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80060ba:	ea44 0306 	orr.w	r3, r4, r6
 80060be:	68c2      	ldr	r2, [r0, #12]
 80060c0:	433b      	orrs	r3, r7
 80060c2:	432b      	orrs	r3, r5
 80060c4:	430b      	orrs	r3, r1
 80060c6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60c3      	str	r3, [r0, #12]
 80060ce:	e7eb      	b.n	80060a8 <FMC_SDRAM_Timing_Init+0x44>

080060d0 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 80060d0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80060d4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80060d8:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 80060dc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80060e0:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 80060e6:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 80060e8:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	4770      	bx	lr

080060ee <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4604      	mov	r4, r0
 80060f2:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80060f4:	6902      	ldr	r2, [r0, #16]
 80060f6:	e9d1 3000 	ldrd	r3, r0, [r1]
 80060fa:	4303      	orrs	r3, r0
 80060fc:	68c8      	ldr	r0, [r1, #12]
 80060fe:	0d92      	lsrs	r2, r2, #22
 8006100:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8006104:	0592      	lsls	r2, r2, #22
 8006106:	4313      	orrs	r3, r2
 8006108:	688a      	ldr	r2, [r1, #8]
 800610a:	3a01      	subs	r2, #1
 800610c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006110:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006112:	f7fd f849 	bl	80031a8 <HAL_GetTick>
 8006116:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006118:	69a3      	ldr	r3, [r4, #24]
 800611a:	f013 0320 	ands.w	r3, r3, #32
 800611e:	d101      	bne.n	8006124 <FMC_SDRAM_SendCommand+0x36>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006120:	4618      	mov	r0, r3
 8006122:	e003      	b.n	800612c <FMC_SDRAM_SendCommand+0x3e>
    if (Timeout != HAL_MAX_DELAY)
 8006124:	1c6b      	adds	r3, r5, #1
 8006126:	d0f7      	beq.n	8006118 <FMC_SDRAM_SendCommand+0x2a>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006128:	b90d      	cbnz	r5, 800612e <FMC_SDRAM_SendCommand+0x40>
        return HAL_TIMEOUT;
 800612a:	2003      	movs	r0, #3
}
 800612c:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800612e:	f7fd f83b 	bl	80031a8 <HAL_GetTick>
 8006132:	1b80      	subs	r0, r0, r6
 8006134:	42a8      	cmp	r0, r5
 8006136:	d9ef      	bls.n	8006118 <FMC_SDRAM_SendCommand+0x2a>
 8006138:	e7f7      	b.n	800612a <FMC_SDRAM_SendCommand+0x3c>

0800613a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800613a:	6943      	ldr	r3, [r0, #20]
 800613c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006140:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006144:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006148:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800614a:	2000      	movs	r0, #0
 800614c:	4770      	bx	lr

0800614e <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800614e:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006150:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006154:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006156:	f001 fe3d 	bl	8007dd4 <xTaskGetSchedulerState>
 800615a:	2801      	cmp	r0, #1
 800615c:	d003      	beq.n	8006166 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800615e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006162:	f000 bbdf 	b.w	8006924 <xPortSysTickHandler>
}
 8006166:	bd08      	pop	{r3, pc}

08006168 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006168:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800616c:	b92b      	cbnz	r3, 800617a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <osKernelInitialize+0x20>)
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	b928      	cbnz	r0, 8006180 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006178:	4770      	bx	lr
    stat = osErrorISR;
 800617a:	f06f 0005 	mvn.w	r0, #5
 800617e:	4770      	bx	lr
    } else {
      stat = osError;
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	200016d8 	.word	0x200016d8

0800618c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800618c:	b510      	push	{r4, lr}
 800618e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006192:	b95c      	cbnz	r4, 80061ac <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006194:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <osKernelStart+0x2c>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	2a01      	cmp	r2, #1
 800619a:	d10a      	bne.n	80061b2 <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619c:	4a07      	ldr	r2, [pc, #28]	; (80061bc <osKernelStart+0x30>)
 800619e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061a0:	2202      	movs	r2, #2
 80061a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061a4:	f001 fcba 	bl	8007b1c <vTaskStartScheduler>
      stat = osOK;
 80061a8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80061aa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80061ac:	f06f 0005 	mvn.w	r0, #5
 80061b0:	e7fb      	b.n	80061aa <osKernelStart+0x1e>
      stat = osError;
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80061b6:	e7f8      	b.n	80061aa <osKernelStart+0x1e>
 80061b8:	200016d8 	.word	0x200016d8
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c2:	b087      	sub	sp, #28
 80061c4:	460b      	mov	r3, r1
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061c6:	2100      	movs	r1, #0
 80061c8:	9105      	str	r1, [sp, #20]
 80061ca:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80061ce:	b9cc      	cbnz	r4, 8006204 <osThreadNew+0x44>
 80061d0:	b1c0      	cbz	r0, 8006204 <osThreadNew+0x44>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80061d2:	b36a      	cbz	r2, 8006230 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80061d4:	6995      	ldr	r5, [r2, #24]
 80061d6:	428d      	cmp	r5, r1
 80061d8:	bf08      	it	eq
 80061da:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061dc:	1e69      	subs	r1, r5, #1
 80061de:	2937      	cmp	r1, #55	; 0x37
 80061e0:	46ac      	mov	ip, r5
 80061e2:	d82a      	bhi.n	800623a <osThreadNew+0x7a>
 80061e4:	6851      	ldr	r1, [r2, #4]
 80061e6:	07c9      	lsls	r1, r1, #31
 80061e8:	d427      	bmi.n	800623a <osThreadNew+0x7a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80061ea:	6956      	ldr	r6, [r2, #20]
 80061ec:	b16e      	cbz	r6, 800620a <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061ee:	08b4      	lsrs	r4, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061f0:	e9d2 7e02 	ldrd	r7, lr, [r2, #8]
      if (attr->name != NULL) {
 80061f4:	6811      	ldr	r1, [r2, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061f6:	b157      	cbz	r7, 800620e <osThreadNew+0x4e>
 80061f8:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80061fc:	d902      	bls.n	8006204 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061fe:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006200:	b102      	cbz	r2, 8006204 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006202:	b9e6      	cbnz	r6, 800623e <osThreadNew+0x7e>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006204:	9805      	ldr	r0, [sp, #20]
}
 8006206:	b007      	add	sp, #28
 8006208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800620a:	2480      	movs	r4, #128	; 0x80
 800620c:	e7f0      	b.n	80061f0 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800620e:	f1be 0f00 	cmp.w	lr, #0
 8006212:	d1f7      	bne.n	8006204 <osThreadNew+0x44>
      if (mem == 0) {
 8006214:	6912      	ldr	r2, [r2, #16]
 8006216:	2a00      	cmp	r2, #0
 8006218:	d1f4      	bne.n	8006204 <osThreadNew+0x44>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800621a:	aa05      	add	r2, sp, #20
 800621c:	e9cd c200 	strd	ip, r2, [sp]
 8006220:	b2a2      	uxth	r2, r4
 8006222:	f001 faf6 	bl	8007812 <xTaskCreate>
 8006226:	2801      	cmp	r0, #1
            hTask = NULL;
 8006228:	bf1c      	itt	ne
 800622a:	2300      	movne	r3, #0
 800622c:	9305      	strne	r3, [sp, #20]
 800622e:	e7e9      	b.n	8006204 <osThreadNew+0x44>
    name = NULL;
 8006230:	4611      	mov	r1, r2
    prio  = (UBaseType_t)osPriorityNormal;
 8006232:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006236:	2480      	movs	r4, #128	; 0x80
 8006238:	e7ef      	b.n	800621a <osThreadNew+0x5a>
        return (NULL);
 800623a:	4620      	mov	r0, r4
 800623c:	e7e3      	b.n	8006206 <osThreadNew+0x46>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800623e:	e9cd 2701 	strd	r2, r7, [sp, #4]
 8006242:	9500      	str	r5, [sp, #0]
 8006244:	4622      	mov	r2, r4
 8006246:	f001 faac 	bl	80077a2 <xTaskCreateStatic>
 800624a:	9005      	str	r0, [sp, #20]
 800624c:	e7da      	b.n	8006204 <osThreadNew+0x44>

0800624e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800624e:	b510      	push	{r4, lr}
 8006250:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006254:	b924      	cbnz	r4, 8006260 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006256:	b110      	cbz	r0, 800625e <osDelay+0x10>
      vTaskDelay(ticks);
 8006258:	f001 fc20 	bl	8007a9c <vTaskDelay>
    stat = osOK;
 800625c:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 800625e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006260:	f06f 0005 	mvn.w	r0, #5
 8006264:	e7fb      	b.n	800625e <osDelay+0x10>

08006266 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006268:	4604      	mov	r4, r0
 800626a:	460e      	mov	r6, r1
 800626c:	4615      	mov	r5, r2
 800626e:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006272:	b11a      	cbz	r2, 800627c <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8006274:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006276:	4620      	mov	r0, r4
 8006278:	b003      	add	sp, #12
 800627a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800627c:	2800      	cmp	r0, #0
 800627e:	d0f9      	beq.n	8006274 <osSemaphoreNew+0xe>
 8006280:	4288      	cmp	r0, r1
 8006282:	d3f7      	bcc.n	8006274 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8006284:	b1e5      	cbz	r5, 80062c0 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006286:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800628a:	b1bb      	cbz	r3, 80062bc <osSemaphoreNew+0x56>
 800628c:	2f4f      	cmp	r7, #79	; 0x4f
 800628e:	d9f1      	bls.n	8006274 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8006290:	2801      	cmp	r0, #1
 8006292:	d12a      	bne.n	80062ea <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006294:	2103      	movs	r1, #3
 8006296:	9100      	str	r1, [sp, #0]
 8006298:	4611      	mov	r1, r2
 800629a:	f000 fcec 	bl	8006c76 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800629e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d0e7      	beq.n	8006274 <osSemaphoreNew+0xe>
 80062a4:	b1de      	cbz	r6, 80062de <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80062a6:	2300      	movs	r3, #0
 80062a8:	461a      	mov	r2, r3
 80062aa:	4619      	mov	r1, r3
 80062ac:	f000 fd98 	bl	8006de0 <xQueueGenericSend>
 80062b0:	2801      	cmp	r0, #1
 80062b2:	d014      	beq.n	80062de <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 80062b4:	4620      	mov	r0, r4
 80062b6:	f001 f8d3 	bl	8007460 <vQueueDelete>
 80062ba:	e7db      	b.n	8006274 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80062bc:	2f00      	cmp	r7, #0
 80062be:	d1d9      	bne.n	8006274 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 80062c0:	2c01      	cmp	r4, #1
 80062c2:	d105      	bne.n	80062d0 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 80062c4:	2203      	movs	r2, #3
 80062c6:	2100      	movs	r1, #0
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fd22 	bl	8006d12 <xQueueGenericCreate>
 80062ce:	e7e6      	b.n	800629e <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80062d0:	4620      	mov	r0, r4
 80062d2:	4631      	mov	r1, r6
 80062d4:	f000 fd66 	bl	8006da4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80062d8:	4604      	mov	r4, r0
 80062da:	2800      	cmp	r0, #0
 80062dc:	d0ca      	beq.n	8006274 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 80062de:	b955      	cbnz	r5, 80062f6 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 80062e0:	4629      	mov	r1, r5
 80062e2:	4620      	mov	r0, r4
 80062e4:	f001 f896 	bl	8007414 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80062e8:	e7c5      	b.n	8006276 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80062ea:	461a      	mov	r2, r3
 80062ec:	f000 fd38 	bl	8006d60 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80062f0:	4604      	mov	r4, r0
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d0be      	beq.n	8006274 <osSemaphoreNew+0xe>
          name = attr->name;
 80062f6:	682d      	ldr	r5, [r5, #0]
 80062f8:	e7f2      	b.n	80062e0 <osSemaphoreNew+0x7a>

080062fa <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80062fa:	b513      	push	{r0, r1, r4, lr}
 80062fc:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80062fe:	b308      	cbz	r0, 8006344 <osSemaphoreAcquire+0x4a>
 8006300:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006304:	b1b3      	cbz	r3, 8006334 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 8006306:	b9e9      	cbnz	r1, 8006344 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006308:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800630a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800630c:	f001 f833 	bl	8007376 <xQueueReceiveFromISR>
 8006310:	2801      	cmp	r0, #1
 8006312:	d114      	bne.n	800633e <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	b913      	cbnz	r3, 800631e <osSemaphoreAcquire+0x24>
  stat = osOK;
 8006318:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800631a:	b002      	add	sp, #8
 800631c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800631e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	e7f1      	b.n	8006318 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006334:	f000 ff5c 	bl	80071f0 <xQueueSemaphoreTake>
 8006338:	2801      	cmp	r0, #1
 800633a:	d0ed      	beq.n	8006318 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800633c:	b92c      	cbnz	r4, 800634a <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800633e:	f06f 0002 	mvn.w	r0, #2
 8006342:	e7ea      	b.n	800631a <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006344:	f06f 0003 	mvn.w	r0, #3
 8006348:	e7e7      	b.n	800631a <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800634a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800634e:	e7e4      	b.n	800631a <osSemaphoreAcquire+0x20>

08006350 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006350:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006352:	b310      	cbz	r0, 800639a <osSemaphoreRelease+0x4a>
 8006354:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006358:	b1b3      	cbz	r3, 8006388 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800635a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800635c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800635e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006360:	f000 fe53 	bl	800700a <xQueueGiveFromISR>
 8006364:	2801      	cmp	r0, #1
 8006366:	d115      	bne.n	8006394 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8006368:	9b01      	ldr	r3, [sp, #4]
 800636a:	b913      	cbnz	r3, 8006372 <osSemaphoreRelease+0x22>
  stat = osOK;
 800636c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800636e:	b002      	add	sp, #8
 8006370:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8006372:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	e7f1      	b.n	800636c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006388:	461a      	mov	r2, r3
 800638a:	4619      	mov	r1, r3
 800638c:	f000 fd28 	bl	8006de0 <xQueueGenericSend>
 8006390:	2801      	cmp	r0, #1
 8006392:	d0eb      	beq.n	800636c <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8006394:	f06f 0002 	mvn.w	r0, #2
 8006398:	e7e9      	b.n	800636e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800639a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800639e:	e7e6      	b.n	800636e <osSemaphoreRelease+0x1e>

080063a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80063a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a2:	4605      	mov	r5, r0
 80063a4:	460e      	mov	r6, r1
 80063a6:	4614      	mov	r4, r2
 80063a8:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063ac:	b11f      	cbz	r7, 80063b6 <osMessageQueueNew+0x16>
  hQueue = NULL;
 80063ae:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80063b0:	4628      	mov	r0, r5
 80063b2:	b003      	add	sp, #12
 80063b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d0f9      	beq.n	80063ae <osMessageQueueNew+0xe>
 80063ba:	2900      	cmp	r1, #0
 80063bc:	d0f7      	beq.n	80063ae <osMessageQueueNew+0xe>
    if (attr != NULL) {
 80063be:	b1da      	cbz	r2, 80063f8 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063c0:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 80063c4:	b183      	cbz	r3, 80063e8 <osMessageQueueNew+0x48>
 80063c6:	2a4f      	cmp	r2, #79	; 0x4f
 80063c8:	d9f1      	bls.n	80063ae <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80063ca:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	d0ee      	beq.n	80063ae <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80063d0:	6966      	ldr	r6, [r4, #20]
 80063d2:	434d      	muls	r5, r1
 80063d4:	42ae      	cmp	r6, r5
 80063d6:	d3ea      	bcc.n	80063ae <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80063d8:	9700      	str	r7, [sp, #0]
 80063da:	f000 fc4c 	bl	8006c76 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80063de:	4605      	mov	r5, r0
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d0e4      	beq.n	80063ae <osMessageQueueNew+0xe>
        name = attr->name;
 80063e4:	6824      	ldr	r4, [r4, #0]
 80063e6:	e011      	b.n	800640c <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80063e8:	2a00      	cmp	r2, #0
 80063ea:	d1e0      	bne.n	80063ae <osMessageQueueNew+0xe>
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1dd      	bne.n	80063ae <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80063f2:	6963      	ldr	r3, [r4, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1da      	bne.n	80063ae <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80063f8:	4628      	mov	r0, r5
 80063fa:	2200      	movs	r2, #0
 80063fc:	4631      	mov	r1, r6
 80063fe:	f000 fc88 	bl	8006d12 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006402:	4605      	mov	r5, r0
 8006404:	2800      	cmp	r0, #0
 8006406:	d0d2      	beq.n	80063ae <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8006408:	2c00      	cmp	r4, #0
 800640a:	d1eb      	bne.n	80063e4 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800640c:	4621      	mov	r1, r4
 800640e:	4628      	mov	r0, r5
 8006410:	f001 f800 	bl	8007414 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8006414:	e7cc      	b.n	80063b0 <osMessageQueueNew+0x10>

08006416 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006418:	461c      	mov	r4, r3
 800641a:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800641e:	b1c6      	cbz	r6, 8006452 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006420:	b318      	cbz	r0, 800646a <osMessageQueuePut+0x54>
 8006422:	b311      	cbz	r1, 800646a <osMessageQueuePut+0x54>
 8006424:	bb0b      	cbnz	r3, 800646a <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006426:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006428:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800642a:	f000 fd8c 	bl	8006f46 <xQueueGenericSendFromISR>
 800642e:	2801      	cmp	r0, #1
 8006430:	d118      	bne.n	8006464 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006432:	9b01      	ldr	r3, [sp, #4]
 8006434:	b913      	cbnz	r3, 800643c <osMessageQueuePut+0x26>
  stat = osOK;
 8006436:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006438:	b002      	add	sp, #8
 800643a:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800643c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006444:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	e7f1      	b.n	8006436 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006452:	b150      	cbz	r0, 800646a <osMessageQueuePut+0x54>
 8006454:	b149      	cbz	r1, 800646a <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006456:	4633      	mov	r3, r6
 8006458:	4622      	mov	r2, r4
 800645a:	f000 fcc1 	bl	8006de0 <xQueueGenericSend>
 800645e:	2801      	cmp	r0, #1
 8006460:	d0e9      	beq.n	8006436 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 8006462:	b92c      	cbnz	r4, 8006470 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 8006464:	f06f 0002 	mvn.w	r0, #2
 8006468:	e7e6      	b.n	8006438 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800646a:	f06f 0003 	mvn.w	r0, #3
 800646e:	e7e3      	b.n	8006438 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 8006470:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006474:	e7e0      	b.n	8006438 <osMessageQueuePut+0x22>

08006476 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006476:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006478:	461c      	mov	r4, r3
 800647a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800647e:	b1c3      	cbz	r3, 80064b2 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006480:	b310      	cbz	r0, 80064c8 <osMessageQueueGet+0x52>
 8006482:	b309      	cbz	r1, 80064c8 <osMessageQueueGet+0x52>
 8006484:	bb04      	cbnz	r4, 80064c8 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006486:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006488:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800648a:	f000 ff74 	bl	8007376 <xQueueReceiveFromISR>
 800648e:	2801      	cmp	r0, #1
 8006490:	d117      	bne.n	80064c2 <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006492:	9b01      	ldr	r3, [sp, #4]
 8006494:	b913      	cbnz	r3, 800649c <osMessageQueueGet+0x26>
  stat = osOK;
 8006496:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006498:	b003      	add	sp, #12
 800649a:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800649c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80064a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	e7f1      	b.n	8006496 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80064b2:	b148      	cbz	r0, 80064c8 <osMessageQueueGet+0x52>
 80064b4:	b141      	cbz	r1, 80064c8 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80064b6:	4622      	mov	r2, r4
 80064b8:	f000 fdfb 	bl	80070b2 <xQueueReceive>
 80064bc:	2801      	cmp	r0, #1
 80064be:	d0ea      	beq.n	8006496 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 80064c0:	b92c      	cbnz	r4, 80064ce <osMessageQueueGet+0x58>
          stat = osErrorResource;
 80064c2:	f06f 0002 	mvn.w	r0, #2
 80064c6:	e7e7      	b.n	8006498 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 80064c8:	f06f 0003 	mvn.w	r0, #3
 80064cc:	e7e4      	b.n	8006498 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 80064ce:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80064d2:	e7e1      	b.n	8006498 <osMessageQueueGet+0x22>

080064d4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064d4:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <vApplicationGetIdleTaskMemory+0x10>)
 80064d6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064d8:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <vApplicationGetIdleTaskMemory+0x14>)
 80064da:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	6013      	str	r3, [r2, #0]
}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20001678 	.word	0x20001678
 80064e8:	20001478 	.word	0x20001478

080064ec <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064ec:	4b03      	ldr	r3, [pc, #12]	; (80064fc <vApplicationGetTimerTaskMemory+0x10>)
 80064ee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064f0:	4b03      	ldr	r3, [pc, #12]	; (8006500 <vApplicationGetTimerTaskMemory+0x14>)
 80064f2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064f8:	6013      	str	r3, [r2, #0]
}
 80064fa:	4770      	bx	lr
 80064fc:	20001adc 	.word	0x20001adc
 8006500:	200016dc 	.word	0x200016dc

08006504 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006504:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <prvInsertBlockIntoFreeList+0x44>)
 8006508:	461a      	mov	r2, r3
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4283      	cmp	r3, r0
 800650e:	d3fb      	bcc.n	8006508 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006510:	6854      	ldr	r4, [r2, #4]
 8006512:	1911      	adds	r1, r2, r4
 8006514:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006516:	bf01      	itttt	eq
 8006518:	6841      	ldreq	r1, [r0, #4]
 800651a:	4610      	moveq	r0, r2
 800651c:	1909      	addeq	r1, r1, r4
 800651e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006520:	6844      	ldr	r4, [r0, #4]
 8006522:	1901      	adds	r1, r0, r4
 8006524:	428b      	cmp	r3, r1
 8006526:	d10c      	bne.n	8006542 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006528:	4908      	ldr	r1, [pc, #32]	; (800654c <prvInsertBlockIntoFreeList+0x48>)
 800652a:	6809      	ldr	r1, [r1, #0]
 800652c:	428b      	cmp	r3, r1
 800652e:	d003      	beq.n	8006538 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	4421      	add	r1, r4
 8006534:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006536:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006538:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800653a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800653c:	bf18      	it	ne
 800653e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006540:	bd10      	pop	{r4, pc}
 8006542:	4619      	mov	r1, r3
 8006544:	e7f8      	b.n	8006538 <prvInsertBlockIntoFreeList+0x34>
 8006546:	bf00      	nop
 8006548:	20009b54 	.word	0x20009b54
 800654c:	20001b3c 	.word	0x20001b3c

08006550 <pvPortMalloc>:
{
 8006550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006554:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006556:	f001 f989 	bl	800786c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800655a:	4942      	ldr	r1, [pc, #264]	; (8006664 <pvPortMalloc+0x114>)
 800655c:	4d42      	ldr	r5, [pc, #264]	; (8006668 <pvPortMalloc+0x118>)
 800655e:	680b      	ldr	r3, [r1, #0]
 8006560:	bb0b      	cbnz	r3, 80065a6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8006562:	4a42      	ldr	r2, [pc, #264]	; (800666c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006564:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006566:	bf1f      	itttt	ne
 8006568:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800656a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800656e:	f502 4200 	addne.w	r2, r2, #32768	; 0x8000
 8006572:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006574:	bf0c      	ite	eq
 8006576:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800657a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800657c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800657e:	4e3c      	ldr	r6, [pc, #240]	; (8006670 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8006580:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006582:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006586:	2000      	movs	r0, #0
 8006588:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800658a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800658c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006590:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006592:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8006596:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006598:	4b36      	ldr	r3, [pc, #216]	; (8006674 <pvPortMalloc+0x124>)
 800659a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800659c:	4b36      	ldr	r3, [pc, #216]	; (8006678 <pvPortMalloc+0x128>)
 800659e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065a4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065a6:	682e      	ldr	r6, [r5, #0]
 80065a8:	4226      	tst	r6, r4
 80065aa:	d155      	bne.n	8006658 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 80065ac:	2c00      	cmp	r4, #0
 80065ae:	d046      	beq.n	800663e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 80065b0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065b4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065b6:	bf1c      	itt	ne
 80065b8:	f023 0307 	bicne.w	r3, r3, #7
 80065bc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d04a      	beq.n	8006658 <pvPortMalloc+0x108>
 80065c2:	4f2d      	ldr	r7, [pc, #180]	; (8006678 <pvPortMalloc+0x128>)
 80065c4:	683c      	ldr	r4, [r7, #0]
 80065c6:	429c      	cmp	r4, r3
 80065c8:	d346      	bcc.n	8006658 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 80065ca:	4a29      	ldr	r2, [pc, #164]	; (8006670 <pvPortMalloc+0x120>)
 80065cc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065ce:	6868      	ldr	r0, [r5, #4]
 80065d0:	4298      	cmp	r0, r3
 80065d2:	d204      	bcs.n	80065de <pvPortMalloc+0x8e>
 80065d4:	f8d5 c000 	ldr.w	ip, [r5]
 80065d8:	f1bc 0f00 	cmp.w	ip, #0
 80065dc:	d115      	bne.n	800660a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80065de:	6809      	ldr	r1, [r1, #0]
 80065e0:	42a9      	cmp	r1, r5
 80065e2:	d039      	beq.n	8006658 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065e4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065e6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065ea:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065ec:	1ac2      	subs	r2, r0, r3
 80065ee:	2a10      	cmp	r2, #16
 80065f0:	d912      	bls.n	8006618 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065f2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065f4:	0741      	lsls	r1, r0, #29
 80065f6:	d00b      	beq.n	8006610 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	e7fe      	b.n	8006608 <pvPortMalloc+0xb8>
 800660a:	462a      	mov	r2, r5
 800660c:	4665      	mov	r5, ip
 800660e:	e7de      	b.n	80065ce <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006610:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006612:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006614:	f7ff ff76 	bl	8006504 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006618:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800661a:	4916      	ldr	r1, [pc, #88]	; (8006674 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800661c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800661e:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8006620:	4a16      	ldr	r2, [pc, #88]	; (800667c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006622:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006624:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800662a:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800662c:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800662e:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8006630:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006634:	bf38      	it	cc
 8006636:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8006638:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800663a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800663e:	f001 f9b9 	bl	80079b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006642:	0763      	lsls	r3, r4, #29
 8006644:	d00a      	beq.n	800665c <pvPortMalloc+0x10c>
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	e7fe      	b.n	8006656 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8006658:	2400      	movs	r4, #0
 800665a:	e7f0      	b.n	800663e <pvPortMalloc+0xee>
}
 800665c:	4620      	mov	r0, r4
 800665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006662:	bf00      	nop
 8006664:	20001b3c 	.word	0x20001b3c
 8006668:	20009b40 	.word	0x20009b40
 800666c:	20001b40 	.word	0x20001b40
 8006670:	20009b54 	.word	0x20009b54
 8006674:	20009b48 	.word	0x20009b48
 8006678:	20009b44 	.word	0x20009b44
 800667c:	20009b4c 	.word	0x20009b4c

08006680 <vPortFree>:
{
 8006680:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006682:	4604      	mov	r4, r0
 8006684:	b390      	cbz	r0, 80066ec <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006686:	4a1a      	ldr	r2, [pc, #104]	; (80066f0 <vPortFree+0x70>)
 8006688:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	4213      	tst	r3, r2
 8006690:	d108      	bne.n	80066a4 <vPortFree+0x24>
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	e7fe      	b.n	80066a2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066a4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80066a8:	b141      	cbz	r1, 80066bc <vPortFree+0x3c>
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	e7fe      	b.n	80066ba <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066bc:	ea23 0302 	bic.w	r3, r3, r2
 80066c0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80066c4:	f001 f8d2 	bl	800786c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066c8:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <vPortFree+0x74>)
 80066ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80066ce:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066d0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066d4:	440b      	add	r3, r1
 80066d6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066d8:	f7ff ff14 	bl	8006504 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066dc:	4a06      	ldr	r2, [pc, #24]	; (80066f8 <vPortFree+0x78>)
 80066de:	6813      	ldr	r3, [r2, #0]
}
 80066e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80066e4:	3301      	adds	r3, #1
 80066e6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80066e8:	f001 b964 	b.w	80079b4 <xTaskResumeAll>
}
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	bf00      	nop
 80066f0:	20009b40 	.word	0x20009b40
 80066f4:	20009b44 	.word	0x20009b44
 80066f8:	20009b50 	.word	0x20009b50

080066fc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066fc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006700:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006704:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006708:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800670a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006710:	4770      	bx	lr

08006712 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006716:	4770      	bx	lr

08006718 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006718:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800671a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006724:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006726:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006728:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800672a:	3301      	adds	r3, #1
 800672c:	6003      	str	r3, [r0, #0]
}
 800672e:	4770      	bx	lr

08006730 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006730:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006732:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006734:	1c63      	adds	r3, r4, #1
 8006736:	d10a      	bne.n	800674e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006738:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800673e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006740:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006742:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006744:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006746:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006748:	3301      	adds	r3, #1
 800674a:	6003      	str	r3, [r0, #0]
}
 800674c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800674e:	f100 0208 	add.w	r2, r0, #8
 8006752:	4613      	mov	r3, r2
 8006754:	6852      	ldr	r2, [r2, #4]
 8006756:	6815      	ldr	r5, [r2, #0]
 8006758:	42a5      	cmp	r5, r4
 800675a:	d9fa      	bls.n	8006752 <vListInsert+0x22>
 800675c:	e7ed      	b.n	800673a <vListInsert+0xa>

0800675e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800675e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8006762:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006764:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006766:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006768:	6859      	ldr	r1, [r3, #4]
 800676a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800676c:	bf08      	it	eq
 800676e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006770:	2200      	movs	r2, #0
 8006772:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	3a01      	subs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800677a:	6818      	ldr	r0, [r3, #0]
}
 800677c:	4770      	bx	lr
	...

08006780 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006780:	4808      	ldr	r0, [pc, #32]	; (80067a4 <prvPortStartFirstTask+0x24>)
 8006782:	6800      	ldr	r0, [r0, #0]
 8006784:	6800      	ldr	r0, [r0, #0]
 8006786:	f380 8808 	msr	MSP, r0
 800678a:	f04f 0000 	mov.w	r0, #0
 800678e:	f380 8814 	msr	CONTROL, r0
 8006792:	b662      	cpsie	i
 8006794:	b661      	cpsie	f
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	df00      	svc	0
 80067a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067a2:	0000      	.short	0x0000
 80067a4:	e000ed08 	.word	0xe000ed08

080067a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067b8 <vPortEnableVFP+0x10>
 80067ac:	6801      	ldr	r1, [r0, #0]
 80067ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067b2:	6001      	str	r1, [r0, #0]
 80067b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067b6:	0000      	.short	0x0000
 80067b8:	e000ed88 	.word	0xe000ed88

080067bc <prvTaskExitError>:
{
 80067bc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <prvTaskExitError+0x3c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3301      	adds	r3, #1
 80067c8:	d008      	beq.n	80067dc <prvTaskExitError+0x20>
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	e7fe      	b.n	80067da <prvTaskExitError+0x1e>
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0fc      	beq.n	80067ec <prvTaskExitError+0x30>
}
 80067f2:	b002      	add	sp, #8
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20000054 	.word	0x20000054

080067fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006800:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006804:	4b07      	ldr	r3, [pc, #28]	; (8006824 <pxPortInitialiseStack+0x28>)
 8006806:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800680a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800680e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006812:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006816:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800681a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800681e:	3844      	subs	r0, #68	; 0x44
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	080067bd 	.word	0x080067bd
	...

08006830 <SVC_Handler>:
	__asm volatile (
 8006830:	4b07      	ldr	r3, [pc, #28]	; (8006850 <pxCurrentTCBConst2>)
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683a:	f380 8809 	msr	PSP, r0
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f04f 0000 	mov.w	r0, #0
 8006846:	f380 8811 	msr	BASEPRI, r0
 800684a:	4770      	bx	lr
 800684c:	f3af 8000 	nop.w

08006850 <pxCurrentTCBConst2>:
 8006850:	20009ba4 	.word	0x20009ba4

08006854 <vPortEnterCritical>:
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006864:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <vPortEnterCritical+0x3c>)
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800686a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800686c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800686e:	d10e      	bne.n	800688e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006870:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006874:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006878:	b2db      	uxtb	r3, r3
 800687a:	b143      	cbz	r3, 800688e <vPortEnterCritical+0x3a>
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	e7fe      	b.n	800688c <vPortEnterCritical+0x38>
}
 800688e:	4770      	bx	lr
 8006890:	20000054 	.word	0x20000054

08006894 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006894:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <vPortExitCritical+0x24>)
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	b943      	cbnz	r3, 80068ac <vPortExitCritical+0x18>
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	e7fe      	b.n	80068aa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80068ac:	3b01      	subs	r3, #1
 80068ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068b0:	b90b      	cbnz	r3, 80068b6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068b2:	f383 8811 	msr	BASEPRI, r3
}
 80068b6:	4770      	bx	lr
 80068b8:	20000054 	.word	0x20000054
 80068bc:	00000000 	.word	0x00000000

080068c0 <PendSV_Handler>:
	__asm volatile
 80068c0:	f3ef 8009 	mrs	r0, PSP
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4b15      	ldr	r3, [pc, #84]	; (8006920 <pxCurrentTCBConst>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f01e 0f10 	tst.w	lr, #16
 80068d0:	bf08      	it	eq
 80068d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	6010      	str	r0, [r2, #0]
 80068dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068e4:	f380 8811 	msr	BASEPRI, r0
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f001 f962 	bl	8007bb8 <vTaskSwitchContext>
 80068f4:	f04f 0000 	mov.w	r0, #0
 80068f8:	f380 8811 	msr	BASEPRI, r0
 80068fc:	bc09      	pop	{r0, r3}
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	6808      	ldr	r0, [r1, #0]
 8006902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	f01e 0f10 	tst.w	lr, #16
 800690a:	bf08      	it	eq
 800690c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006910:	f380 8809 	msr	PSP, r0
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w

08006920 <pxCurrentTCBConst>:
 8006920:	20009ba4 	.word	0x20009ba4

08006924 <xPortSysTickHandler>:
{
 8006924:	b508      	push	{r3, lr}
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006936:	f000 ffa7 	bl	8007888 <xTaskIncrementTick>
 800693a:	b128      	cbz	r0, 8006948 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800693c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006944:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006948:	2300      	movs	r3, #0
 800694a:	f383 8811 	msr	BASEPRI, r3
}
 800694e:	bd08      	pop	{r3, pc}

08006950 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006950:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006954:	2300      	movs	r3, #0
 8006956:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006958:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <vPortSetupTimerInterrupt+0x20>)
 800695c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	fbb3 f3f1 	udiv	r3, r3, r1
 8006966:	3b01      	subs	r3, #1
 8006968:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800696a:	2307      	movs	r3, #7
 800696c:	6113      	str	r3, [r2, #16]
}
 800696e:	4770      	bx	lr
 8006970:	20000048 	.word	0x20000048

08006974 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006974:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8006978:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800697a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800697e:	4a3a      	ldr	r2, [pc, #232]	; (8006a68 <xPortStartScheduler+0xf4>)
 8006980:	4291      	cmp	r1, r2
 8006982:	d108      	bne.n	8006996 <xPortStartScheduler+0x22>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	e7fe      	b.n	8006994 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006996:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800699a:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <xPortStartScheduler+0xf8>)
 800699c:	429a      	cmp	r2, r3
 800699e:	d108      	bne.n	80069b2 <xPortStartScheduler+0x3e>
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	e7fe      	b.n	80069b0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <xPortStartScheduler+0xfc>)
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069ba:	22ff      	movs	r2, #255	; 0xff
 80069bc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069be:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069c0:	4a2c      	ldr	r2, [pc, #176]	; (8006a74 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80069cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069d0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069d2:	4a29      	ldr	r2, [pc, #164]	; (8006a78 <xPortStartScheduler+0x104>)
 80069d4:	2307      	movs	r3, #7
 80069d6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069d8:	2100      	movs	r1, #0
 80069da:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80069de:	0600      	lsls	r0, r0, #24
 80069e0:	f103 34ff 	add.w	r4, r3, #4294967295
 80069e4:	d40c      	bmi.n	8006a00 <xPortStartScheduler+0x8c>
 80069e6:	b111      	cbz	r1, 80069ee <xPortStartScheduler+0x7a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	d011      	beq.n	8006a12 <xPortStartScheduler+0x9e>
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	e7fe      	b.n	80069fe <xPortStartScheduler+0x8a>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a00:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f88d 3003 	strb.w	r3, [sp, #3]
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	4623      	mov	r3, r4
 8006a10:	e7e3      	b.n	80069da <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a16:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a18:	9b01      	ldr	r3, [sp, #4]
 8006a1a:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <xPortStartScheduler+0xfc>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a1c:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a24:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a2c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a30:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006a34:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a38:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8006a3c:	f7ff ff88 	bl	8006950 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006a40:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <xPortStartScheduler+0x108>)
 8006a42:	2500      	movs	r5, #0
 8006a44:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006a46:	f7ff feaf 	bl	80067a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a4a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8006a4e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a52:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006a56:	f7ff fe93 	bl	8006780 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006a5a:	f001 f8ad 	bl	8007bb8 <vTaskSwitchContext>
	prvTaskExitError();
 8006a5e:	f7ff fead 	bl	80067bc <prvTaskExitError>
}
 8006a62:	4628      	mov	r0, r5
 8006a64:	b003      	add	sp, #12
 8006a66:	bd30      	pop	{r4, r5, pc}
 8006a68:	410fc271 	.word	0x410fc271
 8006a6c:	410fc270 	.word	0x410fc270
 8006a70:	e000e400 	.word	0xe000e400
 8006a74:	20009b5c 	.word	0x20009b5c
 8006a78:	20009b60 	.word	0x20009b60
 8006a7c:	20000054 	.word	0x20000054

08006a80 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a80:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a84:	2b0f      	cmp	r3, #15
 8006a86:	d90e      	bls.n	8006aa6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a88:	4a11      	ldr	r2, [pc, #68]	; (8006ad0 <vPortValidateInterruptPriority+0x50>)
 8006a8a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a8c:	4a11      	ldr	r2, [pc, #68]	; (8006ad4 <vPortValidateInterruptPriority+0x54>)
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d908      	bls.n	8006aa6 <vPortValidateInterruptPriority+0x26>
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	e7fe      	b.n	8006aa4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006aa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006aaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ad8 <vPortValidateInterruptPriority+0x58>)
 8006aac:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d908      	bls.n	8006acc <vPortValidateInterruptPriority+0x4c>
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	e7fe      	b.n	8006aca <vPortValidateInterruptPriority+0x4a>
	}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	e000e3f0 	.word	0xe000e3f0
 8006ad4:	20009b5c 	.word	0x20009b5c
 8006ad8:	20009b60 	.word	0x20009b60

08006adc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006adc:	b510      	push	{r4, lr}
 8006ade:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ae0:	f7ff feb8 	bl	8006854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ae4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006ae6:	f7ff fed5 	bl	8006894 <vPortExitCritical>

	return xReturn;
}
 8006aea:	fab4 f084 	clz	r0, r4
 8006aee:	0940      	lsrs	r0, r0, #5
 8006af0:	bd10      	pop	{r4, pc}

08006af2 <prvCopyDataToQueue>:
{
 8006af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006af6:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006af8:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8006afa:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006afc:	b952      	cbnz	r2, 8006b14 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006afe:	6807      	ldr	r7, [r0, #0]
 8006b00:	bb47      	cbnz	r7, 8006b54 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b02:	6880      	ldr	r0, [r0, #8]
 8006b04:	f001 f9b8 	bl	8007e78 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b08:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b0a:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b0c:	3601      	adds	r6, #1
 8006b0e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8006b10:	4628      	mov	r0, r5
 8006b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006b14:	b965      	cbnz	r5, 8006b30 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b16:	6840      	ldr	r0, [r0, #4]
 8006b18:	f006 ffd7 	bl	800daca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006b20:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b22:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b24:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d3f0      	bcc.n	8006b0c <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	e7ed      	b.n	8006b0c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b30:	68c0      	ldr	r0, [r0, #12]
 8006b32:	f006 ffca 	bl	800daca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006b38:	68e3      	ldr	r3, [r4, #12]
 8006b3a:	4251      	negs	r1, r2
 8006b3c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b3e:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b40:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b42:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b44:	bf3e      	ittt	cc
 8006b46:	68a3      	ldrcc	r3, [r4, #8]
 8006b48:	185b      	addcc	r3, r3, r1
 8006b4a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006b4c:	2d02      	cmp	r5, #2
 8006b4e:	d101      	bne.n	8006b54 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b50:	b116      	cbz	r6, 8006b58 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8006b52:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8006b54:	2500      	movs	r5, #0
 8006b56:	e7d9      	b.n	8006b0c <prvCopyDataToQueue+0x1a>
 8006b58:	4635      	mov	r5, r6
 8006b5a:	e7d7      	b.n	8006b0c <prvCopyDataToQueue+0x1a>

08006b5c <prvCopyDataFromQueue>:
{
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8006b62:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b64:	b16a      	cbz	r2, 8006b82 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b66:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b68:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b6a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b6c:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b6e:	bf28      	it	cs
 8006b70:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b72:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b74:	bf28      	it	cs
 8006b76:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b78:	68d9      	ldr	r1, [r3, #12]
}
 8006b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b7e:	f006 bfa4 	b.w	800daca <memcpy>
}
 8006b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <prvUnlockQueue>:
{
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006b8c:	f7ff fe62 	bl	8006854 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006b90:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b94:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8006b98:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	dc14      	bgt.n	8006bc8 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8006b9e:	23ff      	movs	r3, #255	; 0xff
 8006ba0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006ba4:	f7ff fe76 	bl	8006894 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006ba8:	f7ff fe54 	bl	8006854 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006bac:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bb0:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8006bb4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	dc12      	bgt.n	8006be0 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8006bba:	23ff      	movs	r3, #255	; 0xff
 8006bbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8006bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006bc4:	f7ff be66 	b.w	8006894 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0e7      	beq.n	8006b9e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f001 f86e 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006bd4:	b108      	cbz	r0, 8006bda <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8006bd6:	f001 f8f7 	bl	8007dc8 <vTaskMissedYield>
			--cTxLock;
 8006bda:	3d01      	subs	r5, #1
 8006bdc:	b26d      	sxtb	r5, r5
 8006bde:	e7dc      	b.n	8006b9a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0e9      	beq.n	8006bba <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006be6:	4630      	mov	r0, r6
 8006be8:	f001 f862 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006bec:	b108      	cbz	r0, 8006bf2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006bee:	f001 f8eb 	bl	8007dc8 <vTaskMissedYield>
				--cRxLock;
 8006bf2:	3d01      	subs	r5, #1
 8006bf4:	b26d      	sxtb	r5, r5
 8006bf6:	e7de      	b.n	8006bb6 <prvUnlockQueue+0x2e>

08006bf8 <xQueueGenericReset>:
{
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	b940      	cbnz	r0, 8006c12 <xQueueGenericReset+0x1a>
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	e7fe      	b.n	8006c10 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006c12:	f7ff fe1f 	bl	8006854 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c16:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8006c1a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c1c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c1e:	434b      	muls	r3, r1
 8006c20:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c22:	1a5b      	subs	r3, r3, r1
 8006c24:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c26:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c28:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c2e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006c38:	b9a5      	cbnz	r5, 8006c64 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	b173      	cbz	r3, 8006c5c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c3e:	f104 0010 	add.w	r0, r4, #16
 8006c42:	f001 f835 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006c46:	b148      	cbz	r0, 8006c5c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8006c48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c50:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006c5c:	f7ff fe1a 	bl	8006894 <vPortExitCritical>
}
 8006c60:	2001      	movs	r0, #1
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c64:	f104 0010 	add.w	r0, r4, #16
 8006c68:	f7ff fd48 	bl	80066fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c70:	f7ff fd44 	bl	80066fc <vListInitialise>
 8006c74:	e7f2      	b.n	8006c5c <xQueueGenericReset+0x64>

08006c76 <xQueueGenericCreateStatic>:
	{
 8006c76:	b513      	push	{r0, r1, r4, lr}
 8006c78:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c7a:	b940      	cbnz	r0, 8006c8e <xQueueGenericCreateStatic+0x18>
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	e7fe      	b.n	8006c8c <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8006c8e:	b943      	cbnz	r3, 8006ca2 <xQueueGenericCreateStatic+0x2c>
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ca2:	b14a      	cbz	r2, 8006cb8 <xQueueGenericCreateStatic+0x42>
 8006ca4:	b991      	cbnz	r1, 8006ccc <xQueueGenericCreateStatic+0x56>
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	e7fe      	b.n	8006cb6 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cb8:	b141      	cbz	r1, 8006ccc <xQueueGenericCreateStatic+0x56>
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	e7fe      	b.n	8006cca <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ccc:	2350      	movs	r3, #80	; 0x50
 8006cce:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cd0:	9b01      	ldr	r3, [sp, #4]
 8006cd2:	2b50      	cmp	r3, #80	; 0x50
 8006cd4:	d008      	beq.n	8006ce8 <xQueueGenericCreateStatic+0x72>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	e7fe      	b.n	8006ce6 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	bf08      	it	eq
 8006cec:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cee:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cf0:	6022      	str	r2, [r4, #0]
 8006cf2:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8006cf4:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cf8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff ff7a 	bl	8006bf8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006d04:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8006d08:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	b002      	add	sp, #8
 8006d10:	bd10      	pop	{r4, pc}

08006d12 <xQueueGenericCreate>:
	{
 8006d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d14:	460d      	mov	r5, r1
 8006d16:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d18:	4606      	mov	r6, r0
 8006d1a:	b940      	cbnz	r0, 8006d2e <xQueueGenericCreate+0x1c>
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	e7fe      	b.n	8006d2c <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d30:	3050      	adds	r0, #80	; 0x50
 8006d32:	f7ff fc0d 	bl	8006550 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006d36:	4604      	mov	r4, r0
 8006d38:	b170      	cbz	r0, 8006d58 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d40:	b165      	cbz	r5, 8006d5c <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d42:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8006d46:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8006d4a:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f7ff ff52 	bl	8006bf8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006d54:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8006d58:	4620      	mov	r0, r4
 8006d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	e7f2      	b.n	8006d46 <xQueueGenericCreate+0x34>

08006d60 <xQueueCreateCountingSemaphoreStatic>:
	{
 8006d60:	b513      	push	{r0, r1, r4, lr}
 8006d62:	4613      	mov	r3, r2
 8006d64:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8006d66:	b940      	cbnz	r0, 8006d7a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	e7fe      	b.n	8006d78 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d7a:	4288      	cmp	r0, r1
 8006d7c:	d208      	bcs.n	8006d90 <xQueueCreateCountingSemaphoreStatic+0x30>
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	e7fe      	b.n	8006d8e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d90:	2202      	movs	r2, #2
 8006d92:	9200      	str	r2, [sp, #0]
 8006d94:	2200      	movs	r2, #0
 8006d96:	4611      	mov	r1, r2
 8006d98:	f7ff ff6d 	bl	8006c76 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8006d9c:	b100      	cbz	r0, 8006da0 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006d9e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8006da0:	b002      	add	sp, #8
 8006da2:	bd10      	pop	{r4, pc}

08006da4 <xQueueCreateCountingSemaphore>:
	{
 8006da4:	b510      	push	{r4, lr}
 8006da6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8006da8:	b940      	cbnz	r0, 8006dbc <xQueueCreateCountingSemaphore+0x18>
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	e7fe      	b.n	8006dba <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006dbc:	4288      	cmp	r0, r1
 8006dbe:	d208      	bcs.n	8006dd2 <xQueueCreateCountingSemaphore+0x2e>
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	f7ff ff9c 	bl	8006d12 <xQueueGenericCreate>
		if( xHandle != NULL )
 8006dda:	b100      	cbz	r0, 8006dde <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ddc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8006dde:	bd10      	pop	{r4, pc}

08006de0 <xQueueGenericSend>:
{
 8006de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006de4:	b085      	sub	sp, #20
 8006de6:	4688      	mov	r8, r1
 8006de8:	9201      	str	r2, [sp, #4]
 8006dea:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006dec:	4604      	mov	r4, r0
 8006dee:	b940      	cbnz	r0, 8006e02 <xQueueGenericSend+0x22>
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	e7fe      	b.n	8006e00 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e02:	b951      	cbnz	r1, 8006e1a <xQueueGenericSend+0x3a>
 8006e04:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e06:	b143      	cbz	r3, 8006e1a <xQueueGenericSend+0x3a>
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	e7fe      	b.n	8006e18 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e1a:	2f02      	cmp	r7, #2
 8006e1c:	d10b      	bne.n	8006e36 <xQueueGenericSend+0x56>
 8006e1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d008      	beq.n	8006e36 <xQueueGenericSend+0x56>
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	e7fe      	b.n	8006e34 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e36:	f000 ffcd 	bl	8007dd4 <xTaskGetSchedulerState>
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	b950      	cbnz	r0, 8006e54 <xQueueGenericSend+0x74>
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	b14b      	cbz	r3, 8006e56 <xQueueGenericSend+0x76>
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	e7fe      	b.n	8006e52 <xQueueGenericSend+0x72>
 8006e54:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006e56:	f04f 0900 	mov.w	r9, #0
 8006e5a:	e037      	b.n	8006ecc <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e5c:	9d01      	ldr	r5, [sp, #4]
 8006e5e:	b91d      	cbnz	r5, 8006e68 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8006e60:	f7ff fd18 	bl	8006894 <vPortExitCritical>
			return errQUEUE_FULL;
 8006e64:	2000      	movs	r0, #0
 8006e66:	e052      	b.n	8006f0e <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8006e68:	b916      	cbnz	r6, 8006e70 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e6a:	a802      	add	r0, sp, #8
 8006e6c:	f000 ff64 	bl	8007d38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006e70:	f7ff fd10 	bl	8006894 <vPortExitCritical>
		vTaskSuspendAll();
 8006e74:	f000 fcfa 	bl	800786c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e78:	f7ff fcec 	bl	8006854 <vPortEnterCritical>
 8006e7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006e80:	2bff      	cmp	r3, #255	; 0xff
 8006e82:	bf08      	it	eq
 8006e84:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8006e88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006e8c:	2bff      	cmp	r3, #255	; 0xff
 8006e8e:	bf08      	it	eq
 8006e90:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8006e94:	f7ff fcfe 	bl	8006894 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e98:	a901      	add	r1, sp, #4
 8006e9a:	a802      	add	r0, sp, #8
 8006e9c:	f000 ff58 	bl	8007d50 <xTaskCheckForTimeOut>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d14a      	bne.n	8006f3a <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ea4:	f7ff fcd6 	bl	8006854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ea8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006eaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d131      	bne.n	8006f14 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006eb0:	f7ff fcf0 	bl	8006894 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006eb4:	9901      	ldr	r1, [sp, #4]
 8006eb6:	f104 0010 	add.w	r0, r4, #16
 8006eba:	f000 fec1 	bl	8007c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff fe62 	bl	8006b88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ec4:	f000 fd76 	bl	80079b4 <xTaskResumeAll>
 8006ec8:	b360      	cbz	r0, 8006f24 <xQueueGenericSend+0x144>
 8006eca:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006ecc:	f7ff fcc2 	bl	8006854 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ed0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006ed2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d301      	bcc.n	8006edc <xQueueGenericSend+0xfc>
 8006ed8:	2f02      	cmp	r7, #2
 8006eda:	d1bf      	bne.n	8006e5c <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006edc:	463a      	mov	r2, r7
 8006ede:	4641      	mov	r1, r8
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f7ff fe06 	bl	8006af2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee8:	b11b      	cbz	r3, 8006ef2 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006eee:	f000 fedf 	bl	8007cb0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006ef2:	b148      	cbz	r0, 8006f08 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8006ef4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006f08:	f7ff fcc4 	bl	8006894 <vPortExitCritical>
				return pdPASS;
 8006f0c:	2001      	movs	r0, #1
}
 8006f0e:	b005      	add	sp, #20
 8006f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8006f14:	f7ff fcbe 	bl	8006894 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f7ff fe35 	bl	8006b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f1e:	f000 fd49 	bl	80079b4 <xTaskResumeAll>
 8006f22:	e7d2      	b.n	8006eca <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8006f24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	e7c7      	b.n	8006eca <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7ff fe24 	bl	8006b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f40:	f000 fd38 	bl	80079b4 <xTaskResumeAll>
 8006f44:	e78e      	b.n	8006e64 <xQueueGenericSend+0x84>

08006f46 <xQueueGenericSendFromISR>:
{
 8006f46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f4a:	4689      	mov	r9, r1
 8006f4c:	4690      	mov	r8, r2
 8006f4e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006f50:	4604      	mov	r4, r0
 8006f52:	b940      	cbnz	r0, 8006f66 <xQueueGenericSendFromISR+0x20>
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	e7fe      	b.n	8006f64 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f66:	b951      	cbnz	r1, 8006f7e <xQueueGenericSendFromISR+0x38>
 8006f68:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006f6a:	b143      	cbz	r3, 8006f7e <xQueueGenericSendFromISR+0x38>
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	e7fe      	b.n	8006f7c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f7e:	2f02      	cmp	r7, #2
 8006f80:	d10b      	bne.n	8006f9a <xQueueGenericSendFromISR+0x54>
 8006f82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d008      	beq.n	8006f9a <xQueueGenericSendFromISR+0x54>
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	e7fe      	b.n	8006f98 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f9a:	f7ff fd71 	bl	8006a80 <vPortValidateInterruptPriority>
	__asm volatile
 8006f9e:	f3ef 8611 	mrs	r6, BASEPRI
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006fb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d301      	bcc.n	8006fbe <xQueueGenericSendFromISR+0x78>
 8006fba:	2f02      	cmp	r7, #2
 8006fbc:	d123      	bne.n	8007006 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fbe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fc4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fc6:	463a      	mov	r2, r7
 8006fc8:	4649      	mov	r1, r9
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff fd91 	bl	8006af2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006fd0:	1c6b      	adds	r3, r5, #1
 8006fd2:	d113      	bne.n	8006ffc <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd6:	b90b      	cbnz	r3, 8006fdc <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8006fd8:	2001      	movs	r0, #1
 8006fda:	e00b      	b.n	8006ff4 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fdc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006fe0:	f000 fe66 	bl	8007cb0 <xTaskRemoveFromEventList>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d0f7      	beq.n	8006fd8 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8006fe8:	f1b8 0f00 	cmp.w	r8, #0
 8006fec:	d0f4      	beq.n	8006fd8 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8006ff4:	f386 8811 	msr	BASEPRI, r6
}
 8006ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	b26d      	sxtb	r5, r5
 8007000:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8007004:	e7e8      	b.n	8006fd8 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8007006:	2000      	movs	r0, #0
 8007008:	e7f4      	b.n	8006ff4 <xQueueGenericSendFromISR+0xae>

0800700a <xQueueGiveFromISR>:
{
 800700a:	b570      	push	{r4, r5, r6, lr}
 800700c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800700e:	4604      	mov	r4, r0
 8007010:	b940      	cbnz	r0, 8007024 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	e7fe      	b.n	8007022 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007024:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007026:	b143      	cbz	r3, 800703a <xQueueGiveFromISR+0x30>
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	e7fe      	b.n	8007038 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800703a:	6803      	ldr	r3, [r0, #0]
 800703c:	b953      	cbnz	r3, 8007054 <xQueueGiveFromISR+0x4a>
 800703e:	6883      	ldr	r3, [r0, #8]
 8007040:	b143      	cbz	r3, 8007054 <xQueueGiveFromISR+0x4a>
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	e7fe      	b.n	8007052 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007054:	f7ff fd14 	bl	8006a80 <vPortValidateInterruptPriority>
	__asm volatile
 8007058:	f3ef 8611 	mrs	r6, BASEPRI
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800706c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800706e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007070:	4293      	cmp	r3, r2
 8007072:	d91c      	bls.n	80070ae <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007078:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800707a:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800707c:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800707e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8007080:	d110      	bne.n	80070a4 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007084:	b90b      	cbnz	r3, 800708a <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8007086:	2001      	movs	r0, #1
 8007088:	e009      	b.n	800709e <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800708a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800708e:	f000 fe0f 	bl	8007cb0 <xTaskRemoveFromEventList>
 8007092:	2800      	cmp	r0, #0
 8007094:	d0f7      	beq.n	8007086 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007096:	2d00      	cmp	r5, #0
 8007098:	d0f5      	beq.n	8007086 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800709a:	2001      	movs	r0, #1
 800709c:	6028      	str	r0, [r5, #0]
	__asm volatile
 800709e:	f386 8811 	msr	BASEPRI, r6
}
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070a4:	3301      	adds	r3, #1
 80070a6:	b25b      	sxtb	r3, r3
 80070a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ac:	e7eb      	b.n	8007086 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80070ae:	2000      	movs	r0, #0
 80070b0:	e7f5      	b.n	800709e <xQueueGiveFromISR+0x94>

080070b2 <xQueueReceive>:
{
 80070b2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80070b6:	460f      	mov	r7, r1
 80070b8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80070ba:	4604      	mov	r4, r0
 80070bc:	b940      	cbnz	r0, 80070d0 <xQueueReceive+0x1e>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	e7fe      	b.n	80070ce <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070d0:	b951      	cbnz	r1, 80070e8 <xQueueReceive+0x36>
 80070d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80070d4:	b143      	cbz	r3, 80070e8 <xQueueReceive+0x36>
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	e7fe      	b.n	80070e6 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070e8:	f000 fe74 	bl	8007dd4 <xTaskGetSchedulerState>
 80070ec:	4606      	mov	r6, r0
 80070ee:	b950      	cbnz	r0, 8007106 <xQueueReceive+0x54>
 80070f0:	9b01      	ldr	r3, [sp, #4]
 80070f2:	b14b      	cbz	r3, 8007108 <xQueueReceive+0x56>
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	e7fe      	b.n	8007104 <xQueueReceive+0x52>
 8007106:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007108:	f04f 0800 	mov.w	r8, #0
 800710c:	e03d      	b.n	800718a <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800710e:	9d01      	ldr	r5, [sp, #4]
 8007110:	b91d      	cbnz	r5, 800711a <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8007112:	f7ff fbbf 	bl	8006894 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007116:	2000      	movs	r0, #0
 8007118:	e056      	b.n	80071c8 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800711a:	b916      	cbnz	r6, 8007122 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800711c:	a802      	add	r0, sp, #8
 800711e:	f000 fe0b 	bl	8007d38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007122:	f7ff fbb7 	bl	8006894 <vPortExitCritical>
		vTaskSuspendAll();
 8007126:	f000 fba1 	bl	800786c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800712a:	f7ff fb93 	bl	8006854 <vPortEnterCritical>
 800712e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007132:	2bff      	cmp	r3, #255	; 0xff
 8007134:	bf08      	it	eq
 8007136:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800713a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800713e:	2bff      	cmp	r3, #255	; 0xff
 8007140:	bf08      	it	eq
 8007142:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8007146:	f7ff fba5 	bl	8006894 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800714a:	a901      	add	r1, sp, #4
 800714c:	a802      	add	r0, sp, #8
 800714e:	f000 fdff 	bl	8007d50 <xTaskCheckForTimeOut>
 8007152:	2800      	cmp	r0, #0
 8007154:	d141      	bne.n	80071da <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007156:	4620      	mov	r0, r4
 8007158:	f7ff fcc0 	bl	8006adc <prvIsQueueEmpty>
 800715c:	b3b8      	cbz	r0, 80071ce <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800715e:	9901      	ldr	r1, [sp, #4]
 8007160:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007164:	f000 fd6c 	bl	8007c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007168:	4620      	mov	r0, r4
 800716a:	f7ff fd0d 	bl	8006b88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800716e:	f000 fc21 	bl	80079b4 <xTaskResumeAll>
 8007172:	b948      	cbnz	r0, 8007188 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8007174:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800718a:	f7ff fb63 	bl	8006854 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800718e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007190:	2d00      	cmp	r5, #0
 8007192:	d0bc      	beq.n	800710e <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007194:	4639      	mov	r1, r7
 8007196:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007198:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800719a:	f7ff fcdf 	bl	8006b5c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800719e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	b173      	cbz	r3, 80071c2 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a4:	f104 0010 	add.w	r0, r4, #16
 80071a8:	f000 fd82 	bl	8007cb0 <xTaskRemoveFromEventList>
 80071ac:	b148      	cbz	r0, 80071c2 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 80071ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80071b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80071c2:	f7ff fb67 	bl	8006894 <vPortExitCritical>
				return pdPASS;
 80071c6:	2001      	movs	r0, #1
}
 80071c8:	b004      	add	sp, #16
 80071ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80071ce:	4620      	mov	r0, r4
 80071d0:	f7ff fcda 	bl	8006b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071d4:	f000 fbee 	bl	80079b4 <xTaskResumeAll>
 80071d8:	e7d6      	b.n	8007188 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80071da:	4620      	mov	r0, r4
 80071dc:	f7ff fcd4 	bl	8006b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071e0:	f000 fbe8 	bl	80079b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7ff fc79 	bl	8006adc <prvIsQueueEmpty>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d0cc      	beq.n	8007188 <xQueueReceive+0xd6>
 80071ee:	e792      	b.n	8007116 <xQueueReceive+0x64>

080071f0 <xQueueSemaphoreTake>:
{
 80071f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80071f4:	4604      	mov	r4, r0
{
 80071f6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80071f8:	b940      	cbnz	r0, 800720c <xQueueSemaphoreTake+0x1c>
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	e7fe      	b.n	800720a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800720c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800720e:	b145      	cbz	r5, 8007222 <xQueueSemaphoreTake+0x32>
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	e7fe      	b.n	8007220 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007222:	f000 fdd7 	bl	8007dd4 <xTaskGetSchedulerState>
 8007226:	4606      	mov	r6, r0
 8007228:	b950      	cbnz	r0, 8007240 <xQueueSemaphoreTake+0x50>
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	b15b      	cbz	r3, 8007246 <xQueueSemaphoreTake+0x56>
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	e7fe      	b.n	800723e <xQueueSemaphoreTake+0x4e>
 8007240:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007242:	2700      	movs	r7, #0
 8007244:	e053      	b.n	80072ee <xQueueSemaphoreTake+0xfe>
 8007246:	4605      	mov	r5, r0
 8007248:	e7fb      	b.n	8007242 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	b963      	cbnz	r3, 8007268 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800724e:	b145      	cbz	r5, 8007262 <xQueueSemaphoreTake+0x72>
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	e7fe      	b.n	8007260 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8007262:	f7ff fb17 	bl	8006894 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007266:	e062      	b.n	800732e <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8007268:	b916      	cbnz	r6, 8007270 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800726a:	a802      	add	r0, sp, #8
 800726c:	f000 fd64 	bl	8007d38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007270:	f7ff fb10 	bl	8006894 <vPortExitCritical>
		vTaskSuspendAll();
 8007274:	f000 fafa 	bl	800786c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007278:	f7ff faec 	bl	8006854 <vPortEnterCritical>
 800727c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007280:	2bff      	cmp	r3, #255	; 0xff
 8007282:	bf08      	it	eq
 8007284:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8007288:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800728c:	2bff      	cmp	r3, #255	; 0xff
 800728e:	bf08      	it	eq
 8007290:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8007294:	f7ff fafe 	bl	8006894 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007298:	a901      	add	r1, sp, #4
 800729a:	a802      	add	r0, sp, #8
 800729c:	f000 fd58 	bl	8007d50 <xTaskCheckForTimeOut>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d14d      	bne.n	8007340 <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7ff fc19 	bl	8006adc <prvIsQueueEmpty>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d042      	beq.n	8007334 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	b93b      	cbnz	r3, 80072c2 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 80072b2:	f7ff facf 	bl	8006854 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072b6:	68a0      	ldr	r0, [r4, #8]
 80072b8:	f000 fd9c 	bl	8007df4 <xTaskPriorityInherit>
 80072bc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80072be:	f7ff fae9 	bl	8006894 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072c2:	9901      	ldr	r1, [sp, #4]
 80072c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80072c8:	f000 fcba 	bl	8007c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072cc:	4620      	mov	r0, r4
 80072ce:	f7ff fc5b 	bl	8006b88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072d2:	f000 fb6f 	bl	80079b4 <xTaskResumeAll>
 80072d6:	b948      	cbnz	r0, 80072ec <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 80072d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80072dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80072ee:	f7ff fab1 	bl	8006854 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0a8      	beq.n	800724a <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072f8:	3b01      	subs	r3, #1
 80072fa:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	b913      	cbnz	r3, 8007306 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007300:	f000 fe50 	bl	8007fa4 <pvTaskIncrementMutexHeldCount>
 8007304:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	b173      	cbz	r3, 8007328 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800730a:	f104 0010 	add.w	r0, r4, #16
 800730e:	f000 fccf 	bl	8007cb0 <xTaskRemoveFromEventList>
 8007312:	b148      	cbz	r0, 8007328 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8007314:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007328:	f7ff fab4 	bl	8006894 <vPortExitCritical>
				return pdPASS;
 800732c:	2501      	movs	r5, #1
}
 800732e:	4628      	mov	r0, r5
 8007330:	b005      	add	sp, #20
 8007332:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8007334:	4620      	mov	r0, r4
 8007336:	f7ff fc27 	bl	8006b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800733a:	f000 fb3b 	bl	80079b4 <xTaskResumeAll>
 800733e:	e7d5      	b.n	80072ec <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8007340:	4620      	mov	r0, r4
 8007342:	f7ff fc21 	bl	8006b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007346:	f000 fb35 	bl	80079b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800734a:	4620      	mov	r0, r4
 800734c:	f7ff fbc6 	bl	8006adc <prvIsQueueEmpty>
 8007350:	2800      	cmp	r0, #0
 8007352:	d0cb      	beq.n	80072ec <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8007354:	2d00      	cmp	r5, #0
 8007356:	d0ea      	beq.n	800732e <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 8007358:	f7ff fa7c 	bl	8006854 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800735c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800735e:	b119      	cbz	r1, 8007368 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007360:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007368:	68a0      	ldr	r0, [r4, #8]
 800736a:	f000 fdc9 	bl	8007f00 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800736e:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8007370:	f7ff fa90 	bl	8006894 <vPortExitCritical>
 8007374:	e7db      	b.n	800732e <xQueueSemaphoreTake+0x13e>

08007376 <xQueueReceiveFromISR>:
{
 8007376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800737a:	4689      	mov	r9, r1
 800737c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800737e:	4605      	mov	r5, r0
 8007380:	b940      	cbnz	r0, 8007394 <xQueueReceiveFromISR+0x1e>
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	e7fe      	b.n	8007392 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007394:	b951      	cbnz	r1, 80073ac <xQueueReceiveFromISR+0x36>
 8007396:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007398:	b143      	cbz	r3, 80073ac <xQueueReceiveFromISR+0x36>
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	e7fe      	b.n	80073aa <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073ac:	f7ff fb68 	bl	8006a80 <vPortValidateInterruptPriority>
	__asm volatile
 80073b0:	f3ef 8711 	mrs	r7, BASEPRI
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073c4:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073c6:	b31c      	cbz	r4, 8007410 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 80073c8:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073cc:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80073ce:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073d0:	4628      	mov	r0, r5
 80073d2:	f7ff fbc3 	bl	8006b5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073d6:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80073d8:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073da:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80073dc:	d113      	bne.n	8007406 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073de:	692b      	ldr	r3, [r5, #16]
 80073e0:	b90b      	cbnz	r3, 80073e6 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80073e2:	2001      	movs	r0, #1
 80073e4:	e00b      	b.n	80073fe <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073e6:	f105 0010 	add.w	r0, r5, #16
 80073ea:	f000 fc61 	bl	8007cb0 <xTaskRemoveFromEventList>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d0f7      	beq.n	80073e2 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80073f2:	f1b8 0f00 	cmp.w	r8, #0
 80073f6:	d0f4      	beq.n	80073e2 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80073f8:	2001      	movs	r0, #1
 80073fa:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80073fe:	f387 8811 	msr	BASEPRI, r7
}
 8007402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007406:	3601      	adds	r6, #1
 8007408:	b276      	sxtb	r6, r6
 800740a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800740e:	e7e8      	b.n	80073e2 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8007410:	4620      	mov	r0, r4
 8007412:	e7f4      	b.n	80073fe <xQueueReceiveFromISR+0x88>

08007414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007414:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007416:	4a07      	ldr	r2, [pc, #28]	; (8007434 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007418:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800741a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800741e:	b92c      	cbnz	r4, 800742c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007420:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007424:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007428:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800742a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800742c:	3301      	adds	r3, #1
 800742e:	2b08      	cmp	r3, #8
 8007430:	d1f3      	bne.n	800741a <vQueueAddToRegistry+0x6>
 8007432:	e7fa      	b.n	800742a <vQueueAddToRegistry+0x16>
 8007434:	20009b64 	.word	0x20009b64

08007438 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007438:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800743a:	4a08      	ldr	r2, [pc, #32]	; (800745c <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800743c:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800743e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007442:	684c      	ldr	r4, [r1, #4]
 8007444:	4284      	cmp	r4, r0
 8007446:	d104      	bne.n	8007452 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007448:	2000      	movs	r0, #0
 800744a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800744e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007450:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007452:	3301      	adds	r3, #1
 8007454:	2b08      	cmp	r3, #8
 8007456:	d1f2      	bne.n	800743e <vQueueUnregisterQueue+0x6>
 8007458:	e7fa      	b.n	8007450 <vQueueUnregisterQueue+0x18>
 800745a:	bf00      	nop
 800745c:	20009b64 	.word	0x20009b64

08007460 <vQueueDelete>:
{
 8007460:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007462:	4604      	mov	r4, r0
 8007464:	b940      	cbnz	r0, 8007478 <vQueueDelete+0x18>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	e7fe      	b.n	8007476 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8007478:	f7ff ffde 	bl	8007438 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800747c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007480:	b923      	cbnz	r3, 800748c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8007482:	4620      	mov	r0, r4
}
 8007484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007488:	f7ff b8fa 	b.w	8006680 <vPortFree>
}
 800748c:	bd10      	pop	{r4, pc}

0800748e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800748e:	b570      	push	{r4, r5, r6, lr}
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007496:	f7ff f9dd 	bl	8006854 <vPortEnterCritical>
 800749a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800749e:	2bff      	cmp	r3, #255	; 0xff
 80074a0:	bf04      	itt	eq
 80074a2:	2300      	moveq	r3, #0
 80074a4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80074a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80074ac:	2bff      	cmp	r3, #255	; 0xff
 80074ae:	bf04      	itt	eq
 80074b0:	2300      	moveq	r3, #0
 80074b2:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80074b6:	f7ff f9ed 	bl	8006894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074bc:	b92b      	cbnz	r3, 80074ca <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074be:	4632      	mov	r2, r6
 80074c0:	4629      	mov	r1, r5
 80074c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074c6:	f000 fbd5 	bl	8007c74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074ca:	4620      	mov	r0, r4
	}
 80074cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80074d0:	f7ff bb5a 	b.w	8006b88 <prvUnlockQueue>

080074d4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074da:	f7ff f9bb 	bl	8006854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074de:	4b30      	ldr	r3, [pc, #192]	; (80075a0 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 80074e0:	4e30      	ldr	r6, [pc, #192]	; (80075a4 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4f30      	ldr	r7, [pc, #192]	; (80075a8 <prvAddNewTaskToReadyList+0xd4>)
 80074e6:	3201      	adds	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80074ea:	6835      	ldr	r5, [r6, #0]
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	d14b      	bne.n	8007588 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074f0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d11f      	bne.n	8007538 <prvAddNewTaskToReadyList+0x64>
 80074f8:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074fa:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074fc:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074fe:	f7ff f8fd 	bl	80066fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007502:	2d38      	cmp	r5, #56	; 0x38
 8007504:	f108 0814 	add.w	r8, r8, #20
 8007508:	d1f7      	bne.n	80074fa <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800750a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80075d0 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 800750e:	4d27      	ldr	r5, [pc, #156]	; (80075ac <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8007510:	4640      	mov	r0, r8
 8007512:	f7ff f8f3 	bl	80066fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007516:	4628      	mov	r0, r5
 8007518:	f7ff f8f0 	bl	80066fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800751c:	4824      	ldr	r0, [pc, #144]	; (80075b0 <prvAddNewTaskToReadyList+0xdc>)
 800751e:	f7ff f8ed 	bl	80066fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007522:	4824      	ldr	r0, [pc, #144]	; (80075b4 <prvAddNewTaskToReadyList+0xe0>)
 8007524:	f7ff f8ea 	bl	80066fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007528:	4823      	ldr	r0, [pc, #140]	; (80075b8 <prvAddNewTaskToReadyList+0xe4>)
 800752a:	f7ff f8e7 	bl	80066fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800752e:	4b23      	ldr	r3, [pc, #140]	; (80075bc <prvAddNewTaskToReadyList+0xe8>)
 8007530:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007534:	4b22      	ldr	r3, [pc, #136]	; (80075c0 <prvAddNewTaskToReadyList+0xec>)
 8007536:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8007538:	4a22      	ldr	r2, [pc, #136]	; (80075c4 <prvAddNewTaskToReadyList+0xf0>)
 800753a:	6813      	ldr	r3, [r2, #0]
 800753c:	3301      	adds	r3, #1
 800753e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007540:	4a21      	ldr	r2, [pc, #132]	; (80075c8 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007542:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007544:	6811      	ldr	r1, [r2, #0]
 8007546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007548:	2014      	movs	r0, #20
 800754a:	428b      	cmp	r3, r1
 800754c:	fb00 7003 	mla	r0, r0, r3, r7
 8007550:	f104 0104 	add.w	r1, r4, #4
 8007554:	bf88      	it	hi
 8007556:	6013      	strhi	r3, [r2, #0]
 8007558:	f7ff f8de 	bl	8006718 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800755c:	f7ff f99a 	bl	8006894 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007560:	4b1a      	ldr	r3, [pc, #104]	; (80075cc <prvAddNewTaskToReadyList+0xf8>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	b173      	cbz	r3, 8007584 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007566:	6833      	ldr	r3, [r6, #0]
 8007568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800756c:	429a      	cmp	r2, r3
 800756e:	d209      	bcs.n	8007584 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8007570:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007578:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
}
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007588:	4b10      	ldr	r3, [pc, #64]	; (80075cc <prvAddNewTaskToReadyList+0xf8>)
 800758a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800758c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 800758e:	2a00      	cmp	r2, #0
 8007590:	d1d2      	bne.n	8007538 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007592:	6832      	ldr	r2, [r6, #0]
 8007594:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007596:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007598:	bf98      	it	ls
 800759a:	6034      	strls	r4, [r6, #0]
 800759c:	e7cc      	b.n	8007538 <prvAddNewTaskToReadyList+0x64>
 800759e:	bf00      	nop
 80075a0:	2000a010 	.word	0x2000a010
 80075a4:	20009ba4 	.word	0x20009ba4
 80075a8:	20009bb0 	.word	0x20009bb0
 80075ac:	2000a038 	.word	0x2000a038
 80075b0:	2000a058 	.word	0x2000a058
 80075b4:	2000a084 	.word	0x2000a084
 80075b8:	2000a070 	.word	0x2000a070
 80075bc:	20009ba8 	.word	0x20009ba8
 80075c0:	20009bac 	.word	0x20009bac
 80075c4:	2000a01c 	.word	0x2000a01c
 80075c8:	2000a020 	.word	0x2000a020
 80075cc:	2000a06c 	.word	0x2000a06c
 80075d0:	2000a024 	.word	0x2000a024

080075d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075d6:	4b15      	ldr	r3, [pc, #84]	; (800762c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075d8:	4d15      	ldr	r5, [pc, #84]	; (8007630 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 80075da:	681c      	ldr	r4, [r3, #0]
{
 80075dc:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075de:	6828      	ldr	r0, [r5, #0]
 80075e0:	3004      	adds	r0, #4
{
 80075e2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075e4:	f7ff f8bb 	bl	800675e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075e8:	1c73      	adds	r3, r6, #1
 80075ea:	d107      	bne.n	80075fc <prvAddCurrentTaskToDelayedList+0x28>
 80075ec:	b137      	cbz	r7, 80075fc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ee:	6829      	ldr	r1, [r5, #0]
 80075f0:	4810      	ldr	r0, [pc, #64]	; (8007634 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f6:	3104      	adds	r1, #4
 80075f8:	f7ff b88e 	b.w	8006718 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	19a4      	adds	r4, r4, r6
 8007600:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007602:	d307      	bcc.n	8007614 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007604:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <prvAddCurrentTaskToDelayedList+0x64>)
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	6829      	ldr	r1, [r5, #0]
}
 800760a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800760e:	3104      	adds	r1, #4
 8007610:	f7ff b88e 	b.w	8006730 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <prvAddCurrentTaskToDelayedList+0x68>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	6829      	ldr	r1, [r5, #0]
 800761a:	3104      	adds	r1, #4
 800761c:	f7ff f888 	bl	8006730 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007626:	bf88      	it	hi
 8007628:	601c      	strhi	r4, [r3, #0]
}
 800762a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800762c:	2000a098 	.word	0x2000a098
 8007630:	20009ba4 	.word	0x20009ba4
 8007634:	2000a070 	.word	0x2000a070
 8007638:	20009bac 	.word	0x20009bac
 800763c:	20009ba8 	.word	0x20009ba8
 8007640:	2000a04c 	.word	0x2000a04c

08007644 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007644:	4a06      	ldr	r2, [pc, #24]	; (8007660 <prvResetNextTaskUnblockTime+0x1c>)
 8007646:	6813      	ldr	r3, [r2, #0]
 8007648:	6819      	ldr	r1, [r3, #0]
 800764a:	4b06      	ldr	r3, [pc, #24]	; (8007664 <prvResetNextTaskUnblockTime+0x20>)
 800764c:	b919      	cbnz	r1, 8007656 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800765a:	68d2      	ldr	r2, [r2, #12]
 800765c:	6852      	ldr	r2, [r2, #4]
 800765e:	e7f8      	b.n	8007652 <prvResetNextTaskUnblockTime+0xe>
 8007660:	20009ba8 	.word	0x20009ba8
 8007664:	2000a04c 	.word	0x2000a04c

08007668 <prvDeleteTCB>:
	{
 8007668:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800766a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800766e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007670:	b93b      	cbnz	r3, 8007682 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007672:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007674:	f7ff f804 	bl	8006680 <vPortFree>
				vPortFree( pxTCB );
 8007678:	4620      	mov	r0, r4
	}
 800767a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800767e:	f7fe bfff 	b.w	8006680 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007682:	2b01      	cmp	r3, #1
 8007684:	d0f9      	beq.n	800767a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007686:	2b02      	cmp	r3, #2
 8007688:	d008      	beq.n	800769c <prvDeleteTCB+0x34>
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	e7fe      	b.n	800769a <prvDeleteTCB+0x32>
	}
 800769c:	bd10      	pop	{r4, pc}
	...

080076a0 <prvIdleTask>:
{
 80076a0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076a2:	4c14      	ldr	r4, [pc, #80]	; (80076f4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a4:	4f14      	ldr	r7, [pc, #80]	; (80076f8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 80076a6:	4d15      	ldr	r5, [pc, #84]	; (80076fc <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	b983      	cbnz	r3, 80076ce <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076ac:	4b14      	ldr	r3, [pc, #80]	; (8007700 <prvIdleTask+0x60>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d909      	bls.n	80076c8 <prvIdleTask+0x28>
				taskYIELD();
 80076b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80076c8:	f7f9 fdbc 	bl	8001244 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80076cc:	e7eb      	b.n	80076a6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80076ce:	f7ff f8c1 	bl	8006854 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076d6:	1d30      	adds	r0, r6, #4
 80076d8:	f7ff f841 	bl	800675e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	3b01      	subs	r3, #1
 80076e0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80076e8:	f7ff f8d4 	bl	8006894 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff ffbb 	bl	8007668 <prvDeleteTCB>
 80076f2:	e7d9      	b.n	80076a8 <prvIdleTask+0x8>
 80076f4:	2000a014 	.word	0x2000a014
 80076f8:	2000a084 	.word	0x2000a084
 80076fc:	2000a010 	.word	0x2000a010
 8007700:	20009bb0 	.word	0x20009bb0

08007704 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007708:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800770c:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8007710:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007712:	4606      	mov	r6, r0
 8007714:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007716:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007718:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800771a:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800771c:	f006 f905 	bl	800d92a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007720:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007722:	f1a9 0904 	sub.w	r9, r9, #4
 8007726:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007728:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 800772c:	b3b5      	cbz	r5, 800779c <prvInitialiseNewTask.constprop.0+0x98>
 800772e:	1e6b      	subs	r3, r5, #1
 8007730:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8007734:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007736:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800773a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800773e:	b109      	cbz	r1, 8007744 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007740:	42ab      	cmp	r3, r5
 8007742:	d1f8      	bne.n	8007736 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007744:	2300      	movs	r3, #0
 8007746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800774a:	9d08      	ldr	r5, [sp, #32]
 800774c:	2d37      	cmp	r5, #55	; 0x37
 800774e:	bf28      	it	cs
 8007750:	2537      	movcs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007752:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8007756:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007758:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800775a:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800775c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007760:	f7fe ffd7 	bl	8006712 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007764:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007768:	f104 0018 	add.w	r0, r4, #24
 800776c:	f7fe ffd1 	bl	8006712 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007770:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007774:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007776:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007778:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800777a:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800777e:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007782:	463a      	mov	r2, r7
 8007784:	4631      	mov	r1, r6
 8007786:	4648      	mov	r0, r9
 8007788:	f7ff f838 	bl	80067fc <pxPortInitialiseStack>
 800778c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800778e:	f1b8 0f00 	cmp.w	r8, #0
 8007792:	d001      	beq.n	8007798 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007794:	f8c8 4000 	str.w	r4, [r8]
}
 8007798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800779c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80077a0:	e7d3      	b.n	800774a <prvInitialiseNewTask.constprop.0+0x46>

080077a2 <xTaskCreateStatic>:
	{
 80077a2:	b570      	push	{r4, r5, r6, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80077aa:	b945      	cbnz	r5, 80077be <xTaskCreateStatic+0x1c>
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	e7fe      	b.n	80077bc <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80077be:	b944      	cbnz	r4, 80077d2 <xTaskCreateStatic+0x30>
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	e7fe      	b.n	80077d0 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80077d2:	2660      	movs	r6, #96	; 0x60
 80077d4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077d6:	9e05      	ldr	r6, [sp, #20]
 80077d8:	2e60      	cmp	r6, #96	; 0x60
 80077da:	d008      	beq.n	80077ee <xTaskCreateStatic+0x4c>
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	e7fe      	b.n	80077ec <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077ee:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077f0:	2502      	movs	r5, #2
 80077f2:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077f6:	ad04      	add	r5, sp, #16
 80077f8:	9501      	str	r5, [sp, #4]
 80077fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80077fc:	9402      	str	r4, [sp, #8]
 80077fe:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007800:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007802:	f7ff ff7f 	bl	8007704 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007806:	4620      	mov	r0, r4
 8007808:	f7ff fe64 	bl	80074d4 <prvAddNewTaskToReadyList>
	}
 800780c:	9804      	ldr	r0, [sp, #16]
 800780e:	b006      	add	sp, #24
 8007810:	bd70      	pop	{r4, r5, r6, pc}

08007812 <xTaskCreate>:
	{
 8007812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007816:	4607      	mov	r7, r0
 8007818:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800781a:	0090      	lsls	r0, r2, #2
	{
 800781c:	4688      	mov	r8, r1
 800781e:	4616      	mov	r6, r2
 8007820:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007822:	f7fe fe95 	bl	8006550 <pvPortMalloc>
			if( pxStack != NULL )
 8007826:	4605      	mov	r5, r0
 8007828:	b1e8      	cbz	r0, 8007866 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800782a:	2060      	movs	r0, #96	; 0x60
 800782c:	f7fe fe90 	bl	8006550 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007830:	4604      	mov	r4, r0
 8007832:	b1a8      	cbz	r0, 8007860 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007834:	2300      	movs	r3, #0
 8007836:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800783c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007842:	9002      	str	r0, [sp, #8]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4632      	mov	r2, r6
 8007848:	464b      	mov	r3, r9
 800784a:	4641      	mov	r1, r8
 800784c:	4638      	mov	r0, r7
 800784e:	f7ff ff59 	bl	8007704 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007852:	4620      	mov	r0, r4
 8007854:	f7ff fe3e 	bl	80074d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007858:	2001      	movs	r0, #1
	}
 800785a:	b005      	add	sp, #20
 800785c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007860:	4628      	mov	r0, r5
 8007862:	f7fe ff0d 	bl	8006680 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800786a:	e7f6      	b.n	800785a <xTaskCreate+0x48>

0800786c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800786c:	4a02      	ldr	r2, [pc, #8]	; (8007878 <vTaskSuspendAll+0xc>)
 800786e:	6813      	ldr	r3, [r2, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	6013      	str	r3, [r2, #0]
}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	2000a018 	.word	0x2000a018

0800787c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <xTaskGetTickCount+0x8>)
 800787e:	6818      	ldr	r0, [r3, #0]
}
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	2000a098 	.word	0x2000a098

08007888 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007888:	4b3f      	ldr	r3, [pc, #252]	; (8007988 <xTaskIncrementTick+0x100>)
 800788a:	681b      	ldr	r3, [r3, #0]
{
 800788c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007890:	2b00      	cmp	r3, #0
 8007892:	d173      	bne.n	800797c <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007894:	4b3d      	ldr	r3, [pc, #244]	; (800798c <xTaskIncrementTick+0x104>)
 8007896:	681d      	ldr	r5, [r3, #0]
 8007898:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800789a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800789c:	b9bd      	cbnz	r5, 80078ce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800789e:	4b3c      	ldr	r3, [pc, #240]	; (8007990 <xTaskIncrementTick+0x108>)
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	b142      	cbz	r2, 80078b8 <xTaskIncrementTick+0x30>
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	e7fe      	b.n	80078b6 <xTaskIncrementTick+0x2e>
 80078b8:	4a36      	ldr	r2, [pc, #216]	; (8007994 <xTaskIncrementTick+0x10c>)
 80078ba:	6819      	ldr	r1, [r3, #0]
 80078bc:	6810      	ldr	r0, [r2, #0]
 80078be:	6018      	str	r0, [r3, #0]
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	4a35      	ldr	r2, [pc, #212]	; (8007998 <xTaskIncrementTick+0x110>)
 80078c4:	6813      	ldr	r3, [r2, #0]
 80078c6:	3301      	adds	r3, #1
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	f7ff febb 	bl	8007644 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078ce:	4e33      	ldr	r6, [pc, #204]	; (800799c <xTaskIncrementTick+0x114>)
 80078d0:	4f33      	ldr	r7, [pc, #204]	; (80079a0 <xTaskIncrementTick+0x118>)
 80078d2:	6833      	ldr	r3, [r6, #0]
 80078d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80079ac <xTaskIncrementTick+0x124>
 80078d8:	429d      	cmp	r5, r3
BaseType_t xSwitchRequired = pdFALSE;
 80078da:	f04f 0400 	mov.w	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078de:	d211      	bcs.n	8007904 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078e0:	f8d8 3000 	ldr.w	r3, [r8]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	2214      	movs	r2, #20
 80078e8:	4353      	muls	r3, r2
 80078ea:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80078ec:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 80078ee:	4b2d      	ldr	r3, [pc, #180]	; (80079a4 <xTaskIncrementTick+0x11c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 80078f2:	bf28      	it	cs
 80078f4:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bf18      	it	ne
 80078fa:	2401      	movne	r4, #1
}
 80078fc:	4620      	mov	r0, r4
 80078fe:	b003      	add	sp, #12
 8007900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007904:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8007990 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8007908:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80079b0 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800790c:	f8d9 3000 	ldr.w	r3, [r9]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	b91b      	cbnz	r3, 800791c <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007914:	f04f 33ff 	mov.w	r3, #4294967295
 8007918:	6033      	str	r3, [r6, #0]
					break;
 800791a:	e7e1      	b.n	80078e0 <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791c:	f8d9 3000 	ldr.w	r3, [r9]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007926:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800792a:	4295      	cmp	r5, r2
 800792c:	d201      	bcs.n	8007932 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800792e:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007930:	e7d6      	b.n	80078e0 <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007932:	f10b 0104 	add.w	r1, fp, #4
 8007936:	4608      	mov	r0, r1
 8007938:	9101      	str	r1, [sp, #4]
 800793a:	f7fe ff10 	bl	800675e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800793e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8007942:	9901      	ldr	r1, [sp, #4]
 8007944:	b122      	cbz	r2, 8007950 <xTaskIncrementTick+0xc8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007946:	f10b 0018 	add.w	r0, fp, #24
 800794a:	f7fe ff08 	bl	800675e <uxListRemove>
 800794e:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8007950:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8007954:	f8da 2000 	ldr.w	r2, [sl]
 8007958:	2314      	movs	r3, #20
 800795a:	4290      	cmp	r0, r2
 800795c:	bf88      	it	hi
 800795e:	f8ca 0000 	strhi.w	r0, [sl]
 8007962:	fb03 7000 	mla	r0, r3, r0, r7
 8007966:	f7fe fed7 	bl	8006718 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800796a:	f8d8 1000 	ldr.w	r1, [r8]
 800796e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8007972:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8007974:	429a      	cmp	r2, r3
 8007976:	bf28      	it	cs
 8007978:	2401      	movcs	r4, #1
 800797a:	e7c7      	b.n	800790c <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800797c:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <xTaskIncrementTick+0x120>)
 800797e:	6813      	ldr	r3, [r2, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007984:	2400      	movs	r4, #0
	return xSwitchRequired;
 8007986:	e7b9      	b.n	80078fc <xTaskIncrementTick+0x74>
 8007988:	2000a018 	.word	0x2000a018
 800798c:	2000a098 	.word	0x2000a098
 8007990:	20009ba8 	.word	0x20009ba8
 8007994:	20009bac 	.word	0x20009bac
 8007998:	2000a050 	.word	0x2000a050
 800799c:	2000a04c 	.word	0x2000a04c
 80079a0:	20009bb0 	.word	0x20009bb0
 80079a4:	2000a09c 	.word	0x2000a09c
 80079a8:	2000a054 	.word	0x2000a054
 80079ac:	20009ba4 	.word	0x20009ba4
 80079b0:	2000a020 	.word	0x2000a020

080079b4 <xTaskResumeAll>:
{
 80079b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 80079b6:	4c31      	ldr	r4, [pc, #196]	; (8007a7c <xTaskResumeAll+0xc8>)
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	b943      	cbnz	r3, 80079ce <xTaskResumeAll+0x1a>
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	e7fe      	b.n	80079cc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80079ce:	f7fe ff41 	bl	8006854 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d8:	6824      	ldr	r4, [r4, #0]
 80079da:	b12c      	cbz	r4, 80079e8 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 80079dc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80079de:	f7fe ff59 	bl	8006894 <vPortExitCritical>
}
 80079e2:	4620      	mov	r0, r4
 80079e4:	b003      	add	sp, #12
 80079e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079e8:	4b25      	ldr	r3, [pc, #148]	; (8007a80 <xTaskResumeAll+0xcc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0f5      	beq.n	80079dc <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f0:	4d24      	ldr	r5, [pc, #144]	; (8007a84 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80079f2:	4e25      	ldr	r6, [pc, #148]	; (8007a88 <xTaskResumeAll+0xd4>)
 80079f4:	4f25      	ldr	r7, [pc, #148]	; (8007a8c <xTaskResumeAll+0xd8>)
 80079f6:	e01e      	b.n	8007a36 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f8:	68eb      	ldr	r3, [r5, #12]
 80079fa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079fc:	f104 0018 	add.w	r0, r4, #24
 8007a00:	f7fe fead 	bl	800675e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a04:	1d21      	adds	r1, r4, #4
 8007a06:	4608      	mov	r0, r1
 8007a08:	9101      	str	r1, [sp, #4]
 8007a0a:	f7fe fea8 	bl	800675e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007a10:	6832      	ldr	r2, [r6, #0]
 8007a12:	9901      	ldr	r1, [sp, #4]
 8007a14:	2014      	movs	r0, #20
 8007a16:	4293      	cmp	r3, r2
 8007a18:	fb00 7003 	mla	r0, r0, r3, r7
 8007a1c:	bf88      	it	hi
 8007a1e:	6033      	strhi	r3, [r6, #0]
 8007a20:	f7fe fe7a 	bl	8006718 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a24:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <xTaskResumeAll+0xdc>)
 8007a26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 8007a30:	4b18      	ldr	r3, [pc, #96]	; (8007a94 <xTaskResumeAll+0xe0>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a36:	682b      	ldr	r3, [r5, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1dd      	bne.n	80079f8 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 8007a3c:	b10c      	cbz	r4, 8007a42 <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8007a3e:	f7ff fe01 	bl	8007644 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a42:	4d15      	ldr	r5, [pc, #84]	; (8007a98 <xTaskResumeAll+0xe4>)
 8007a44:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007a46:	b144      	cbz	r4, 8007a5a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8007a48:	4e12      	ldr	r6, [pc, #72]	; (8007a94 <xTaskResumeAll+0xe0>)
 8007a4a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007a4c:	f7ff ff1c 	bl	8007888 <xTaskIncrementTick>
 8007a50:	b100      	cbz	r0, 8007a54 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8007a52:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a54:	3c01      	subs	r4, #1
 8007a56:	d1f9      	bne.n	8007a4c <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 8007a58:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007a5a:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <xTaskResumeAll+0xe0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0bc      	beq.n	80079dc <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 8007a62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007a76:	2401      	movs	r4, #1
 8007a78:	e7b1      	b.n	80079de <xTaskResumeAll+0x2a>
 8007a7a:	bf00      	nop
 8007a7c:	2000a018 	.word	0x2000a018
 8007a80:	2000a010 	.word	0x2000a010
 8007a84:	2000a058 	.word	0x2000a058
 8007a88:	2000a020 	.word	0x2000a020
 8007a8c:	20009bb0 	.word	0x20009bb0
 8007a90:	20009ba4 	.word	0x20009ba4
 8007a94:	2000a09c 	.word	0x2000a09c
 8007a98:	2000a054 	.word	0x2000a054

08007a9c <vTaskDelay>:
	{
 8007a9c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a9e:	b950      	cbnz	r0, 8007ab6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8007aa0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
	}
 8007ab4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	; (8007ae0 <vTaskDelay+0x44>)
 8007ab8:	6819      	ldr	r1, [r3, #0]
 8007aba:	b141      	cbz	r1, 8007ace <vTaskDelay+0x32>
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	e7fe      	b.n	8007acc <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007ace:	f7ff fecd 	bl	800786c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ad2:	f7ff fd7f 	bl	80075d4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007ad6:	f7ff ff6d 	bl	80079b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d0e0      	beq.n	8007aa0 <vTaskDelay+0x4>
 8007ade:	e7e9      	b.n	8007ab4 <vTaskDelay+0x18>
 8007ae0:	2000a018 	.word	0x2000a018

08007ae4 <vTaskSetApplicationTaskTag>:
	{
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	460d      	mov	r5, r1
		if( xTask == NULL )
 8007ae8:	4604      	mov	r4, r0
 8007aea:	b908      	cbnz	r0, 8007af0 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8007aec:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <vTaskSetApplicationTaskTag+0x1c>)
 8007aee:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8007af0:	f7fe feb0 	bl	8006854 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8007af4:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8007af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8007afa:	f7fe becb 	b.w	8006894 <vPortExitCritical>
 8007afe:	bf00      	nop
 8007b00:	20009ba4 	.word	0x20009ba4

08007b04 <xTaskCallApplicationTaskHook>:
	{
 8007b04:	4603      	mov	r3, r0
 8007b06:	4608      	mov	r0, r1
		if( xTask == NULL )
 8007b08:	b90b      	cbnz	r3, 8007b0e <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8007b0a:	4b03      	ldr	r3, [pc, #12]	; (8007b18 <xTaskCallApplicationTaskHook+0x14>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8007b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b10:	b103      	cbz	r3, 8007b14 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8007b12:	4718      	bx	r3
	}
 8007b14:	4618      	mov	r0, r3
 8007b16:	4770      	bx	lr
 8007b18:	20009ba4 	.word	0x20009ba4

08007b1c <vTaskStartScheduler>:
{
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b20:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b22:	aa07      	add	r2, sp, #28
 8007b24:	a906      	add	r1, sp, #24
 8007b26:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b28:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b2c:	f7fe fcd2 	bl	80064d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b30:	9b05      	ldr	r3, [sp, #20]
 8007b32:	9302      	str	r3, [sp, #8]
 8007b34:	9b06      	ldr	r3, [sp, #24]
 8007b36:	9a07      	ldr	r2, [sp, #28]
 8007b38:	4919      	ldr	r1, [pc, #100]	; (8007ba0 <vTaskStartScheduler+0x84>)
 8007b3a:	481a      	ldr	r0, [pc, #104]	; (8007ba4 <vTaskStartScheduler+0x88>)
 8007b3c:	e9cd 4300 	strd	r4, r3, [sp]
 8007b40:	4623      	mov	r3, r4
 8007b42:	f7ff fe2e 	bl	80077a2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007b46:	b340      	cbz	r0, 8007b9a <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8007b48:	f000 fa8a 	bl	8008060 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007b4c:	2801      	cmp	r0, #1
 8007b4e:	d119      	bne.n	8007b84 <vTaskStartScheduler+0x68>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b60:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <vTaskStartScheduler+0x8c>)
 8007b62:	f04f 32ff 	mov.w	r2, #4294967295
 8007b66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b68:	4b10      	ldr	r3, [pc, #64]	; (8007bac <vTaskStartScheduler+0x90>)
 8007b6a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b6c:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <vTaskStartScheduler+0x94>)
 8007b6e:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8007b70:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <vTaskStartScheduler+0x98>)
 8007b72:	4621      	mov	r1, r4
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	f7ff ffc5 	bl	8007b04 <xTaskCallApplicationTaskHook>
}
 8007b7a:	b008      	add	sp, #32
 8007b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007b80:	f7fe bef8 	b.w	8006974 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b84:	3001      	adds	r0, #1
 8007b86:	d108      	bne.n	8007b9a <vTaskStartScheduler+0x7e>
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	e7fe      	b.n	8007b98 <vTaskStartScheduler+0x7c>
}
 8007b9a:	b008      	add	sp, #32
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	bf00      	nop
 8007ba0:	0800efc8 	.word	0x0800efc8
 8007ba4:	080076a1 	.word	0x080076a1
 8007ba8:	2000a04c 	.word	0x2000a04c
 8007bac:	2000a06c 	.word	0x2000a06c
 8007bb0:	2000a098 	.word	0x2000a098
 8007bb4:	20009ba4 	.word	0x20009ba4

08007bb8 <vTaskSwitchContext>:
{
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bba:	4b1c      	ldr	r3, [pc, #112]	; (8007c2c <vTaskSwitchContext+0x74>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	; (8007c30 <vTaskSwitchContext+0x78>)
 8007bc0:	b112      	cbz	r2, 8007bc8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]
}
 8007bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8007bc8:	4c1a      	ldr	r4, [pc, #104]	; (8007c34 <vTaskSwitchContext+0x7c>)
		xYieldPending = pdFALSE;
 8007bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bcc:	4e1a      	ldr	r6, [pc, #104]	; (8007c38 <vTaskSwitchContext+0x80>)
		traceTASK_SWITCHED_OUT();
 8007bce:	6820      	ldr	r0, [r4, #0]
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	f7ff ff97 	bl	8007b04 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd6:	6832      	ldr	r2, [r6, #0]
 8007bd8:	4918      	ldr	r1, [pc, #96]	; (8007c3c <vTaskSwitchContext+0x84>)
 8007bda:	2714      	movs	r7, #20
 8007bdc:	fb07 f302 	mul.w	r3, r7, r2
 8007be0:	18c8      	adds	r0, r1, r3
 8007be2:	58cd      	ldr	r5, [r1, r3]
 8007be4:	b1ad      	cbz	r5, 8007c12 <vTaskSwitchContext+0x5a>
 8007be6:	6845      	ldr	r5, [r0, #4]
 8007be8:	3308      	adds	r3, #8
 8007bea:	686d      	ldr	r5, [r5, #4]
 8007bec:	6045      	str	r5, [r0, #4]
 8007bee:	440b      	add	r3, r1
 8007bf0:	429d      	cmp	r5, r3
 8007bf2:	bf04      	itt	eq
 8007bf4:	686b      	ldreq	r3, [r5, #4]
 8007bf6:	6043      	streq	r3, [r0, #4]
 8007bf8:	2314      	movs	r3, #20
 8007bfa:	fb03 1102 	mla	r1, r3, r2, r1
 8007bfe:	684b      	ldr	r3, [r1, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8007c06:	6820      	ldr	r0, [r4, #0]
 8007c08:	2100      	movs	r1, #0
}
 8007c0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8007c0e:	f7ff bf79 	b.w	8007b04 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c12:	b942      	cbnz	r2, 8007c26 <vTaskSwitchContext+0x6e>
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	e7fe      	b.n	8007c24 <vTaskSwitchContext+0x6c>
 8007c26:	3a01      	subs	r2, #1
 8007c28:	e7d8      	b.n	8007bdc <vTaskSwitchContext+0x24>
 8007c2a:	bf00      	nop
 8007c2c:	2000a018 	.word	0x2000a018
 8007c30:	2000a09c 	.word	0x2000a09c
 8007c34:	20009ba4 	.word	0x20009ba4
 8007c38:	2000a020 	.word	0x2000a020
 8007c3c:	20009bb0 	.word	0x20009bb0

08007c40 <vTaskPlaceOnEventList>:
{
 8007c40:	b510      	push	{r4, lr}
 8007c42:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007c44:	b940      	cbnz	r0, 8007c58 <vTaskPlaceOnEventList+0x18>
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	e7fe      	b.n	8007c56 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c58:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <vTaskPlaceOnEventList+0x30>)
 8007c5a:	6819      	ldr	r1, [r3, #0]
 8007c5c:	3118      	adds	r1, #24
 8007c5e:	f7fe fd67 	bl	8006730 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c62:	4620      	mov	r0, r4
 8007c64:	2101      	movs	r1, #1
}
 8007c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c6a:	f7ff bcb3 	b.w	80075d4 <prvAddCurrentTaskToDelayedList>
 8007c6e:	bf00      	nop
 8007c70:	20009ba4 	.word	0x20009ba4

08007c74 <vTaskPlaceOnEventListRestricted>:
	{
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	460d      	mov	r5, r1
 8007c78:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8007c7a:	b940      	cbnz	r0, 8007c8e <vTaskPlaceOnEventListRestricted+0x1a>
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	e7fe      	b.n	8007c8c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c8e:	4b07      	ldr	r3, [pc, #28]	; (8007cac <vTaskPlaceOnEventListRestricted+0x38>)
 8007c90:	6819      	ldr	r1, [r3, #0]
 8007c92:	3118      	adds	r1, #24
 8007c94:	f7fe fd40 	bl	8006718 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8007c98:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	bf0c      	ite	eq
 8007c9e:	4628      	moveq	r0, r5
 8007ca0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ca8:	f7ff bc94 	b.w	80075d4 <prvAddCurrentTaskToDelayedList>
 8007cac:	20009ba4 	.word	0x20009ba4

08007cb0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb0:	68c3      	ldr	r3, [r0, #12]
{
 8007cb2:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007cb6:	b944      	cbnz	r4, 8007cca <xTaskRemoveFromEventList+0x1a>
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	e7fe      	b.n	8007cc8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cca:	f104 0118 	add.w	r1, r4, #24
 8007cce:	4608      	mov	r0, r1
 8007cd0:	9101      	str	r1, [sp, #4]
 8007cd2:	f7fe fd44 	bl	800675e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd6:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <xTaskRemoveFromEventList+0x70>)
 8007cd8:	9901      	ldr	r1, [sp, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	b9eb      	cbnz	r3, 8007d1a <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cde:	1d21      	adds	r1, r4, #4
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	9101      	str	r1, [sp, #4]
 8007ce4:	f7fe fd3b 	bl	800675e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ce8:	4a0e      	ldr	r2, [pc, #56]	; (8007d24 <xTaskRemoveFromEventList+0x74>)
 8007cea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cec:	6810      	ldr	r0, [r2, #0]
 8007cee:	9901      	ldr	r1, [sp, #4]
 8007cf0:	4283      	cmp	r3, r0
 8007cf2:	bf88      	it	hi
 8007cf4:	6013      	strhi	r3, [r2, #0]
 8007cf6:	4a0c      	ldr	r2, [pc, #48]	; (8007d28 <xTaskRemoveFromEventList+0x78>)
 8007cf8:	2014      	movs	r0, #20
 8007cfa:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cfe:	f7fe fd0b 	bl	8006718 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <xTaskRemoveFromEventList+0x7c>)
 8007d04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8007d0c:	bf85      	ittet	hi
 8007d0e:	4b08      	ldrhi	r3, [pc, #32]	; (8007d30 <xTaskRemoveFromEventList+0x80>)
 8007d10:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8007d12:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8007d14:	6018      	strhi	r0, [r3, #0]
}
 8007d16:	b002      	add	sp, #8
 8007d18:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d1a:	4806      	ldr	r0, [pc, #24]	; (8007d34 <xTaskRemoveFromEventList+0x84>)
 8007d1c:	e7ef      	b.n	8007cfe <xTaskRemoveFromEventList+0x4e>
 8007d1e:	bf00      	nop
 8007d20:	2000a018 	.word	0x2000a018
 8007d24:	2000a020 	.word	0x2000a020
 8007d28:	20009bb0 	.word	0x20009bb0
 8007d2c:	20009ba4 	.word	0x20009ba4
 8007d30:	2000a09c 	.word	0x2000a09c
 8007d34:	2000a058 	.word	0x2000a058

08007d38 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d38:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <vTaskInternalSetTimeOutState+0x10>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <vTaskInternalSetTimeOutState+0x14>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6043      	str	r3, [r0, #4]
}
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	2000a050 	.word	0x2000a050
 8007d4c:	2000a098 	.word	0x2000a098

08007d50 <xTaskCheckForTimeOut>:
{
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007d54:	4605      	mov	r5, r0
 8007d56:	b940      	cbnz	r0, 8007d6a <xTaskCheckForTimeOut+0x1a>
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	e7fe      	b.n	8007d68 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8007d6a:	b941      	cbnz	r1, 8007d7e <xTaskCheckForTimeOut+0x2e>
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	e7fe      	b.n	8007d7c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8007d7e:	f7fe fd69 	bl	8006854 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007d82:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <xTaskCheckForTimeOut+0x70>)
 8007d84:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	d010      	beq.n	8007dae <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d8c:	480d      	ldr	r0, [pc, #52]	; (8007dc4 <xTaskCheckForTimeOut+0x74>)
 8007d8e:	682e      	ldr	r6, [r5, #0]
 8007d90:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d92:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d94:	4286      	cmp	r6, r0
 8007d96:	d001      	beq.n	8007d9c <xTaskCheckForTimeOut+0x4c>
 8007d98:	428a      	cmp	r2, r1
 8007d9a:	d90f      	bls.n	8007dbc <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d9c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d9e:	4283      	cmp	r3, r0
 8007da0:	d90a      	bls.n	8007db8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8007da2:	1a5b      	subs	r3, r3, r1
 8007da4:	4413      	add	r3, r2
 8007da6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007da8:	4628      	mov	r0, r5
 8007daa:	f7ff ffc5 	bl	8007d38 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8007dae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007db0:	f7fe fd70 	bl	8006894 <vPortExitCritical>
}
 8007db4:	4620      	mov	r0, r4
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007dbc:	2401      	movs	r4, #1
 8007dbe:	e7f7      	b.n	8007db0 <xTaskCheckForTimeOut+0x60>
 8007dc0:	2000a098 	.word	0x2000a098
 8007dc4:	2000a050 	.word	0x2000a050

08007dc8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007dc8:	4b01      	ldr	r3, [pc, #4]	; (8007dd0 <vTaskMissedYield+0x8>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	4770      	bx	lr
 8007dd0:	2000a09c 	.word	0x2000a09c

08007dd4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <xTaskGetSchedulerState+0x18>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	b133      	cbz	r3, 8007de8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <xTaskGetSchedulerState+0x1c>)
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	fab0 f080 	clz	r0, r0
 8007de2:	0940      	lsrs	r0, r0, #5
 8007de4:	0040      	lsls	r0, r0, #1
 8007de6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007de8:	2001      	movs	r0, #1
	}
 8007dea:	4770      	bx	lr
 8007dec:	2000a06c 	.word	0x2000a06c
 8007df0:	2000a018 	.word	0x2000a018

08007df4 <xTaskPriorityInherit>:
	{
 8007df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8007df6:	4604      	mov	r4, r0
 8007df8:	b348      	cbz	r0, 8007e4e <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007dfa:	4d1c      	ldr	r5, [pc, #112]	; (8007e6c <xTaskPriorityInherit+0x78>)
 8007dfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007dfe:	682a      	ldr	r2, [r5, #0]
 8007e00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d229      	bcs.n	8007e5a <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e06:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e08:	4e19      	ldr	r6, [pc, #100]	; (8007e70 <xTaskPriorityInherit+0x7c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e0a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e0c:	bfa1      	itttt	ge
 8007e0e:	682a      	ldrge	r2, [r5, #0]
 8007e10:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8007e12:	f1c2 0238 	rsbge	r2, r2, #56	; 0x38
 8007e16:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e18:	2214      	movs	r2, #20
 8007e1a:	fb02 6303 	mla	r3, r2, r3, r6
 8007e1e:	6942      	ldr	r2, [r0, #20]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d116      	bne.n	8007e52 <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e24:	1d01      	adds	r1, r0, #4
 8007e26:	4608      	mov	r0, r1
 8007e28:	9101      	str	r1, [sp, #4]
 8007e2a:	f7fe fc98 	bl	800675e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e2e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e30:	4a10      	ldr	r2, [pc, #64]	; (8007e74 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e34:	6810      	ldr	r0, [r2, #0]
 8007e36:	9901      	ldr	r1, [sp, #4]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e38:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e3a:	4283      	cmp	r3, r0
 8007e3c:	f04f 0014 	mov.w	r0, #20
 8007e40:	fb00 6003 	mla	r0, r0, r3, r6
 8007e44:	bf88      	it	hi
 8007e46:	6013      	strhi	r3, [r2, #0]
 8007e48:	f7fe fc66 	bl	8006718 <vListInsertEnd>
				xReturn = pdTRUE;
 8007e4c:	2001      	movs	r0, #1
	}
 8007e4e:	b002      	add	sp, #8
 8007e50:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007e58:	e7f8      	b.n	8007e4c <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	4298      	cmp	r0, r3
 8007e62:	bf2c      	ite	cs
 8007e64:	2000      	movcs	r0, #0
 8007e66:	2001      	movcc	r0, #1
 8007e68:	e7f1      	b.n	8007e4e <xTaskPriorityInherit+0x5a>
 8007e6a:	bf00      	nop
 8007e6c:	20009ba4 	.word	0x20009ba4
 8007e70:	20009bb0 	.word	0x20009bb0
 8007e74:	2000a020 	.word	0x2000a020

08007e78 <xTaskPriorityDisinherit>:
	{
 8007e78:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8007e7a:	b910      	cbnz	r0, 8007e82 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8007e7c:	2000      	movs	r0, #0
	}
 8007e7e:	b002      	add	sp, #8
 8007e80:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007e82:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <xTaskPriorityDisinherit+0x7c>)
 8007e84:	681c      	ldr	r4, [r3, #0]
 8007e86:	4284      	cmp	r4, r0
 8007e88:	d008      	beq.n	8007e9c <xTaskPriorityDisinherit+0x24>
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	e7fe      	b.n	8007e9a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007e9e:	b943      	cbnz	r3, 8007eb2 <xTaskPriorityDisinherit+0x3a>
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	e7fe      	b.n	8007eb0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007eb4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8007eb6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eb8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007eba:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ebc:	d0de      	beq.n	8007e7c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1dc      	bne.n	8007e7c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec2:	1d21      	adds	r1, r4, #4
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	9101      	str	r1, [sp, #4]
 8007ec8:	f7fe fc49 	bl	800675e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ecc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8007ece:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ed6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ed8:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <xTaskPriorityDisinherit+0x80>)
 8007eda:	6810      	ldr	r0, [r2, #0]
 8007edc:	4283      	cmp	r3, r0
 8007ede:	bf88      	it	hi
 8007ee0:	6013      	strhi	r3, [r2, #0]
 8007ee2:	4a06      	ldr	r2, [pc, #24]	; (8007efc <xTaskPriorityDisinherit+0x84>)
 8007ee4:	2014      	movs	r0, #20
 8007ee6:	fb00 2003 	mla	r0, r0, r3, r2
 8007eea:	f7fe fc15 	bl	8006718 <vListInsertEnd>
					xReturn = pdTRUE;
 8007eee:	2001      	movs	r0, #1
		return xReturn;
 8007ef0:	e7c5      	b.n	8007e7e <xTaskPriorityDisinherit+0x6>
 8007ef2:	bf00      	nop
 8007ef4:	20009ba4 	.word	0x20009ba4
 8007ef8:	2000a020 	.word	0x2000a020
 8007efc:	20009bb0 	.word	0x20009bb0

08007f00 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8007f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8007f02:	4604      	mov	r4, r0
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d044      	beq.n	8007f92 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f08:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007f0a:	b942      	cbnz	r2, 8007f1e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	e7fe      	b.n	8007f1c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007f20:	4299      	cmp	r1, r3
 8007f22:	bf38      	it	cc
 8007f24:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	d032      	beq.n	8007f92 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f2c:	2a01      	cmp	r2, #1
 8007f2e:	d130      	bne.n	8007f92 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 8007f30:	4a19      	ldr	r2, [pc, #100]	; (8007f98 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	4282      	cmp	r2, r0
 8007f36:	d108      	bne.n	8007f4a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	e7fe      	b.n	8007f48 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f4a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f4c:	4d13      	ldr	r5, [pc, #76]	; (8007f9c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					pxTCB->uxPriority = uxPriorityToUse;
 8007f4e:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f50:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f52:	f04f 0214 	mov.w	r2, #20
 8007f56:	fb02 5303 	mla	r3, r2, r3, r5
 8007f5a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f5c:	bfa4      	itt	ge
 8007f5e:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 8007f62:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d114      	bne.n	8007f92 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f68:	1d01      	adds	r1, r0, #4
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	9101      	str	r1, [sp, #4]
 8007f6e:	f7fe fbf6 	bl	800675e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007f72:	4a0b      	ldr	r2, [pc, #44]	; (8007fa0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8007f74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007f76:	6810      	ldr	r0, [r2, #0]
 8007f78:	9901      	ldr	r1, [sp, #4]
 8007f7a:	4283      	cmp	r3, r0
 8007f7c:	f04f 0014 	mov.w	r0, #20
 8007f80:	fb00 5003 	mla	r0, r0, r3, r5
 8007f84:	bf88      	it	hi
 8007f86:	6013      	strhi	r3, [r2, #0]
	}
 8007f88:	b003      	add	sp, #12
 8007f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8007f8e:	f7fe bbc3 	b.w	8006718 <vListInsertEnd>
	}
 8007f92:	b003      	add	sp, #12
 8007f94:	bd30      	pop	{r4, r5, pc}
 8007f96:	bf00      	nop
 8007f98:	20009ba4 	.word	0x20009ba4
 8007f9c:	20009bb0 	.word	0x20009bb0
 8007fa0:	2000a020 	.word	0x2000a020

08007fa4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007fa4:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <pvTaskIncrementMutexHeldCount+0x14>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	b11a      	cbz	r2, 8007fb2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007faa:	6819      	ldr	r1, [r3, #0]
 8007fac:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007fae:	3201      	adds	r2, #1
 8007fb0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8007fb2:	6818      	ldr	r0, [r3, #0]
	}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20009ba4 	.word	0x20009ba4

08007fbc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007fbe:	4c11      	ldr	r4, [pc, #68]	; (8008004 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8007fc0:	f7fe fc48 	bl	8006854 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007fc4:	6825      	ldr	r5, [r4, #0]
 8007fc6:	b9bd      	cbnz	r5, 8007ff8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fc8:	4f0f      	ldr	r7, [pc, #60]	; (8008008 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8007fca:	4e10      	ldr	r6, [pc, #64]	; (800800c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8007fcc:	4638      	mov	r0, r7
 8007fce:	f7fe fb95 	bl	80066fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7fe fb92 	bl	80066fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fd8:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fda:	4a0e      	ldr	r2, [pc, #56]	; (8008014 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007fdc:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fde:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fe0:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8007fe2:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fe4:	200a      	movs	r0, #10
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <prvCheckForValidListAndQueue+0x60>)
 8007fe8:	9500      	str	r5, [sp, #0]
 8007fea:	f7fe fe44 	bl	8006c76 <xQueueGenericCreateStatic>
 8007fee:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ff0:	b110      	cbz	r0, 8007ff8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ff2:	490b      	ldr	r1, [pc, #44]	; (8008020 <prvCheckForValidListAndQueue+0x64>)
 8007ff4:	f7ff fa0e 	bl	8007414 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8007ff8:	b003      	add	sp, #12
 8007ffa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007ffe:	f7fe bc49 	b.w	8006894 <vPortExitCritical>
 8008002:	bf00      	nop
 8008004:	2000a1c4 	.word	0x2000a1c4
 8008008:	2000a148 	.word	0x2000a148
 800800c:	2000a15c 	.word	0x2000a15c
 8008010:	2000a0a0 	.word	0x2000a0a0
 8008014:	2000a0a8 	.word	0x2000a0a8
 8008018:	2000a0a4 	.word	0x2000a0a4
 800801c:	2000a174 	.word	0x2000a174
 8008020:	0800efcd 	.word	0x0800efcd

08008024 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008024:	4291      	cmp	r1, r2
{
 8008026:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008028:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800802a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800802c:	d80a      	bhi.n	8008044 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	6982      	ldr	r2, [r0, #24]
 8008032:	4293      	cmp	r3, r2
 8008034:	d20d      	bcs.n	8008052 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008036:	4b08      	ldr	r3, [pc, #32]	; (8008058 <prvInsertTimerInActiveList+0x34>)
 8008038:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	f7fe fb78 	bl	8006730 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008040:	2000      	movs	r0, #0
}
 8008042:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008044:	429a      	cmp	r2, r3
 8008046:	d201      	bcs.n	800804c <prvInsertTimerInActiveList+0x28>
 8008048:	4299      	cmp	r1, r3
 800804a:	d202      	bcs.n	8008052 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800804c:	4b03      	ldr	r3, [pc, #12]	; (800805c <prvInsertTimerInActiveList+0x38>)
 800804e:	1d01      	adds	r1, r0, #4
 8008050:	e7f3      	b.n	800803a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008052:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008054:	e7f5      	b.n	8008042 <prvInsertTimerInActiveList+0x1e>
 8008056:	bf00      	nop
 8008058:	2000a0a4 	.word	0x2000a0a4
 800805c:	2000a0a0 	.word	0x2000a0a0

08008060 <xTimerCreateTimerTask>:
{
 8008060:	b510      	push	{r4, lr}
 8008062:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008064:	f7ff ffaa 	bl	8007fbc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008068:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <xTimerCreateTimerTask+0x54>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	b1b3      	cbz	r3, 800809c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800806e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008070:	aa07      	add	r2, sp, #28
 8008072:	a906      	add	r1, sp, #24
 8008074:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008076:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800807a:	f7fe fa37 	bl	80064ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800807e:	9b05      	ldr	r3, [sp, #20]
 8008080:	9302      	str	r3, [sp, #8]
 8008082:	9b06      	ldr	r3, [sp, #24]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	2302      	movs	r3, #2
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	9a07      	ldr	r2, [sp, #28]
 800808c:	490a      	ldr	r1, [pc, #40]	; (80080b8 <xTimerCreateTimerTask+0x58>)
 800808e:	480b      	ldr	r0, [pc, #44]	; (80080bc <xTimerCreateTimerTask+0x5c>)
 8008090:	4623      	mov	r3, r4
 8008092:	f7ff fb86 	bl	80077a2 <xTaskCreateStatic>
 8008096:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <xTimerCreateTimerTask+0x60>)
 8008098:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800809a:	b940      	cbnz	r0, 80080ae <xTimerCreateTimerTask+0x4e>
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80080ac:	e7fe      	b.n	80080ac <xTimerCreateTimerTask+0x4c>
}
 80080ae:	2001      	movs	r0, #1
 80080b0:	b008      	add	sp, #32
 80080b2:	bd10      	pop	{r4, pc}
 80080b4:	2000a1c4 	.word	0x2000a1c4
 80080b8:	0800efd2 	.word	0x0800efd2
 80080bc:	080081c9 	.word	0x080081c9
 80080c0:	2000a1c8 	.word	0x2000a1c8

080080c4 <xTimerGenericCommand>:
{
 80080c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80080c6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80080c8:	4604      	mov	r4, r0
{
 80080ca:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80080cc:	b940      	cbnz	r0, 80080e0 <xTimerGenericCommand+0x1c>
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	e7fe      	b.n	80080de <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80080e0:	4d0d      	ldr	r5, [pc, #52]	; (8008118 <xTimerGenericCommand+0x54>)
 80080e2:	6828      	ldr	r0, [r5, #0]
 80080e4:	b180      	cbz	r0, 8008108 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080e6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080e8:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080ec:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080ee:	dc0d      	bgt.n	800810c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080f0:	f7ff fe70 	bl	8007dd4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080f4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080f6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080f8:	bf08      	it	eq
 80080fa:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080fc:	6828      	ldr	r0, [r5, #0]
 80080fe:	bf18      	it	ne
 8008100:	461a      	movne	r2, r3
 8008102:	4669      	mov	r1, sp
 8008104:	f7fe fe6c 	bl	8006de0 <xQueueGenericSend>
}
 8008108:	b004      	add	sp, #16
 800810a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800810c:	2300      	movs	r3, #0
 800810e:	4669      	mov	r1, sp
 8008110:	f7fe ff19 	bl	8006f46 <xQueueGenericSendFromISR>
 8008114:	e7f8      	b.n	8008108 <xTimerGenericCommand+0x44>
 8008116:	bf00      	nop
 8008118:	2000a1c4 	.word	0x2000a1c4

0800811c <prvSampleTimeNow>:
{
 800811c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8008120:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80081c4 <prvSampleTimeNow+0xa8>
{
 8008124:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8008126:	f7ff fba9 	bl	800787c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800812a:	f8d8 3000 	ldr.w	r3, [r8]
 800812e:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8008130:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008132:	d90b      	bls.n	800814c <prvSampleTimeNow+0x30>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008134:	4f21      	ldr	r7, [pc, #132]	; (80081bc <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008136:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	b96a      	cbnz	r2, 800815c <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8008140:	4a1f      	ldr	r2, [pc, #124]	; (80081c0 <prvSampleTimeNow+0xa4>)
 8008142:	6811      	ldr	r1, [r2, #0]
 8008144:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8008146:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <prvSampleTimeNow+0x32>
 800814c:	2300      	movs	r3, #0
}
 800814e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8008150:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8008152:	f8c8 5000 	str.w	r5, [r8]
}
 8008156:	b004      	add	sp, #16
 8008158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800815c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008160:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008164:	1d21      	adds	r1, r4, #4
 8008166:	4608      	mov	r0, r1
 8008168:	9103      	str	r1, [sp, #12]
 800816a:	f7fe faf8 	bl	800675e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816e:	6a23      	ldr	r3, [r4, #32]
 8008170:	4620      	mov	r0, r4
 8008172:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008174:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008178:	9903      	ldr	r1, [sp, #12]
 800817a:	f013 0f04 	tst.w	r3, #4
 800817e:	d0dc      	beq.n	800813a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008180:	69a3      	ldr	r3, [r4, #24]
 8008182:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8008184:	459a      	cmp	sl, r3
 8008186:	d205      	bcs.n	8008194 <prvSampleTimeNow+0x78>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008188:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800818a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800818c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800818e:	f7fe facf 	bl	8006730 <vListInsert>
 8008192:	e7d2      	b.n	800813a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008194:	2300      	movs	r3, #0
 8008196:	f8cd 9000 	str.w	r9, [sp]
 800819a:	4652      	mov	r2, sl
 800819c:	4619      	mov	r1, r3
 800819e:	4620      	mov	r0, r4
 80081a0:	f7ff ff90 	bl	80080c4 <xTimerGenericCommand>
				configASSERT( xResult );
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d1c8      	bne.n	800813a <prvSampleTimeNow+0x1e>
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	e7fe      	b.n	80081b8 <prvSampleTimeNow+0x9c>
 80081ba:	bf00      	nop
 80081bc:	2000a0a0 	.word	0x2000a0a0
 80081c0:	2000a0a4 	.word	0x2000a0a4
 80081c4:	2000a170 	.word	0x2000a170

080081c8 <prvTimerTask>:
{
 80081c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081cc:	4d6e      	ldr	r5, [pc, #440]	; (8008388 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081ce:	4e6f      	ldr	r6, [pc, #444]	; (800838c <prvTimerTask+0x1c4>)
{
 80081d0:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081d2:	682b      	ldr	r3, [r5, #0]
 80081d4:	f8d3 8000 	ldr.w	r8, [r3]
 80081d8:	f1b8 0f00 	cmp.w	r8, #0
 80081dc:	d035      	beq.n	800824a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081e4:	2400      	movs	r4, #0
	vTaskSuspendAll();
 80081e6:	f7ff fb41 	bl	800786c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ea:	a804      	add	r0, sp, #16
 80081ec:	f7ff ff96 	bl	800811c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80081f0:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081f2:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d169      	bne.n	80082cc <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081f8:	2c00      	cmp	r4, #0
 80081fa:	d14c      	bne.n	8008296 <prvTimerTask+0xce>
 80081fc:	4540      	cmp	r0, r8
 80081fe:	d350      	bcc.n	80082a2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8008200:	f7ff fbd8 	bl	80079b4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800820a:	1d38      	adds	r0, r7, #4
 800820c:	f7fe faa7 	bl	800675e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008210:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008214:	0758      	lsls	r0, r3, #29
 8008216:	d51a      	bpl.n	800824e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008218:	69b9      	ldr	r1, [r7, #24]
 800821a:	4643      	mov	r3, r8
 800821c:	464a      	mov	r2, r9
 800821e:	4441      	add	r1, r8
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff feff 	bl	8008024 <prvInsertTimerInActiveList>
 8008226:	b1b0      	cbz	r0, 8008256 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008228:	9400      	str	r4, [sp, #0]
 800822a:	4623      	mov	r3, r4
 800822c:	4642      	mov	r2, r8
 800822e:	4621      	mov	r1, r4
 8008230:	4638      	mov	r0, r7
 8008232:	f7ff ff47 	bl	80080c4 <xTimerGenericCommand>
			configASSERT( xResult );
 8008236:	b970      	cbnz	r0, 8008256 <prvTimerTask+0x8e>
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	e7fe      	b.n	8008248 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800824a:	2401      	movs	r4, #1
 800824c:	e7cb      	b.n	80081e6 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800824e:	f023 0301 	bic.w	r3, r3, #1
 8008252:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	4638      	mov	r0, r7
 800825a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800825c:	6830      	ldr	r0, [r6, #0]
 800825e:	2200      	movs	r2, #0
 8008260:	a904      	add	r1, sp, #16
 8008262:	f7fe ff26 	bl	80070b2 <xQueueReceive>
 8008266:	2800      	cmp	r0, #0
 8008268:	d0b3      	beq.n	80081d2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800826a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800826c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800826e:	2b00      	cmp	r3, #0
 8008270:	db2f      	blt.n	80082d2 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008272:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008274:	6963      	ldr	r3, [r4, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d132      	bne.n	80082e0 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800827a:	a803      	add	r0, sp, #12
 800827c:	f7ff ff4e 	bl	800811c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008280:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008282:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008284:	2b09      	cmp	r3, #9
 8008286:	d8e9      	bhi.n	800825c <prvTimerTask+0x94>
 8008288:	e8df f003 	tbb	[pc, r3]
 800828c:	572e2e2e 	.word	0x572e2e2e
 8008290:	2e2e765e 	.word	0x2e2e765e
 8008294:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008296:	4b3e      	ldr	r3, [pc, #248]	; (8008390 <prvTimerTask+0x1c8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681c      	ldr	r4, [r3, #0]
 800829c:	fab4 f484 	clz	r4, r4
 80082a0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082a2:	6830      	ldr	r0, [r6, #0]
 80082a4:	4622      	mov	r2, r4
 80082a6:	eba8 0109 	sub.w	r1, r8, r9
 80082aa:	f7ff f8f0 	bl	800748e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082ae:	f7ff fb81 	bl	80079b4 <xTaskResumeAll>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d1d2      	bne.n	800825c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80082b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	e7c7      	b.n	800825c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80082cc:	f7ff fb72 	bl	80079b4 <xTaskResumeAll>
}
 80082d0:	e7c4      	b.n	800825c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082d2:	9b05      	ldr	r3, [sp, #20]
 80082d4:	9907      	ldr	r1, [sp, #28]
 80082d6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082d8:	9b04      	ldr	r3, [sp, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	dbbe      	blt.n	800825c <prvTimerTask+0x94>
 80082de:	e7c8      	b.n	8008272 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e0:	1d20      	adds	r0, r4, #4
 80082e2:	f7fe fa3c 	bl	800675e <uxListRemove>
 80082e6:	e7c8      	b.n	800827a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082ec:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082ee:	f043 0301 	orr.w	r3, r3, #1
 80082f2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082f6:	9b05      	ldr	r3, [sp, #20]
 80082f8:	4620      	mov	r0, r4
 80082fa:	4419      	add	r1, r3
 80082fc:	f7ff fe92 	bl	8008024 <prvInsertTimerInActiveList>
 8008300:	2800      	cmp	r0, #0
 8008302:	d0ab      	beq.n	800825c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008304:	6a23      	ldr	r3, [r4, #32]
 8008306:	4620      	mov	r0, r4
 8008308:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800830a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800830e:	0759      	lsls	r1, r3, #29
 8008310:	d5a4      	bpl.n	800825c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008312:	69a2      	ldr	r2, [r4, #24]
 8008314:	9905      	ldr	r1, [sp, #20]
 8008316:	2300      	movs	r3, #0
 8008318:	440a      	add	r2, r1
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	4619      	mov	r1, r3
 800831e:	4620      	mov	r0, r4
 8008320:	f7ff fed0 	bl	80080c4 <xTimerGenericCommand>
							configASSERT( xResult );
 8008324:	2800      	cmp	r0, #0
 8008326:	d199      	bne.n	800825c <prvTimerTask+0x94>
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	e7fe      	b.n	8008338 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800833a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800833e:	f023 0301 	bic.w	r3, r3, #1
 8008342:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8008346:	e789      	b.n	800825c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008348:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800834c:	f043 0301 	orr.w	r3, r3, #1
 8008350:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008354:	9905      	ldr	r1, [sp, #20]
 8008356:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008358:	b941      	cbnz	r1, 800836c <prvTimerTask+0x1a4>
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	e7fe      	b.n	800836a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800836c:	4603      	mov	r3, r0
 800836e:	4401      	add	r1, r0
 8008370:	4620      	mov	r0, r4
 8008372:	f7ff fe57 	bl	8008024 <prvInsertTimerInActiveList>
					break;
 8008376:	e771      	b.n	800825c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008378:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800837c:	079a      	lsls	r2, r3, #30
 800837e:	d4de      	bmi.n	800833e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8008380:	4620      	mov	r0, r4
 8008382:	f7fe f97d 	bl	8006680 <vPortFree>
 8008386:	e769      	b.n	800825c <prvTimerTask+0x94>
 8008388:	2000a0a0 	.word	0x2000a0a0
 800838c:	2000a1c4 	.word	0x2000a1c4
 8008390:	2000a0a4 	.word	0x2000a0a4

08008394 <_ZN8touchgfx4RectaNERKS0_>:
 8008394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008398:	f9b1 7000 	ldrsh.w	r7, [r1]
 800839c:	888c      	ldrh	r4, [r1, #4]
 800839e:	f9b0 9000 	ldrsh.w	r9, [r0]
 80083a2:	443c      	add	r4, r7
 80083a4:	b2a4      	uxth	r4, r4
 80083a6:	fa0f f884 	sxth.w	r8, r4
 80083aa:	45c1      	cmp	r9, r8
 80083ac:	da2f      	bge.n	800840e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80083ae:	8882      	ldrh	r2, [r0, #4]
 80083b0:	444a      	add	r2, r9
 80083b2:	b292      	uxth	r2, r2
 80083b4:	fa0f fe82 	sxth.w	lr, r2
 80083b8:	4577      	cmp	r7, lr
 80083ba:	da28      	bge.n	800840e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80083bc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80083c0:	88cb      	ldrh	r3, [r1, #6]
 80083c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80083c6:	442b      	add	r3, r5
 80083c8:	b21b      	sxth	r3, r3
 80083ca:	429e      	cmp	r6, r3
 80083cc:	da1f      	bge.n	800840e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80083ce:	88c3      	ldrh	r3, [r0, #6]
 80083d0:	4433      	add	r3, r6
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	fa0f fc83 	sxth.w	ip, r3
 80083d8:	4565      	cmp	r5, ip
 80083da:	da18      	bge.n	800840e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80083dc:	454f      	cmp	r7, r9
 80083de:	bfb8      	it	lt
 80083e0:	464f      	movlt	r7, r9
 80083e2:	42b5      	cmp	r5, r6
 80083e4:	bfb8      	it	lt
 80083e6:	4635      	movlt	r5, r6
 80083e8:	45f0      	cmp	r8, lr
 80083ea:	bfd8      	it	le
 80083ec:	4622      	movle	r2, r4
 80083ee:	1bd2      	subs	r2, r2, r7
 80083f0:	8082      	strh	r2, [r0, #4]
 80083f2:	884a      	ldrh	r2, [r1, #2]
 80083f4:	88c9      	ldrh	r1, [r1, #6]
 80083f6:	8007      	strh	r7, [r0, #0]
 80083f8:	440a      	add	r2, r1
 80083fa:	b292      	uxth	r2, r2
 80083fc:	b211      	sxth	r1, r2
 80083fe:	458c      	cmp	ip, r1
 8008400:	bfa8      	it	ge
 8008402:	4613      	movge	r3, r2
 8008404:	1b5b      	subs	r3, r3, r5
 8008406:	80c3      	strh	r3, [r0, #6]
 8008408:	8045      	strh	r5, [r0, #2]
 800840a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800840e:	2300      	movs	r3, #0
 8008410:	8003      	strh	r3, [r0, #0]
 8008412:	8043      	strh	r3, [r0, #2]
 8008414:	8083      	strh	r3, [r0, #4]
 8008416:	80c3      	strh	r3, [r0, #6]
 8008418:	e7f7      	b.n	800840a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800841a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800841a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	dd06      	ble.n	8008430 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8008422:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008426:	2800      	cmp	r0, #0
 8008428:	bfcc      	ite	gt
 800842a:	2000      	movgt	r0, #0
 800842c:	2001      	movle	r0, #1
 800842e:	4770      	bx	lr
 8008430:	2001      	movs	r0, #1
 8008432:	4770      	bx	lr

08008434 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8008434:	b513      	push	{r0, r1, r4, lr}
 8008436:	6803      	ldr	r3, [r0, #0]
 8008438:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800843c:	2300      	movs	r3, #0
 800843e:	e9cd 3300 	strd	r3, r3, [sp]
 8008442:	466b      	mov	r3, sp
 8008444:	47a0      	blx	r4
 8008446:	b002      	add	sp, #8
 8008448:	bd10      	pop	{r4, pc}

0800844a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800844a:	2301      	movs	r3, #1
 800844c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8008450:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8008454:	4770      	bx	lr

08008456 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8008456:	2301      	movs	r3, #1
 8008458:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800845c:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8008460:	4770      	bx	lr

08008462 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8008462:	6843      	ldr	r3, [r0, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	725a      	strb	r2, [r3, #9]
 8008468:	6840      	ldr	r0, [r0, #4]
 800846a:	6803      	ldr	r3, [r0, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	4718      	bx	r3

08008470 <_ZN8touchgfx3HAL8flushDMAEv>:
 8008470:	6840      	ldr	r0, [r0, #4]
 8008472:	6803      	ldr	r3, [r0, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	4718      	bx	r3

08008478 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8008478:	b530      	push	{r4, r5, lr}
 800847a:	b08b      	sub	sp, #44	; 0x2c
 800847c:	6804      	ldr	r4, [r0, #0]
 800847e:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8008482:	9509      	str	r5, [sp, #36]	; 0x24
 8008484:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8008488:	9508      	str	r5, [sp, #32]
 800848a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800848e:	9507      	str	r5, [sp, #28]
 8008490:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8008494:	9506      	str	r5, [sp, #24]
 8008496:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800849a:	9505      	str	r5, [sp, #20]
 800849c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80084a0:	9504      	str	r5, [sp, #16]
 80084a2:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80084a6:	9503      	str	r5, [sp, #12]
 80084a8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80084ac:	9502      	str	r5, [sp, #8]
 80084ae:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80084b2:	e9cd 3500 	strd	r3, r5, [sp]
 80084b6:	4613      	mov	r3, r2
 80084b8:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80084ba:	2200      	movs	r2, #0
 80084bc:	47a0      	blx	r4
 80084be:	b00b      	add	sp, #44	; 0x2c
 80084c0:	bd30      	pop	{r4, r5, pc}
	...

080084c4 <_ZN8touchgfx3HAL10beginFrameEv>:
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	b123      	cbz	r3, 80084d4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80084ca:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 80084ce:	f080 0001 	eor.w	r0, r0, #1
 80084d2:	4770      	bx	lr
 80084d4:	2001      	movs	r0, #1
 80084d6:	4770      	bx	lr
 80084d8:	2000a1d6 	.word	0x2000a1d6

080084dc <_ZN8touchgfx3HAL8endFrameEv>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	4604      	mov	r4, r0
 80084e0:	6840      	ldr	r0, [r0, #4]
 80084e2:	6803      	ldr	r3, [r0, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	4798      	blx	r3
 80084e8:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 80084ec:	b113      	cbz	r3, 80084f4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80084ee:	2301      	movs	r3, #1
 80084f0:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80084f4:	bd10      	pop	{r4, pc}

080084f6 <_ZN8touchgfx3HAL10initializeEv>:
 80084f6:	b510      	push	{r4, lr}
 80084f8:	4604      	mov	r4, r0
 80084fa:	f7f8 fc03 	bl	8000d04 <_ZN8touchgfx10OSWrappers10initializeEv>
 80084fe:	f7f8 f9bb 	bl	8000878 <_ZN8touchgfx4GPIO4initEv>
 8008502:	6860      	ldr	r0, [r4, #4]
 8008504:	6803      	ldr	r3, [r0, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	4798      	blx	r3
 800850a:	68e0      	ldr	r0, [r4, #12]
 800850c:	6803      	ldr	r3, [r0, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	4798      	blx	r3
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	4620      	mov	r0, r4
 8008516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800851c:	4718      	bx	r3
	...

08008520 <_ZN8touchgfx3HAL4tickEv>:
 8008520:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008522:	6803      	ldr	r3, [r0, #0]
 8008524:	4d5b      	ldr	r5, [pc, #364]	; (8008694 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8008526:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800852a:	4604      	mov	r4, r0
 800852c:	4798      	blx	r3
 800852e:	2800      	cmp	r0, #0
 8008530:	f000 8095 	beq.w	800865e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8008534:	2001      	movs	r0, #1
 8008536:	f7f8 f90d 	bl	8000754 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800853a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800853e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8008542:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8008546:	2600      	movs	r6, #0
 8008548:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 800854c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8008550:	b133      	cbz	r3, 8008560 <_ZN8touchgfx3HAL4tickEv+0x40>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	4620      	mov	r0, r4
 8008556:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800855a:	4798      	blx	r3
 800855c:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8008560:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8008564:	6862      	ldr	r2, [r4, #4]
 8008566:	f083 0301 	eor.w	r3, r3, #1
 800856a:	7253      	strb	r3, [r2, #9]
 800856c:	2601      	movs	r6, #1
 800856e:	702e      	strb	r6, [r5, #0]
 8008570:	f001 fd2e 	bl	8009fd0 <_ZN8touchgfx11Application11getInstanceEv>
 8008574:	6803      	ldr	r3, [r0, #0]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	4798      	blx	r3
 800857a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800857e:	b90b      	cbnz	r3, 8008584 <_ZN8touchgfx3HAL4tickEv+0x64>
 8008580:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8008584:	f001 fd24 	bl	8009fd0 <_ZN8touchgfx11Application11getInstanceEv>
 8008588:	6803      	ldr	r3, [r0, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	4798      	blx	r3
 800858e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008590:	6803      	ldr	r3, [r0, #0]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	4798      	blx	r3
 8008596:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800859a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 800859e:	3b01      	subs	r3, #1
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80085a6:	b10a      	cbz	r2, 80085ac <_ZN8touchgfx3HAL4tickEv+0x8c>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1eb      	bne.n	8008584 <_ZN8touchgfx3HAL4tickEv+0x64>
 80085ac:	4a3a      	ldr	r2, [pc, #232]	; (8008698 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80085ae:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 80085b2:	7813      	ldrb	r3, [r2, #0]
 80085b4:	3301      	adds	r3, #1
 80085b6:	b25b      	sxtb	r3, r3
 80085b8:	4299      	cmp	r1, r3
 80085ba:	7013      	strb	r3, [r2, #0]
 80085bc:	dc10      	bgt.n	80085e0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80085be:	68e0      	ldr	r0, [r4, #12]
 80085c0:	2300      	movs	r3, #0
 80085c2:	7013      	strb	r3, [r2, #0]
 80085c4:	6803      	ldr	r3, [r0, #0]
 80085c6:	aa03      	add	r2, sp, #12
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	a902      	add	r1, sp, #8
 80085cc:	4798      	blx	r3
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d050      	beq.n	8008676 <_ZN8touchgfx3HAL4tickEv+0x156>
 80085d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80085d8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80085dc:	4620      	mov	r0, r4
 80085de:	4798      	blx	r3
 80085e0:	6960      	ldr	r0, [r4, #20]
 80085e2:	2300      	movs	r3, #0
 80085e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80085e8:	b158      	cbz	r0, 8008602 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80085ea:	6803      	ldr	r3, [r0, #0]
 80085ec:	f10d 0107 	add.w	r1, sp, #7
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	4798      	blx	r3
 80085f4:	b128      	cbz	r0, 8008602 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80085f6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80085f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80085fc:	6803      	ldr	r3, [r0, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4798      	blx	r3
 8008602:	f104 001c 	add.w	r0, r4, #28
 8008606:	f004 febb 	bl	800d380 <_ZN8touchgfx8Gestures4tickEv>
 800860a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 800860e:	b30b      	cbz	r3, 8008654 <_ZN8touchgfx3HAL4tickEv+0x134>
 8008610:	6920      	ldr	r0, [r4, #16]
 8008612:	6803      	ldr	r3, [r0, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	4798      	blx	r3
 8008618:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800861a:	4606      	mov	r6, r0
 800861c:	b903      	cbnz	r3, 8008620 <_ZN8touchgfx3HAL4tickEv+0x100>
 800861e:	6760      	str	r0, [r4, #116]	; 0x74
 8008620:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008622:	4a1e      	ldr	r2, [pc, #120]	; (800869c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8008624:	1af3      	subs	r3, r6, r3
 8008626:	4293      	cmp	r3, r2
 8008628:	d914      	bls.n	8008654 <_ZN8touchgfx3HAL4tickEv+0x134>
 800862a:	6920      	ldr	r0, [r4, #16]
 800862c:	6803      	ldr	r3, [r0, #0]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	4798      	blx	r3
 8008632:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008634:	2264      	movs	r2, #100	; 0x64
 8008636:	1af3      	subs	r3, r6, r3
 8008638:	fbb3 f3f2 	udiv	r3, r3, r2
 800863c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008640:	2800      	cmp	r0, #0
 8008642:	dc1d      	bgt.n	8008680 <_ZN8touchgfx3HAL4tickEv+0x160>
 8008644:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8008648:	6920      	ldr	r0, [r4, #16]
 800864a:	6803      	ldr	r3, [r0, #0]
 800864c:	2100      	movs	r1, #0
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	4798      	blx	r3
 8008652:	6766      	str	r6, [r4, #116]	; 0x74
 8008654:	f001 fcbc 	bl	8009fd0 <_ZN8touchgfx11Application11getInstanceEv>
 8008658:	6803      	ldr	r3, [r0, #0]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	4798      	blx	r3
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	4620      	mov	r0, r4
 8008662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008666:	4798      	blx	r3
 8008668:	2001      	movs	r0, #1
 800866a:	f7f8 f8a1 	bl	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800866e:	2300      	movs	r3, #0
 8008670:	702b      	strb	r3, [r5, #0]
 8008672:	b004      	add	sp, #16
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800867a:	4620      	mov	r0, r4
 800867c:	4798      	blx	r3
 800867e:	e7af      	b.n	80085e0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8008680:	2863      	cmp	r0, #99	; 0x63
 8008682:	bfcb      	itete	gt
 8008684:	2300      	movgt	r3, #0
 8008686:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800868a:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 800868e:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8008692:	e7d9      	b.n	8008648 <_ZN8touchgfx3HAL4tickEv+0x128>
 8008694:	2000a1dc 	.word	0x2000a1dc
 8008698:	2000a1dd 	.word	0x2000a1dd
 800869c:	05f5e100 	.word	0x05f5e100

080086a0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	4604      	mov	r4, r0
 80086a4:	f7f8 fb5e 	bl	8000d64 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	729a      	strb	r2, [r3, #10]
 80086ae:	bd10      	pop	{r4, pc}

080086b0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80086b0:	65c1      	str	r1, [r0, #92]	; 0x5c
 80086b2:	301c      	adds	r0, #28
 80086b4:	f004 be62 	b.w	800d37c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080086b8 <_ZN8touchgfx3HAL5touchEll>:
 80086b8:	b530      	push	{r4, r5, lr}
 80086ba:	b087      	sub	sp, #28
 80086bc:	4604      	mov	r4, r0
 80086be:	a804      	add	r0, sp, #16
 80086c0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80086c4:	f001 fbde 	bl	8009e84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 80086ce:	a906      	add	r1, sp, #24
 80086d0:	9b05      	ldr	r3, [sp, #20]
 80086d2:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80086d6:	a803      	add	r0, sp, #12
 80086d8:	f001 fc26 	bl	8009f28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80086dc:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 80086e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80086e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80086e8:	f104 001c 	add.w	r0, r4, #28
 80086ec:	b189      	cbz	r1, 8008712 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80086ee:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80086f8:	4613      	mov	r3, r2
 80086fa:	462a      	mov	r2, r5
 80086fc:	f004 fe4e 	bl	800d39c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8008700:	b128      	cbz	r0, 800870e <_ZN8touchgfx3HAL5touchEll+0x56>
 8008702:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8008706:	6623      	str	r3, [r4, #96]	; 0x60
 8008708:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800870c:	6663      	str	r3, [r4, #100]	; 0x64
 800870e:	b007      	add	sp, #28
 8008710:	bd30      	pop	{r4, r5, pc}
 8008712:	f004 fe83 	bl	800d41c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008716:	2301      	movs	r3, #1
 8008718:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 800871c:	e7f1      	b.n	8008702 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800871e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800871e:	b510      	push	{r4, lr}
 8008720:	2b00      	cmp	r3, #0
 8008722:	d046      	beq.n	80087b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008724:	ea81 0002 	eor.w	r0, r1, r2
 8008728:	07c4      	lsls	r4, r0, #31
 800872a:	d508      	bpl.n	800873e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800872c:	440b      	add	r3, r1
 800872e:	3a01      	subs	r2, #1
 8008730:	428b      	cmp	r3, r1
 8008732:	d93e      	bls.n	80087b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008734:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008738:	f801 0b01 	strb.w	r0, [r1], #1
 800873c:	e7f8      	b.n	8008730 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800873e:	07d0      	lsls	r0, r2, #31
 8008740:	bf42      	ittt	mi
 8008742:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8008746:	f801 0b01 	strbmi.w	r0, [r1], #1
 800874a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800874e:	2b01      	cmp	r3, #1
 8008750:	d911      	bls.n	8008776 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008752:	ea81 0402 	eor.w	r4, r1, r2
 8008756:	07a4      	lsls	r4, r4, #30
 8008758:	4610      	mov	r0, r2
 800875a:	d022      	beq.n	80087a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800875c:	f023 0401 	bic.w	r4, r3, #1
 8008760:	440c      	add	r4, r1
 8008762:	428c      	cmp	r4, r1
 8008764:	4602      	mov	r2, r0
 8008766:	d904      	bls.n	8008772 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8008768:	8812      	ldrh	r2, [r2, #0]
 800876a:	f821 2b02 	strh.w	r2, [r1], #2
 800876e:	3002      	adds	r0, #2
 8008770:	e7f7      	b.n	8008762 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	f023 0003 	bic.w	r0, r3, #3
 800877a:	4408      	add	r0, r1
 800877c:	4288      	cmp	r0, r1
 800877e:	4614      	mov	r4, r2
 8008780:	d904      	bls.n	800878c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8008782:	6824      	ldr	r4, [r4, #0]
 8008784:	f841 4b04 	str.w	r4, [r1], #4
 8008788:	3204      	adds	r2, #4
 800878a:	e7f7      	b.n	800877c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	440b      	add	r3, r1
 8008792:	3a01      	subs	r2, #1
 8008794:	428b      	cmp	r3, r1
 8008796:	d90c      	bls.n	80087b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008798:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800879c:	f801 0b01 	strb.w	r0, [r1], #1
 80087a0:	e7f8      	b.n	8008794 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80087a2:	0790      	lsls	r0, r2, #30
 80087a4:	d0e7      	beq.n	8008776 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80087a6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80087aa:	f821 0b02 	strh.w	r0, [r1], #2
 80087ae:	3b02      	subs	r3, #2
 80087b0:	e7e1      	b.n	8008776 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80087b2:	2001      	movs	r0, #1
 80087b4:	bd10      	pop	{r4, pc}

080087b6 <_ZN8touchgfx3HAL7noTouchEv>:
 80087b6:	b510      	push	{r4, lr}
 80087b8:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 80087bc:	4604      	mov	r4, r0
 80087be:	b153      	cbz	r3, 80087d6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80087c0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 80087c4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 80087c8:	2101      	movs	r1, #1
 80087ca:	301c      	adds	r0, #28
 80087cc:	f004 fe26 	bl	800d41c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80087d0:	2300      	movs	r3, #0
 80087d2:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80087d6:	bd10      	pop	{r4, pc}

080087d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80087d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087dc:	b085      	sub	sp, #20
 80087de:	ad04      	add	r5, sp, #16
 80087e0:	4604      	mov	r4, r0
 80087e2:	2000      	movs	r0, #0
 80087e4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80087e8:	69a0      	ldr	r0, [r4, #24]
 80087ea:	6806      	ldr	r6, [r0, #0]
 80087ec:	9501      	str	r5, [sp, #4]
 80087ee:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80087f2:	9500      	str	r5, [sp, #0]
 80087f4:	6835      	ldr	r5, [r6, #0]
 80087f6:	4699      	mov	r9, r3
 80087f8:	460f      	mov	r7, r1
 80087fa:	4690      	mov	r8, r2
 80087fc:	47a8      	blx	r5
 80087fe:	4d10      	ldr	r5, [pc, #64]	; (8008840 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8008800:	4606      	mov	r6, r0
 8008802:	f8a5 9000 	strh.w	r9, [r5]
 8008806:	f7f9 fb33 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 800880a:	6803      	ldr	r3, [r0, #0]
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4798      	blx	r3
 8008810:	b128      	cbz	r0, 800881e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8008812:	2801      	cmp	r0, #1
 8008814:	d00b      	beq.n	800882e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8008816:	4630      	mov	r0, r6
 8008818:	b005      	add	sp, #20
 800881a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800881e:	882b      	ldrh	r3, [r5, #0]
 8008820:	fb08 7203 	mla	r2, r8, r3, r7
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800882a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800882c:	e7f3      	b.n	8008816 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800882e:	882a      	ldrh	r2, [r5, #0]
 8008830:	9b03      	ldr	r3, [sp, #12]
 8008832:	fb08 7202 	mla	r2, r8, r2, r7
 8008836:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800883a:	1a9a      	subs	r2, r3, r2
 800883c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800883e:	e7ea      	b.n	8008816 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008840:	2000a1d2 	.word	0x2000a1d2

08008844 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8008844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008846:	b08b      	sub	sp, #44	; 0x2c
 8008848:	4617      	mov	r7, r2
 800884a:	4604      	mov	r4, r0
 800884c:	460e      	mov	r6, r1
 800884e:	461d      	mov	r5, r3
 8008850:	f7f9 fb0e 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 8008854:	6803      	ldr	r3, [r0, #0]
 8008856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008858:	4798      	blx	r3
 800885a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800885e:	9007      	str	r0, [sp, #28]
 8008860:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008864:	4b0d      	ldr	r3, [pc, #52]	; (800889c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8008866:	6822      	ldr	r2, [r4, #0]
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	9306      	str	r3, [sp, #24]
 800886c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8008876:	9304      	str	r3, [sp, #16]
 8008878:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800887c:	9303      	str	r3, [sp, #12]
 800887e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008882:	9302      	str	r3, [sp, #8]
 8008884:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8008888:	e9cd 5300 	strd	r5, r3, [sp]
 800888c:	4631      	mov	r1, r6
 800888e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8008890:	463b      	mov	r3, r7
 8008892:	2200      	movs	r2, #0
 8008894:	4620      	mov	r0, r4
 8008896:	47a8      	blx	r5
 8008898:	b00b      	add	sp, #44	; 0x2c
 800889a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889c:	2000a1d2 	.word	0x2000a1d2

080088a0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80088a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088a4:	4698      	mov	r8, r3
 80088a6:	6803      	ldr	r3, [r0, #0]
 80088a8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80088aa:	4b15      	ldr	r3, [pc, #84]	; (8008900 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80088ac:	b08b      	sub	sp, #44	; 0x2c
 80088ae:	4617      	mov	r7, r2
 80088b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80088b4:	460e      	mov	r6, r1
 80088b6:	4604      	mov	r4, r0
 80088b8:	f7f9 fada 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 80088bc:	6803      	ldr	r3, [r0, #0]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	4798      	blx	r3
 80088c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80088c6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80088ca:	2302      	movs	r3, #2
 80088cc:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80088d0:	2301      	movs	r3, #1
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80088e4:	9302      	str	r3, [sp, #8]
 80088e6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80088ea:	2200      	movs	r2, #0
 80088ec:	e9cd 8300 	strd	r8, r3, [sp]
 80088f0:	4631      	mov	r1, r6
 80088f2:	463b      	mov	r3, r7
 80088f4:	4620      	mov	r0, r4
 80088f6:	47a8      	blx	r5
 80088f8:	b00b      	add	sp, #44	; 0x2c
 80088fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088fe:	bf00      	nop
 8008900:	2000a1d2 	.word	0x2000a1d2

08008904 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8008904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008908:	4698      	mov	r8, r3
 800890a:	6803      	ldr	r3, [r0, #0]
 800890c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800890e:	4b11      	ldr	r3, [pc, #68]	; (8008954 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8008910:	b087      	sub	sp, #28
 8008912:	f8b3 9000 	ldrh.w	r9, [r3]
 8008916:	460e      	mov	r6, r1
 8008918:	4617      	mov	r7, r2
 800891a:	4604      	mov	r4, r0
 800891c:	f7f9 faa8 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 8008920:	6803      	ldr	r3, [r0, #0]
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	4798      	blx	r3
 8008926:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800892a:	f8cd 900c 	str.w	r9, [sp, #12]
 800892e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8008932:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	463a      	mov	r2, r7
 8008946:	4643      	mov	r3, r8
 8008948:	4631      	mov	r1, r6
 800894a:	4620      	mov	r0, r4
 800894c:	47a8      	blx	r5
 800894e:	b007      	add	sp, #28
 8008950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008954:	2000a1d2 	.word	0x2000a1d2

08008958 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	4604      	mov	r4, r0
 800895e:	b08f      	sub	sp, #60	; 0x3c
 8008960:	4610      	mov	r0, r2
 8008962:	460d      	mov	r5, r1
 8008964:	4691      	mov	r9, r2
 8008966:	461e      	mov	r6, r3
 8008968:	f002 fc2c 	bl	800b1c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800896c:	2800      	cmp	r0, #0
 800896e:	f000 809d 	beq.w	8008aac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	f8df b198 	ldr.w	fp, [pc, #408]	; 8008b10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8008b14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800897e:	4f61      	ldr	r7, [pc, #388]	; (8008b04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008980:	4620      	mov	r0, r4
 8008982:	4798      	blx	r3
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	4620      	mov	r0, r4
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	4798      	blx	r3
 800898c:	f8bb 3000 	ldrh.w	r3, [fp]
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008996:	f8ba 3000 	ldrh.w	r3, [sl]
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	883b      	ldrh	r3, [r7, #0]
 800899e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80089a2:	9303      	str	r3, [sp, #12]
 80089a4:	4b58      	ldr	r3, [pc, #352]	; (8008b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	881a      	ldrh	r2, [r3, #0]
 80089aa:	9204      	str	r2, [sp, #16]
 80089ac:	4640      	mov	r0, r8
 80089ae:	f002 fc15 	bl	800b1dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80089b2:	8038      	strh	r0, [r7, #0]
 80089b4:	4640      	mov	r0, r8
 80089b6:	f002 fc45 	bl	800b244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80089ba:	9b05      	ldr	r3, [sp, #20]
 80089bc:	b280      	uxth	r0, r0
 80089be:	8018      	strh	r0, [r3, #0]
 80089c0:	4b52      	ldr	r3, [pc, #328]	; (8008b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d174      	bne.n	8008ab2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80089c8:	883b      	ldrh	r3, [r7, #0]
 80089ca:	f8ab 3000 	strh.w	r3, [fp]
 80089ce:	f8aa 0000 	strh.w	r0, [sl]
 80089d2:	4648      	mov	r0, r9
 80089d4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80089d8:	f002 fbf4 	bl	800b1c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80089dc:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80089e0:	2200      	movs	r2, #0
 80089e2:	4611      	mov	r1, r2
 80089e4:	4628      	mov	r0, r5
 80089e6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80089ea:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80089ee:	f7f9 faad 	bl	8001f4c <_ZN8touchgfx8Drawable5setXYEss>
 80089f2:	2301      	movs	r3, #1
 80089f4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80089f8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80089fc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dd5c      	ble.n	8008abe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8008a04:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dd58      	ble.n	8008abe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	ab0a      	add	r3, sp, #40	; 0x28
 8008a10:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008a14:	6851      	ldr	r1, [r2, #4]
 8008a16:	c303      	stmia	r3!, {r0, r1}
 8008a18:	4631      	mov	r1, r6
 8008a1a:	a80a      	add	r0, sp, #40	; 0x28
 8008a1c:	f7ff fcba 	bl	8008394 <_ZN8touchgfx4RectaNERKS0_>
 8008a20:	4b38      	ldr	r3, [pc, #224]	; (8008b04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008a22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008a26:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	aa0a      	add	r2, sp, #40	; 0x28
 8008a2e:	4b36      	ldr	r3, [pc, #216]	; (8008b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008a30:	910c      	str	r1, [sp, #48]	; 0x30
 8008a32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a3a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8008a3e:	ab08      	add	r3, sp, #32
 8008a40:	e883 0003 	stmia.w	r3, {r0, r1}
 8008a44:	4618      	mov	r0, r3
 8008a46:	a90c      	add	r1, sp, #48	; 0x30
 8008a48:	f7ff fca4 	bl	8008394 <_ZN8touchgfx4RectaNERKS0_>
 8008a4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d13c      	bne.n	8008acc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8008a52:	2000      	movs	r0, #0
 8008a54:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8008a58:	2600      	movs	r6, #0
 8008a5a:	682a      	ldr	r2, [r5, #0]
 8008a5c:	696b      	ldr	r3, [r5, #20]
 8008a5e:	616e      	str	r6, [r5, #20]
 8008a60:	9305      	str	r3, [sp, #20]
 8008a62:	6892      	ldr	r2, [r2, #8]
 8008a64:	a908      	add	r1, sp, #32
 8008a66:	4628      	mov	r0, r5
 8008a68:	4790      	blx	r2
 8008a6a:	9b05      	ldr	r3, [sp, #20]
 8008a6c:	616b      	str	r3, [r5, #20]
 8008a6e:	4652      	mov	r2, sl
 8008a70:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8008a74:	4649      	mov	r1, r9
 8008a76:	4628      	mov	r0, r5
 8008a78:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8008a7c:	f7f9 fa66 	bl	8001f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008a80:	4b23      	ldr	r3, [pc, #140]	; (8008b10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8008a82:	9a01      	ldr	r2, [sp, #4]
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	4b23      	ldr	r3, [pc, #140]	; (8008b14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8008a88:	9a02      	ldr	r2, [sp, #8]
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008a8e:	9a03      	ldr	r2, [sp, #12]
 8008a90:	801a      	strh	r2, [r3, #0]
 8008a92:	4b1d      	ldr	r3, [pc, #116]	; (8008b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008a94:	9a04      	ldr	r2, [sp, #16]
 8008a96:	801a      	strh	r2, [r3, #0]
 8008a98:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa2:	4798      	blx	r3
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	4798      	blx	r3
 8008aac:	b00f      	add	sp, #60	; 0x3c
 8008aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab2:	883b      	ldrh	r3, [r7, #0]
 8008ab4:	f8ab 0000 	strh.w	r0, [fp]
 8008ab8:	f8aa 3000 	strh.w	r3, [sl]
 8008abc:	e789      	b.n	80089d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8008abe:	462a      	mov	r2, r5
 8008ac0:	ab0a      	add	r3, sp, #40	; 0x28
 8008ac2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008ac6:	6851      	ldr	r1, [r2, #4]
 8008ac8:	c303      	stmia	r3!, {r0, r1}
 8008aca:	e7a9      	b.n	8008a20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8008acc:	a807      	add	r0, sp, #28
 8008ace:	f002 fcf5 	bl	800b4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008ad6:	6803      	ldr	r3, [r0, #0]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	4798      	blx	r3
 8008adc:	4286      	cmp	r6, r0
 8008ade:	d1b8      	bne.n	8008a52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8008ae0:	f7f9 f9c6 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 8008ae4:	6803      	ldr	r3, [r0, #0]
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	a807      	add	r0, sp, #28
 8008aee:	f002 fce5 	bl	800b4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008af2:	9b05      	ldr	r3, [sp, #20]
 8008af4:	4601      	mov	r1, r0
 8008af6:	4630      	mov	r0, r6
 8008af8:	4798      	blx	r3
 8008afa:	f080 0001 	eor.w	r0, r0, #1
 8008afe:	b2c0      	uxtb	r0, r0
 8008b00:	e7a8      	b.n	8008a54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8008b02:	bf00      	nop
 8008b04:	2000a1cc 	.word	0x2000a1cc
 8008b08:	2000a1ce 	.word	0x2000a1ce
 8008b0c:	2000a1d0 	.word	0x2000a1d0
 8008b10:	2000a1d2 	.word	0x2000a1d2
 8008b14:	2000a1d4 	.word	0x2000a1d4

08008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	4604      	mov	r4, r0
 8008b20:	b13b      	cbz	r3, 8008b32 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8008b22:	6803      	ldr	r3, [r0, #0]
 8008b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b26:	4798      	blx	r3
 8008b28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b2a:	4283      	cmp	r3, r0
 8008b2c:	d101      	bne.n	8008b32 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8008b2e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008b34:	e7fc      	b.n	8008b30 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8008b36:	bf00      	nop
 8008b38:	2000a1d6 	.word	0x2000a1d6

08008b3c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8008b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b40:	b08a      	sub	sp, #40	; 0x28
 8008b42:	461d      	mov	r5, r3
 8008b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b48:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008b4c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8008b50:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008b54:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008b58:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008b5c:	2400      	movs	r4, #0
 8008b5e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008b62:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8008b66:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008b6a:	4690      	mov	r8, r2
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	9404      	str	r4, [sp, #16]
 8008b70:	f88d 4020 	strb.w	r4, [sp, #32]
 8008b74:	f7ff ffd0 	bl	8008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008b78:	fb06 8505 	mla	r5, r6, r5, r8
 8008b7c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	9505      	str	r5, [sp, #20]
 8008b84:	f8ad 601e 	strh.w	r6, [sp, #30]
 8008b88:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8008b8c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8008b90:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8008b94:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8008b98:	6803      	ldr	r3, [r0, #0]
 8008b9a:	a901      	add	r1, sp, #4
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	4798      	blx	r3
 8008ba0:	b00a      	add	sp, #40	; 0x28
 8008ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ba6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8008ba6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008baa:	b08b      	sub	sp, #44	; 0x2c
 8008bac:	2400      	movs	r4, #0
 8008bae:	461d      	mov	r5, r3
 8008bb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bb4:	4688      	mov	r8, r1
 8008bb6:	4691      	mov	r9, r2
 8008bb8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8008bbc:	9404      	str	r4, [sp, #16]
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bc4:	f7ff ffa8 	bl	8008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008bc8:	fb06 9505 	mla	r5, r6, r5, r9
 8008bcc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008bd0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008bd4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008bd8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	9505      	str	r5, [sp, #20]
 8008be0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008be4:	f8ad 401c 	strh.w	r4, [sp, #28]
 8008be8:	f8ad 601e 	strh.w	r6, [sp, #30]
 8008bec:	f8cd 8010 	str.w	r8, [sp, #16]
 8008bf0:	f8ad 4020 	strh.w	r4, [sp, #32]
 8008bf4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8008bf8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8008bfc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8008c00:	6803      	ldr	r3, [r0, #0]
 8008c02:	a901      	add	r1, sp, #4
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	4798      	blx	r3
 8008c08:	b00b      	add	sp, #44	; 0x2c
 8008c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08008c10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8008c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c14:	b08a      	sub	sp, #40	; 0x28
 8008c16:	4698      	mov	r8, r3
 8008c18:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8008c1c:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8008c20:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8008c24:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8008c28:	2300      	movs	r3, #0
 8008c2a:	2d0b      	cmp	r5, #11
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	9304      	str	r3, [sp, #16]
 8008c30:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8008c34:	d138      	bne.n	8008ca8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8008c36:	2380      	movs	r3, #128	; 0x80
 8008c38:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008c3c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008c40:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008c44:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008c48:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008c4c:	f88d 0020 	strb.w	r0, [sp, #32]
 8008c50:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8008c54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008c58:	4630      	mov	r0, r6
 8008c5a:	9203      	str	r2, [sp, #12]
 8008c5c:	f7ff ff5c 	bl	8008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008c60:	2c0b      	cmp	r4, #11
 8008c62:	bf98      	it	ls
 8008c64:	4b1b      	ldrls	r3, [pc, #108]	; (8008cd4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8008c66:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8008c6a:	bf98      	it	ls
 8008c6c:	5d19      	ldrbls	r1, [r3, r4]
 8008c6e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8008c72:	bf88      	it	hi
 8008c74:	2100      	movhi	r1, #0
 8008c76:	fb02 8307 	mla	r3, r2, r7, r8
 8008c7a:	10c9      	asrs	r1, r1, #3
 8008c7c:	fb01 0003 	mla	r0, r1, r3, r0
 8008c80:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008c84:	9005      	str	r0, [sp, #20]
 8008c86:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8008c8a:	6870      	ldr	r0, [r6, #4]
 8008c8c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8008c90:	2300      	movs	r3, #0
 8008c92:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8008c96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8008c9a:	6803      	ldr	r3, [r0, #0]
 8008c9c:	a901      	add	r1, sp, #4
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4798      	blx	r3
 8008ca2:	b00a      	add	sp, #40	; 0x28
 8008ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca8:	2d02      	cmp	r5, #2
 8008caa:	d109      	bne.n	8008cc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8008cac:	28ff      	cmp	r0, #255	; 0xff
 8008cae:	d105      	bne.n	8008cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8008cb0:	f1bc 0f00 	cmp.w	ip, #0
 8008cb4:	bf14      	ite	ne
 8008cb6:	2340      	movne	r3, #64	; 0x40
 8008cb8:	2320      	moveq	r3, #32
 8008cba:	e7bd      	b.n	8008c38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008cbc:	2340      	movs	r3, #64	; 0x40
 8008cbe:	e7bb      	b.n	8008c38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008cc0:	28ff      	cmp	r0, #255	; 0xff
 8008cc2:	d105      	bne.n	8008cd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8008cc4:	f1bc 0f00 	cmp.w	ip, #0
 8008cc8:	bf14      	ite	ne
 8008cca:	2304      	movne	r3, #4
 8008ccc:	2301      	moveq	r3, #1
 8008cce:	e7b3      	b.n	8008c38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008cd0:	2304      	movs	r3, #4
 8008cd2:	e7b1      	b.n	8008c38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008cd4:	0800efda 	.word	0x0800efda

08008cd8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	b08b      	sub	sp, #44	; 0x2c
 8008cde:	461d      	mov	r5, r3
 8008ce0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8008ce4:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8008ce8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8008cec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8008cf0:	bf14      	ite	ne
 8008cf2:	2308      	movne	r3, #8
 8008cf4:	2302      	moveq	r3, #2
 8008cf6:	2400      	movs	r4, #0
 8008cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cfc:	4688      	mov	r8, r1
 8008cfe:	4693      	mov	fp, r2
 8008d00:	9404      	str	r4, [sp, #16]
 8008d02:	4607      	mov	r7, r0
 8008d04:	f7ff ff08 	bl	8008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008d08:	2e0b      	cmp	r6, #11
 8008d0a:	bf98      	it	ls
 8008d0c:	4b15      	ldrls	r3, [pc, #84]	; (8008d64 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8008d0e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8008d12:	bf98      	it	ls
 8008d14:	5d9c      	ldrbls	r4, [r3, r6]
 8008d16:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8008d1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008d1e:	fb05 b50a 	mla	r5, r5, sl, fp
 8008d22:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8008d26:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008d2a:	10e4      	asrs	r4, r4, #3
 8008d2c:	fb04 0405 	mla	r4, r4, r5, r0
 8008d30:	2300      	movs	r3, #0
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	9405      	str	r4, [sp, #20]
 8008d36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008d3a:	f8ad a01e 	strh.w	sl, [sp, #30]
 8008d3e:	f8cd 8010 	str.w	r8, [sp, #16]
 8008d42:	f88d 9020 	strb.w	r9, [sp, #32]
 8008d46:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8008d4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8008d4e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8008d52:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8008d56:	6803      	ldr	r3, [r0, #0]
 8008d58:	a901      	add	r1, sp, #4
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4798      	blx	r3
 8008d5e:	b00b      	add	sp, #44	; 0x2c
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d64:	0800efda 	.word	0x0800efda

08008d68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8008d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6c:	461e      	mov	r6, r3
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8008d70:	460f      	mov	r7, r1
 8008d72:	881d      	ldrh	r5, [r3, #0]
 8008d74:	4690      	mov	r8, r2
 8008d76:	f7f9 f87b 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 8008d7a:	6803      	ldr	r3, [r0, #0]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4798      	blx	r3
 8008d80:	280b      	cmp	r0, #11
 8008d82:	bf9a      	itte	ls
 8008d84:	4b05      	ldrls	r3, [pc, #20]	; (8008d9c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8008d86:	5c1c      	ldrbls	r4, [r3, r0]
 8008d88:	2400      	movhi	r4, #0
 8008d8a:	fb08 7005 	mla	r0, r8, r5, r7
 8008d8e:	10e4      	asrs	r4, r4, #3
 8008d90:	fb04 6000 	mla	r0, r4, r0, r6
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d98:	2000a1d2 	.word	0x2000a1d2
 8008d9c:	0800efda 	.word	0x0800efda

08008da0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8008da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da2:	b08b      	sub	sp, #44	; 0x2c
 8008da4:	461f      	mov	r7, r3
 8008da6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8008daa:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008dae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8008db2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008db6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008dba:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008dbe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008dc2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008dc6:	2500      	movs	r5, #0
 8008dc8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008dcc:	f88d 3020 	strb.w	r3, [sp, #32]
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	4616      	mov	r6, r2
 8008dd4:	9504      	str	r5, [sp, #16]
 8008dd6:	f7ff fe9f 	bl	8008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008dda:	463a      	mov	r2, r7
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4603      	mov	r3, r0
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff ffc1 	bl	8008d68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008de6:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8008de8:	9005      	str	r0, [sp, #20]
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008df0:	f7f9 f83e 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 8008df4:	6803      	ldr	r3, [r0, #0]
 8008df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df8:	4798      	blx	r3
 8008dfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dfc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8008e00:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	6860      	ldr	r0, [r4, #4]
 8008e08:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008e0c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8008e10:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8008e14:	6803      	ldr	r3, [r0, #0]
 8008e16:	a901      	add	r1, sp, #4
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	4798      	blx	r3
 8008e1c:	b00b      	add	sp, #44	; 0x2c
 8008e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e20:	2000a1d2 	.word	0x2000a1d2

08008e24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8008e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e26:	b08d      	sub	sp, #52	; 0x34
 8008e28:	466b      	mov	r3, sp
 8008e2a:	e883 0006 	stmia.w	r3, {r1, r2}
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9306      	str	r3, [sp, #24]
 8008e32:	6803      	ldr	r3, [r0, #0]
 8008e34:	f8bd 6000 	ldrh.w	r6, [sp]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8008e3e:	2501      	movs	r5, #1
 8008e40:	9503      	str	r5, [sp, #12]
 8008e42:	4604      	mov	r4, r0
 8008e44:	4798      	blx	r3
 8008e46:	463a      	mov	r2, r7
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7ff ff8b 	bl	8008d68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008e52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e54:	9307      	str	r3, [sp, #28]
 8008e56:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008e5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008e5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008e62:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8008e66:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8008e68:	9004      	str	r0, [sp, #16]
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8008e70:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8008e74:	f7f8 fffc 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 8008e78:	6803      	ldr	r3, [r0, #0]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	4798      	blx	r3
 8008e7e:	23ff      	movs	r3, #255	; 0xff
 8008e80:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8008e84:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8008e88:	6860      	ldr	r0, [r4, #4]
 8008e8a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8008e8e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8008e92:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8008e96:	6803      	ldr	r3, [r0, #0]
 8008e98:	a903      	add	r1, sp, #12
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4798      	blx	r3
 8008e9e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008ea0:	b00d      	add	sp, #52	; 0x34
 8008ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea4:	2000a1d2 	.word	0x2000a1d2

08008ea8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8008ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	b08c      	sub	sp, #48	; 0x30
 8008eae:	461e      	mov	r6, r3
 8008eb0:	466d      	mov	r5, sp
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e885 0006 	stmia.w	r5, {r1, r2}
 8008eb8:	9306      	str	r3, [sp, #24]
 8008eba:	6803      	ldr	r3, [r0, #0]
 8008ebc:	f8bd 7000 	ldrh.w	r7, [sp]
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8008ec6:	2501      	movs	r5, #1
 8008ec8:	9503      	str	r5, [sp, #12]
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4798      	blx	r3
 8008ece:	4642      	mov	r2, r8
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f7ff ff47 	bl	8008d68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008eda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008ede:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008ee2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008ee6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8008eea:	4b11      	ldr	r3, [pc, #68]	; (8008f30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8008eec:	9004      	str	r0, [sp, #16]
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8008ef4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ef6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8008efa:	9607      	str	r6, [sp, #28]
 8008efc:	f7f8 ffb8 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 8008f00:	6803      	ldr	r3, [r0, #0]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	4798      	blx	r3
 8008f06:	23ff      	movs	r3, #255	; 0xff
 8008f08:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8008f0c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8008f10:	6860      	ldr	r0, [r4, #4]
 8008f12:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8008f16:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8008f1a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8008f1e:	6803      	ldr	r3, [r0, #0]
 8008f20:	a903      	add	r1, sp, #12
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4798      	blx	r3
 8008f26:	4630      	mov	r0, r6
 8008f28:	b00c      	add	sp, #48	; 0x30
 8008f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2e:	bf00      	nop
 8008f30:	2000a1d2 	.word	0x2000a1d2

08008f34 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8008f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f36:	b085      	sub	sp, #20
 8008f38:	ac02      	add	r4, sp, #8
 8008f3a:	e884 0006 	stmia.w	r4, {r1, r2}
 8008f3e:	4605      	mov	r5, r0
 8008f40:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8008f44:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8008f48:	f7ff fde6 	bl	8008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008f4c:	463a      	mov	r2, r7
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4631      	mov	r1, r6
 8008f52:	4628      	mov	r0, r5
 8008f54:	f7ff ff08 	bl	8008d68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008f58:	4a05      	ldr	r2, [pc, #20]	; (8008f70 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8008f5a:	682b      	ldr	r3, [r5, #0]
 8008f5c:	8812      	ldrh	r2, [r2, #0]
 8008f5e:	9200      	str	r2, [sp, #0]
 8008f60:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8008f62:	e894 0006 	ldmia.w	r4, {r1, r2}
 8008f66:	4603      	mov	r3, r0
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b0      	blx	r6
 8008f6c:	b005      	add	sp, #20
 8008f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f70:	2000a1d2 	.word	0x2000a1d2

08008f74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	b19b      	cbz	r3, 8008fa6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8008f7e:	2002      	movs	r0, #2
 8008f80:	f7f7 fc44 	bl	800080c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8008f8a:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	4620      	mov	r0, r4
 8008f92:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8008f96:	f7ff fdbf 	bl	8008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008f9a:	462b      	mov	r3, r5
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fa4:	4718      	bx	r3
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}

08008fa8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4605      	mov	r5, r0
 8008fac:	460c      	mov	r4, r1
 8008fae:	2003      	movs	r0, #3
 8008fb0:	b149      	cbz	r1, 8008fc6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8008fb2:	f7f7 fbcf 	bl	8000754 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8008fb6:	6928      	ldr	r0, [r5, #16]
 8008fb8:	b168      	cbz	r0, 8008fd6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8008fba:	6803      	ldr	r3, [r0, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fc4:	4718      	bx	r3
 8008fc6:	f7f7 fbf3 	bl	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8008fca:	6928      	ldr	r0, [r5, #16]
 8008fcc:	b118      	cbz	r0, 8008fd6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8008fce:	6803      	ldr	r3, [r0, #0]
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	e7f4      	b.n	8008fc0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}

08008fd8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8008fde:	428b      	cmp	r3, r1
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	d006      	beq.n	8008ff4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8008fe6:	6803      	ldr	r3, [r0, #0]
 8008fe8:	b929      	cbnz	r1, 8008ff6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8008fea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008fee:	4798      	blx	r3
 8008ff0:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8008ff4:	bd38      	pop	{r3, r4, r5, pc}
 8008ff6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008ffa:	e7f8      	b.n	8008fee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08008ffc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	4604      	mov	r4, r0
 8009004:	b95b      	cbnz	r3, 800901e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009006:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800900a:	2b02      	cmp	r3, #2
 800900c:	d007      	beq.n	800901e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800900e:	6840      	ldr	r0, [r0, #4]
 8009010:	f000 f912 	bl	8009238 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8009014:	b118      	cbz	r0, 800901e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009016:	6862      	ldr	r2, [r4, #4]
 8009018:	7a53      	ldrb	r3, [r2, #9]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0fc      	beq.n	8009018 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800901e:	f7f7 fe99 	bl	8000d54 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009022:	4620      	mov	r0, r4
 8009024:	2100      	movs	r1, #0
 8009026:	f7ff ffd7 	bl	8008fd8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800902a:	4620      	mov	r0, r4
 800902c:	f7ff fd74 	bl	8008b18 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009030:	bd10      	pop	{r4, pc}
 8009032:	bf00      	nop
 8009034:	2000a1d6 	.word	0x2000a1d6

08009038 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8009038:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800903c:	1a13      	subs	r3, r2, r0
 800903e:	4258      	negs	r0, r3
 8009040:	4158      	adcs	r0, r3
 8009042:	4770      	bx	lr

08009044 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8009044:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009048:	1a9b      	subs	r3, r3, r2
 800904a:	2b00      	cmp	r3, #0
 800904c:	bfdc      	itt	le
 800904e:	6882      	ldrle	r2, [r0, #8]
 8009050:	189b      	addle	r3, r3, r2
 8009052:	2b01      	cmp	r3, #1
 8009054:	bfcc      	ite	gt
 8009056:	2000      	movgt	r0, #0
 8009058:	2001      	movle	r0, #1
 800905a:	4770      	bx	lr

0800905c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800905c:	6902      	ldr	r2, [r0, #16]
 800905e:	6843      	ldr	r3, [r0, #4]
 8009060:	2024      	movs	r0, #36	; 0x24
 8009062:	fb00 3002 	mla	r0, r0, r2, r3
 8009066:	4770      	bx	lr

08009068 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8009068:	6803      	ldr	r3, [r0, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	4718      	bx	r3

0800906e <_ZN8touchgfx13DMA_Interface7executeEv>:
 800906e:	b570      	push	{r4, r5, r6, lr}
 8009070:	2301      	movs	r3, #1
 8009072:	7203      	strb	r3, [r0, #8]
 8009074:	4604      	mov	r4, r0
 8009076:	6840      	ldr	r0, [r0, #4]
 8009078:	6803      	ldr	r3, [r0, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	4798      	blx	r3
 800907e:	6803      	ldr	r3, [r0, #0]
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	4605      	mov	r5, r0
 8009084:	d00c      	beq.n	80090a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009086:	d810      	bhi.n	80090aa <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8009088:	2b04      	cmp	r3, #4
 800908a:	d01d      	beq.n	80090c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800908c:	d804      	bhi.n	8009098 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800908e:	2b01      	cmp	r3, #1
 8009090:	d006      	beq.n	80090a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009092:	2b02      	cmp	r3, #2
 8009094:	d02c      	beq.n	80090f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	2b08      	cmp	r3, #8
 800909a:	d01d      	beq.n	80090d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800909c:	2b20      	cmp	r3, #32
 800909e:	d1fa      	bne.n	8009096 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	4620      	mov	r0, r4
 80090a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a6:	4798      	blx	r3
 80090a8:	e013      	b.n	80090d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80090aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ae:	d0f7      	beq.n	80090a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80090b0:	d804      	bhi.n	80090bc <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80090b2:	2b80      	cmp	r3, #128	; 0x80
 80090b4:	d0f4      	beq.n	80090a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80090b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ba:	e7f0      	b.n	800909e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80090bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c0:	d0ee      	beq.n	80090a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80090c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090c6:	e7e5      	b.n	8009094 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	7f01      	ldrb	r1, [r0, #28]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	4620      	mov	r0, r4
 80090d0:	4798      	blx	r3
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	e006      	b.n	80090e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	7f01      	ldrb	r1, [r0, #28]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090de:	4620      	mov	r0, r4
 80090e0:	4798      	blx	r3
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e6:	4629      	mov	r1, r5
 80090e8:	4620      	mov	r0, r4
 80090ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090ee:	4718      	bx	r3
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	4620      	mov	r0, r4
 80090f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f6:	4798      	blx	r3
 80090f8:	e7f3      	b.n	80090e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080090fa <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80090fa:	4770      	bx	lr

080090fc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80090fc:	4770      	bx	lr

080090fe <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80090fe:	4770      	bx	lr

08009100 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8009100:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8009104:	1ad2      	subs	r2, r2, r3
 8009106:	2a00      	cmp	r2, #0
 8009108:	b510      	push	{r4, lr}
 800910a:	bfdc      	itt	le
 800910c:	6884      	ldrle	r4, [r0, #8]
 800910e:	1912      	addle	r2, r2, r4
 8009110:	2a01      	cmp	r2, #1
 8009112:	dd16      	ble.n	8009142 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8009114:	6842      	ldr	r2, [r0, #4]
 8009116:	2424      	movs	r4, #36	; 0x24
 8009118:	fb04 2303 	mla	r3, r4, r3, r2
 800911c:	f101 0220 	add.w	r2, r1, #32
 8009120:	f851 4b04 	ldr.w	r4, [r1], #4
 8009124:	f843 4b04 	str.w	r4, [r3], #4
 8009128:	4291      	cmp	r1, r2
 800912a:	d1f9      	bne.n	8009120 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800912c:	780a      	ldrb	r2, [r1, #0]
 800912e:	701a      	strb	r2, [r3, #0]
 8009130:	68c3      	ldr	r3, [r0, #12]
 8009132:	6882      	ldr	r2, [r0, #8]
 8009134:	f3bf 8f5b 	dmb	ish
 8009138:	3301      	adds	r3, #1
 800913a:	429a      	cmp	r2, r3
 800913c:	bfd8      	it	le
 800913e:	1a9b      	suble	r3, r3, r2
 8009140:	60c3      	str	r3, [r0, #12]
 8009142:	bd10      	pop	{r4, pc}

08009144 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8009144:	6903      	ldr	r3, [r0, #16]
 8009146:	6882      	ldr	r2, [r0, #8]
 8009148:	f3bf 8f5b 	dmb	ish
 800914c:	3301      	adds	r3, #1
 800914e:	429a      	cmp	r2, r3
 8009150:	bfd8      	it	le
 8009152:	1a9b      	suble	r3, r3, r2
 8009154:	6103      	str	r3, [r0, #16]
 8009156:	4770      	bx	lr

08009158 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	4604      	mov	r4, r0
 800915c:	460e      	mov	r6, r1
 800915e:	6860      	ldr	r0, [r4, #4]
 8009160:	6803      	ldr	r3, [r0, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4798      	blx	r3
 8009166:	2800      	cmp	r0, #0
 8009168:	d1f9      	bne.n	800915e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800916a:	4d0d      	ldr	r5, [pc, #52]	; (80091a0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800916c:	6828      	ldr	r0, [r5, #0]
 800916e:	6803      	ldr	r3, [r0, #0]
 8009170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009172:	4798      	blx	r3
 8009174:	f7f7 fdfc 	bl	8000d70 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8009178:	6828      	ldr	r0, [r5, #0]
 800917a:	2101      	movs	r1, #1
 800917c:	f7ff ff2c 	bl	8008fd8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009180:	6860      	ldr	r0, [r4, #4]
 8009182:	6803      	ldr	r3, [r0, #0]
 8009184:	4631      	mov	r1, r6
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	4798      	blx	r3
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	4620      	mov	r0, r4
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	4798      	blx	r3
 8009192:	6828      	ldr	r0, [r5, #0]
 8009194:	6803      	ldr	r3, [r0, #0]
 8009196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800919a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800919c:	4718      	bx	r3
 800919e:	bf00      	nop
 80091a0:	2000a1d8 	.word	0x2000a1d8

080091a4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80091a4:	b508      	push	{r3, lr}
 80091a6:	f7f7 fdd5 	bl	8000d54 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80091aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80091ae:	f7f7 bdd9 	b.w	8000d64 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080091b2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80091b2:	b510      	push	{r4, lr}
 80091b4:	2114      	movs	r1, #20
 80091b6:	4604      	mov	r4, r0
 80091b8:	f004 f992 	bl	800d4e0 <_ZdlPvj>
 80091bc:	4620      	mov	r0, r4
 80091be:	bd10      	pop	{r4, pc}

080091c0 <_ZN8touchgfx13DMA_Interface5startEv>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	4604      	mov	r4, r0
 80091c4:	6840      	ldr	r0, [r0, #4]
 80091c6:	6803      	ldr	r3, [r0, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4798      	blx	r3
 80091cc:	b948      	cbnz	r0, 80091e2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80091ce:	7a63      	ldrb	r3, [r4, #9]
 80091d0:	b13b      	cbz	r3, 80091e2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80091d2:	7a23      	ldrb	r3, [r4, #8]
 80091d4:	b92b      	cbnz	r3, 80091e2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	4620      	mov	r0, r4
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e0:	4718      	bx	r3
 80091e2:	bd10      	pop	{r4, pc}

080091e4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4604      	mov	r4, r0
 80091e8:	6840      	ldr	r0, [r0, #4]
 80091ea:	6803      	ldr	r3, [r0, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4798      	blx	r3
 80091f0:	4605      	mov	r5, r0
 80091f2:	b930      	cbnz	r0, 8009202 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80091f4:	7a23      	ldrb	r3, [r4, #8]
 80091f6:	b123      	cbz	r3, 8009202 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80091f8:	6860      	ldr	r0, [r4, #4]
 80091fa:	6803      	ldr	r3, [r0, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	4798      	blx	r3
 8009200:	7225      	strb	r5, [r4, #8]
 8009202:	6860      	ldr	r0, [r4, #4]
 8009204:	6803      	ldr	r3, [r0, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4798      	blx	r3
 800920a:	b928      	cbnz	r0, 8009218 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	4620      	mov	r0, r4
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009216:	4718      	bx	r3
 8009218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800921c:	f7f7 bdb0 	b.w	8000d80 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08009220 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4c04      	ldr	r4, [pc, #16]	; (8009234 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8009224:	6082      	str	r2, [r0, #8]
 8009226:	2200      	movs	r2, #0
 8009228:	e9c0 4100 	strd	r4, r1, [r0]
 800922c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8009230:	bd10      	pop	{r4, pc}
 8009232:	bf00      	nop
 8009234:	0800eff0 	.word	0x0800eff0

08009238 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8009238:	6840      	ldr	r0, [r0, #4]
 800923a:	6803      	ldr	r3, [r0, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4718      	bx	r3

08009240 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8009240:	b510      	push	{r4, lr}
 8009242:	6803      	ldr	r3, [r0, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	460c      	mov	r4, r1
 8009248:	4798      	blx	r3
 800924a:	1b03      	subs	r3, r0, r4
 800924c:	4258      	negs	r0, r3
 800924e:	4158      	adcs	r0, r3
 8009250:	bd10      	pop	{r4, pc}
	...

08009254 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8009254:	4b01      	ldr	r3, [pc, #4]	; (800925c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8009256:	6019      	str	r1, [r3, #0]
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	2000a1e0 	.word	0x2000a1e0

08009260 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	4696      	mov	lr, r2
 8009266:	4605      	mov	r5, r0
 8009268:	4614      	mov	r4, r2
 800926a:	460e      	mov	r6, r1
 800926c:	461f      	mov	r7, r3
 800926e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009272:	b097      	sub	sp, #92	; 0x5c
 8009274:	f10d 0c1c 	add.w	ip, sp, #28
 8009278:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800927c:	f8de 3000 	ldr.w	r3, [lr]
 8009280:	f8cc 3000 	str.w	r3, [ip]
 8009284:	f104 0e14 	add.w	lr, r4, #20
 8009288:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800928c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8009290:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009294:	f8de 3000 	ldr.w	r3, [lr]
 8009298:	f8cc 3000 	str.w	r3, [ip]
 800929c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80092a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80092a4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80092a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80092ac:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80092b0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80092b4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80092b8:	f8de 3000 	ldr.w	r3, [lr]
 80092bc:	f8cc 3000 	str.w	r3, [ip]
 80092c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	9201      	str	r2, [sp, #4]
 80092c6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80092ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092cc:	9200      	str	r2, [sp, #0]
 80092ce:	f8cd 8008 	str.w	r8, [sp, #8]
 80092d2:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80092d6:	aa07      	add	r2, sp, #28
 80092d8:	463b      	mov	r3, r7
 80092da:	4631      	mov	r1, r6
 80092dc:	4628      	mov	r0, r5
 80092de:	47d8      	blx	fp
 80092e0:	46a6      	mov	lr, r4
 80092e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80092e6:	f10d 0c1c 	add.w	ip, sp, #28
 80092ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80092ee:	f8de 3000 	ldr.w	r3, [lr]
 80092f2:	f8cc 3000 	str.w	r3, [ip]
 80092f6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80092fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80092fe:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8009302:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009306:	343c      	adds	r4, #60	; 0x3c
 8009308:	f8de 3000 	ldr.w	r3, [lr]
 800930c:	f8cc 3000 	str.w	r3, [ip]
 8009310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009312:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8009316:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	f8cc 3000 	str.w	r3, [ip]
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8009326:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009328:	9201      	str	r2, [sp, #4]
 800932a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800932c:	9200      	str	r2, [sp, #0]
 800932e:	f8cd 8008 	str.w	r8, [sp, #8]
 8009332:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8009334:	aa07      	add	r2, sp, #28
 8009336:	463b      	mov	r3, r7
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47a0      	blx	r4
 800933e:	b017      	add	sp, #92	; 0x5c
 8009340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009344 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8009344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009348:	b08d      	sub	sp, #52	; 0x34
 800934a:	4688      	mov	r8, r1
 800934c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800934e:	f8d3 c000 	ldr.w	ip, [r3]
 8009352:	680f      	ldr	r7, [r1, #0]
 8009354:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8009358:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800935c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8009360:	edd3 6a07 	vldr	s13, [r3, #28]
 8009364:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009366:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800936a:	f9b1 9000 	ldrsh.w	r9, [r1]
 800936e:	f9ba 1000 	ldrsh.w	r1, [sl]
 8009372:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8009376:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800937a:	eba7 070c 	sub.w	r7, r7, ip
 800937e:	42bc      	cmp	r4, r7
 8009380:	bfa8      	it	ge
 8009382:	463c      	movge	r4, r7
 8009384:	ee07 4a90 	vmov	s15, r4
 8009388:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800938c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8009390:	ee25 4a04 	vmul.f32	s8, s10, s8
 8009394:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009398:	ee25 5a27 	vmul.f32	s10, s10, s15
 800939c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80093a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80093a4:	eb09 0e0c 	add.w	lr, r9, ip
 80093a8:	4571      	cmp	r1, lr
 80093aa:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80093ae:	ee32 1a05 	vadd.f32	s2, s4, s10
 80093b2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80093b6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80093ba:	ee22 2a07 	vmul.f32	s4, s4, s14
 80093be:	f340 808d 	ble.w	80094dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 80093c2:	eba1 060e 	sub.w	r6, r1, lr
 80093c6:	fb96 f5f4 	sdiv	r5, r6, r4
 80093ca:	ee07 5a10 	vmov	s14, r5
 80093ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80093d2:	2d00      	cmp	r5, #0
 80093d4:	fb04 6615 	mls	r6, r4, r5, r6
 80093d8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80093dc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80093e0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80093e4:	dd13      	ble.n	800940e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 80093e6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80093ea:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80093ee:	eef5 6a40 	vcmp.f32	s13, #0.0
 80093f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f6:	bf18      	it	ne
 80093f8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80093fc:	ee31 2a45 	vsub.f32	s4, s2, s10
 8009400:	bf08      	it	eq
 8009402:	eeb0 7a67 	vmoveq.f32	s14, s15
 8009406:	ee61 1a87 	vmul.f32	s3, s3, s14
 800940a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800940e:	fb05 f204 	mul.w	r2, r5, r4
 8009412:	1abf      	subs	r7, r7, r2
 8009414:	4494      	add	ip, r2
 8009416:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800941a:	4411      	add	r1, r2
 800941c:	eb09 020c 	add.w	r2, r9, ip
 8009420:	443a      	add	r2, r7
 8009422:	b209      	sxth	r1, r1
 8009424:	428a      	cmp	r2, r1
 8009426:	bfc4      	itt	gt
 8009428:	eba1 0209 	subgt.w	r2, r1, r9
 800942c:	eba2 070c 	subgt.w	r7, r2, ip
 8009430:	2f00      	cmp	r7, #0
 8009432:	dd50      	ble.n	80094d6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8009434:	fb97 f1f4 	sdiv	r1, r7, r4
 8009438:	fb04 7211 	mls	r2, r4, r1, r7
 800943c:	b90a      	cbnz	r2, 8009442 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800943e:	3901      	subs	r1, #1
 8009440:	4622      	mov	r2, r4
 8009442:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8009446:	6840      	ldr	r0, [r0, #4]
 8009448:	900b      	str	r0, [sp, #44]	; 0x2c
 800944a:	f8d0 a000 	ldr.w	sl, [r0]
 800944e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009450:	9008      	str	r0, [sp, #32]
 8009452:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8009456:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009458:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800945c:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009464:	445b      	add	r3, fp
 8009466:	eef0 6a42 	vmov.f32	s13, s4
 800946a:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800946e:	ee21 3a23 	vmul.f32	s6, s2, s7
 8009472:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8009476:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800947a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800947e:	9307      	str	r3, [sp, #28]
 8009480:	ee17 7a90 	vmov	r7, s15
 8009484:	ee73 7a42 	vsub.f32	s15, s6, s4
 8009488:	eeb0 7a61 	vmov.f32	s14, s3
 800948c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8009490:	ee16 3a90 	vmov	r3, s13
 8009494:	fb97 f7f4 	sdiv	r7, r7, r4
 8009498:	ee17 ca90 	vmov	ip, s15
 800949c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80094a0:	fb9c fcf4 	sdiv	ip, ip, r4
 80094a4:	fb0c 3306 	mla	r3, ip, r6, r3
 80094a8:	9302      	str	r3, [sp, #8]
 80094aa:	ee17 3a10 	vmov	r3, s14
 80094ae:	44b6      	add	lr, r6
 80094b0:	fb04 e505 	mla	r5, r4, r5, lr
 80094b4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80094b8:	fb07 3706 	mla	r7, r7, r6, r3
 80094bc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80094c0:	e9cd 4700 	strd	r4, r7, [sp]
 80094c4:	2900      	cmp	r1, #0
 80094c6:	bfcc      	ite	gt
 80094c8:	46a1      	movgt	r9, r4
 80094ca:	4691      	movle	r9, r2
 80094cc:	eba9 0306 	sub.w	r3, r9, r6
 80094d0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80094d4:	47a0      	blx	r4
 80094d6:	b00d      	add	sp, #52	; 0x34
 80094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094dc:	2500      	movs	r5, #0
 80094de:	462e      	mov	r6, r5
 80094e0:	e799      	b.n	8009416 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

080094e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	b0db      	sub	sp, #364	; 0x16c
 80094ea:	461d      	mov	r5, r3
 80094ec:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80094f0:	930a      	str	r3, [sp, #40]	; 0x28
 80094f2:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80094f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094f8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80094fc:	9310      	str	r3, [sp, #64]	; 0x40
 80094fe:	6803      	ldr	r3, [r0, #0]
 8009500:	910f      	str	r1, [sp, #60]	; 0x3c
 8009502:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8009504:	9009      	str	r0, [sp, #36]	; 0x24
 8009506:	4614      	mov	r4, r2
 8009508:	4629      	mov	r1, r5
 800950a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800950e:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8009512:	47b8      	blx	r7
 8009514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009516:	6058      	str	r0, [r3, #4]
 8009518:	2800      	cmp	r0, #0
 800951a:	f000 83a1 	beq.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	9314      	str	r3, [sp, #80]	; 0x50
 8009522:	686b      	ldr	r3, [r5, #4]
 8009524:	9315      	str	r3, [sp, #84]	; 0x54
 8009526:	4bc4      	ldr	r3, [pc, #784]	; (8009838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8009528:	ed94 7a02 	vldr	s14, [r4, #8]
 800952c:	7819      	ldrb	r1, [r3, #0]
 800952e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009532:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8009536:	2900      	cmp	r1, #0
 8009538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800953c:	bf16      	itet	ne
 800953e:	4619      	movne	r1, r3
 8009540:	4611      	moveq	r1, r2
 8009542:	4613      	movne	r3, r2
 8009544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009548:	9116      	str	r1, [sp, #88]	; 0x58
 800954a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800954e:	f240 8387 	bls.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009552:	ed94 7a07 	vldr	s14, [r4, #28]
 8009556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800955a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955e:	f240 837f 	bls.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009562:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8009566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800956a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956e:	f240 8377 	bls.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009572:	6822      	ldr	r2, [r4, #0]
 8009574:	4bb1      	ldr	r3, [pc, #708]	; (800983c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8009576:	429a      	cmp	r2, r3
 8009578:	f2c0 8372 	blt.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800957c:	49b0      	ldr	r1, [pc, #704]	; (8009840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800957e:	6963      	ldr	r3, [r4, #20]
 8009580:	428a      	cmp	r2, r1
 8009582:	f300 836d 	bgt.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009586:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800958a:	48ae      	ldr	r0, [pc, #696]	; (8009844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800958c:	33ff      	adds	r3, #255	; 0xff
 800958e:	4283      	cmp	r3, r0
 8009590:	f200 8366 	bhi.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009596:	4dac      	ldr	r5, [pc, #688]	; (8009848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8009598:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800959c:	33ff      	adds	r3, #255	; 0xff
 800959e:	42ab      	cmp	r3, r5
 80095a0:	f200 835e 	bhi.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80095a4:	6862      	ldr	r2, [r4, #4]
 80095a6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80095aa:	33ff      	adds	r3, #255	; 0xff
 80095ac:	4283      	cmp	r3, r0
 80095ae:	f200 8357 	bhi.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80095b2:	69a1      	ldr	r1, [r4, #24]
 80095b4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80095b8:	33ff      	adds	r3, #255	; 0xff
 80095ba:	4283      	cmp	r3, r0
 80095bc:	f200 8350 	bhi.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80095c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095c2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80095c6:	30ff      	adds	r0, #255	; 0xff
 80095c8:	42a8      	cmp	r0, r5
 80095ca:	f200 8349 	bhi.w	8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80095ce:	428a      	cmp	r2, r1
 80095d0:	f280 8110 	bge.w	80097f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80095d4:	429a      	cmp	r2, r3
 80095d6:	f300 8119 	bgt.w	800980c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80095da:	4299      	cmp	r1, r3
 80095dc:	f280 811d 	bge.w	800981a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80095e0:	2502      	movs	r5, #2
 80095e2:	2701      	movs	r7, #1
 80095e4:	46a9      	mov	r9, r5
 80095e6:	46b8      	mov	r8, r7
 80095e8:	f04f 0a00 	mov.w	sl, #0
 80095ec:	4621      	mov	r1, r4
 80095ee:	a849      	add	r0, sp, #292	; 0x124
 80095f0:	f001 fbba 	bl	800ad68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80095f4:	4622      	mov	r2, r4
 80095f6:	4653      	mov	r3, sl
 80095f8:	a949      	add	r1, sp, #292	; 0x124
 80095fa:	f8cd 9000 	str.w	r9, [sp]
 80095fe:	a819      	add	r0, sp, #100	; 0x64
 8009600:	f001 fce2 	bl	800afc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009604:	4622      	mov	r2, r4
 8009606:	4653      	mov	r3, sl
 8009608:	a949      	add	r1, sp, #292	; 0x124
 800960a:	f8cd 8000 	str.w	r8, [sp]
 800960e:	a829      	add	r0, sp, #164	; 0xa4
 8009610:	f001 fcda 	bl	800afc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009614:	4643      	mov	r3, r8
 8009616:	4622      	mov	r2, r4
 8009618:	a949      	add	r1, sp, #292	; 0x124
 800961a:	f8cd 9000 	str.w	r9, [sp]
 800961e:	a839      	add	r0, sp, #228	; 0xe4
 8009620:	f001 fcd2 	bl	800afc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009624:	42af      	cmp	r7, r5
 8009626:	bfb5      	itete	lt
 8009628:	2300      	movlt	r3, #0
 800962a:	2301      	movge	r3, #1
 800962c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800962e:	930e      	strge	r3, [sp, #56]	; 0x38
 8009630:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009632:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009636:	af12      	add	r7, sp, #72	; 0x48
 8009638:	bfb9      	ittee	lt
 800963a:	ad29      	addlt	r5, sp, #164	; 0xa4
 800963c:	ac19      	addlt	r4, sp, #100	; 0x64
 800963e:	ad19      	addge	r5, sp, #100	; 0x64
 8009640:	ac29      	addge	r4, sp, #164	; 0xa4
 8009642:	e887 0003 	stmia.w	r7, {r0, r1}
 8009646:	b928      	cbnz	r0, 8009654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8009648:	4b80      	ldr	r3, [pc, #512]	; (800984c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	6803      	ldr	r3, [r0, #0]
 800964e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009650:	4798      	blx	r3
 8009652:	6038      	str	r0, [r7, #0]
 8009654:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009656:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800965a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800965e:	930c      	str	r3, [sp, #48]	; 0x30
 8009660:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009662:	6963      	ldr	r3, [r4, #20]
 8009664:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009666:	440b      	add	r3, r1
 8009668:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800966c:	4408      	add	r0, r1
 800966e:	b200      	sxth	r0, r0
 8009670:	4283      	cmp	r3, r0
 8009672:	900d      	str	r0, [sp, #52]	; 0x34
 8009674:	f280 80dd 	bge.w	8009832 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8009678:	428b      	cmp	r3, r1
 800967a:	da08      	bge.n	800968e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800967c:	2a00      	cmp	r2, #0
 800967e:	dd06      	ble.n	800968e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009680:	1acb      	subs	r3, r1, r3
 8009682:	429a      	cmp	r2, r3
 8009684:	f2c0 80e4 	blt.w	8009850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8009688:	2b00      	cmp	r3, #0
 800968a:	f300 80e2 	bgt.w	8009852 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800968e:	6967      	ldr	r7, [r4, #20]
 8009690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009692:	443b      	add	r3, r7
 8009694:	461f      	mov	r7, r3
 8009696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009698:	1bdf      	subs	r7, r3, r7
 800969a:	4297      	cmp	r7, r2
 800969c:	bfa8      	it	ge
 800969e:	4617      	movge	r7, r2
 80096a0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80096a4:	2f00      	cmp	r7, #0
 80096a6:	f340 8166 	ble.w	8009976 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80096aa:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80096ac:	6829      	ldr	r1, [r5, #0]
 80096ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80096b2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	4411      	add	r1, r2
 80096ba:	4299      	cmp	r1, r3
 80096bc:	dd1a      	ble.n	80096f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80096be:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80096c2:	440b      	add	r3, r1
 80096c4:	4402      	add	r2, r0
 80096c6:	b21b      	sxth	r3, r3
 80096c8:	429a      	cmp	r2, r3
 80096ca:	dc13      	bgt.n	80096f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80096cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	9206      	str	r2, [sp, #24]
 80096d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096d6:	9205      	str	r2, [sp, #20]
 80096d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096da:	9500      	str	r5, [sp, #0]
 80096dc:	e9cd b203 	strd	fp, r2, [sp, #12]
 80096e0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80096e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096e4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80096e8:	a912      	add	r1, sp, #72	; 0x48
 80096ea:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80096ee:	aa49      	add	r2, sp, #292	; 0x124
 80096f0:	4623      	mov	r3, r4
 80096f2:	47c8      	blx	r9
 80096f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096f8:	441a      	add	r2, r3
 80096fa:	6963      	ldr	r3, [r4, #20]
 80096fc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8009700:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8009704:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8009708:	68a1      	ldr	r1, [r4, #8]
 800970a:	ed94 6a08 	vldr	s12, [r4, #32]
 800970e:	6022      	str	r2, [r4, #0]
 8009710:	3301      	adds	r3, #1
 8009712:	6163      	str	r3, [r4, #20]
 8009714:	69a3      	ldr	r3, [r4, #24]
 8009716:	ee37 7a27 	vadd.f32	s14, s14, s15
 800971a:	3b01      	subs	r3, #1
 800971c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8009720:	61a3      	str	r3, [r4, #24]
 8009722:	6923      	ldr	r3, [r4, #16]
 8009724:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8009728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972c:	edd4 6a07 	vldr	s13, [r4, #28]
 8009730:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8009734:	440b      	add	r3, r1
 8009736:	68e1      	ldr	r1, [r4, #12]
 8009738:	6123      	str	r3, [r4, #16]
 800973a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800973e:	428b      	cmp	r3, r1
 8009740:	edc4 6a07 	vstr	s13, [r4, #28]
 8009744:	db15      	blt.n	8009772 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8009746:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800974a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800974e:	3201      	adds	r2, #1
 8009750:	edc4 6a07 	vstr	s13, [r4, #28]
 8009754:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8009758:	6022      	str	r2, [r4, #0]
 800975a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800975e:	1a5b      	subs	r3, r3, r1
 8009760:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8009764:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8009768:	6123      	str	r3, [r4, #16]
 800976a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800976e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8009772:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009776:	441a      	add	r2, r3
 8009778:	696b      	ldr	r3, [r5, #20]
 800977a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800977e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8009782:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8009786:	68a9      	ldr	r1, [r5, #8]
 8009788:	ed95 6a08 	vldr	s12, [r5, #32]
 800978c:	602a      	str	r2, [r5, #0]
 800978e:	3301      	adds	r3, #1
 8009790:	616b      	str	r3, [r5, #20]
 8009792:	69ab      	ldr	r3, [r5, #24]
 8009794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009798:	3b01      	subs	r3, #1
 800979a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800979e:	61ab      	str	r3, [r5, #24]
 80097a0:	692b      	ldr	r3, [r5, #16]
 80097a2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80097a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097aa:	edd5 6a07 	vldr	s13, [r5, #28]
 80097ae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80097b2:	440b      	add	r3, r1
 80097b4:	68e9      	ldr	r1, [r5, #12]
 80097b6:	612b      	str	r3, [r5, #16]
 80097b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80097bc:	428b      	cmp	r3, r1
 80097be:	edc5 6a07 	vstr	s13, [r5, #28]
 80097c2:	db15      	blt.n	80097f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80097c4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80097c8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80097cc:	3201      	adds	r2, #1
 80097ce:	edc5 6a07 	vstr	s13, [r5, #28]
 80097d2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80097d6:	602a      	str	r2, [r5, #0]
 80097d8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80097dc:	1a5b      	subs	r3, r3, r1
 80097de:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80097e2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80097e6:	612b      	str	r3, [r5, #16]
 80097e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ec:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80097f0:	3f01      	subs	r7, #1
 80097f2:	e757      	b.n	80096a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80097f4:	4299      	cmp	r1, r3
 80097f6:	dc13      	bgt.n	8009820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80097f8:	429a      	cmp	r2, r3
 80097fa:	da14      	bge.n	8009826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80097fc:	2502      	movs	r5, #2
 80097fe:	2703      	movs	r7, #3
 8009800:	46a9      	mov	r9, r5
 8009802:	f04f 0800 	mov.w	r8, #0
 8009806:	f04f 0a01 	mov.w	sl, #1
 800980a:	e6ef      	b.n	80095ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800980c:	2501      	movs	r5, #1
 800980e:	2700      	movs	r7, #0
 8009810:	46a9      	mov	r9, r5
 8009812:	46b8      	mov	r8, r7
 8009814:	f04f 0a02 	mov.w	sl, #2
 8009818:	e6e8      	b.n	80095ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800981a:	2501      	movs	r5, #1
 800981c:	2702      	movs	r7, #2
 800981e:	e6e1      	b.n	80095e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8009820:	2500      	movs	r5, #0
 8009822:	2701      	movs	r7, #1
 8009824:	e7f4      	b.n	8009810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8009826:	2702      	movs	r7, #2
 8009828:	2503      	movs	r5, #3
 800982a:	f04f 0900 	mov.w	r9, #0
 800982e:	46b8      	mov	r8, r7
 8009830:	e7e9      	b.n	8009806 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8009832:	4613      	mov	r3, r2
 8009834:	e728      	b.n	8009688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8009836:	bf00      	nop
 8009838:	2000a1d0 	.word	0x2000a1d0
 800983c:	fffd8f01 	.word	0xfffd8f01
 8009840:	00027100 	.word	0x00027100
 8009844:	0004e1ff 	.word	0x0004e1ff
 8009848:	0004e1fe 	.word	0x0004e1fe
 800984c:	2000a1d8 	.word	0x2000a1d8
 8009850:	4613      	mov	r3, r2
 8009852:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009854:	9111      	str	r1, [sp, #68]	; 0x44
 8009856:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800985a:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800985e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8009860:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8009864:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8009868:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800986c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8009870:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8009874:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009878:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800987c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8009880:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8009884:	469e      	mov	lr, r3
 8009886:	469c      	mov	ip, r3
 8009888:	f04f 0900 	mov.w	r9, #0
 800988c:	f1bc 0f00 	cmp.w	ip, #0
 8009890:	d147      	bne.n	8009922 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8009892:	eb03 0c07 	add.w	ip, r3, r7
 8009896:	1ad7      	subs	r7, r2, r3
 8009898:	f1b9 0f00 	cmp.w	r9, #0
 800989c:	d009      	beq.n	80098b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800989e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80098a2:	9029      	str	r0, [sp, #164]	; 0xa4
 80098a4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80098a8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80098ac:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80098b0:	912d      	str	r1, [sp, #180]	; 0xb4
 80098b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80098b4:	9111      	str	r1, [sp, #68]	; 0x44
 80098b6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80098ba:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80098be:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80098c2:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80098c6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80098ca:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80098ce:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80098d2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80098d6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80098da:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80098de:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80098e2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80098e6:	f04f 0800 	mov.w	r8, #0
 80098ea:	f1be 0f00 	cmp.w	lr, #0
 80098ee:	d031      	beq.n	8009954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80098f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80098f2:	4431      	add	r1, r6
 80098f4:	4549      	cmp	r1, r9
 80098f6:	4450      	add	r0, sl
 80098f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80098fc:	ee37 7a04 	vadd.f32	s14, s14, s8
 8009900:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009904:	db08      	blt.n	8009918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8009906:	ee77 7a85 	vadd.f32	s15, s15, s10
 800990a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800990e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009912:	3001      	adds	r0, #1
 8009914:	eba1 0109 	sub.w	r1, r1, r9
 8009918:	f10e 3eff 	add.w	lr, lr, #4294967295
 800991c:	f04f 0801 	mov.w	r8, #1
 8009920:	e7e3      	b.n	80098ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8009922:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009924:	4431      	add	r1, r6
 8009926:	4541      	cmp	r1, r8
 8009928:	4450      	add	r0, sl
 800992a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800992e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009932:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8009936:	db08      	blt.n	800994a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8009938:	ee76 6a85 	vadd.f32	s13, s13, s10
 800993c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009940:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009944:	3001      	adds	r0, #1
 8009946:	eba1 0108 	sub.w	r1, r1, r8
 800994a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800994e:	f04f 0901 	mov.w	r9, #1
 8009952:	e79b      	b.n	800988c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8009954:	449c      	add	ip, r3
 8009956:	1aff      	subs	r7, r7, r3
 8009958:	f1b8 0f00 	cmp.w	r8, #0
 800995c:	d009      	beq.n	8009972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800995e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8009962:	9019      	str	r0, [sp, #100]	; 0x64
 8009964:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8009968:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800996c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8009970:	911d      	str	r1, [sp, #116]	; 0x74
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	e68b      	b.n	800968e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009978:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 80d1 	beq.w	8009b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8009980:	ad19      	add	r5, sp, #100	; 0x64
 8009982:	ac39      	add	r4, sp, #228	; 0xe4
 8009984:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009986:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800998a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800998e:	930c      	str	r3, [sp, #48]	; 0x30
 8009990:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009992:	6963      	ldr	r3, [r4, #20]
 8009994:	440b      	add	r3, r1
 8009996:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800999a:	4408      	add	r0, r1
 800999c:	b200      	sxth	r0, r0
 800999e:	4283      	cmp	r3, r0
 80099a0:	900d      	str	r0, [sp, #52]	; 0x34
 80099a2:	f280 80c1 	bge.w	8009b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80099a6:	428b      	cmp	r3, r1
 80099a8:	da08      	bge.n	80099bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	dd06      	ble.n	80099bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80099ae:	1acb      	subs	r3, r1, r3
 80099b0:	429a      	cmp	r2, r3
 80099b2:	f2c0 80bb 	blt.w	8009b2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f300 80b9 	bgt.w	8009b2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80099bc:	6967      	ldr	r7, [r4, #20]
 80099be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099c0:	443b      	add	r3, r7
 80099c2:	461f      	mov	r7, r3
 80099c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c6:	1bdf      	subs	r7, r3, r7
 80099c8:	4297      	cmp	r7, r2
 80099ca:	bfa8      	it	ge
 80099cc:	4617      	movge	r7, r2
 80099ce:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80099d2:	2f00      	cmp	r7, #0
 80099d4:	f340 813c 	ble.w	8009c50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80099d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80099da:	6829      	ldr	r1, [r5, #0]
 80099dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099e0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80099e4:	6820      	ldr	r0, [r4, #0]
 80099e6:	4411      	add	r1, r2
 80099e8:	4299      	cmp	r1, r3
 80099ea:	dd1a      	ble.n	8009a22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80099ec:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80099f0:	440b      	add	r3, r1
 80099f2:	4402      	add	r2, r0
 80099f4:	b21b      	sxth	r3, r3
 80099f6:	429a      	cmp	r2, r3
 80099f8:	dc13      	bgt.n	8009a22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80099fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	9206      	str	r2, [sp, #24]
 8009a02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a04:	9205      	str	r2, [sp, #20]
 8009a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a08:	9500      	str	r5, [sp, #0]
 8009a0a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8009a0e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a12:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8009a16:	a912      	add	r1, sp, #72	; 0x48
 8009a18:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8009a1c:	aa49      	add	r2, sp, #292	; 0x124
 8009a1e:	4623      	mov	r3, r4
 8009a20:	47c8      	blx	r9
 8009a22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a26:	441a      	add	r2, r3
 8009a28:	6963      	ldr	r3, [r4, #20]
 8009a2a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8009a2e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8009a32:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8009a36:	68a1      	ldr	r1, [r4, #8]
 8009a38:	ed94 6a08 	vldr	s12, [r4, #32]
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	6163      	str	r3, [r4, #20]
 8009a42:	69a3      	ldr	r3, [r4, #24]
 8009a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8009a4e:	61a3      	str	r3, [r4, #24]
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8009a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5a:	edd4 6a07 	vldr	s13, [r4, #28]
 8009a5e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8009a62:	440b      	add	r3, r1
 8009a64:	68e1      	ldr	r1, [r4, #12]
 8009a66:	6123      	str	r3, [r4, #16]
 8009a68:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009a6c:	428b      	cmp	r3, r1
 8009a6e:	edc4 6a07 	vstr	s13, [r4, #28]
 8009a72:	db15      	blt.n	8009aa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8009a74:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8009a78:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009a7c:	3201      	adds	r2, #1
 8009a7e:	edc4 6a07 	vstr	s13, [r4, #28]
 8009a82:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8009a86:	6022      	str	r2, [r4, #0]
 8009a88:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009a8c:	1a5b      	subs	r3, r3, r1
 8009a8e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8009a92:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a9c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8009aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009aa4:	441a      	add	r2, r3
 8009aa6:	696b      	ldr	r3, [r5, #20]
 8009aa8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8009aac:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8009ab0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8009ab4:	68a9      	ldr	r1, [r5, #8]
 8009ab6:	ed95 6a08 	vldr	s12, [r5, #32]
 8009aba:	602a      	str	r2, [r5, #0]
 8009abc:	3301      	adds	r3, #1
 8009abe:	616b      	str	r3, [r5, #20]
 8009ac0:	69ab      	ldr	r3, [r5, #24]
 8009ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8009acc:	61ab      	str	r3, [r5, #24]
 8009ace:	692b      	ldr	r3, [r5, #16]
 8009ad0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8009ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad8:	edd5 6a07 	vldr	s13, [r5, #28]
 8009adc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8009ae0:	440b      	add	r3, r1
 8009ae2:	68e9      	ldr	r1, [r5, #12]
 8009ae4:	612b      	str	r3, [r5, #16]
 8009ae6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009aea:	428b      	cmp	r3, r1
 8009aec:	edc5 6a07 	vstr	s13, [r5, #28]
 8009af0:	db15      	blt.n	8009b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8009af2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8009af6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009afa:	3201      	adds	r2, #1
 8009afc:	edc5 6a07 	vstr	s13, [r5, #28]
 8009b00:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8009b04:	602a      	str	r2, [r5, #0]
 8009b06:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009b0a:	1a5b      	subs	r3, r3, r1
 8009b0c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8009b10:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8009b14:	612b      	str	r3, [r5, #16]
 8009b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b1a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8009b1e:	3f01      	subs	r7, #1
 8009b20:	e757      	b.n	80099d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8009b22:	ad39      	add	r5, sp, #228	; 0xe4
 8009b24:	ac19      	add	r4, sp, #100	; 0x64
 8009b26:	e72d      	b.n	8009984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8009b28:	4613      	mov	r3, r2
 8009b2a:	e744      	b.n	80099b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8009b32:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8009b34:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8009b38:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8009b3c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8009b40:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8009b44:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8009b48:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8009b4c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8009b50:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8009b52:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8009b56:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8009b5a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8009b5e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8009b62:	960e      	str	r6, [sp, #56]	; 0x38
 8009b64:	469e      	mov	lr, r3
 8009b66:	461f      	mov	r7, r3
 8009b68:	f04f 0900 	mov.w	r9, #0
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	d146      	bne.n	8009bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8009b70:	449c      	add	ip, r3
 8009b72:	1ad7      	subs	r7, r2, r3
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	d009      	beq.n	8009b8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8009b7a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8009b7e:	9039      	str	r0, [sp, #228]	; 0xe4
 8009b80:	913d      	str	r1, [sp, #244]	; 0xf4
 8009b82:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8009b86:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8009b8a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8009b8e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009b90:	910e      	str	r1, [sp, #56]	; 0x38
 8009b92:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8009b96:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8009b9a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8009b9e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8009ba2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8009ba6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8009baa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8009bae:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8009bb2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8009bb6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8009bba:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8009bbe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8009bc2:	f04f 0800 	mov.w	r8, #0
 8009bc6:	f1be 0f00 	cmp.w	lr, #0
 8009bca:	d030      	beq.n	8009c2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8009bcc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009bce:	4431      	add	r1, r6
 8009bd0:	4549      	cmp	r1, r9
 8009bd2:	4450      	add	r0, sl
 8009bd4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009bd8:	ee37 7a04 	vadd.f32	s14, s14, s8
 8009bdc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009be0:	db08      	blt.n	8009bf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8009be2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009be6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009bea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009bee:	3001      	adds	r0, #1
 8009bf0:	eba1 0109 	sub.w	r1, r1, r9
 8009bf4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009bf8:	f04f 0801 	mov.w	r8, #1
 8009bfc:	e7e3      	b.n	8009bc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8009bfe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009c00:	4431      	add	r1, r6
 8009c02:	4541      	cmp	r1, r8
 8009c04:	4450      	add	r0, sl
 8009c06:	ee37 7a24 	vadd.f32	s14, s14, s9
 8009c0a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009c0e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8009c12:	db08      	blt.n	8009c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8009c14:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009c18:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009c1c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009c20:	3001      	adds	r0, #1
 8009c22:	eba1 0108 	sub.w	r1, r1, r8
 8009c26:	3f01      	subs	r7, #1
 8009c28:	f04f 0901 	mov.w	r9, #1
 8009c2c:	e79e      	b.n	8009b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8009c2e:	449c      	add	ip, r3
 8009c30:	1aff      	subs	r7, r7, r3
 8009c32:	f1b8 0f00 	cmp.w	r8, #0
 8009c36:	d009      	beq.n	8009c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8009c38:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8009c3c:	9019      	str	r0, [sp, #100]	; 0x64
 8009c3e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8009c42:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8009c46:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8009c4a:	911d      	str	r1, [sp, #116]	; 0x74
 8009c4c:	1ad2      	subs	r2, r2, r3
 8009c4e:	e6b5      	b.n	80099bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8009c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	b923      	cbnz	r3, 8009c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009c56:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8009c58:	6818      	ldr	r0, [r3, #0]
 8009c5a:	6803      	ldr	r3, [r0, #0]
 8009c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5e:	4798      	blx	r3
 8009c60:	b05b      	add	sp, #364	; 0x16c
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c66:	bf00      	nop
 8009c68:	2000a1d8 	.word	0x2000a1d8

08009c6c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d818      	bhi.n	8009ca2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8009c70:	e8df f003 	tbb	[pc, r3]
 8009c74:	130d0602 	.word	0x130d0602
 8009c78:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009c7c:	1850      	adds	r0, r2, r1
 8009c7e:	4770      	bx	lr
 8009c80:	8803      	ldrh	r3, [r0, #0]
 8009c82:	8880      	ldrh	r0, [r0, #4]
 8009c84:	4418      	add	r0, r3
 8009c86:	b200      	sxth	r0, r0
 8009c88:	1a80      	subs	r0, r0, r2
 8009c8a:	3801      	subs	r0, #1
 8009c8c:	4770      	bx	lr
 8009c8e:	8803      	ldrh	r3, [r0, #0]
 8009c90:	8880      	ldrh	r0, [r0, #4]
 8009c92:	4418      	add	r0, r3
 8009c94:	b200      	sxth	r0, r0
 8009c96:	1a40      	subs	r0, r0, r1
 8009c98:	e7f7      	b.n	8009c8a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8009c9a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8009c9e:	4410      	add	r0, r2
 8009ca0:	4770      	bx	lr
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	4770      	bx	lr

08009ca6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d817      	bhi.n	8009cda <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8009caa:	e8df f003 	tbb	[pc, r3]
 8009cae:	0602      	.short	0x0602
 8009cb0:	1009      	.short	0x1009
 8009cb2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8009cb6:	1850      	adds	r0, r2, r1
 8009cb8:	4770      	bx	lr
 8009cba:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009cbe:	e7fa      	b.n	8009cb6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8009cc0:	8843      	ldrh	r3, [r0, #2]
 8009cc2:	88c0      	ldrh	r0, [r0, #6]
 8009cc4:	4418      	add	r0, r3
 8009cc6:	b200      	sxth	r0, r0
 8009cc8:	1a80      	subs	r0, r0, r2
 8009cca:	3801      	subs	r0, #1
 8009ccc:	4770      	bx	lr
 8009cce:	8843      	ldrh	r3, [r0, #2]
 8009cd0:	88c0      	ldrh	r0, [r0, #6]
 8009cd2:	4418      	add	r0, r3
 8009cd4:	b200      	sxth	r0, r0
 8009cd6:	1a40      	subs	r0, r0, r1
 8009cd8:	e7f7      	b.n	8009cca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	4770      	bx	lr
	...

08009ce0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8009ce0:	4b01      	ldr	r3, [pc, #4]	; (8009ce8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	4770      	bx	lr
 8009ce8:	2000a1e0 	.word	0x2000a1e0

08009cec <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8009cec:	4603      	mov	r3, r0
 8009cee:	b1c8      	cbz	r0, 8009d24 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8009cf0:	0c02      	lsrs	r2, r0, #16
 8009cf2:	0412      	lsls	r2, r2, #16
 8009cf4:	b9a2      	cbnz	r2, 8009d20 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8009cf6:	0403      	lsls	r3, r0, #16
 8009cf8:	2010      	movs	r0, #16
 8009cfa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009cfe:	bf04      	itt	eq
 8009d00:	021b      	lsleq	r3, r3, #8
 8009d02:	3008      	addeq	r0, #8
 8009d04:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d08:	bf04      	itt	eq
 8009d0a:	011b      	lsleq	r3, r3, #4
 8009d0c:	3004      	addeq	r0, #4
 8009d0e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d12:	bf04      	itt	eq
 8009d14:	009b      	lsleq	r3, r3, #2
 8009d16:	3002      	addeq	r0, #2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	db04      	blt.n	8009d26 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	4770      	bx	lr
 8009d20:	2000      	movs	r0, #0
 8009d22:	e7ea      	b.n	8009cfa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8009d24:	2020      	movs	r0, #32
 8009d26:	4770      	bx	lr

08009d28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	b087      	sub	sp, #28
 8009d2e:	460d      	mov	r5, r1
 8009d30:	4616      	mov	r6, r2
 8009d32:	4698      	mov	r8, r3
 8009d34:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8009d38:	4601      	mov	r1, r0
 8009d3a:	b120      	cbz	r0, 8009d46 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8009d3c:	b11a      	cbz	r2, 8009d46 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8009d3e:	2d1f      	cmp	r5, #31
 8009d40:	d801      	bhi.n	8009d46 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8009d42:	2b1f      	cmp	r3, #31
 8009d44:	d904      	bls.n	8009d50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8009d46:	2000      	movs	r0, #0
 8009d48:	6038      	str	r0, [r7, #0]
 8009d4a:	b007      	add	sp, #28
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	b97d      	cbnz	r5, 8009d72 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8009d52:	b143      	cbz	r3, 8009d66 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8009d54:	4602      	mov	r2, r0
 8009d56:	e9cd 4700 	strd	r4, r7, [sp]
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	4641      	mov	r1, r8
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7ff ffe2 	bl	8009d28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8009d64:	e7f1      	b.n	8009d4a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8009d66:	f04f 33ff 	mov.w	r3, #4294967295
 8009d6a:	603b      	str	r3, [r7, #0]
 8009d6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8009d70:	e7eb      	b.n	8009d4a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8009d72:	fa32 fa05 	lsrs.w	sl, r2, r5
 8009d76:	d106      	bne.n	8009d86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8009d78:	4346      	muls	r6, r0
 8009d7a:	fbb6 f0f4 	udiv	r0, r6, r4
 8009d7e:	fb04 6610 	mls	r6, r4, r0, r6
 8009d82:	603e      	str	r6, [r7, #0]
 8009d84:	e7e1      	b.n	8009d4a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8009d86:	2201      	movs	r2, #1
 8009d88:	40aa      	lsls	r2, r5
 8009d8a:	3a01      	subs	r2, #1
 8009d8c:	4016      	ands	r6, r2
 8009d8e:	fa00 fb05 	lsl.w	fp, r0, r5
 8009d92:	4630      	mov	r0, r6
 8009d94:	fbbb f9f4 	udiv	r9, fp, r4
 8009d98:	fb0a f309 	mul.w	r3, sl, r9
 8009d9c:	9303      	str	r3, [sp, #12]
 8009d9e:	f7ff ffa5 	bl	8009cec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8009da2:	462b      	mov	r3, r5
 8009da4:	460a      	mov	r2, r1
 8009da6:	e9cd 4700 	strd	r4, r7, [sp]
 8009daa:	4601      	mov	r1, r0
 8009dac:	4630      	mov	r0, r6
 8009dae:	f7ff ffbb 	bl	8009d28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8009db2:	fb04 b919 	mls	r9, r4, r9, fp
 8009db6:	4606      	mov	r6, r0
 8009db8:	4648      	mov	r0, r9
 8009dba:	eb05 0108 	add.w	r1, r5, r8
 8009dbe:	f7ff ff95 	bl	8009cec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8009dc2:	ab05      	add	r3, sp, #20
 8009dc4:	e9cd 4300 	strd	r4, r3, [sp]
 8009dc8:	464a      	mov	r2, r9
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4650      	mov	r0, sl
 8009dce:	f7ff ffab 	bl	8009d28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	9a05      	ldr	r2, [sp, #20]
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	4411      	add	r1, r2
 8009dda:	fbb1 f2f4 	udiv	r2, r1, r4
 8009dde:	18d3      	adds	r3, r2, r3
 8009de0:	441e      	add	r6, r3
 8009de2:	fb04 1412 	mls	r4, r4, r2, r1
 8009de6:	4430      	add	r0, r6
 8009de8:	603c      	str	r4, [r7, #0]
 8009dea:	e7ae      	b.n	8009d4a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08009dec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8009dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009df0:	b085      	sub	sp, #20
 8009df2:	f1b0 0900 	subs.w	r9, r0, #0
 8009df6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009df8:	461d      	mov	r5, r3
 8009dfa:	bfbf      	itttt	lt
 8009dfc:	6823      	ldrlt	r3, [r4, #0]
 8009dfe:	425b      	neglt	r3, r3
 8009e00:	f1c9 0900 	rsblt	r9, r9, #0
 8009e04:	6023      	strlt	r3, [r4, #0]
 8009e06:	bfb4      	ite	lt
 8009e08:	f04f 36ff 	movlt.w	r6, #4294967295
 8009e0c:	2601      	movge	r6, #1
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	4617      	mov	r7, r2
 8009e12:	da04      	bge.n	8009e1e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	425b      	negs	r3, r3
 8009e18:	4257      	negs	r7, r2
 8009e1a:	4276      	negs	r6, r6
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	2d00      	cmp	r5, #0
 8009e20:	4638      	mov	r0, r7
 8009e22:	bfba      	itte	lt
 8009e24:	426d      	neglt	r5, r5
 8009e26:	f04f 38ff 	movlt.w	r8, #4294967295
 8009e2a:	f04f 0801 	movge.w	r8, #1
 8009e2e:	f7ff ff5d 	bl	8009cec <_ZN8touchgfx16TouchCalibration4clzuEm>
 8009e32:	ab03      	add	r3, sp, #12
 8009e34:	e9cd 5300 	strd	r5, r3, [sp]
 8009e38:	463a      	mov	r2, r7
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	4648      	mov	r0, r9
 8009e3e:	f7ff ff73 	bl	8009d28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	9a03      	ldr	r2, [sp, #12]
 8009e46:	4546      	cmp	r6, r8
 8009e48:	441a      	add	r2, r3
 8009e4a:	fb92 f3f5 	sdiv	r3, r2, r5
 8009e4e:	4418      	add	r0, r3
 8009e50:	bf18      	it	ne
 8009e52:	4240      	negne	r0, r0
 8009e54:	fb05 2313 	mls	r3, r5, r3, r2
 8009e58:	1c72      	adds	r2, r6, #1
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	d105      	bne.n	8009e6a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f1c3 0200 	rsb	r2, r3, #0
 8009e64:	db0b      	blt.n	8009e7e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8009e66:	6022      	str	r2, [r4, #0]
 8009e68:	e006      	b.n	8009e78 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8009e6a:	2e01      	cmp	r6, #1
 8009e6c:	d104      	bne.n	8009e78 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	da02      	bge.n	8009e78 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8009e72:	442b      	add	r3, r5
 8009e74:	3801      	subs	r0, #1
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	b005      	add	sp, #20
 8009e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	3801      	subs	r0, #1
 8009e80:	1b52      	subs	r2, r2, r5
 8009e82:	e7f0      	b.n	8009e66 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08009e84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8009e84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009e88:	4c1c      	ldr	r4, [pc, #112]	; (8009efc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8009e8a:	6807      	ldr	r7, [r0, #0]
 8009e8c:	69a3      	ldr	r3, [r4, #24]
 8009e8e:	4605      	mov	r5, r0
 8009e90:	b92b      	cbnz	r3, 8009e9e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8009e92:	6840      	ldr	r0, [r0, #4]
 8009e94:	e9c5 7000 	strd	r7, r0, [r5]
 8009e98:	b004      	add	sp, #16
 8009e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e9e:	68a2      	ldr	r2, [r4, #8]
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	ae04      	add	r6, sp, #16
 8009ea4:	f04f 0802 	mov.w	r8, #2
 8009ea8:	fb93 f1f8 	sdiv	r1, r3, r8
 8009eac:	440a      	add	r2, r1
 8009eae:	f846 2d04 	str.w	r2, [r6, #-4]!
 8009eb2:	69e1      	ldr	r1, [r4, #28]
 8009eb4:	9600      	str	r6, [sp, #0]
 8009eb6:	463a      	mov	r2, r7
 8009eb8:	f7ff ff98 	bl	8009dec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8009ebc:	69a3      	ldr	r3, [r4, #24]
 8009ebe:	686a      	ldr	r2, [r5, #4]
 8009ec0:	6a21      	ldr	r1, [r4, #32]
 8009ec2:	9600      	str	r6, [sp, #0]
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	6860      	ldr	r0, [r4, #4]
 8009ec8:	f7ff ff90 	bl	8009dec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8009ecc:	6962      	ldr	r2, [r4, #20]
 8009ece:	69a3      	ldr	r3, [r4, #24]
 8009ed0:	fb93 f8f8 	sdiv	r8, r3, r8
 8009ed4:	4442      	add	r2, r8
 8009ed6:	9203      	str	r2, [sp, #12]
 8009ed8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009eda:	682a      	ldr	r2, [r5, #0]
 8009edc:	9600      	str	r6, [sp, #0]
 8009ede:	4407      	add	r7, r0
 8009ee0:	68e0      	ldr	r0, [r4, #12]
 8009ee2:	f7ff ff83 	bl	8009dec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8009ee6:	9600      	str	r6, [sp, #0]
 8009ee8:	4680      	mov	r8, r0
 8009eea:	69a3      	ldr	r3, [r4, #24]
 8009eec:	686a      	ldr	r2, [r5, #4]
 8009eee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009ef0:	6920      	ldr	r0, [r4, #16]
 8009ef2:	f7ff ff7b 	bl	8009dec <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8009ef6:	4440      	add	r0, r8
 8009ef8:	e7cc      	b.n	8009e94 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8009efa:	bf00      	nop
 8009efc:	2000a1e4 	.word	0x2000a1e4

08009f00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d109      	bne.n	8009f1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8009f08:	f9b1 3000 	ldrsh.w	r3, [r1]
 8009f0c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009f10:	8003      	strh	r3, [r0, #0]
 8009f12:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	1a9b      	subs	r3, r3, r2
 8009f1a:	800b      	strh	r3, [r1, #0]
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	2000a1d0 	.word	0x2000a1d0
 8009f24:	2000a1cc 	.word	0x2000a1cc

08009f28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	4b07      	ldr	r3, [pc, #28]	; (8009f48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d108      	bne.n	8009f44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8009f32:	4b06      	ldr	r3, [pc, #24]	; (8009f4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8009f34:	880c      	ldrh	r4, [r1, #0]
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	1b1b      	subs	r3, r3, r4
 8009f40:	8003      	strh	r3, [r0, #0]
 8009f42:	800a      	strh	r2, [r1, #0]
 8009f44:	bd10      	pop	{r4, pc}
 8009f46:	bf00      	nop
 8009f48:	2000a1d0 	.word	0x2000a1d0
 8009f4c:	2000a1cc 	.word	0x2000a1cc

08009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8009f50:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d10c      	bne.n	8009f72 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8009f58:	8803      	ldrh	r3, [r0, #0]
 8009f5a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8009f5e:	8842      	ldrh	r2, [r0, #2]
 8009f60:	8002      	strh	r2, [r0, #0]
 8009f62:	185a      	adds	r2, r3, r1
 8009f64:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	8043      	strh	r3, [r0, #2]
 8009f6c:	88c3      	ldrh	r3, [r0, #6]
 8009f6e:	8083      	strh	r3, [r0, #4]
 8009f70:	80c1      	strh	r1, [r0, #6]
 8009f72:	4770      	bx	lr
 8009f74:	2000a1d0 	.word	0x2000a1d0
 8009f78:	2000a1cc 	.word	0x2000a1cc

08009f7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d108      	bne.n	8009f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8009f86:	f9b1 3000 	ldrsh.w	r3, [r1]
 8009f8a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8009f8e:	8003      	strh	r3, [r0, #0]
 8009f90:	8893      	ldrh	r3, [r2, #4]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	1b1b      	subs	r3, r3, r4
 8009f96:	800b      	strh	r3, [r1, #0]
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	bf00      	nop
 8009f9c:	2000a1d0 	.word	0x2000a1d0

08009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	460a      	mov	r2, r1
 8009faa:	d10d      	bne.n	8009fc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8009fac:	8881      	ldrh	r1, [r0, #4]
 8009fae:	8803      	ldrh	r3, [r0, #0]
 8009fb0:	440b      	add	r3, r1
 8009fb2:	4601      	mov	r1, r0
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	f821 3b02 	strh.w	r3, [r1], #2
 8009fba:	f7ff ffdf 	bl	8009f7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8009fbe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009fc2:	88c2      	ldrh	r2, [r0, #6]
 8009fc4:	8082      	strh	r2, [r0, #4]
 8009fc6:	80c3      	strh	r3, [r0, #6]
 8009fc8:	bd10      	pop	{r4, pc}
 8009fca:	bf00      	nop
 8009fcc:	2000a1d0 	.word	0x2000a1d0

08009fd0 <_ZN8touchgfx11Application11getInstanceEv>:
 8009fd0:	4b01      	ldr	r3, [pc, #4]	; (8009fd8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	2000a218 	.word	0x2000a218

08009fdc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8009fdc:	4b03      	ldr	r3, [pc, #12]	; (8009fec <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	805a      	strh	r2, [r3, #2]
 8009fe4:	809a      	strh	r2, [r3, #4]
 8009fe6:	80da      	strh	r2, [r3, #6]
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	2000a210 	.word	0x2000a210

08009ff0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	b09d      	sub	sp, #116	; 0x74
 8009ff8:	a803      	add	r0, sp, #12
 8009ffa:	4614      	mov	r4, r2
 8009ffc:	468a      	mov	sl, r1
 8009ffe:	461d      	mov	r5, r3
 800a000:	f000 f9d0 	bl	800a3a4 <_ZN8touchgfx12TextProviderC1Ev>
 800a004:	6833      	ldr	r3, [r6, #0]
 800a006:	4630      	mov	r0, r6
 800a008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00a:	4798      	blx	r3
 800a00c:	6833      	ldr	r3, [r6, #0]
 800a00e:	4607      	mov	r7, r0
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	4630      	mov	r0, r6
 800a014:	4798      	blx	r3
 800a016:	462a      	mov	r2, r5
 800a018:	9000      	str	r0, [sp, #0]
 800a01a:	4621      	mov	r1, r4
 800a01c:	463b      	mov	r3, r7
 800a01e:	a803      	add	r0, sp, #12
 800a020:	f000 fa13 	bl	800a44a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a024:	2500      	movs	r5, #0
 800a026:	462c      	mov	r4, r5
 800a028:	46a9      	mov	r9, r5
 800a02a:	46a8      	mov	r8, r5
 800a02c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800a030:	2300      	movs	r3, #0
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800a038:	429c      	cmp	r4, r3
 800a03a:	d002      	beq.n	800a042 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800a03c:	455c      	cmp	r4, fp
 800a03e:	bf18      	it	ne
 800a040:	4625      	movne	r5, r4
 800a042:	ab02      	add	r3, sp, #8
 800a044:	4632      	mov	r2, r6
 800a046:	4651      	mov	r1, sl
 800a048:	a803      	add	r0, sp, #12
 800a04a:	f000 fcef 	bl	800aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800a04e:	4604      	mov	r4, r0
 800a050:	b108      	cbz	r0, 800a056 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800a052:	280a      	cmp	r0, #10
 800a054:	d10a      	bne.n	800a06c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800a056:	45c1      	cmp	r9, r8
 800a058:	bf38      	it	cc
 800a05a:	46c1      	movcc	r9, r8
 800a05c:	f04f 0800 	mov.w	r8, #0
 800a060:	2c00      	cmp	r4, #0
 800a062:	d1e5      	bne.n	800a030 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800a064:	4648      	mov	r0, r9
 800a066:	b01d      	add	sp, #116	; 0x74
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	9a02      	ldr	r2, [sp, #8]
 800a06e:	2a00      	cmp	r2, #0
 800a070:	d0de      	beq.n	800a030 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800a072:	7b57      	ldrb	r7, [r2, #13]
 800a074:	6833      	ldr	r3, [r6, #0]
 800a076:	8894      	ldrh	r4, [r2, #4]
 800a078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07a:	007f      	lsls	r7, r7, #1
 800a07c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800a080:	7a97      	ldrb	r7, [r2, #10]
 800a082:	4629      	mov	r1, r5
 800a084:	4307      	orrs	r7, r0
 800a086:	4630      	mov	r0, r6
 800a088:	4798      	blx	r3
 800a08a:	4438      	add	r0, r7
 800a08c:	4480      	add	r8, r0
 800a08e:	fa1f f888 	uxth.w	r8, r8
 800a092:	e7e5      	b.n	800a060 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800a094 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800a094:	b508      	push	{r3, lr}
 800a096:	6803      	ldr	r3, [r0, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	4798      	blx	r3
 800a09c:	b128      	cbz	r0, 800a0aa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800a09e:	7b43      	ldrb	r3, [r0, #13]
 800a0a0:	7a80      	ldrb	r0, [r0, #10]
 800a0a2:	005b      	lsls	r3, r3, #1
 800a0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a8:	4318      	orrs	r0, r3
 800a0aa:	bd08      	pop	{r3, pc}

0800a0ac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800a0ac:	b40e      	push	{r1, r2, r3}
 800a0ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0b0:	b09e      	sub	sp, #120	; 0x78
 800a0b2:	ab23      	add	r3, sp, #140	; 0x8c
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	f853 4b04 	ldr.w	r4, [r3], #4
 800a0ba:	9303      	str	r3, [sp, #12]
 800a0bc:	a805      	add	r0, sp, #20
 800a0be:	f000 f971 	bl	800a3a4 <_ZN8touchgfx12TextProviderC1Ev>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c8:	4798      	blx	r3
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	4798      	blx	r3
 800a0d4:	4633      	mov	r3, r6
 800a0d6:	ae1e      	add	r6, sp, #120	; 0x78
 800a0d8:	4621      	mov	r1, r4
 800a0da:	9000      	str	r0, [sp, #0]
 800a0dc:	9a03      	ldr	r2, [sp, #12]
 800a0de:	2400      	movs	r4, #0
 800a0e0:	a805      	add	r0, sp, #20
 800a0e2:	f000 f9b2 	bl	800a44a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a0e6:	f846 4d68 	str.w	r4, [r6, #-104]!
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	4633      	mov	r3, r6
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	a805      	add	r0, sp, #20
 800a0f2:	f000 fc9b 	bl	800aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800a0f6:	b1f0      	cbz	r0, 800a136 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800a0f8:	280a      	cmp	r0, #10
 800a0fa:	d018      	beq.n	800a12e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800a0fc:	9f04      	ldr	r7, [sp, #16]
 800a0fe:	b1b7      	cbz	r7, 800a12e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800a100:	7b78      	ldrb	r0, [r7, #13]
 800a102:	7a3b      	ldrb	r3, [r7, #8]
 800a104:	88ea      	ldrh	r2, [r5, #6]
 800a106:	00c1      	lsls	r1, r0, #3
 800a108:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800a10c:	4319      	orrs	r1, r3
 800a10e:	0643      	lsls	r3, r0, #25
 800a110:	bf44      	itt	mi
 800a112:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800a116:	b219      	sxthmi	r1, r3
 800a118:	0100      	lsls	r0, r0, #4
 800a11a:	79fb      	ldrb	r3, [r7, #7]
 800a11c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800a120:	4303      	orrs	r3, r0
 800a122:	4413      	add	r3, r2
 800a124:	1a5b      	subs	r3, r3, r1
 800a126:	b21b      	sxth	r3, r3
 800a128:	429c      	cmp	r4, r3
 800a12a:	bfb8      	it	lt
 800a12c:	461c      	movlt	r4, r3
 800a12e:	4633      	mov	r3, r6
 800a130:	462a      	mov	r2, r5
 800a132:	2100      	movs	r1, #0
 800a134:	e7dc      	b.n	800a0f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800a136:	b2a0      	uxth	r0, r4
 800a138:	b01e      	add	sp, #120	; 0x78
 800a13a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a13e:	b003      	add	sp, #12
 800a140:	4770      	bx	lr

0800a142 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800a142:	7a43      	ldrb	r3, [r0, #9]
 800a144:	8880      	ldrh	r0, [r0, #4]
 800a146:	4418      	add	r0, r3
 800a148:	b280      	uxth	r0, r0
 800a14a:	4770      	bx	lr

0800a14c <_ZNK8touchgfx4Font13getFontHeightEv>:
 800a14c:	6803      	ldr	r3, [r0, #0]
 800a14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a150:	4718      	bx	r3

0800a152 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800a152:	b40e      	push	{r1, r2, r3}
 800a154:	b570      	push	{r4, r5, r6, lr}
 800a156:	b09d      	sub	sp, #116	; 0x74
 800a158:	ab21      	add	r3, sp, #132	; 0x84
 800a15a:	4604      	mov	r4, r0
 800a15c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	a803      	add	r0, sp, #12
 800a164:	f000 f91e 	bl	800a3a4 <_ZN8touchgfx12TextProviderC1Ev>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	4620      	mov	r0, r4
 800a16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16e:	4798      	blx	r3
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	4606      	mov	r6, r0
 800a174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a176:	4620      	mov	r0, r4
 800a178:	4798      	blx	r3
 800a17a:	4633      	mov	r3, r6
 800a17c:	9000      	str	r0, [sp, #0]
 800a17e:	9a02      	ldr	r2, [sp, #8]
 800a180:	4629      	mov	r1, r5
 800a182:	a803      	add	r0, sp, #12
 800a184:	f000 f961 	bl	800a44a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a188:	a803      	add	r0, sp, #12
 800a18a:	f000 fcd1 	bl	800ab30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800a18e:	2401      	movs	r4, #1
 800a190:	b2a3      	uxth	r3, r4
 800a192:	b140      	cbz	r0, 800a1a6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800a194:	280a      	cmp	r0, #10
 800a196:	bf08      	it	eq
 800a198:	3301      	addeq	r3, #1
 800a19a:	a803      	add	r0, sp, #12
 800a19c:	bf08      	it	eq
 800a19e:	b21c      	sxtheq	r4, r3
 800a1a0:	f000 fcc6 	bl	800ab30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800a1a4:	e7f4      	b.n	800a190 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	b01d      	add	sp, #116	; 0x74
 800a1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1ae:	b003      	add	sp, #12
 800a1b0:	4770      	bx	lr

0800a1b2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800a1b2:	b40e      	push	{r1, r2, r3}
 800a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1b6:	b09e      	sub	sp, #120	; 0x78
 800a1b8:	ab23      	add	r3, sp, #140	; 0x8c
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1c0:	9303      	str	r3, [sp, #12]
 800a1c2:	a805      	add	r0, sp, #20
 800a1c4:	f000 f8ee 	bl	800a3a4 <_ZN8touchgfx12TextProviderC1Ev>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ce:	4798      	blx	r3
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	4798      	blx	r3
 800a1da:	4633      	mov	r3, r6
 800a1dc:	4629      	mov	r1, r5
 800a1de:	9000      	str	r0, [sp, #0]
 800a1e0:	9a03      	ldr	r2, [sp, #12]
 800a1e2:	a805      	add	r0, sp, #20
 800a1e4:	ad1e      	add	r5, sp, #120	; 0x78
 800a1e6:	f000 f930 	bl	800a44a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	f845 1d68 	str.w	r1, [r5, #-104]!
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	462b      	mov	r3, r5
 800a1f4:	a805      	add	r0, sp, #20
 800a1f6:	f000 fc19 	bl	800aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800a1fa:	f647 76ff 	movw	r6, #32767	; 0x7fff
 800a1fe:	b1d8      	cbz	r0, 800a238 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800a200:	280a      	cmp	r0, #10
 800a202:	d012      	beq.n	800a22a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800a204:	9804      	ldr	r0, [sp, #16]
 800a206:	b180      	cbz	r0, 800a22a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800a208:	7b47      	ldrb	r7, [r0, #13]
 800a20a:	88e2      	ldrh	r2, [r4, #6]
 800a20c:	00fb      	lsls	r3, r7, #3
 800a20e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800a212:	7a03      	ldrb	r3, [r0, #8]
 800a214:	430b      	orrs	r3, r1
 800a216:	0679      	lsls	r1, r7, #25
 800a218:	bf44      	itt	mi
 800a21a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a21e:	b21b      	sxthmi	r3, r3
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	b21b      	sxth	r3, r3
 800a224:	429e      	cmp	r6, r3
 800a226:	bfa8      	it	ge
 800a228:	461e      	movge	r6, r3
 800a22a:	462b      	mov	r3, r5
 800a22c:	4622      	mov	r2, r4
 800a22e:	2100      	movs	r1, #0
 800a230:	a805      	add	r0, sp, #20
 800a232:	f000 fbfb 	bl	800aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800a236:	e7e2      	b.n	800a1fe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800a238:	4630      	mov	r0, r6
 800a23a:	b01e      	add	sp, #120	; 0x78
 800a23c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a240:	b003      	add	sp, #12
 800a242:	4770      	bx	lr

0800a244 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800a244:	b530      	push	{r4, r5, lr}
 800a246:	8083      	strh	r3, [r0, #4]
 800a248:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a24c:	80c3      	strh	r3, [r0, #6]
 800a24e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a252:	7203      	strb	r3, [r0, #8]
 800a254:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a258:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800a25c:	7243      	strb	r3, [r0, #9]
 800a25e:	7a83      	ldrb	r3, [r0, #10]
 800a260:	6141      	str	r1, [r0, #20]
 800a262:	f365 0306 	bfi	r3, r5, #0, #7
 800a266:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800a26a:	8302      	strh	r2, [r0, #24]
 800a26c:	f365 13c7 	bfi	r3, r5, #7, #1
 800a270:	7283      	strb	r3, [r0, #10]
 800a272:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800a276:	72c3      	strb	r3, [r0, #11]
 800a278:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a27c:	7303      	strb	r3, [r0, #12]
 800a27e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800a282:	81c3      	strh	r3, [r0, #14]
 800a284:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800a288:	8203      	strh	r3, [r0, #16]
 800a28a:	4b01      	ldr	r3, [pc, #4]	; (800a290 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800a28c:	6003      	str	r3, [r0, #0]
 800a28e:	bd30      	pop	{r4, r5, pc}
 800a290:	0800f014 	.word	0x0800f014

0800a294 <_ZNK8touchgfx9ConstFont4findEt>:
 800a294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a296:	6944      	ldr	r4, [r0, #20]
 800a298:	b3bc      	cbz	r4, 800a30a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800a29a:	88a3      	ldrh	r3, [r4, #4]
 800a29c:	8b02      	ldrh	r2, [r0, #24]
 800a29e:	1acb      	subs	r3, r1, r3
 800a2a0:	f102 32ff 	add.w	r2, r2, #4294967295
 800a2a4:	d431      	bmi.n	800a30a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	dd0c      	ble.n	800a2c4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800a2aa:	230e      	movs	r3, #14
 800a2ac:	fb03 4302 	mla	r3, r3, r2, r4
 800a2b0:	889b      	ldrh	r3, [r3, #4]
 800a2b2:	1a5b      	subs	r3, r3, r1
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	db27      	blt.n	800a30a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	bfbc      	itt	lt
 800a2be:	2302      	movlt	r3, #2
 800a2c0:	fb92 f3f3 	sdivlt	r3, r2, r3
 800a2c4:	2500      	movs	r5, #0
 800a2c6:	260e      	movs	r6, #14
 800a2c8:	4295      	cmp	r5, r2
 800a2ca:	dc1e      	bgt.n	800a30a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800a2cc:	fb06 4003 	mla	r0, r6, r3, r4
 800a2d0:	8887      	ldrh	r7, [r0, #4]
 800a2d2:	42b9      	cmp	r1, r7
 800a2d4:	d01a      	beq.n	800a30c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800a2d6:	d20d      	bcs.n	800a2f4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800a2d8:	1e5a      	subs	r2, r3, #1
 800a2da:	4295      	cmp	r5, r2
 800a2dc:	dc15      	bgt.n	800a30a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800a2de:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800a2e2:	1a5b      	subs	r3, r3, r1
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	db0f      	blt.n	800a30a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800a2ea:	429d      	cmp	r5, r3
 800a2ec:	ddec      	ble.n	800a2c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800a2ee:	1953      	adds	r3, r2, r5
 800a2f0:	105b      	asrs	r3, r3, #1
 800a2f2:	e7e9      	b.n	800a2c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800a2f4:	1c5d      	adds	r5, r3, #1
 800a2f6:	42aa      	cmp	r2, r5
 800a2f8:	db07      	blt.n	800a30a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800a2fa:	8a43      	ldrh	r3, [r0, #18]
 800a2fc:	1acb      	subs	r3, r1, r3
 800a2fe:	442b      	add	r3, r5
 800a300:	429d      	cmp	r5, r3
 800a302:	dc02      	bgt.n	800a30a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800a304:	429a      	cmp	r2, r3
 800a306:	dadf      	bge.n	800a2c8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800a308:	e7f1      	b.n	800a2ee <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800a30a:	2000      	movs	r0, #0
 800a30c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a30e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800a30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a310:	4604      	mov	r4, r0
 800a312:	4617      	mov	r7, r2
 800a314:	461e      	mov	r6, r3
 800a316:	b911      	cbnz	r1, 800a31e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800a318:	2500      	movs	r5, #0
 800a31a:	4628      	mov	r0, r5
 800a31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a31e:	290a      	cmp	r1, #10
 800a320:	d0fa      	beq.n	800a318 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800a322:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800a326:	4291      	cmp	r1, r2
 800a328:	d0f6      	beq.n	800a318 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800a32a:	f242 020b 	movw	r2, #8203	; 0x200b
 800a32e:	4291      	cmp	r1, r2
 800a330:	d0f2      	beq.n	800a318 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800a332:	f7ff ffaf 	bl	800a294 <_ZNK8touchgfx9ConstFont4findEt>
 800a336:	4605      	mov	r5, r0
 800a338:	b950      	cbnz	r0, 800a350 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	4620      	mov	r0, r4
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	4798      	blx	r3
 800a342:	4601      	mov	r1, r0
 800a344:	4620      	mov	r0, r4
 800a346:	f7ff ffa5 	bl	800a294 <_ZNK8touchgfx9ConstFont4findEt>
 800a34a:	4605      	mov	r5, r0
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d0e3      	beq.n	800a318 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	4629      	mov	r1, r5
 800a354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a356:	4620      	mov	r0, r4
 800a358:	4798      	blx	r3
 800a35a:	6038      	str	r0, [r7, #0]
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	4620      	mov	r0, r4
 800a360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a362:	4798      	blx	r3
 800a364:	7030      	strb	r0, [r6, #0]
 800a366:	e7d8      	b.n	800a31a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800a368 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800a368:	2000      	movs	r0, #0
 800a36a:	4770      	bx	lr

0800a36c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800a36c:	2001      	movs	r0, #1
 800a36e:	4770      	bx	lr

0800a370 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800a370:	2002      	movs	r0, #2
 800a372:	4770      	bx	lr

0800a374 <_ZN8touchgfx12GestureEventD1Ev>:
 800a374:	4770      	bx	lr

0800a376 <_ZN8touchgfx9DragEventD1Ev>:
 800a376:	4770      	bx	lr

0800a378 <_ZN8touchgfx10ClickEventD1Ev>:
 800a378:	4770      	bx	lr

0800a37a <_ZN8touchgfx10ClickEventD0Ev>:
 800a37a:	b510      	push	{r4, lr}
 800a37c:	210c      	movs	r1, #12
 800a37e:	4604      	mov	r4, r0
 800a380:	f003 f8ae 	bl	800d4e0 <_ZdlPvj>
 800a384:	4620      	mov	r0, r4
 800a386:	bd10      	pop	{r4, pc}

0800a388 <_ZN8touchgfx9DragEventD0Ev>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	2110      	movs	r1, #16
 800a38c:	4604      	mov	r4, r0
 800a38e:	f003 f8a7 	bl	800d4e0 <_ZdlPvj>
 800a392:	4620      	mov	r0, r4
 800a394:	bd10      	pop	{r4, pc}

0800a396 <_ZN8touchgfx12GestureEventD0Ev>:
 800a396:	b510      	push	{r4, lr}
 800a398:	210c      	movs	r1, #12
 800a39a:	4604      	mov	r4, r0
 800a39c:	f003 f8a0 	bl	800d4e0 <_ZdlPvj>
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	bd10      	pop	{r4, pc}

0800a3a4 <_ZN8touchgfx12TextProviderC1Ev>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	2500      	movs	r5, #0
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	e9c0 5500 	strd	r5, r5, [r0]
 800a3b0:	7403      	strb	r3, [r0, #16]
 800a3b2:	6145      	str	r5, [r0, #20]
 800a3b4:	7605      	strb	r5, [r0, #24]
 800a3b6:	83c5      	strh	r5, [r0, #30]
 800a3b8:	8405      	strh	r5, [r0, #32]
 800a3ba:	86c5      	strh	r5, [r0, #54]	; 0x36
 800a3bc:	8705      	strh	r5, [r0, #56]	; 0x38
 800a3be:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800a3c0:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800a3c4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800a3c8:	220e      	movs	r2, #14
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	304c      	adds	r0, #76	; 0x4c
 800a3ce:	f003 faac 	bl	800d92a <memset>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800a3da:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800a3de:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800a3e2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800a3e6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800a3ea:	f7f7 fed5 	bl	8002198 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	bd38      	pop	{r3, r4, r5, pc}

0800a3f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800a3f2:	b530      	push	{r4, r5, lr}
 800a3f4:	2500      	movs	r5, #0
 800a3f6:	2401      	movs	r4, #1
 800a3f8:	6843      	ldr	r3, [r0, #4]
 800a3fa:	b913      	cbnz	r3, 800a402 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800a3fc:	6803      	ldr	r3, [r0, #0]
 800a3fe:	b313      	cbz	r3, 800a446 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800a400:	6043      	str	r3, [r0, #4]
 800a402:	7e03      	ldrb	r3, [r0, #24]
 800a404:	b143      	cbz	r3, 800a418 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800a406:	6943      	ldr	r3, [r0, #20]
 800a408:	b12b      	cbz	r3, 800a416 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800a40a:	881a      	ldrh	r2, [r3, #0]
 800a40c:	b11a      	cbz	r2, 800a416 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800a40e:	1c9a      	adds	r2, r3, #2
 800a410:	6142      	str	r2, [r0, #20]
 800a412:	8818      	ldrh	r0, [r3, #0]
 800a414:	bd30      	pop	{r4, r5, pc}
 800a416:	7605      	strb	r5, [r0, #24]
 800a418:	6843      	ldr	r3, [r0, #4]
 800a41a:	8819      	ldrh	r1, [r3, #0]
 800a41c:	b199      	cbz	r1, 800a446 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800a41e:	1c9a      	adds	r2, r3, #2
 800a420:	2902      	cmp	r1, #2
 800a422:	6042      	str	r2, [r0, #4]
 800a424:	d1f5      	bne.n	800a412 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800a426:	7c03      	ldrb	r3, [r0, #16]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d8e5      	bhi.n	800a3f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800a42c:	1c5a      	adds	r2, r3, #1
 800a42e:	3302      	adds	r3, #2
 800a430:	7402      	strb	r2, [r0, #16]
 800a432:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a436:	6143      	str	r3, [r0, #20]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0dd      	beq.n	800a3f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0da      	beq.n	800a3f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800a442:	7604      	strb	r4, [r0, #24]
 800a444:	e7d8      	b.n	800a3f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800a446:	2000      	movs	r0, #0
 800a448:	e7e4      	b.n	800a414 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800a44a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800a44a:	b430      	push	{r4, r5}
 800a44c:	6001      	str	r1, [r0, #0]
 800a44e:	2100      	movs	r1, #0
 800a450:	6041      	str	r1, [r0, #4]
 800a452:	6815      	ldr	r5, [r2, #0]
 800a454:	6085      	str	r5, [r0, #8]
 800a456:	6852      	ldr	r2, [r2, #4]
 800a458:	6443      	str	r3, [r0, #68]	; 0x44
 800a45a:	9b02      	ldr	r3, [sp, #8]
 800a45c:	60c2      	str	r2, [r0, #12]
 800a45e:	7401      	strb	r1, [r0, #16]
 800a460:	6141      	str	r1, [r0, #20]
 800a462:	7601      	strb	r1, [r0, #24]
 800a464:	8701      	strh	r1, [r0, #56]	; 0x38
 800a466:	8401      	strh	r1, [r0, #32]
 800a468:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800a46c:	6483      	str	r3, [r0, #72]	; 0x48
 800a46e:	bc30      	pop	{r4, r5}
 800a470:	f7f7 be92 	b.w	8002198 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800a474 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800a474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a476:	4605      	mov	r5, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	b1e9      	cbz	r1, 800a4b8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800a47c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800a480:	460b      	mov	r3, r1
 800a482:	f101 0708 	add.w	r7, r1, #8
 800a486:	4622      	mov	r2, r4
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	6859      	ldr	r1, [r3, #4]
 800a48c:	4626      	mov	r6, r4
 800a48e:	c603      	stmia	r6!, {r0, r1}
 800a490:	3308      	adds	r3, #8
 800a492:	42bb      	cmp	r3, r7
 800a494:	4634      	mov	r4, r6
 800a496:	d1f7      	bne.n	800a488 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800a498:	6818      	ldr	r0, [r3, #0]
 800a49a:	6030      	str	r0, [r6, #0]
 800a49c:	889b      	ldrh	r3, [r3, #4]
 800a49e:	80b3      	strh	r3, [r6, #4]
 800a4a0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800a4a4:	015b      	lsls	r3, r3, #5
 800a4a6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800a4aa:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	425b      	negs	r3, r3
 800a4b2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4ba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800a4ba:	b538      	push	{r3, r4, r5, lr}
 800a4bc:	460c      	mov	r4, r1
 800a4be:	6811      	ldr	r1, [r2, #0]
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	68cd      	ldr	r5, [r1, #12]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	47a8      	blx	r5
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	bf08      	it	eq
 800a4cc:	4620      	moveq	r0, r4
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}

0800a4d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	4615      	mov	r5, r2
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	b93a      	cbnz	r2, 800a4ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800a4da:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800a4de:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800a4e2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ea:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800a4ee:	8893      	ldrh	r3, [r2, #4]
 800a4f0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800a4f4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800a4f8:	79ee      	ldrb	r6, [r5, #7]
 800a4fa:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800a4fe:	4316      	orrs	r6, r2
 800a500:	19da      	adds	r2, r3, r7
 800a502:	b291      	uxth	r1, r2
 800a504:	291d      	cmp	r1, #29
 800a506:	b2b7      	uxth	r7, r6
 800a508:	d87a      	bhi.n	800a600 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 800a50a:	2201      	movs	r2, #1
 800a50c:	408a      	lsls	r2, r1
 800a50e:	4975      	ldr	r1, [pc, #468]	; (800a6e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800a510:	420a      	tst	r2, r1
 800a512:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800a516:	d12d      	bne.n	800a574 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800a518:	f412 7f60 	tst.w	r2, #896	; 0x380
 800a51c:	d070      	beq.n	800a600 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 800a51e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800a522:	462b      	mov	r3, r5
 800a524:	f105 0e08 	add.w	lr, r5, #8
 800a528:	4615      	mov	r5, r2
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	6859      	ldr	r1, [r3, #4]
 800a52e:	4694      	mov	ip, r2
 800a530:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800a534:	3308      	adds	r3, #8
 800a536:	4573      	cmp	r3, lr
 800a538:	4662      	mov	r2, ip
 800a53a:	d1f6      	bne.n	800a52a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	f8cc 0000 	str.w	r0, [ip]
 800a542:	889b      	ldrh	r3, [r3, #4]
 800a544:	f8ac 3004 	strh.w	r3, [ip, #4]
 800a548:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a54c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800a550:	b2b3      	uxth	r3, r6
 800a552:	1aca      	subs	r2, r1, r3
 800a554:	b292      	uxth	r2, r2
 800a556:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800a55a:	10d2      	asrs	r2, r2, #3
 800a55c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800a560:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800a564:	4302      	orrs	r2, r0
 800a566:	1bcf      	subs	r7, r1, r7
 800a568:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800a56c:	1afb      	subs	r3, r7, r3
 800a56e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800a572:	e7b8      	b.n	800a4e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800a574:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a576:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a57a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800a57c:	f640 6333 	movw	r3, #3635	; 0xe33
 800a580:	4299      	cmp	r1, r3
 800a582:	d110      	bne.n	800a5a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800a584:	6803      	ldr	r3, [r0, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	4798      	blx	r3
 800a58a:	7b41      	ldrb	r1, [r0, #13]
 800a58c:	00cb      	lsls	r3, r1, #3
 800a58e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a592:	7a03      	ldrb	r3, [r0, #8]
 800a594:	0648      	lsls	r0, r1, #25
 800a596:	ea43 0302 	orr.w	r3, r3, r2
 800a59a:	bf44      	itt	mi
 800a59c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a5a0:	b21b      	sxthmi	r3, r3
 800a5a2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a5a6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800a5aa:	443b      	add	r3, r7
 800a5ac:	4433      	add	r3, r6
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800a5b4:	462a      	mov	r2, r5
 800a5b6:	f105 0c08 	add.w	ip, r5, #8
 800a5ba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a5be:	4635      	mov	r5, r6
 800a5c0:	6810      	ldr	r0, [r2, #0]
 800a5c2:	6851      	ldr	r1, [r2, #4]
 800a5c4:	4637      	mov	r7, r6
 800a5c6:	c703      	stmia	r7!, {r0, r1}
 800a5c8:	3208      	adds	r2, #8
 800a5ca:	4562      	cmp	r2, ip
 800a5cc:	463e      	mov	r6, r7
 800a5ce:	d1f7      	bne.n	800a5c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800a5d0:	6810      	ldr	r0, [r2, #0]
 800a5d2:	6038      	str	r0, [r7, #0]
 800a5d4:	8892      	ldrh	r2, [r2, #4]
 800a5d6:	80ba      	strh	r2, [r7, #4]
 800a5d8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800a5dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800a5e0:	10db      	asrs	r3, r3, #3
 800a5e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a5e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800a5f0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800a5f4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800a5f8:	1a9b      	subs	r3, r3, r2
 800a5fa:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800a5fe:	e772      	b.n	800a4e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800a600:	f023 0204 	bic.w	r2, r3, #4
 800a604:	f640 611b 	movw	r1, #3611	; 0xe1b
 800a608:	428a      	cmp	r2, r1
 800a60a:	d003      	beq.n	800a614 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800a60c:	f640 621d 	movw	r2, #3613	; 0xe1d
 800a610:	4293      	cmp	r3, r2
 800a612:	d120      	bne.n	800a656 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 800a614:	3b01      	subs	r3, #1
 800a616:	4602      	mov	r2, r0
 800a618:	b29b      	uxth	r3, r3
 800a61a:	4629      	mov	r1, r5
 800a61c:	4620      	mov	r0, r4
 800a61e:	f7ff ff4c 	bl	800a4ba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800a622:	7b41      	ldrb	r1, [r0, #13]
 800a624:	00cb      	lsls	r3, r1, #3
 800a626:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a62a:	7a03      	ldrb	r3, [r0, #8]
 800a62c:	0649      	lsls	r1, r1, #25
 800a62e:	ea43 0302 	orr.w	r3, r3, r2
 800a632:	bf44      	itt	mi
 800a634:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a638:	b21b      	sxthmi	r3, r3
 800a63a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a63e:	7b6b      	ldrb	r3, [r5, #13]
 800a640:	7aaa      	ldrb	r2, [r5, #10]
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a648:	4313      	orrs	r3, r2
 800a64a:	115a      	asrs	r2, r3, #5
 800a64c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800a650:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800a654:	e036      	b.n	800a6c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800a656:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800a65a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800a65e:	7a2a      	ldrb	r2, [r5, #8]
 800a660:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800a664:	ea42 0201 	orr.w	r2, r2, r1
 800a668:	bf1c      	itt	ne
 800a66a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800a66e:	b212      	sxthne	r2, r2
 800a670:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800a674:	f640 6109 	movw	r1, #3593	; 0xe09
 800a678:	f023 0210 	bic.w	r2, r3, #16
 800a67c:	428a      	cmp	r2, r1
 800a67e:	d003      	beq.n	800a688 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 800a680:	f640 6213 	movw	r2, #3603	; 0xe13
 800a684:	4293      	cmp	r3, r2
 800a686:	d12a      	bne.n	800a6de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800a688:	7b6e      	ldrb	r6, [r5, #13]
 800a68a:	0076      	lsls	r6, r6, #1
 800a68c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800a690:	7aae      	ldrb	r6, [r5, #10]
 800a692:	4316      	orrs	r6, r2
 800a694:	f640 6213 	movw	r2, #3603	; 0xe13
 800a698:	4293      	cmp	r3, r2
 800a69a:	bf18      	it	ne
 800a69c:	f103 33ff 	addne.w	r3, r3, #4294967295
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	bf14      	ite	ne
 800a6a4:	b29b      	uxthne	r3, r3
 800a6a6:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f7ff ff04 	bl	800a4ba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800a6b2:	7b43      	ldrb	r3, [r0, #13]
 800a6b4:	7a82      	ldrb	r2, [r0, #10]
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	1af6      	subs	r6, r6, r3
 800a6c0:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800a6c4:	7b69      	ldrb	r1, [r5, #13]
 800a6c6:	00cb      	lsls	r3, r1, #3
 800a6c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a6cc:	7a2b      	ldrb	r3, [r5, #8]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	064a      	lsls	r2, r1, #25
 800a6d2:	bf44      	itt	mi
 800a6d4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a6d8:	b21b      	sxthmi	r3, r3
 800a6da:	1bdb      	subs	r3, r3, r7
 800a6dc:	e747      	b.n	800a56e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e7b6      	b.n	800a650 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 800a6e2:	bf00      	nop
 800a6e4:	3fc00079 	.word	0x3fc00079

0800a6e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800a6e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	b942      	cbnz	r2, 800a702 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800a6f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6f4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800a6f8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800a6fc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800a700:	e047      	b.n	800a792 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800a702:	7b51      	ldrb	r1, [r2, #13]
 800a704:	8893      	ldrh	r3, [r2, #4]
 800a706:	010d      	lsls	r5, r1, #4
 800a708:	f405 7080 	and.w	r0, r5, #256	; 0x100
 800a70c:	79d5      	ldrb	r5, [r2, #7]
 800a70e:	4305      	orrs	r5, r0
 800a710:	2d04      	cmp	r5, #4
 800a712:	bfcc      	ite	gt
 800a714:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800a718:	f04f 0e01 	movle.w	lr, #1
 800a71c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800a720:	f200 80ab 	bhi.w	800a87a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800a724:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800a728:	4283      	cmp	r3, r0
 800a72a:	d216      	bcs.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a72c:	f240 605b 	movw	r0, #1627	; 0x65b
 800a730:	4283      	cmp	r3, r0
 800a732:	d859      	bhi.n	800a7e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800a734:	f240 6057 	movw	r0, #1623	; 0x657
 800a738:	4283      	cmp	r3, r0
 800a73a:	d20e      	bcs.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a73c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800a740:	d24a      	bcs.n	800a7d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800a742:	f240 604e 	movw	r0, #1614	; 0x64e
 800a746:	4283      	cmp	r3, r0
 800a748:	d207      	bcs.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a74a:	f240 601a 	movw	r0, #1562	; 0x61a
 800a74e:	4283      	cmp	r3, r0
 800a750:	d02a      	beq.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a752:	d821      	bhi.n	800a798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800a754:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800a758:	d35b      	bcc.n	800a812 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800a75a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800a75e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a762:	f040 80d0 	bne.w	800a906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800a766:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800a76a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800a76e:	f040 80ca 	bne.w	800a906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800a772:	00cb      	lsls	r3, r1, #3
 800a774:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800a778:	7a13      	ldrb	r3, [r2, #8]
 800a77a:	0649      	lsls	r1, r1, #25
 800a77c:	ea43 0300 	orr.w	r3, r3, r0
 800a780:	bf44      	itt	mi
 800a782:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a786:	b21b      	sxthmi	r3, r3
 800a788:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a78c:	1b5d      	subs	r5, r3, r5
 800a78e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800a792:	4610      	mov	r0, r2
 800a794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a798:	f240 604b 	movw	r0, #1611	; 0x64b
 800a79c:	4283      	cmp	r3, r0
 800a79e:	d338      	bcc.n	800a812 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800a7a0:	f240 604c 	movw	r0, #1612	; 0x64c
 800a7a4:	4283      	cmp	r3, r0
 800a7a6:	d9d8      	bls.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a7a8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800a7ac:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800a7b0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800a7b4:	f040 80f2 	bne.w	800a99c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800a7b8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a7bc:	f040 80ee 	bne.w	800a99c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800a7c0:	00cb      	lsls	r3, r1, #3
 800a7c2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800a7c6:	7a13      	ldrb	r3, [r2, #8]
 800a7c8:	064e      	lsls	r6, r1, #25
 800a7ca:	ea43 0300 	orr.w	r3, r3, r0
 800a7ce:	bf44      	itt	mi
 800a7d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a7d4:	b21b      	sxthmi	r3, r3
 800a7d6:	e7d9      	b.n	800a78c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800a7d8:	f240 6054 	movw	r0, #1620	; 0x654
 800a7dc:	4283      	cmp	r3, r0
 800a7de:	d8e3      	bhi.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a7e0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800a7e4:	d9e0      	bls.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a7e6:	e7b8      	b.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a7e8:	f240 6074 	movw	r0, #1652	; 0x674
 800a7ec:	4283      	cmp	r3, r0
 800a7ee:	d0b4      	beq.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a7f0:	d82d      	bhi.n	800a84e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800a7f2:	f240 605e 	movw	r0, #1630	; 0x65e
 800a7f6:	4283      	cmp	r3, r0
 800a7f8:	d804      	bhi.n	800a804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800a7fa:	f240 605d 	movw	r0, #1629	; 0x65d
 800a7fe:	4283      	cmp	r3, r0
 800a800:	d3d2      	bcc.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a802:	e7aa      	b.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a804:	f240 605f 	movw	r0, #1631	; 0x65f
 800a808:	4283      	cmp	r3, r0
 800a80a:	d0cd      	beq.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a80c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800a810:	d0a3      	beq.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a812:	00cb      	lsls	r3, r1, #3
 800a814:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800a818:	7a13      	ldrb	r3, [r2, #8]
 800a81a:	0649      	lsls	r1, r1, #25
 800a81c:	ea43 0300 	orr.w	r3, r3, r0
 800a820:	bf44      	itt	mi
 800a822:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a826:	b21b      	sxthmi	r3, r3
 800a828:	1b5d      	subs	r5, r3, r5
 800a82a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a82e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800a832:	7b53      	ldrb	r3, [r2, #13]
 800a834:	015b      	lsls	r3, r3, #5
 800a836:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800a83a:	7993      	ldrb	r3, [r2, #6]
 800a83c:	430b      	orrs	r3, r1
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	2105      	movs	r1, #5
 800a842:	fb93 f3f1 	sdiv	r3, r3, r1
 800a846:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800a84a:	440b      	add	r3, r1
 800a84c:	e756      	b.n	800a6fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800a84e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800a852:	4283      	cmp	r3, r0
 800a854:	d809      	bhi.n	800a86a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800a856:	f240 60df 	movw	r0, #1759	; 0x6df
 800a85a:	4283      	cmp	r3, r0
 800a85c:	f4bf af7d 	bcs.w	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a860:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800a864:	2b05      	cmp	r3, #5
 800a866:	d8d4      	bhi.n	800a812 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800a868:	e777      	b.n	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a86a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800a86e:	4283      	cmp	r3, r0
 800a870:	d09a      	beq.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a872:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800a876:	4283      	cmp	r3, r0
 800a878:	e7ca      	b.n	800a810 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800a87a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800a87e:	d22b      	bcs.n	800a8d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800a880:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800a884:	4283      	cmp	r3, r0
 800a886:	d28f      	bcs.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a888:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a88c:	4283      	cmp	r3, r0
 800a88e:	d816      	bhi.n	800a8be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800a890:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800a894:	4283      	cmp	r3, r0
 800a896:	f4bf af60 	bcs.w	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a89a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800a89e:	4283      	cmp	r3, r0
 800a8a0:	d80a      	bhi.n	800a8b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800a8a2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800a8a6:	4283      	cmp	r3, r0
 800a8a8:	f4bf af57 	bcs.w	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a8ac:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800a8b0:	4283      	cmp	r3, r0
 800a8b2:	f43f af79 	beq.w	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a8b6:	e7ac      	b.n	800a812 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800a8b8:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800a8bc:	e7f8      	b.n	800a8b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800a8be:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800a8c2:	4283      	cmp	r3, r0
 800a8c4:	d802      	bhi.n	800a8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800a8c6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a8ca:	e798      	b.n	800a7fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800a8cc:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800a8d0:	4283      	cmp	r3, r0
 800a8d2:	f47f af42 	bne.w	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a8d6:	e767      	b.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a8d8:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800a8dc:	4283      	cmp	r3, r0
 800a8de:	f43f af63 	beq.w	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a8e2:	d802      	bhi.n	800a8ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800a8e4:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800a8e8:	e7f2      	b.n	800a8d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800a8ea:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800a8ee:	4283      	cmp	r3, r0
 800a8f0:	d805      	bhi.n	800a8fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800a8f2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800a8f6:	4283      	cmp	r3, r0
 800a8f8:	f4ff af2f 	bcc.w	800a75a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a8fc:	e754      	b.n	800a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a8fe:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800a902:	4283      	cmp	r3, r0
 800a904:	e7af      	b.n	800a866 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800a906:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800a90a:	4617      	mov	r7, r2
 800a90c:	f102 0808 	add.w	r8, r2, #8
 800a910:	4666      	mov	r6, ip
 800a912:	6838      	ldr	r0, [r7, #0]
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	46e6      	mov	lr, ip
 800a918:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800a91c:	3708      	adds	r7, #8
 800a91e:	4547      	cmp	r7, r8
 800a920:	46f4      	mov	ip, lr
 800a922:	d1f6      	bne.n	800a912 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800a924:	6838      	ldr	r0, [r7, #0]
 800a926:	f8ce 0000 	str.w	r0, [lr]
 800a92a:	88b9      	ldrh	r1, [r7, #4]
 800a92c:	f8ae 1004 	strh.w	r1, [lr, #4]
 800a930:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800a934:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800a938:	d009      	beq.n	800a94e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800a93a:	7b51      	ldrb	r1, [r2, #13]
 800a93c:	7992      	ldrb	r2, [r2, #6]
 800a93e:	0149      	lsls	r1, r1, #5
 800a940:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800a944:	4311      	orrs	r1, r2
 800a946:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800a94a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800a94e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a952:	b2ad      	uxth	r5, r5
 800a954:	d00d      	beq.n	800a972 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800a956:	442b      	add	r3, r5
 800a958:	b29b      	uxth	r3, r3
 800a95a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800a95e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800a962:	10db      	asrs	r3, r3, #3
 800a964:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a968:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a96c:	4313      	orrs	r3, r2
 800a96e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800a972:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800a976:	00cb      	lsls	r3, r1, #3
 800a978:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a97c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800a980:	064f      	lsls	r7, r1, #25
 800a982:	ea43 0302 	orr.w	r3, r3, r2
 800a986:	bf44      	itt	mi
 800a988:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a98c:	b21b      	sxthmi	r3, r3
 800a98e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a992:	1b5b      	subs	r3, r3, r5
 800a994:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800a998:	4632      	mov	r2, r6
 800a99a:	e6fa      	b.n	800a792 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800a99c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800a9a0:	4617      	mov	r7, r2
 800a9a2:	f102 0908 	add.w	r9, r2, #8
 800a9a6:	4666      	mov	r6, ip
 800a9a8:	6838      	ldr	r0, [r7, #0]
 800a9aa:	6879      	ldr	r1, [r7, #4]
 800a9ac:	46e0      	mov	r8, ip
 800a9ae:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	454f      	cmp	r7, r9
 800a9b6:	46c4      	mov	ip, r8
 800a9b8:	d1f6      	bne.n	800a9a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800a9ba:	6838      	ldr	r0, [r7, #0]
 800a9bc:	f8c8 0000 	str.w	r0, [r8]
 800a9c0:	88b9      	ldrh	r1, [r7, #4]
 800a9c2:	f8a8 1004 	strh.w	r1, [r8, #4]
 800a9c6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800a9ca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800a9ce:	d009      	beq.n	800a9e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800a9d0:	7b51      	ldrb	r1, [r2, #13]
 800a9d2:	7992      	ldrb	r2, [r2, #6]
 800a9d4:	0149      	lsls	r1, r1, #5
 800a9d6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800a9da:	4311      	orrs	r1, r2
 800a9dc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800a9e0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800a9e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a9e8:	d00e      	beq.n	800aa08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800a9ea:	eba3 030e 	sub.w	r3, r3, lr
 800a9ee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800a9f8:	10db      	asrs	r3, r3, #3
 800a9fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800aa02:	4313      	orrs	r3, r2
 800aa04:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800aa08:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800aa0c:	00cb      	lsls	r3, r1, #3
 800aa0e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800aa12:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800aa16:	0648      	lsls	r0, r1, #25
 800aa18:	ea43 0302 	orr.w	r3, r3, r2
 800aa1c:	bf44      	itt	mi
 800aa1e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800aa22:	b21b      	sxthmi	r3, r3
 800aa24:	1b5d      	subs	r5, r3, r5
 800aa26:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800aa2a:	e7b5      	b.n	800a998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800aa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa30:	461e      	mov	r6, r3
 800aa32:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800aa34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4617      	mov	r7, r2
 800aa3c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800aa40:	f7f7 fb68 	bl	8002114 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800aa44:	4605      	mov	r5, r0
 800aa46:	b918      	cbnz	r0, 800aa50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800aa48:	6030      	str	r0, [r6, #0]
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	4601      	mov	r1, r0
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	4638      	mov	r0, r7
 800aa58:	4798      	blx	r3
 800aa5a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800aa5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa62:	4602      	mov	r2, r0
 800aa64:	6030      	str	r0, [r6, #0]
 800aa66:	d213      	bcs.n	800aa90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800aa68:	4643      	mov	r3, r8
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f7ff fe3b 	bl	800a6e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800aa72:	6030      	str	r0, [r6, #0]
 800aa74:	6833      	ldr	r3, [r6, #0]
 800aa76:	b143      	cbz	r3, 800aa8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800aa78:	7b5a      	ldrb	r2, [r3, #13]
 800aa7a:	7a9b      	ldrb	r3, [r3, #10]
 800aa7c:	0052      	lsls	r2, r2, #1
 800aa7e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800aa82:	4313      	orrs	r3, r2
 800aa84:	bf0c      	ite	eq
 800aa86:	2301      	moveq	r3, #1
 800aa88:	2300      	movne	r3, #0
 800aa8a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800aa8e:	e7dc      	b.n	800aa4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800aa90:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	2b7f      	cmp	r3, #127	; 0x7f
 800aa98:	d804      	bhi.n	800aaa4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f7ff fd17 	bl	800a4d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800aaa2:	e7e6      	b.n	800aa72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800aaa4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0e3      	beq.n	800aa74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800aaac:	f640 1302 	movw	r3, #2306	; 0x902
 800aab0:	429d      	cmp	r5, r3
 800aab2:	d1df      	bne.n	800aa74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800aab4:	4601      	mov	r1, r0
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7ff fcdc 	bl	800a474 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800aabc:	e7d9      	b.n	800aa72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800aabe <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800aabe:	b510      	push	{r4, lr}
 800aac0:	4604      	mov	r4, r0
 800aac2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800aac6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800aac8:	b1f1      	cbz	r1, 800ab08 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800aaca:	2b0a      	cmp	r3, #10
 800aacc:	d02f      	beq.n	800ab2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800aace:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800aad0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800aad4:	3901      	subs	r1, #1
 800aad6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800aad8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800aadc:	1c51      	adds	r1, r2, #1
 800aade:	b289      	uxth	r1, r1
 800aae0:	2901      	cmp	r1, #1
 800aae2:	bf84      	itt	hi
 800aae4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aae8:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800aaea:	f103 0201 	add.w	r2, r3, #1
 800aaee:	8722      	strh	r2, [r4, #56]	; 0x38
 800aaf0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800aaf2:	bf98      	it	ls
 800aaf4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800aaf6:	4413      	add	r3, r2
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	2b09      	cmp	r3, #9
 800aafc:	bf88      	it	hi
 800aafe:	3b0a      	subhi	r3, #10
 800ab00:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ab04:	8458      	strh	r0, [r3, #34]	; 0x22
 800ab06:	e7dc      	b.n	800aac2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800ab08:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800ab0a:	2b0a      	cmp	r3, #10
 800ab0c:	d00f      	beq.n	800ab2e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f7ff fc6f 	bl	800a3f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800ab14:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800ab16:	1c5a      	adds	r2, r3, #1
 800ab18:	8722      	strh	r2, [r4, #56]	; 0x38
 800ab1a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800ab1c:	4413      	add	r3, r2
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	2b09      	cmp	r3, #9
 800ab22:	bf88      	it	hi
 800ab24:	3b0a      	subhi	r3, #10
 800ab26:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ab2a:	8458      	strh	r0, [r3, #34]	; 0x22
 800ab2c:	e7ec      	b.n	800ab08 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800ab2e:	bd10      	pop	{r4, pc}

0800ab30 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800ab34:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800ab38:	4604      	mov	r4, r0
 800ab3a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 800ab3c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800ab3e:	3a01      	subs	r2, #1
 800ab40:	8702      	strh	r2, [r0, #56]	; 0x38
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	b292      	uxth	r2, r2
 800ab46:	2a09      	cmp	r2, #9
 800ab48:	bf86      	itte	hi
 800ab4a:	3b09      	subhi	r3, #9
 800ab4c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800ab4e:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800ab50:	f7ff ffb5 	bl	800aabe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ab54:	8c23      	ldrh	r3, [r4, #32]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	bf9c      	itt	ls
 800ab5a:	3301      	addls	r3, #1
 800ab5c:	8423      	strhls	r3, [r4, #32]
 800ab5e:	8be3      	ldrh	r3, [r4, #30]
 800ab60:	b90b      	cbnz	r3, 800ab66 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800ab62:	2302      	movs	r3, #2
 800ab64:	83e3      	strh	r3, [r4, #30]
 800ab66:	8be3      	ldrh	r3, [r4, #30]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	83e3      	strh	r3, [r4, #30]
 800ab6e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800ab72:	4628      	mov	r0, r5
 800ab74:	8365      	strh	r5, [r4, #26]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}

0800ab78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800ab78:	428a      	cmp	r2, r1
 800ab7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 800ab80:	d931      	bls.n	800abe6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800ab82:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800ab84:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800ab88:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800ab8c:	19ee      	adds	r6, r5, r7
 800ab8e:	1a54      	subs	r4, r2, r1
 800ab90:	3e01      	subs	r6, #1
 800ab92:	fa1f fe84 	uxth.w	lr, r4
 800ab96:	b2b4      	uxth	r4, r6
 800ab98:	eba4 090e 	sub.w	r9, r4, lr
 800ab9c:	fa1f f989 	uxth.w	r9, r9
 800aba0:	2c09      	cmp	r4, #9
 800aba2:	4626      	mov	r6, r4
 800aba4:	bf88      	it	hi
 800aba6:	f1a4 060a 	subhi.w	r6, r4, #10
 800abaa:	f1bc 0f00 	cmp.w	ip, #0
 800abae:	bf08      	it	eq
 800abb0:	f04f 0c02 	moveq.w	ip, #2
 800abb4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800abb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800abbc:	fa1f fc8c 	uxth.w	ip, ip
 800abc0:	3c01      	subs	r4, #1
 800abc2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800abc6:	b2a4      	uxth	r4, r4
 800abc8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800abcc:	454c      	cmp	r4, r9
 800abce:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 800abd2:	d1e5      	bne.n	800aba0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800abd4:	eba5 050e 	sub.w	r5, r5, lr
 800abd8:	eb0e 0408 	add.w	r4, lr, r8
 800abdc:	8705      	strh	r5, [r0, #56]	; 0x38
 800abde:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800abe2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 800abe6:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800abe8:	1a64      	subs	r4, r4, r1
 800abea:	4439      	add	r1, r7
 800abec:	b289      	uxth	r1, r1
 800abee:	2909      	cmp	r1, #9
 800abf0:	bf88      	it	hi
 800abf2:	390a      	subhi	r1, #10
 800abf4:	8704      	strh	r4, [r0, #56]	; 0x38
 800abf6:	86c1      	strh	r1, [r0, #54]	; 0x36
 800abf8:	250a      	movs	r5, #10
 800abfa:	b18a      	cbz	r2, 800ac20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800abfc:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800abfe:	3a01      	subs	r2, #1
 800ac00:	b292      	uxth	r2, r2
 800ac02:	3101      	adds	r1, #1
 800ac04:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800ac08:	8701      	strh	r1, [r0, #56]	; 0x38
 800ac0a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800ac0c:	b901      	cbnz	r1, 800ac10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800ac0e:	86c5      	strh	r5, [r0, #54]	; 0x36
 800ac10:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800ac12:	3901      	subs	r1, #1
 800ac14:	b289      	uxth	r1, r1
 800ac16:	86c1      	strh	r1, [r0, #54]	; 0x36
 800ac18:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ac1c:	844c      	strh	r4, [r1, #34]	; 0x22
 800ac1e:	e7ec      	b.n	800abfa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800ac20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac24:	f7ff bf4b 	b.w	800aabe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800ac28 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	2500      	movs	r5, #0
 800ac2c:	4295      	cmp	r5, r2
 800ac2e:	d011      	beq.n	800ac54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800ac30:	8bc4      	ldrh	r4, [r0, #30]
 800ac32:	f831 6b02 	ldrh.w	r6, [r1], #2
 800ac36:	4414      	add	r4, r2
 800ac38:	3c01      	subs	r4, #1
 800ac3a:	1b64      	subs	r4, r4, r5
 800ac3c:	b2a4      	uxth	r4, r4
 800ac3e:	2c01      	cmp	r4, #1
 800ac40:	bf88      	it	hi
 800ac42:	3c02      	subhi	r4, #2
 800ac44:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ac48:	8b64      	ldrh	r4, [r4, #26]
 800ac4a:	42b4      	cmp	r4, r6
 800ac4c:	d117      	bne.n	800ac7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800ac4e:	3501      	adds	r5, #1
 800ac50:	b2ad      	uxth	r5, r5
 800ac52:	e7eb      	b.n	800ac2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800ac54:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ac58:	2400      	movs	r4, #0
 800ac5a:	4413      	add	r3, r2
 800ac5c:	b2a2      	uxth	r2, r4
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	da0f      	bge.n	800ac82 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800ac62:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800ac64:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ac68:	4432      	add	r2, r6
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	2a09      	cmp	r2, #9
 800ac6e:	bf88      	it	hi
 800ac70:	3a0a      	subhi	r2, #10
 800ac72:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ac76:	3401      	adds	r4, #1
 800ac78:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800ac7a:	42aa      	cmp	r2, r5
 800ac7c:	d0ee      	beq.n	800ac5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800ac7e:	2000      	movs	r0, #0
 800ac80:	bd70      	pop	{r4, r5, r6, pc}
 800ac82:	2001      	movs	r0, #1
 800ac84:	e7fc      	b.n	800ac80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800ac86 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800ac86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	4616      	mov	r6, r2
 800ac8e:	1c8c      	adds	r4, r1, #2
 800ac90:	8809      	ldrh	r1, [r1, #0]
 800ac92:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800ac96:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800ac9a:	42b3      	cmp	r3, r6
 800ac9c:	d124      	bne.n	800ace8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800ac9e:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800aca2:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800aca6:	f001 070f 	and.w	r7, r1, #15
 800acaa:	f8cd 8000 	str.w	r8, [sp]
 800acae:	464b      	mov	r3, r9
 800acb0:	4652      	mov	r2, sl
 800acb2:	4621      	mov	r1, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f7ff ffb7 	bl	800ac28 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800acba:	4683      	mov	fp, r0
 800acbc:	b168      	cbz	r0, 800acda <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800acbe:	eb0a 0109 	add.w	r1, sl, r9
 800acc2:	4441      	add	r1, r8
 800acc4:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800acc8:	463a      	mov	r2, r7
 800acca:	4649      	mov	r1, r9
 800accc:	4628      	mov	r0, r5
 800acce:	f7ff ff53 	bl	800ab78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800acd2:	4658      	mov	r0, fp
 800acd4:	b003      	add	sp, #12
 800acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acda:	eb07 010a 	add.w	r1, r7, sl
 800acde:	4449      	add	r1, r9
 800ace0:	4441      	add	r1, r8
 800ace2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800ace6:	e7d2      	b.n	800ac8e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800ace8:	f04f 0b00 	mov.w	fp, #0
 800acec:	e7f1      	b.n	800acd2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800acee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800acee:	b570      	push	{r4, r5, r6, lr}
 800acf0:	8810      	ldrh	r0, [r2, #0]
 800acf2:	4298      	cmp	r0, r3
 800acf4:	d817      	bhi.n	800ad26 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800acf6:	1e48      	subs	r0, r1, #1
 800acf8:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800acfc:	4298      	cmp	r0, r3
 800acfe:	d312      	bcc.n	800ad26 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800ad00:	2400      	movs	r4, #0
 800ad02:	428c      	cmp	r4, r1
 800ad04:	d20f      	bcs.n	800ad26 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800ad06:	1860      	adds	r0, r4, r1
 800ad08:	1040      	asrs	r0, r0, #1
 800ad0a:	0085      	lsls	r5, r0, #2
 800ad0c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800ad10:	42b3      	cmp	r3, r6
 800ad12:	d902      	bls.n	800ad1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800ad14:	3001      	adds	r0, #1
 800ad16:	b284      	uxth	r4, r0
 800ad18:	e7f3      	b.n	800ad02 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800ad1a:	d201      	bcs.n	800ad20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800ad1c:	b281      	uxth	r1, r0
 800ad1e:	e7f0      	b.n	800ad02 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800ad20:	442a      	add	r2, r5
 800ad22:	8850      	ldrh	r0, [r2, #2]
 800ad24:	bd70      	pop	{r4, r5, r6, pc}
 800ad26:	2000      	movs	r0, #0
 800ad28:	e7fc      	b.n	800ad24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800ad2a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800ad2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800ad30:	886f      	ldrh	r7, [r5, #2]
 800ad32:	4604      	mov	r4, r0
 800ad34:	087f      	lsrs	r7, r7, #1
 800ad36:	260b      	movs	r6, #11
 800ad38:	3e01      	subs	r6, #1
 800ad3a:	d013      	beq.n	800ad64 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800ad3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800ad3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ad42:	462a      	mov	r2, r5
 800ad44:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800ad48:	4639      	mov	r1, r7
 800ad4a:	4643      	mov	r3, r8
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f7ff ffce 	bl	800acee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800ad52:	b138      	cbz	r0, 800ad64 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800ad54:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800ad58:	4642      	mov	r2, r8
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f7ff ff93 	bl	800ac86 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d1e9      	bne.n	800ad38 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	694a      	ldr	r2, [r1, #20]
 800ad6c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800ad6e:	684b      	ldr	r3, [r1, #4]
 800ad70:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800ad72:	1b54      	subs	r4, r2, r5
 800ad74:	f000 8106 	beq.w	800af84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800ad78:	1b9b      	subs	r3, r3, r6
 800ad7a:	d003      	beq.n	800ad84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800ad7c:	4363      	muls	r3, r4
 800ad7e:	2210      	movs	r2, #16
 800ad80:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad84:	680c      	ldr	r4, [r1, #0]
 800ad86:	698a      	ldr	r2, [r1, #24]
 800ad88:	1b65      	subs	r5, r4, r5
 800ad8a:	f000 80fd 	beq.w	800af88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800ad8e:	1b92      	subs	r2, r2, r6
 800ad90:	d003      	beq.n	800ad9a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800ad92:	436a      	muls	r2, r5
 800ad94:	2410      	movs	r4, #16
 800ad96:	fb92 f2f4 	sdiv	r2, r2, r4
 800ad9a:	1a9b      	subs	r3, r3, r2
 800ad9c:	ee07 3a90 	vmov	s15, r3
 800ada0:	ed9f 4a88 	vldr	s8, [pc, #544]	; 800afc4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800ada4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ada8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adac:	ee67 7a84 	vmul.f32	s15, s15, s8
 800adb0:	460a      	mov	r2, r1
 800adb2:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800adb6:	4603      	mov	r3, r0
 800adb8:	f100 040c 	add.w	r4, r0, #12
 800adbc:	eeb1 6a43 	vneg.f32	s12, s6
 800adc0:	edd2 7a02 	vldr	s15, [r2, #8]
 800adc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800adc8:	3214      	adds	r2, #20
 800adca:	ece3 6a01 	vstmia	r3!, {s13}
 800adce:	ed52 7a02 	vldr	s15, [r2, #-8]
 800add2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800add6:	429c      	cmp	r4, r3
 800add8:	edc3 7a02 	vstr	s15, [r3, #8]
 800addc:	ed52 7a01 	vldr	s15, [r2, #-4]
 800ade0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ade4:	edc3 7a05 	vstr	s15, [r3, #20]
 800ade8:	d1ea      	bne.n	800adc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800adea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800adec:	698b      	ldr	r3, [r1, #24]
 800adee:	edd0 4a02 	vldr	s9, [r0, #8]
 800adf2:	edd0 3a00 	vldr	s7, [r0]
 800adf6:	edd0 6a01 	vldr	s13, [r0, #4]
 800adfa:	ed90 5a05 	vldr	s10, [r0, #20]
 800adfe:	ed90 2a03 	vldr	s4, [r0, #12]
 800ae02:	edd0 5a04 	vldr	s11, [r0, #16]
 800ae06:	ed90 1a07 	vldr	s2, [r0, #28]
 800ae0a:	edd0 2a06 	vldr	s5, [r0, #24]
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	ee07 3a90 	vmov	s15, r3
 800ae14:	684b      	ldr	r3, [r1, #4]
 800ae16:	1a9b      	subs	r3, r3, r2
 800ae18:	ee07 3a10 	vmov	s14, r3
 800ae1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae20:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800ae24:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ae28:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800ae2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae30:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800ae34:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ae38:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800ae3c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ae40:	ee32 5a45 	vsub.f32	s10, s4, s10
 800ae44:	ee67 7a83 	vmul.f32	s15, s15, s6
 800ae48:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 800ae4c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800ae4e:	694a      	ldr	r2, [r1, #20]
 800ae50:	1b13      	subs	r3, r2, r4
 800ae52:	ee07 3a10 	vmov	s14, r3
 800ae56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae5a:	680b      	ldr	r3, [r1, #0]
 800ae5c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ae60:	1b1b      	subs	r3, r3, r4
 800ae62:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800ae66:	ee07 3a10 	vmov	s14, r3
 800ae6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ae72:	eee6 4a87 	vfma.f32	s9, s13, s14
 800ae76:	ee64 4a86 	vmul.f32	s9, s9, s12
 800ae7a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 800ae7e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ae80:	698b      	ldr	r3, [r1, #24]
 800ae82:	1a9b      	subs	r3, r3, r2
 800ae84:	ee06 3a90 	vmov	s13, r3
 800ae88:	684b      	ldr	r3, [r1, #4]
 800ae8a:	1a9b      	subs	r3, r3, r2
 800ae8c:	ee07 3a10 	vmov	s14, r3
 800ae90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ae94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae98:	ee66 6a84 	vmul.f32	s13, s13, s8
 800ae9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800aea0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800aea4:	eee5 6a87 	vfma.f32	s13, s11, s14
 800aea8:	ee66 6a83 	vmul.f32	s13, s13, s6
 800aeac:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 800aeb0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800aeb2:	694a      	ldr	r2, [r1, #20]
 800aeb4:	1b13      	subs	r3, r2, r4
 800aeb6:	ee07 3a10 	vmov	s14, r3
 800aeba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aebe:	680b      	ldr	r3, [r1, #0]
 800aec0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800aec4:	1b1b      	subs	r3, r3, r4
 800aec6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800aeca:	ee07 3a10 	vmov	s14, r3
 800aece:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aed2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800aed6:	eea5 5a87 	vfma.f32	s10, s11, s14
 800aeda:	edd0 5a08 	vldr	s11, [r0, #32]
 800aede:	ee25 5a06 	vmul.f32	s10, s10, s12
 800aee2:	ee31 1a65 	vsub.f32	s2, s2, s11
 800aee6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 800aeea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aeec:	698b      	ldr	r3, [r1, #24]
 800aeee:	1a9b      	subs	r3, r3, r2
 800aef0:	ee07 3a10 	vmov	s14, r3
 800aef4:	684b      	ldr	r3, [r1, #4]
 800aef6:	1a9b      	subs	r3, r3, r2
 800aef8:	ee01 3a90 	vmov	s3, r3
 800aefc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800af00:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800af04:	ee27 7a04 	vmul.f32	s14, s14, s8
 800af08:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800af0c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800af10:	ee61 1a84 	vmul.f32	s3, s3, s8
 800af14:	eea1 7a21 	vfma.f32	s14, s2, s3
 800af18:	ee27 7a03 	vmul.f32	s14, s14, s6
 800af1c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800af20:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800af22:	694a      	ldr	r2, [r1, #20]
 800af24:	1b13      	subs	r3, r2, r4
 800af26:	ee03 3a10 	vmov	s6, r3
 800af2a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800af2e:	680b      	ldr	r3, [r1, #0]
 800af30:	ee23 3a04 	vmul.f32	s6, s6, s8
 800af34:	1b1b      	subs	r3, r3, r4
 800af36:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800af3a:	ee03 3a10 	vmov	s6, r3
 800af3e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800af42:	ee23 4a04 	vmul.f32	s8, s6, s8
 800af46:	eee1 5a04 	vfma.f32	s11, s2, s8
 800af4a:	ee25 6a86 	vmul.f32	s12, s11, s12
 800af4e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800af52:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 800af56:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800af5a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800af5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af62:	dd13      	ble.n	800af8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800af64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af68:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800af6c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800af6e:	eee3 7a87 	vfma.f32	s15, s7, s14
 800af72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af7a:	dd15      	ble.n	800afa8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800af7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af80:	6403      	str	r3, [r0, #64]	; 0x40
 800af82:	bd70      	pop	{r4, r5, r6, pc}
 800af84:	4623      	mov	r3, r4
 800af86:	e6fd      	b.n	800ad84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800af88:	462a      	mov	r2, r5
 800af8a:	e706      	b.n	800ad9a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800af8c:	d502      	bpl.n	800af94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800af8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800af92:	e7e9      	b.n	800af68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800af94:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800af98:	eea3 2a85 	vfma.f32	s4, s7, s10
 800af9c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800afa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa4:	dade      	bge.n	800af64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800afa6:	e7f2      	b.n	800af8e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800afa8:	d502      	bpl.n	800afb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800afaa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800afae:	e7e7      	b.n	800af80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800afb0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800afb4:	eee3 4a86 	vfma.f32	s9, s7, s12
 800afb8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800afbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc0:	dadc      	bge.n	800af7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800afc2:	e7f2      	b.n	800afaa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800afc4:	3d800000 	.word	0x3d800000

0800afc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800afc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afcc:	2714      	movs	r7, #20
 800afce:	435f      	muls	r7, r3
 800afd0:	eb02 0c07 	add.w	ip, r2, r7
 800afd4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800afd8:	f115 0e0f 	adds.w	lr, r5, #15
 800afdc:	f100 80a2 	bmi.w	800b124 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800afe0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800afe4:	9c08      	ldr	r4, [sp, #32]
 800afe6:	f8c0 e014 	str.w	lr, [r0, #20]
 800afea:	2614      	movs	r6, #20
 800afec:	4366      	muls	r6, r4
 800afee:	eb02 0806 	add.w	r8, r2, r6
 800aff2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aff6:	f115 040f 	adds.w	r4, r5, #15
 800affa:	f100 809f 	bmi.w	800b13c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800affe:	1124      	asrs	r4, r4, #4
 800b000:	eba4 040e 	sub.w	r4, r4, lr
 800b004:	6184      	str	r4, [r0, #24]
 800b006:	2c00      	cmp	r4, #0
 800b008:	f000 808a 	beq.w	800b120 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800b00c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800b010:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b014:	5995      	ldr	r5, [r2, r6]
 800b016:	eba4 0809 	sub.w	r8, r4, r9
 800b01a:	59d4      	ldr	r4, [r2, r7]
 800b01c:	eba5 0a04 	sub.w	sl, r5, r4
 800b020:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800b024:	fb0e fe05 	mul.w	lr, lr, r5
 800b028:	fb0a ee19 	mls	lr, sl, r9, lr
 800b02c:	fb08 e404 	mla	r4, r8, r4, lr
 800b030:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800b034:	3c01      	subs	r4, #1
 800b036:	19a4      	adds	r4, r4, r6
 800b038:	f100 808c 	bmi.w	800b154 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800b03c:	fb94 fef6 	sdiv	lr, r4, r6
 800b040:	f8c0 e000 	str.w	lr, [r0]
 800b044:	fb06 441e 	mls	r4, r6, lr, r4
 800b048:	6104      	str	r4, [r0, #16]
 800b04a:	2d00      	cmp	r5, #0
 800b04c:	f2c0 8095 	blt.w	800b17a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800b050:	fb95 f4f6 	sdiv	r4, r5, r6
 800b054:	6044      	str	r4, [r0, #4]
 800b056:	fb06 5514 	mls	r5, r6, r4, r5
 800b05a:	6085      	str	r5, [r0, #8]
 800b05c:	60c6      	str	r6, [r0, #12]
 800b05e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800b062:	6945      	ldr	r5, [r0, #20]
 800b064:	59d2      	ldr	r2, [r2, r7]
 800b066:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800b19c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800b06a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800b06e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800b072:	ee07 4a10 	vmov	s14, r4
 800b076:	6804      	ldr	r4, [r0, #0]
 800b078:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800b07c:	ee07 2a90 	vmov	s15, r2
 800b080:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b088:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b08c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b090:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b094:	edd3 6a00 	vldr	s13, [r3]
 800b098:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b09c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800b0a0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b0a4:	edc0 6a07 	vstr	s13, [r0, #28]
 800b0a8:	edd0 6a01 	vldr	s13, [r0, #4]
 800b0ac:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 800b0b0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800b0b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b0b8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b0bc:	ed80 6a08 	vstr	s12, [r0, #32]
 800b0c0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800b0c2:	6242      	str	r2, [r0, #36]	; 0x24
 800b0c4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 800b0c8:	ed93 6a03 	vldr	s12, [r3, #12]
 800b0cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b0d0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800b0d4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b0d8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 800b0dc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800b0e0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800b0e4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b0e8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 800b0ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b0ee:	6302      	str	r2, [r0, #48]	; 0x30
 800b0f0:	ed93 6a06 	vldr	s12, [r3, #24]
 800b0f4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 800b0f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b0fc:	eeb0 7a46 	vmov.f32	s14, s12
 800b100:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800b104:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b108:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800b10c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800b110:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800b114:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b118:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 800b11c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b11e:	63c3      	str	r3, [r0, #60]	; 0x3c
 800b120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b124:	f1c5 0501 	rsb	r5, r5, #1
 800b128:	f015 050f 	ands.w	r5, r5, #15
 800b12c:	bf18      	it	ne
 800b12e:	2501      	movne	r5, #1
 800b130:	2410      	movs	r4, #16
 800b132:	fb9e fef4 	sdiv	lr, lr, r4
 800b136:	ebae 0e05 	sub.w	lr, lr, r5
 800b13a:	e753      	b.n	800afe4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800b13c:	f1c5 0501 	rsb	r5, r5, #1
 800b140:	f015 050f 	ands.w	r5, r5, #15
 800b144:	bf18      	it	ne
 800b146:	2501      	movne	r5, #1
 800b148:	f04f 0910 	mov.w	r9, #16
 800b14c:	fb94 f4f9 	sdiv	r4, r4, r9
 800b150:	1b64      	subs	r4, r4, r5
 800b152:	e755      	b.n	800b000 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800b154:	4264      	negs	r4, r4
 800b156:	fb94 fef6 	sdiv	lr, r4, r6
 800b15a:	f1ce 0800 	rsb	r8, lr, #0
 800b15e:	fb06 441e 	mls	r4, r6, lr, r4
 800b162:	f8c0 8000 	str.w	r8, [r0]
 800b166:	6104      	str	r4, [r0, #16]
 800b168:	2c00      	cmp	r4, #0
 800b16a:	f43f af6e 	beq.w	800b04a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800b16e:	ea6f 0e0e 	mvn.w	lr, lr
 800b172:	f8c0 e000 	str.w	lr, [r0]
 800b176:	1b34      	subs	r4, r6, r4
 800b178:	e766      	b.n	800b048 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800b17a:	426d      	negs	r5, r5
 800b17c:	fb95 f4f6 	sdiv	r4, r5, r6
 800b180:	f1c4 0e00 	rsb	lr, r4, #0
 800b184:	fb06 5514 	mls	r5, r6, r4, r5
 800b188:	f8c0 e004 	str.w	lr, [r0, #4]
 800b18c:	6085      	str	r5, [r0, #8]
 800b18e:	2d00      	cmp	r5, #0
 800b190:	f43f af64 	beq.w	800b05c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800b194:	43e4      	mvns	r4, r4
 800b196:	6044      	str	r4, [r0, #4]
 800b198:	1b75      	subs	r5, r6, r5
 800b19a:	e75e      	b.n	800b05a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800b19c:	3d800000 	.word	0x3d800000

0800b1a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800b1a0:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800b1a2:	881a      	ldrh	r2, [r3, #0]
 800b1a4:	4282      	cmp	r2, r0
 800b1a6:	d807      	bhi.n	800b1b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800b1a8:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	4298      	cmp	r0, r3
 800b1b0:	bfac      	ite	ge
 800b1b2:	2000      	movge	r0, #0
 800b1b4:	2001      	movlt	r0, #1
 800b1b6:	4770      	bx	lr
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	4770      	bx	lr
 800b1bc:	2000a224 	.word	0x2000a224
 800b1c0:	2000a226 	.word	0x2000a226

0800b1c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800b1c4:	b508      	push	{r3, lr}
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	f7ff ffea 	bl	800b1a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800b1cc:	b118      	cbz	r0, 800b1d6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800b1ce:	4b02      	ldr	r3, [pc, #8]	; (800b1d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800b1d6:	bd08      	pop	{r3, pc}
 800b1d8:	2000a21c 	.word	0x2000a21c

0800b1dc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800b1dc:	4a12      	ldr	r2, [pc, #72]	; (800b228 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800b1de:	8803      	ldrh	r3, [r0, #0]
 800b1e0:	8812      	ldrh	r2, [r2, #0]
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d207      	bcs.n	800b1f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800b1e6:	4a11      	ldr	r2, [pc, #68]	; (800b22c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800b1e8:	6812      	ldr	r2, [r2, #0]
 800b1ea:	2114      	movs	r1, #20
 800b1ec:	fb01 2303 	mla	r3, r1, r3, r2
 800b1f0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800b1f4:	4770      	bx	lr
 800b1f6:	490e      	ldr	r1, [pc, #56]	; (800b230 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800b1f8:	8809      	ldrh	r1, [r1, #0]
 800b1fa:	4411      	add	r1, r2
 800b1fc:	428b      	cmp	r3, r1
 800b1fe:	da04      	bge.n	800b20a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800b200:	1a9b      	subs	r3, r3, r2
 800b202:	4a0c      	ldr	r2, [pc, #48]	; (800b234 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800b204:	210e      	movs	r1, #14
 800b206:	6812      	ldr	r2, [r2, #0]
 800b208:	e7f0      	b.n	800b1ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800b20a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b20e:	4293      	cmp	r3, r2
 800b210:	d108      	bne.n	800b224 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800b212:	4b09      	ldr	r3, [pc, #36]	; (800b238 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	b91b      	cbnz	r3, 800b220 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800b218:	4b08      	ldr	r3, [pc, #32]	; (800b23c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800b21a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800b21e:	4770      	bx	lr
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800b222:	e7fa      	b.n	800b21a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800b224:	2000      	movs	r0, #0
 800b226:	4770      	bx	lr
 800b228:	2000a224 	.word	0x2000a224
 800b22c:	2000a228 	.word	0x2000a228
 800b230:	2000a226 	.word	0x2000a226
 800b234:	2000a220 	.word	0x2000a220
 800b238:	2000a1d0 	.word	0x2000a1d0
 800b23c:	2000a1d2 	.word	0x2000a1d2
 800b240:	2000a1d4 	.word	0x2000a1d4

0800b244 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800b244:	4a12      	ldr	r2, [pc, #72]	; (800b290 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800b246:	8803      	ldrh	r3, [r0, #0]
 800b248:	8812      	ldrh	r2, [r2, #0]
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d207      	bcs.n	800b25e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800b24e:	4a11      	ldr	r2, [pc, #68]	; (800b294 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800b250:	6812      	ldr	r2, [r2, #0]
 800b252:	2114      	movs	r1, #20
 800b254:	fb01 2303 	mla	r3, r1, r3, r2
 800b258:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800b25c:	4770      	bx	lr
 800b25e:	490e      	ldr	r1, [pc, #56]	; (800b298 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800b260:	8809      	ldrh	r1, [r1, #0]
 800b262:	4411      	add	r1, r2
 800b264:	428b      	cmp	r3, r1
 800b266:	da04      	bge.n	800b272 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800b268:	1a9b      	subs	r3, r3, r2
 800b26a:	4a0c      	ldr	r2, [pc, #48]	; (800b29c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800b26c:	210e      	movs	r1, #14
 800b26e:	6812      	ldr	r2, [r2, #0]
 800b270:	e7f0      	b.n	800b254 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800b272:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b276:	4293      	cmp	r3, r2
 800b278:	d108      	bne.n	800b28c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800b27a:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b91b      	cbnz	r3, 800b288 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800b280:	4b08      	ldr	r3, [pc, #32]	; (800b2a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800b282:	f9b3 0000 	ldrsh.w	r0, [r3]
 800b286:	4770      	bx	lr
 800b288:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800b28a:	e7fa      	b.n	800b282 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800b28c:	2000      	movs	r0, #0
 800b28e:	4770      	bx	lr
 800b290:	2000a224 	.word	0x2000a224
 800b294:	2000a228 	.word	0x2000a228
 800b298:	2000a226 	.word	0x2000a226
 800b29c:	2000a220 	.word	0x2000a220
 800b2a0:	2000a1d0 	.word	0x2000a1d0
 800b2a4:	2000a1d4 	.word	0x2000a1d4
 800b2a8:	2000a1d2 	.word	0x2000a1d2

0800b2ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800b2ac:	b510      	push	{r4, lr}
 800b2ae:	4a1f      	ldr	r2, [pc, #124]	; (800b32c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 800b2b0:	880b      	ldrh	r3, [r1, #0]
 800b2b2:	8812      	ldrh	r2, [r2, #0]
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d213      	bcs.n	800b2e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800b2b8:	4a1d      	ldr	r2, [pc, #116]	; (800b330 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 800b2ba:	6812      	ldr	r2, [r2, #0]
 800b2bc:	2114      	movs	r1, #20
 800b2be:	fb01 2303 	mla	r3, r1, r3, r2
 800b2c2:	8a1a      	ldrh	r2, [r3, #16]
 800b2c4:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800b2c8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800b2cc:	8a5b      	ldrh	r3, [r3, #18]
 800b2ce:	8004      	strh	r4, [r0, #0]
 800b2d0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800b2d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2d8:	8041      	strh	r1, [r0, #2]
 800b2da:	8082      	strh	r2, [r0, #4]
 800b2dc:	80c3      	strh	r3, [r0, #6]
 800b2de:	e00e      	b.n	800b2fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800b2e0:	4914      	ldr	r1, [pc, #80]	; (800b334 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 800b2e2:	8809      	ldrh	r1, [r1, #0]
 800b2e4:	4411      	add	r1, r2
 800b2e6:	428b      	cmp	r3, r1
 800b2e8:	da0a      	bge.n	800b300 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 800b2ea:	1a9b      	subs	r3, r3, r2
 800b2ec:	4a12      	ldr	r2, [pc, #72]	; (800b338 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800b2ee:	6812      	ldr	r2, [r2, #0]
 800b2f0:	210e      	movs	r1, #14
 800b2f2:	fb01 2303 	mla	r3, r1, r3, r2
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	6002      	str	r2, [r0, #0]
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	6042      	str	r2, [r0, #4]
 800b2fe:	bd10      	pop	{r4, pc}
 800b300:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b304:	4293      	cmp	r3, r2
 800b306:	d10b      	bne.n	800b320 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 800b308:	4b0c      	ldr	r3, [pc, #48]	; (800b33c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800b30a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b30e:	4b0c      	ldr	r3, [pc, #48]	; (800b340 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800b310:	8081      	strh	r1, [r0, #4]
 800b312:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b316:	80c2      	strh	r2, [r0, #6]
 800b318:	2300      	movs	r3, #0
 800b31a:	8003      	strh	r3, [r0, #0]
 800b31c:	8043      	strh	r3, [r0, #2]
 800b31e:	e7ee      	b.n	800b2fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800b320:	2300      	movs	r3, #0
 800b322:	8003      	strh	r3, [r0, #0]
 800b324:	8043      	strh	r3, [r0, #2]
 800b326:	8083      	strh	r3, [r0, #4]
 800b328:	e7d8      	b.n	800b2dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800b32a:	bf00      	nop
 800b32c:	2000a224 	.word	0x2000a224
 800b330:	2000a228 	.word	0x2000a228
 800b334:	2000a226 	.word	0x2000a226
 800b338:	2000a220 	.word	0x2000a220
 800b33c:	2000a1cc 	.word	0x2000a1cc
 800b340:	2000a1ce 	.word	0x2000a1ce

0800b344 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 800b344:	4a17      	ldr	r2, [pc, #92]	; (800b3a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 800b346:	8803      	ldrh	r3, [r0, #0]
 800b348:	8812      	ldrh	r2, [r2, #0]
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d213      	bcs.n	800b376 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 800b34e:	4a16      	ldr	r2, [pc, #88]	; (800b3a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800b350:	6812      	ldr	r2, [r2, #0]
 800b352:	2114      	movs	r1, #20
 800b354:	fb01 2303 	mla	r3, r1, r3, r2
 800b358:	8a1a      	ldrh	r2, [r3, #16]
 800b35a:	8919      	ldrh	r1, [r3, #8]
 800b35c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800b360:	428a      	cmp	r2, r1
 800b362:	db1d      	blt.n	800b3a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800b364:	8a58      	ldrh	r0, [r3, #18]
 800b366:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800b36a:	895b      	ldrh	r3, [r3, #10]
 800b36c:	4298      	cmp	r0, r3
 800b36e:	bfac      	ite	ge
 800b370:	2000      	movge	r0, #0
 800b372:	2001      	movlt	r0, #1
 800b374:	4770      	bx	lr
 800b376:	490d      	ldr	r1, [pc, #52]	; (800b3ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 800b378:	8809      	ldrh	r1, [r1, #0]
 800b37a:	4411      	add	r1, r2
 800b37c:	428b      	cmp	r3, r1
 800b37e:	da0d      	bge.n	800b39c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 800b380:	1a9b      	subs	r3, r3, r2
 800b382:	4a0b      	ldr	r2, [pc, #44]	; (800b3b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 800b384:	6812      	ldr	r2, [r2, #0]
 800b386:	210e      	movs	r1, #14
 800b388:	fb01 2303 	mla	r3, r1, r3, r2
 800b38c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800b390:	891a      	ldrh	r2, [r3, #8]
 800b392:	4291      	cmp	r1, r2
 800b394:	db04      	blt.n	800b3a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800b396:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800b39a:	e7e6      	b.n	800b36a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 800b39c:	2000      	movs	r0, #0
 800b39e:	4770      	bx	lr
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	4770      	bx	lr
 800b3a4:	2000a224 	.word	0x2000a224
 800b3a8:	2000a228 	.word	0x2000a228
 800b3ac:	2000a226 	.word	0x2000a226
 800b3b0:	2000a220 	.word	0x2000a220

0800b3b4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800b3b4:	4a12      	ldr	r2, [pc, #72]	; (800b400 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800b3b6:	8803      	ldrh	r3, [r0, #0]
 800b3b8:	8811      	ldrh	r1, [r2, #0]
 800b3ba:	428b      	cmp	r3, r1
 800b3bc:	d20b      	bcs.n	800b3d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800b3be:	4a11      	ldr	r2, [pc, #68]	; (800b404 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800b3c0:	6812      	ldr	r2, [r2, #0]
 800b3c2:	b112      	cbz	r2, 800b3ca <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800b3c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b3c8:	b9c0      	cbnz	r0, 800b3fc <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800b3ca:	4a0f      	ldr	r2, [pc, #60]	; (800b408 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800b3cc:	6811      	ldr	r1, [r2, #0]
 800b3ce:	2214      	movs	r2, #20
 800b3d0:	4353      	muls	r3, r2
 800b3d2:	58c8      	ldr	r0, [r1, r3]
 800b3d4:	4770      	bx	lr
 800b3d6:	4a0d      	ldr	r2, [pc, #52]	; (800b40c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800b3d8:	8812      	ldrh	r2, [r2, #0]
 800b3da:	440a      	add	r2, r1
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	da04      	bge.n	800b3ea <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800b3e0:	4a08      	ldr	r2, [pc, #32]	; (800b404 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800b3e2:	6812      	ldr	r2, [r2, #0]
 800b3e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b3e8:	4770      	bx	lr
 800b3ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d103      	bne.n	800b3fa <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800b3f2:	4b07      	ldr	r3, [pc, #28]	; (800b410 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800b3f8:	4770      	bx	lr
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	2000a224 	.word	0x2000a224
 800b404:	2000a21c 	.word	0x2000a21c
 800b408:	2000a228 	.word	0x2000a228
 800b40c:	2000a226 	.word	0x2000a226
 800b410:	2000a1d8 	.word	0x2000a1d8

0800b414 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800b414:	4b24      	ldr	r3, [pc, #144]	; (800b4a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800b416:	8802      	ldrh	r2, [r0, #0]
 800b418:	8818      	ldrh	r0, [r3, #0]
 800b41a:	4282      	cmp	r2, r0
 800b41c:	d221      	bcs.n	800b462 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800b41e:	4b23      	ldr	r3, [pc, #140]	; (800b4ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800b420:	6819      	ldr	r1, [r3, #0]
 800b422:	2314      	movs	r3, #20
 800b424:	fb03 1302 	mla	r3, r3, r2, r1
 800b428:	6858      	ldr	r0, [r3, #4]
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d03a      	beq.n	800b4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800b42e:	4920      	ldr	r1, [pc, #128]	; (800b4b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800b430:	6809      	ldr	r1, [r1, #0]
 800b432:	2900      	cmp	r1, #0
 800b434:	d036      	beq.n	800b4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800b436:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800b43a:	2900      	cmp	r1, #0
 800b43c:	d032      	beq.n	800b4a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800b43e:	891a      	ldrh	r2, [r3, #8]
 800b440:	8958      	ldrh	r0, [r3, #10]
 800b442:	4350      	muls	r0, r2
 800b444:	7c5a      	ldrb	r2, [r3, #17]
 800b446:	7cdb      	ldrb	r3, [r3, #19]
 800b448:	0952      	lsrs	r2, r2, #5
 800b44a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800b44e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b452:	2b0b      	cmp	r3, #11
 800b454:	bf18      	it	ne
 800b456:	0040      	lslne	r0, r0, #1
 800b458:	3003      	adds	r0, #3
 800b45a:	f020 0003 	bic.w	r0, r0, #3
 800b45e:	4408      	add	r0, r1
 800b460:	4770      	bx	lr
 800b462:	4b14      	ldr	r3, [pc, #80]	; (800b4b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	4403      	add	r3, r0
 800b468:	429a      	cmp	r2, r3
 800b46a:	da1a      	bge.n	800b4a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800b46c:	4b12      	ldr	r3, [pc, #72]	; (800b4b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	1a10      	subs	r0, r2, r0
 800b472:	210e      	movs	r1, #14
 800b474:	fb01 3000 	mla	r0, r1, r0, r3
 800b478:	7b03      	ldrb	r3, [r0, #12]
 800b47a:	f003 031f 	and.w	r3, r3, #31
 800b47e:	2b0b      	cmp	r3, #11
 800b480:	d10b      	bne.n	800b49a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800b482:	8903      	ldrh	r3, [r0, #8]
 800b484:	8940      	ldrh	r0, [r0, #10]
 800b486:	4358      	muls	r0, r3
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800b48a:	6819      	ldr	r1, [r3, #0]
 800b48c:	3003      	adds	r0, #3
 800b48e:	f020 0303 	bic.w	r3, r0, #3
 800b492:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800b496:	4418      	add	r0, r3
 800b498:	4770      	bx	lr
 800b49a:	2b0d      	cmp	r3, #13
 800b49c:	d101      	bne.n	800b4a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800b49e:	300d      	adds	r0, #13
 800b4a0:	4770      	bx	lr
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	2000a224 	.word	0x2000a224
 800b4ac:	2000a228 	.word	0x2000a228
 800b4b0:	2000a21c 	.word	0x2000a21c
 800b4b4:	2000a226 	.word	0x2000a226
 800b4b8:	2000a220 	.word	0x2000a220

0800b4bc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	4a17      	ldr	r2, [pc, #92]	; (800b51c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 800b4c0:	8803      	ldrh	r3, [r0, #0]
 800b4c2:	8812      	ldrh	r2, [r2, #0]
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d20c      	bcs.n	800b4e2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 800b4c8:	4a15      	ldr	r2, [pc, #84]	; (800b520 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 800b4ca:	6812      	ldr	r2, [r2, #0]
 800b4cc:	2114      	movs	r1, #20
 800b4ce:	fb01 2303 	mla	r3, r1, r3, r2
 800b4d2:	7c58      	ldrb	r0, [r3, #17]
 800b4d4:	0942      	lsrs	r2, r0, #5
 800b4d6:	7cd8      	ldrb	r0, [r3, #19]
 800b4d8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800b4dc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800b4e0:	bd10      	pop	{r4, pc}
 800b4e2:	4910      	ldr	r1, [pc, #64]	; (800b524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 800b4e4:	8809      	ldrh	r1, [r1, #0]
 800b4e6:	4411      	add	r1, r2
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	da09      	bge.n	800b500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 800b4ec:	1a9b      	subs	r3, r3, r2
 800b4ee:	4a0e      	ldr	r2, [pc, #56]	; (800b528 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800b4f0:	6812      	ldr	r2, [r2, #0]
 800b4f2:	210e      	movs	r1, #14
 800b4f4:	fb01 2303 	mla	r3, r1, r3, r2
 800b4f8:	7b18      	ldrb	r0, [r3, #12]
 800b4fa:	f000 001f 	and.w	r0, r0, #31
 800b4fe:	e7ef      	b.n	800b4e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800b500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b504:	4293      	cmp	r3, r2
 800b506:	d106      	bne.n	800b516 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 800b508:	f7f6 fcb2 	bl	8001e70 <_ZN8touchgfx3HAL3lcdEv>
 800b50c:	6803      	ldr	r3, [r0, #0]
 800b50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b514:	4718      	bx	r3
 800b516:	2000      	movs	r0, #0
 800b518:	e7e2      	b.n	800b4e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800b51a:	bf00      	nop
 800b51c:	2000a224 	.word	0x2000a224
 800b520:	2000a228 	.word	0x2000a228
 800b524:	2000a226 	.word	0x2000a226
 800b528:	2000a220 	.word	0x2000a220

0800b52c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 800b52c:	2010      	movs	r0, #16
 800b52e:	4770      	bx	lr

0800b530 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 800b530:	2000      	movs	r0, #0
 800b532:	4770      	bx	lr

0800b534 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 800b534:	4b02      	ldr	r3, [pc, #8]	; (800b540 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 800b536:	8818      	ldrh	r0, [r3, #0]
 800b538:	0040      	lsls	r0, r0, #1
 800b53a:	b280      	uxth	r0, r0
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	2000a1d2 	.word	0x2000a1d2

0800b544 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800b544:	2bff      	cmp	r3, #255	; 0xff
 800b546:	d050      	beq.n	800b5ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 800b548:	2a0b      	cmp	r2, #11
 800b54a:	d04a      	beq.n	800b5e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800b54c:	d80e      	bhi.n	800b56c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 800b54e:	2a03      	cmp	r2, #3
 800b550:	d03f      	beq.n	800b5d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 800b552:	d804      	bhi.n	800b55e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 800b554:	2a01      	cmp	r2, #1
 800b556:	d03e      	beq.n	800b5d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 800b558:	d93f      	bls.n	800b5da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 800b55a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b55c:	4770      	bx	lr
 800b55e:	2a09      	cmp	r2, #9
 800b560:	d03f      	beq.n	800b5e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800b562:	d83c      	bhi.n	800b5de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 800b564:	2a08      	cmp	r2, #8
 800b566:	d03a      	beq.n	800b5de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 800b568:	2000      	movs	r0, #0
 800b56a:	4770      	bx	lr
 800b56c:	2a2f      	cmp	r2, #47	; 0x2f
 800b56e:	d024      	beq.n	800b5ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 800b570:	d80d      	bhi.n	800b58e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 800b572:	2a2d      	cmp	r2, #45	; 0x2d
 800b574:	d014      	beq.n	800b5a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 800b576:	d826      	bhi.n	800b5c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800b578:	2a2c      	cmp	r2, #44	; 0x2c
 800b57a:	d1f5      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b57c:	684b      	ldr	r3, [r1, #4]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d018      	beq.n	800b5b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 800b584:	d323      	bcc.n	800b5ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 800b586:	2b02      	cmp	r3, #2
 800b588:	d1ee      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b58a:	6880      	ldr	r0, [r0, #8]
 800b58c:	4770      	bx	lr
 800b58e:	2a31      	cmp	r2, #49	; 0x31
 800b590:	d004      	beq.n	800b59c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 800b592:	d328      	bcc.n	800b5e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 800b594:	2a32      	cmp	r2, #50	; 0x32
 800b596:	d026      	beq.n	800b5e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 800b598:	2a33      	cmp	r2, #51	; 0x33
 800b59a:	d1e5      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b59c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800b59e:	4770      	bx	lr
 800b5a0:	684b      	ldr	r3, [r1, #4]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d004      	beq.n	800b5b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 800b5a8:	d30b      	bcc.n	800b5c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d1dc      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b5ae:	6900      	ldr	r0, [r0, #16]
 800b5b0:	4770      	bx	lr
 800b5b2:	6a00      	ldr	r0, [r0, #32]
 800b5b4:	4770      	bx	lr
 800b5b6:	6980      	ldr	r0, [r0, #24]
 800b5b8:	4770      	bx	lr
 800b5ba:	684b      	ldr	r3, [r1, #4]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1d2      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b5c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b5c4:	4770      	bx	lr
 800b5c6:	684b      	ldr	r3, [r1, #4]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1cc      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b5ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b5d0:	4770      	bx	lr
 800b5d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800b5d4:	4770      	bx	lr
 800b5d6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800b5d8:	4770      	bx	lr
 800b5da:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800b5dc:	4770      	bx	lr
 800b5de:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800b5e0:	4770      	bx	lr
 800b5e2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b5e4:	4770      	bx	lr
 800b5e6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800b5e8:	4770      	bx	lr
 800b5ea:	2a0b      	cmp	r2, #11
 800b5ec:	d049      	beq.n	800b682 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800b5ee:	d80e      	bhi.n	800b60e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 800b5f0:	2a03      	cmp	r2, #3
 800b5f2:	d040      	beq.n	800b676 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 800b5f4:	d804      	bhi.n	800b600 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 800b5f6:	2a01      	cmp	r2, #1
 800b5f8:	d03f      	beq.n	800b67a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 800b5fa:	d940      	bls.n	800b67e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 800b5fc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800b5fe:	4770      	bx	lr
 800b600:	2a09      	cmp	r2, #9
 800b602:	d03e      	beq.n	800b682 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800b604:	d801      	bhi.n	800b60a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 800b606:	2a08      	cmp	r2, #8
 800b608:	d1ae      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b60a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800b60c:	4770      	bx	lr
 800b60e:	2a2f      	cmp	r2, #47	; 0x2f
 800b610:	d024      	beq.n	800b65c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 800b612:	d80d      	bhi.n	800b630 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 800b614:	2a2d      	cmp	r2, #45	; 0x2d
 800b616:	d014      	beq.n	800b642 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 800b618:	d826      	bhi.n	800b668 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 800b61a:	2a2c      	cmp	r2, #44	; 0x2c
 800b61c:	d1a4      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b61e:	684b      	ldr	r3, [r1, #4]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d018      	beq.n	800b658 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 800b626:	d324      	bcc.n	800b672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d19d      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b62c:	68c0      	ldr	r0, [r0, #12]
 800b62e:	4770      	bx	lr
 800b630:	2a31      	cmp	r2, #49	; 0x31
 800b632:	d004      	beq.n	800b63e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 800b634:	d327      	bcc.n	800b686 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 800b636:	2a32      	cmp	r2, #50	; 0x32
 800b638:	d025      	beq.n	800b686 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 800b63a:	2a33      	cmp	r2, #51	; 0x33
 800b63c:	d194      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b63e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800b640:	4770      	bx	lr
 800b642:	684b      	ldr	r3, [r1, #4]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d004      	beq.n	800b654 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 800b64a:	d30b      	bcc.n	800b664 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d18b      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b650:	6940      	ldr	r0, [r0, #20]
 800b652:	4770      	bx	lr
 800b654:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b656:	4770      	bx	lr
 800b658:	69c0      	ldr	r0, [r0, #28]
 800b65a:	4770      	bx	lr
 800b65c:	684b      	ldr	r3, [r1, #4]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d181      	bne.n	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b664:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b666:	4770      	bx	lr
 800b668:	684b      	ldr	r3, [r1, #4]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f47f af7b 	bne.w	800b568 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800b672:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800b674:	4770      	bx	lr
 800b676:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b678:	4770      	bx	lr
 800b67a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800b67c:	4770      	bx	lr
 800b67e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800b680:	4770      	bx	lr
 800b682:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800b684:	4770      	bx	lr
 800b686:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800b688:	4770      	bx	lr

0800b68a <_ZN8touchgfx8LCD16bppD1Ev>:
 800b68a:	4770      	bx	lr

0800b68c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 800b68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b690:	b088      	sub	sp, #32
 800b692:	ac08      	add	r4, sp, #32
 800b694:	4606      	mov	r6, r0
 800b696:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 800b69a:	4620      	mov	r0, r4
 800b69c:	4688      	mov	r8, r1
 800b69e:	4691      	mov	r9, r2
 800b6a0:	f7ff fe88 	bl	800b3b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 800b6a4:	6833      	ldr	r3, [r6, #0]
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	699f      	ldr	r7, [r3, #24]
 800b6ac:	f7ff fd96 	bl	800b1dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b6b0:	4682      	mov	sl, r0
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f7ff fdc6 	bl	800b244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b6b8:	9500      	str	r5, [sp, #0]
 800b6ba:	e9cd a001 	strd	sl, r0, [sp, #4]
 800b6be:	464b      	mov	r3, r9
 800b6c0:	a806      	add	r0, sp, #24
 800b6c2:	4642      	mov	r2, r8
 800b6c4:	4631      	mov	r1, r6
 800b6c6:	47b8      	blx	r7
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	b008      	add	sp, #32
 800b6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b6d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 800b6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	4b3d      	ldr	r3, [pc, #244]	; (800b7d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d137      	bne.n	800b750 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 800b6e0:	4a3c      	ldr	r2, [pc, #240]	; (800b7d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800b6e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b6e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d132      	bne.n	800b754 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 800b6ee:	4b3a      	ldr	r3, [pc, #232]	; (800b7d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800b6f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6f4:	6808      	ldr	r0, [r1, #0]
 800b6f6:	6849      	ldr	r1, [r1, #4]
 800b6f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b6fc:	ac02      	add	r4, sp, #8
 800b6fe:	ab02      	add	r3, sp, #8
 800b700:	c303      	stmia	r3!, {r0, r1}
 800b702:	4669      	mov	r1, sp
 800b704:	4620      	mov	r0, r4
 800b706:	f7fe fc4b 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800b70a:	4668      	mov	r0, sp
 800b70c:	f7fe fc20 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800b710:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800b714:	f8bd 2000 	ldrh.w	r2, [sp]
 800b718:	4d30      	ldr	r5, [pc, #192]	; (800b7dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 800b71a:	4413      	add	r3, r2
 800b71c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b720:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b724:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800b728:	6828      	ldr	r0, [r5, #0]
 800b72a:	4413      	add	r3, r2
 800b72c:	f8ad 300a 	strh.w	r3, [sp, #10]
 800b730:	6803      	ldr	r3, [r0, #0]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	4798      	blx	r3
 800b736:	f010 0f01 	tst.w	r0, #1
 800b73a:	462f      	mov	r7, r5
 800b73c:	d00c      	beq.n	800b758 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 800b73e:	6828      	ldr	r0, [r5, #0]
 800b740:	6803      	ldr	r3, [r0, #0]
 800b742:	e894 0006 	ldmia.w	r4, {r1, r2}
 800b746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b748:	4798      	blx	r3
 800b74a:	b004      	add	sp, #16
 800b74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b750:	4a21      	ldr	r2, [pc, #132]	; (800b7d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800b752:	e7c6      	b.n	800b6e2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 800b754:	4b1f      	ldr	r3, [pc, #124]	; (800b7d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800b756:	e7cb      	b.n	800b6f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 800b758:	6838      	ldr	r0, [r7, #0]
 800b75a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 800b75e:	6803      	ldr	r3, [r0, #0]
 800b760:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	4798      	blx	r3
 800b768:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800b76c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800b770:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 800b774:	fb16 3602 	smlabb	r6, r6, r2, r3
 800b778:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800b77c:	6838      	ldr	r0, [r7, #0]
 800b77e:	6803      	ldr	r3, [r0, #0]
 800b780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b782:	4798      	blx	r3
 800b784:	4a13      	ldr	r2, [pc, #76]	; (800b7d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800b786:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 800b78a:	8813      	ldrh	r3, [r2, #0]
 800b78c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800b790:	fb03 1404 	mla	r4, r3, r4, r1
 800b794:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800b798:	435d      	muls	r5, r3
 800b79a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800b79e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b7a2:	4691      	mov	r9, r2
 800b7a4:	6838      	ldr	r0, [r7, #0]
 800b7a6:	42ac      	cmp	r4, r5
 800b7a8:	6803      	ldr	r3, [r0, #0]
 800b7aa:	d20e      	bcs.n	800b7ca <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 800b7ac:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	4643      	mov	r3, r8
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	47d0      	blx	sl
 800b7b8:	f8b9 3000 	ldrh.w	r3, [r9]
 800b7bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800b7c0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800b7c4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800b7c8:	e7ec      	b.n	800b7a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	4798      	blx	r3
 800b7ce:	e7bc      	b.n	800b74a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 800b7d0:	2000a1d0 	.word	0x2000a1d0
 800b7d4:	2000a1d2 	.word	0x2000a1d2
 800b7d8:	2000a1d4 	.word	0x2000a1d4
 800b7dc:	2000a1d8 	.word	0x2000a1d8

0800b7e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	b08b      	sub	sp, #44	; 0x2c
 800b7e6:	460f      	mov	r7, r1
 800b7e8:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 800b7ec:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 800b7f0:	4616      	mov	r6, r2
 800b7f2:	f1bb 0f00 	cmp.w	fp, #0
 800b7f6:	d04a      	beq.n	800b88e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800b7f8:	6810      	ldr	r0, [r2, #0]
 800b7fa:	6851      	ldr	r1, [r2, #4]
 800b7fc:	ad06      	add	r5, sp, #24
 800b7fe:	c503      	stmia	r5!, {r0, r1}
 800b800:	6818      	ldr	r0, [r3, #0]
 800b802:	6859      	ldr	r1, [r3, #4]
 800b804:	ad08      	add	r5, sp, #32
 800b806:	c503      	stmia	r5!, {r0, r1}
 800b808:	a806      	add	r0, sp, #24
 800b80a:	f7fe fba1 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800b80e:	4631      	mov	r1, r6
 800b810:	a808      	add	r0, sp, #32
 800b812:	f7fe fbc5 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800b816:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800b81a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800b81e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 800b822:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 800b826:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 800b82a:	fb16 2103 	smlabb	r1, r6, r3, r2
 800b82e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 800b832:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800b836:	4f5f      	ldr	r7, [pc, #380]	; (800b9b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800b838:	440a      	add	r2, r1
 800b83a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b83e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800b842:	6838      	ldr	r0, [r7, #0]
 800b844:	4413      	add	r3, r2
 800b846:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800b84a:	6803      	ldr	r3, [r0, #0]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	4798      	blx	r3
 800b850:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800b854:	46b9      	mov	r9, r7
 800b856:	d11d      	bne.n	800b894 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 800b858:	b9fc      	cbnz	r4, 800b89a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800b85a:	f010 0f01 	tst.w	r0, #1
 800b85e:	d01c      	beq.n	800b89a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800b860:	f8d9 0000 	ldr.w	r0, [r9]
 800b864:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800b868:	6801      	ldr	r1, [r0, #0]
 800b86a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b86e:	2700      	movs	r7, #0
 800b870:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800b874:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800b878:	9402      	str	r4, [sp, #8]
 800b87a:	b2ad      	uxth	r5, r5
 800b87c:	fa1f f488 	uxth.w	r4, r8
 800b880:	9501      	str	r5, [sp, #4]
 800b882:	9400      	str	r4, [sp, #0]
 800b884:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800b886:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b88a:	4631      	mov	r1, r6
 800b88c:	47a0      	blx	r4
 800b88e:	b00b      	add	sp, #44	; 0x2c
 800b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b894:	f010 0f04 	tst.w	r0, #4
 800b898:	e7e1      	b.n	800b85e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 800b89a:	f8d9 0000 	ldr.w	r0, [r9]
 800b89e:	6803      	ldr	r3, [r0, #0]
 800b8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a2:	4798      	blx	r3
 800b8a4:	4b44      	ldr	r3, [pc, #272]	; (800b9b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 800b8a6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 800b8aa:	881a      	ldrh	r2, [r3, #0]
 800b8ac:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800b8b0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 800b8b4:	fb02 1404 	mla	r4, r2, r4, r1
 800b8b8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800b8bc:	469a      	mov	sl, r3
 800b8be:	fb05 f502 	mul.w	r5, r5, r2
 800b8c2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800b8c6:	d059      	beq.n	800b97c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 800b8c8:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 800b8cc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800b8d0:	fa1f f28b 	uxth.w	r2, fp
 800b8d4:	fa1f f989 	uxth.w	r9, r9
 800b8d8:	469e      	mov	lr, r3
 800b8da:	42ac      	cmp	r4, r5
 800b8dc:	d264      	bcs.n	800b9a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800b8de:	eb04 0a07 	add.w	sl, r4, r7
 800b8e2:	4554      	cmp	r4, sl
 800b8e4:	d23d      	bcs.n	800b962 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 800b8e6:	8821      	ldrh	r1, [r4, #0]
 800b8e8:	f836 3b02 	ldrh.w	r3, [r6], #2
 800b8ec:	1208      	asrs	r0, r1, #8
 800b8ee:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800b8f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800b8f6:	fb10 f009 	smulbb	r0, r0, r9
 800b8fa:	ea4f 0be1 	mov.w	fp, r1, asr #3
 800b8fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800b902:	00c9      	lsls	r1, r1, #3
 800b904:	fb0c 0c02 	mla	ip, ip, r2, r0
 800b908:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 800b90c:	10d8      	asrs	r0, r3, #3
 800b90e:	b2c9      	uxtb	r1, r1
 800b910:	00db      	lsls	r3, r3, #3
 800b912:	fa1f fc8c 	uxth.w	ip, ip
 800b916:	fb1b fb09 	smulbb	fp, fp, r9
 800b91a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	fb11 f109 	smulbb	r1, r1, r9
 800b924:	fb00 b002 	mla	r0, r0, r2, fp
 800b928:	fb03 1302 	mla	r3, r3, r2, r1
 800b92c:	f10c 0b01 	add.w	fp, ip, #1
 800b930:	b29b      	uxth	r3, r3
 800b932:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 800b936:	b280      	uxth	r0, r0
 800b938:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 800b93c:	f103 0c01 	add.w	ip, r3, #1
 800b940:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800b944:	1c43      	adds	r3, r0, #1
 800b946:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800b94a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800b94e:	0940      	lsrs	r0, r0, #5
 800b950:	ea4c 0c0b 	orr.w	ip, ip, fp
 800b954:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800b958:	ea4c 0c00 	orr.w	ip, ip, r0
 800b95c:	f824 cb02 	strh.w	ip, [r4], #2
 800b960:	e7bf      	b.n	800b8e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 800b962:	f8be 3000 	ldrh.w	r3, [lr]
 800b966:	eba3 0308 	sub.w	r3, r3, r8
 800b96a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800b96e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b972:	eba3 0308 	sub.w	r3, r3, r8
 800b976:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800b97a:	e7ae      	b.n	800b8da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 800b97c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800b980:	f8d9 0000 	ldr.w	r0, [r9]
 800b984:	42ac      	cmp	r4, r5
 800b986:	6803      	ldr	r3, [r0, #0]
 800b988:	d20e      	bcs.n	800b9a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800b98a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800b98e:	4632      	mov	r2, r6
 800b990:	463b      	mov	r3, r7
 800b992:	4621      	mov	r1, r4
 800b994:	47c0      	blx	r8
 800b996:	f8ba 3000 	ldrh.w	r3, [sl]
 800b99a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800b99e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b9a2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800b9a6:	e7eb      	b.n	800b980 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 800b9a8:	4b02      	ldr	r3, [pc, #8]	; (800b9b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	6803      	ldr	r3, [r0, #0]
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	4798      	blx	r3
 800b9b2:	e76c      	b.n	800b88e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800b9b4:	2000a1d8 	.word	0x2000a1d8
 800b9b8:	2000a1d2 	.word	0x2000a1d2

0800b9bc <_ZN8touchgfx8LCD16bppD0Ev>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	2184      	movs	r1, #132	; 0x84
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	f001 fd8d 	bl	800d4e0 <_ZdlPvj>
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	bd10      	pop	{r4, pc}
	...

0800b9cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	b091      	sub	sp, #68	; 0x44
 800b9d2:	469b      	mov	fp, r3
 800b9d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b9d8:	4616      	mov	r6, r2
 800b9da:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 800b9de:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b9e2:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 800b9e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b9ea:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	460d      	mov	r5, r1
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	4659      	mov	r1, fp
 800b9f6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800b9fa:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 800b9fe:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 800ba02:	f7fc fcc7 	bl	8008394 <_ZN8touchgfx4RectaNERKS0_>
 800ba06:	4631      	mov	r1, r6
 800ba08:	4640      	mov	r0, r8
 800ba0a:	f7fc fcc3 	bl	8008394 <_ZN8touchgfx4RectaNERKS0_>
 800ba0e:	4b74      	ldr	r3, [pc, #464]	; (800bbe0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 800ba10:	8818      	ldrh	r0, [r3, #0]
 800ba12:	4b74      	ldr	r3, [pc, #464]	; (800bbe4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 800ba14:	8819      	ldrh	r1, [r3, #0]
 800ba16:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	b202      	sxth	r2, r0
 800ba1e:	b20e      	sxth	r6, r1
 800ba20:	da07      	bge.n	800ba32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 800ba22:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 800ba26:	4463      	add	r3, ip
 800ba28:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800ba32:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800ba36:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 800ba3a:	1ad2      	subs	r2, r2, r3
 800ba3c:	4594      	cmp	ip, r2
 800ba3e:	bfc4      	itt	gt
 800ba40:	1ac2      	subgt	r2, r0, r3
 800ba42:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 800ba46:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 800ba4a:	2a00      	cmp	r2, #0
 800ba4c:	da07      	bge.n	800ba5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 800ba4e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 800ba52:	4462      	add	r2, ip
 800ba54:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800ba5e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 800ba62:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 800ba66:	eba6 060a 	sub.w	r6, r6, sl
 800ba6a:	42b2      	cmp	r2, r6
 800ba6c:	bfc4      	itt	gt
 800ba6e:	eba1 020a 	subgt.w	r2, r1, sl
 800ba72:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 800ba76:	4a5c      	ldr	r2, [pc, #368]	; (800bbe8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 800ba78:	7812      	ldrb	r2, [r2, #0]
 800ba7a:	b9a2      	cbnz	r2, 800baa6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 800ba7c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 800ba80:	4286      	cmp	r6, r0
 800ba82:	4640      	mov	r0, r8
 800ba84:	9303      	str	r3, [sp, #12]
 800ba86:	bf14      	ite	ne
 800ba88:	2600      	movne	r6, #0
 800ba8a:	2601      	moveq	r6, #1
 800ba8c:	f7fc fcc5 	bl	800841a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	b160      	cbz	r0, 800baae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 800ba94:	2300      	movs	r3, #0
 800ba96:	8023      	strh	r3, [r4, #0]
 800ba98:	8063      	strh	r3, [r4, #2]
 800ba9a:	80a3      	strh	r3, [r4, #4]
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	80e3      	strh	r3, [r4, #6]
 800baa0:	b011      	add	sp, #68	; 0x44
 800baa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 800baaa:	428e      	cmp	r6, r1
 800baac:	e7e9      	b.n	800ba82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 800baae:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800bab2:	9205      	str	r2, [sp, #20]
 800bab4:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 800bab8:	9206      	str	r2, [sp, #24]
 800baba:	f8bb 2000 	ldrh.w	r2, [fp]
 800babe:	900e      	str	r0, [sp, #56]	; 0x38
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	b21b      	sxth	r3, r3
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800baca:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 800bace:	ebaa 0a03 	sub.w	sl, sl, r3
 800bad2:	fa0f f38a 	sxth.w	r3, sl
 800bad6:	9304      	str	r3, [sp, #16]
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800bae4:	9b05      	ldr	r3, [sp, #20]
 800bae6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800baea:	a90e      	add	r1, sp, #56	; 0x38
 800baec:	9b06      	ldr	r3, [sp, #24]
 800baee:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800baf2:	a80c      	add	r0, sp, #48	; 0x30
 800baf4:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 800baf8:	f7fe fa52 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800bafc:	4640      	mov	r0, r8
 800bafe:	f7fe fa27 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800bb02:	a80e      	add	r0, sp, #56	; 0x38
 800bb04:	f7fe fa24 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800bb08:	4b38      	ldr	r3, [pc, #224]	; (800bbec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 800bb0a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 800bb0e:	881b      	ldrh	r3, [r3, #0]
 800bb10:	9307      	str	r3, [sp, #28]
 800bb12:	682b      	ldr	r3, [r5, #0]
 800bb14:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 800bbf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800bb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	4798      	blx	r3
 800bb1e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 800bb22:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800bb26:	4681      	mov	r9, r0
 800bb28:	fb1a 3305 	smlabb	r3, sl, r5, r3
 800bb2c:	f8db 0000 	ldr.w	r0, [fp]
 800bb30:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800bb32:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800bb36:	6803      	ldr	r3, [r0, #0]
 800bb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3a:	4798      	blx	r3
 800bb3c:	4607      	mov	r7, r0
 800bb3e:	f8db 0000 	ldr.w	r0, [fp]
 800bb42:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800bb46:	6803      	ldr	r3, [r0, #0]
 800bb48:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 800bb4c:	9109      	str	r1, [sp, #36]	; 0x24
 800bb4e:	9208      	str	r2, [sp, #32]
 800bb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb52:	4798      	blx	r3
 800bb54:	f010 0f01 	tst.w	r0, #1
 800bb58:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800bb5c:	d012      	beq.n	800bb84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 800bb5e:	f8db 0000 	ldr.w	r0, [fp]
 800bb62:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 800bb66:	6803      	ldr	r3, [r0, #0]
 800bb68:	9200      	str	r2, [sp, #0]
 800bb6a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800bb6c:	e898 0006 	ldmia.w	r8, {r1, r2}
 800bb70:	462b      	mov	r3, r5
 800bb72:	47b0      	blx	r6
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	8023      	strh	r3, [r4, #0]
 800bb78:	9b04      	ldr	r3, [sp, #16]
 800bb7a:	8063      	strh	r3, [r4, #2]
 800bb7c:	9b05      	ldr	r3, [sp, #20]
 800bb7e:	80a3      	strh	r3, [r4, #4]
 800bb80:	9b06      	ldr	r3, [sp, #24]
 800bb82:	e78b      	b.n	800ba9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 800bb84:	fb09 f202 	mul.w	r2, r9, r2
 800bb88:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bb8c:	440f      	add	r7, r1
 800bb8e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800bb92:	b166      	cbz	r6, 800bbae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800bb94:	9a07      	ldr	r2, [sp, #28]
 800bb96:	4592      	cmp	sl, r2
 800bb98:	d109      	bne.n	800bbae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800bb9a:	f8db 0000 	ldr.w	r0, [fp]
 800bb9e:	6802      	ldr	r2, [r0, #0]
 800bba0:	fb09 f303 	mul.w	r3, r9, r3
 800bba4:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800bba6:	4629      	mov	r1, r5
 800bba8:	463a      	mov	r2, r7
 800bbaa:	47b0      	blx	r6
 800bbac:	e7e2      	b.n	800bb74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800bbae:	fb0a f303 	mul.w	r3, sl, r3
 800bbb2:	f8df b03c 	ldr.w	fp, [pc, #60]	; 800bbf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800bbb6:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 800bbba:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800bbbe:	4545      	cmp	r5, r8
 800bbc0:	d2d8      	bcs.n	800bb74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800bbc2:	f8db 0000 	ldr.w	r0, [fp]
 800bbc6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800bbca:	6802      	ldr	r2, [r0, #0]
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	463a      	mov	r2, r7
 800bbd6:	47d0      	blx	sl
 800bbd8:	444f      	add	r7, r9
 800bbda:	4435      	add	r5, r6
 800bbdc:	e7ef      	b.n	800bbbe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 800bbde:	bf00      	nop
 800bbe0:	2000a1cc 	.word	0x2000a1cc
 800bbe4:	2000a1ce 	.word	0x2000a1ce
 800bbe8:	2000a1d0 	.word	0x2000a1d0
 800bbec:	2000a1d2 	.word	0x2000a1d2
 800bbf0:	2000a1d8 	.word	0x2000a1d8

0800bbf4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 800bbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	b087      	sub	sp, #28
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	4617      	mov	r7, r2
 800bbfe:	461d      	mov	r5, r3
 800bc00:	b333      	cbz	r3, 800bc50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800bc02:	4608      	mov	r0, r1
 800bc04:	f7fc fc09 	bl	800841a <_ZNK8touchgfx4Rect7isEmptyEv>
 800bc08:	bb10      	cbnz	r0, 800bc50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800bc0a:	6820      	ldr	r0, [r4, #0]
 800bc0c:	6861      	ldr	r1, [r4, #4]
 800bc0e:	4c1c      	ldr	r4, [pc, #112]	; (800bc80 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 800bc10:	ab04      	add	r3, sp, #16
 800bc12:	c303      	stmia	r3!, {r0, r1}
 800bc14:	a804      	add	r0, sp, #16
 800bc16:	f7fe f99b 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800bc1a:	6820      	ldr	r0, [r4, #0]
 800bc1c:	6803      	ldr	r3, [r0, #0]
 800bc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc20:	4798      	blx	r3
 800bc22:	2dff      	cmp	r5, #255	; 0xff
 800bc24:	d016      	beq.n	800bc54 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 800bc26:	f010 0f08 	tst.w	r0, #8
 800bc2a:	6820      	ldr	r0, [r4, #0]
 800bc2c:	d015      	beq.n	800bc5a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 800bc2e:	2400      	movs	r4, #0
 800bc30:	6801      	ldr	r1, [r0, #0]
 800bc32:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800bc36:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800bc3a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800bc3e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 800bc42:	9401      	str	r4, [sp, #4]
 800bc44:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800bc48:	9400      	str	r4, [sp, #0]
 800bc4a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 800bc4c:	4639      	mov	r1, r7
 800bc4e:	47a0      	blx	r4
 800bc50:	b007      	add	sp, #28
 800bc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc54:	f010 0f02 	tst.w	r0, #2
 800bc58:	e7e7      	b.n	800bc2a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 800bc5a:	6803      	ldr	r3, [r0, #0]
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5e:	4798      	blx	r3
 800bc60:	4b08      	ldr	r3, [pc, #32]	; (800bc84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 800bc62:	881a      	ldrh	r2, [r3, #0]
 800bc64:	6833      	ldr	r3, [r6, #0]
 800bc66:	e9cd 7500 	strd	r7, r5, [sp]
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800bc6e:	4630      	mov	r0, r6
 800bc70:	ab04      	add	r3, sp, #16
 800bc72:	47a8      	blx	r5
 800bc74:	6820      	ldr	r0, [r4, #0]
 800bc76:	6803      	ldr	r3, [r0, #0]
 800bc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7a:	4798      	blx	r3
 800bc7c:	e7e8      	b.n	800bc50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800bc7e:	bf00      	nop
 800bc80:	2000a1d8 	.word	0x2000a1d8
 800bc84:	2000a1d2 	.word	0x2000a1d2

0800bc88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 800bc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc8c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 800bc90:	9e08      	ldr	r6, [sp, #32]
 800bc92:	4688      	mov	r8, r1
 800bc94:	4614      	mov	r4, r2
 800bc96:	461d      	mov	r5, r3
 800bc98:	2f00      	cmp	r7, #0
 800bc9a:	f000 80a9 	beq.w	800bdf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fc fbbb 	bl	800841a <_ZNK8touchgfx4Rect7isEmptyEv>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	f040 80a3 	bne.w	800bdf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800bcaa:	f9b5 1000 	ldrsh.w	r1, [r5]
 800bcae:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800bcb2:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800bcb6:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800bcba:	fb04 1303 	mla	r3, r4, r3, r1
 800bcbe:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 800bcc2:	4365      	muls	r5, r4
 800bcc4:	2fff      	cmp	r7, #255	; 0xff
 800bcc6:	eba4 0200 	sub.w	r2, r4, r0
 800bcca:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800bcce:	ea4f 2816 	mov.w	r8, r6, lsr #8
 800bcd2:	d04a      	beq.n	800bd6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 800bcd4:	b2bc      	uxth	r4, r7
 800bcd6:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 800bcda:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800bcde:	fa5f f788 	uxtb.w	r7, r8
 800bce2:	b2f3      	uxtb	r3, r6
 800bce4:	0040      	lsls	r0, r0, #1
 800bce6:	fb0e fe04 	mul.w	lr, lr, r4
 800bcea:	4367      	muls	r7, r4
 800bcec:	4363      	muls	r3, r4
 800bcee:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800bcf2:	fa1f fc8c 	uxth.w	ip, ip
 800bcf6:	42a9      	cmp	r1, r5
 800bcf8:	d27a      	bcs.n	800bdf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800bcfa:	eb01 0900 	add.w	r9, r1, r0
 800bcfe:	4549      	cmp	r1, r9
 800bd00:	d231      	bcs.n	800bd66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 800bd02:	880a      	ldrh	r2, [r1, #0]
 800bd04:	1214      	asrs	r4, r2, #8
 800bd06:	10d6      	asrs	r6, r2, #3
 800bd08:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 800bd0c:	00d2      	lsls	r2, r2, #3
 800bd0e:	b2d2      	uxtb	r2, r2
 800bd10:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800bd14:	fb14 f40c 	smulbb	r4, r4, ip
 800bd18:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800bd1c:	4474      	add	r4, lr
 800bd1e:	fb12 f20c 	smulbb	r2, r2, ip
 800bd22:	b2a4      	uxth	r4, r4
 800bd24:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 800bd28:	441a      	add	r2, r3
 800bd2a:	b292      	uxth	r2, r2
 800bd2c:	f104 0a01 	add.w	sl, r4, #1
 800bd30:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 800bd34:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 800bd38:	fb16 f60c 	smulbb	r6, r6, ip
 800bd3c:	f102 0a01 	add.w	sl, r2, #1
 800bd40:	443e      	add	r6, r7
 800bd42:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 800bd46:	b2b6      	uxth	r6, r6
 800bd48:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 800bd4c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800bd50:	4322      	orrs	r2, r4
 800bd52:	1c74      	adds	r4, r6, #1
 800bd54:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 800bd58:	0976      	lsrs	r6, r6, #5
 800bd5a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800bd5e:	4332      	orrs	r2, r6
 800bd60:	f821 2b02 	strh.w	r2, [r1], #2
 800bd64:	e7cb      	b.n	800bcfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 800bd66:	4441      	add	r1, r8
 800bd68:	e7c5      	b.n	800bcf6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 800bd6a:	4f22      	ldr	r7, [pc, #136]	; (800bdf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 800bd6c:	0973      	lsrs	r3, r6, #5
 800bd6e:	ea08 0707 	and.w	r7, r8, r7
 800bd72:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800bd76:	433b      	orrs	r3, r7
 800bd78:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800bd7c:	4333      	orrs	r3, r6
 800bd7e:	07e7      	lsls	r7, r4, #31
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	d50b      	bpl.n	800bd9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 800bd84:	0040      	lsls	r0, r0, #1
 800bd86:	0052      	lsls	r2, r2, #1
 800bd88:	42a9      	cmp	r1, r5
 800bd8a:	d231      	bcs.n	800bdf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800bd8c:	180c      	adds	r4, r1, r0
 800bd8e:	42a1      	cmp	r1, r4
 800bd90:	d202      	bcs.n	800bd98 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 800bd92:	f821 3b02 	strh.w	r3, [r1], #2
 800bd96:	e7fa      	b.n	800bd8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 800bd98:	4411      	add	r1, r2
 800bd9a:	e7f5      	b.n	800bd88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 800bd9c:	078e      	lsls	r6, r1, #30
 800bd9e:	d008      	beq.n	800bdb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 800bda0:	0066      	lsls	r6, r4, #1
 800bda2:	460a      	mov	r2, r1
 800bda4:	42aa      	cmp	r2, r5
 800bda6:	d202      	bcs.n	800bdae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 800bda8:	8013      	strh	r3, [r2, #0]
 800bdaa:	4432      	add	r2, r6
 800bdac:	e7fa      	b.n	800bda4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 800bdae:	3102      	adds	r1, #2
 800bdb0:	3801      	subs	r0, #1
 800bdb2:	07c2      	lsls	r2, r0, #31
 800bdb4:	d50b      	bpl.n	800bdce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800bdb6:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 800bdba:	3a01      	subs	r2, #1
 800bdbc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bdc0:	0066      	lsls	r6, r4, #1
 800bdc2:	42aa      	cmp	r2, r5
 800bdc4:	d202      	bcs.n	800bdcc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 800bdc6:	8013      	strh	r3, [r2, #0]
 800bdc8:	4432      	add	r2, r6
 800bdca:	e7fa      	b.n	800bdc2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 800bdcc:	3801      	subs	r0, #1
 800bdce:	b178      	cbz	r0, 800bdf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800bdd0:	1040      	asrs	r0, r0, #1
 800bdd2:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 800bdd6:	0080      	lsls	r0, r0, #2
 800bdd8:	0064      	lsls	r4, r4, #1
 800bdda:	42a9      	cmp	r1, r5
 800bddc:	d208      	bcs.n	800bdf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800bdde:	180e      	adds	r6, r1, r0
 800bde0:	460a      	mov	r2, r1
 800bde2:	42b2      	cmp	r2, r6
 800bde4:	d202      	bcs.n	800bdec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 800bde6:	f842 3b04 	str.w	r3, [r2], #4
 800bdea:	e7fa      	b.n	800bde2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 800bdec:	4421      	add	r1, r4
 800bdee:	e7f4      	b.n	800bdda <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 800bdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf4:	00fff800 	.word	0x00fff800

0800bdf8 <_ZN8touchgfx8LCD16bppC1Ev>:
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	4912      	ldr	r1, [pc, #72]	; (800be44 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 800bdfc:	6042      	str	r2, [r0, #4]
 800bdfe:	6001      	str	r1, [r0, #0]
 800be00:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800be04:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800be08:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800be0c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800be10:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 800be14:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 800be18:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 800be1c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 800be20:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 800be24:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 800be28:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 800be2c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 800be30:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 800be34:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 800be38:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 800be3c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	0800f0b0 	.word	0x0800f0b0

0800be48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 800be48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4c:	460d      	mov	r5, r1
 800be4e:	b08d      	sub	sp, #52	; 0x34
 800be50:	4604      	mov	r4, r0
 800be52:	6808      	ldr	r0, [r1, #0]
 800be54:	6849      	ldr	r1, [r1, #4]
 800be56:	4699      	mov	r9, r3
 800be58:	ab08      	add	r3, sp, #32
 800be5a:	c303      	stmia	r3!, {r0, r1}
 800be5c:	6810      	ldr	r0, [r2, #0]
 800be5e:	6851      	ldr	r1, [r2, #4]
 800be60:	ab0a      	add	r3, sp, #40	; 0x28
 800be62:	c303      	stmia	r3!, {r0, r1}
 800be64:	a808      	add	r0, sp, #32
 800be66:	f7fe f873 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800be6a:	4629      	mov	r1, r5
 800be6c:	a80a      	add	r0, sp, #40	; 0x28
 800be6e:	f7fe f897 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800be72:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 800be76:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800be7a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800be7e:	4d63      	ldr	r5, [pc, #396]	; (800c00c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800be80:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 800be84:	6828      	ldr	r0, [r5, #0]
 800be86:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 800be8a:	fb11 2103 	smlabb	r1, r1, r3, r2
 800be8e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800be92:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800be96:	440a      	add	r2, r1
 800be98:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800be9c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800bea0:	4413      	add	r3, r2
 800bea2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800bea6:	6803      	ldr	r3, [r0, #0]
 800bea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beaa:	4798      	blx	r3
 800beac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800beb0:	d119      	bne.n	800bee6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 800beb2:	f010 0f20 	tst.w	r0, #32
 800beb6:	6828      	ldr	r0, [r5, #0]
 800beb8:	d018      	beq.n	800beec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 800beba:	2500      	movs	r5, #0
 800bebc:	6801      	ldr	r1, [r0, #0]
 800bebe:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800bec2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800bec6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 800beca:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 800bece:	9502      	str	r5, [sp, #8]
 800bed0:	b2b6      	uxth	r6, r6
 800bed2:	fa1f f588 	uxth.w	r5, r8
 800bed6:	9601      	str	r6, [sp, #4]
 800bed8:	9500      	str	r5, [sp, #0]
 800beda:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 800bedc:	4621      	mov	r1, r4
 800bede:	47a8      	blx	r5
 800bee0:	b00d      	add	sp, #52	; 0x34
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800beea:	e7e4      	b.n	800beb6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 800beec:	6803      	ldr	r3, [r0, #0]
 800beee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef0:	4798      	blx	r3
 800bef2:	4947      	ldr	r1, [pc, #284]	; (800c010 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 800bef4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 800bef8:	880b      	ldrh	r3, [r1, #0]
 800befa:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 800befe:	fb03 5202 	mla	r2, r3, r2, r5
 800bf02:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800bf06:	4373      	muls	r3, r6
 800bf08:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800bf0c:	9307      	str	r3, [sp, #28]
 800bf0e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800bf12:	9306      	str	r3, [sp, #24]
 800bf14:	468a      	mov	sl, r1
 800bf16:	9b07      	ldr	r3, [sp, #28]
 800bf18:	4298      	cmp	r0, r3
 800bf1a:	d270      	bcs.n	800bffe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 800bf1c:	9b06      	ldr	r3, [sp, #24]
 800bf1e:	4621      	mov	r1, r4
 800bf20:	eb00 0b03 	add.w	fp, r0, r3
 800bf24:	4558      	cmp	r0, fp
 800bf26:	d25d      	bcs.n	800bfe4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 800bf28:	f851 4b04 	ldr.w	r4, [r1], #4
 800bf2c:	0e23      	lsrs	r3, r4, #24
 800bf2e:	d014      	beq.n	800bf5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800bf30:	2bff      	cmp	r3, #255	; 0xff
 800bf32:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800bf36:	d112      	bne.n	800bf5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800bf38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800bf3c:	d10f      	bne.n	800bf5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800bf3e:	0963      	lsrs	r3, r4, #5
 800bf40:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 800bf44:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800bf48:	f02c 0c07 	bic.w	ip, ip, #7
 800bf4c:	ea43 0c0c 	orr.w	ip, r3, ip
 800bf50:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 800bf54:	ea4c 0404 	orr.w	r4, ip, r4
 800bf58:	8004      	strh	r4, [r0, #0]
 800bf5a:	3002      	adds	r0, #2
 800bf5c:	e7e2      	b.n	800bf24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 800bf5e:	fb09 f303 	mul.w	r3, r9, r3
 800bf62:	8807      	ldrh	r7, [r0, #0]
 800bf64:	1c5a      	adds	r2, r3, #1
 800bf66:	eb02 2223 	add.w	r2, r2, r3, asr #8
 800bf6a:	1212      	asrs	r2, r2, #8
 800bf6c:	123e      	asrs	r6, r7, #8
 800bf6e:	b293      	uxth	r3, r2
 800bf70:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 800bf74:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 800bf78:	43d2      	mvns	r2, r2
 800bf7a:	b2d2      	uxtb	r2, r2
 800bf7c:	10fd      	asrs	r5, r7, #3
 800bf7e:	fb1e fe03 	smulbb	lr, lr, r3
 800bf82:	00ff      	lsls	r7, r7, #3
 800bf84:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 800bf88:	fb06 e602 	mla	r6, r6, r2, lr
 800bf8c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 800bf90:	b2ff      	uxtb	r7, r7
 800bf92:	fa5f fc8c 	uxtb.w	ip, ip
 800bf96:	b2e4      	uxtb	r4, r4
 800bf98:	b2b6      	uxth	r6, r6
 800bf9a:	fb1c fc03 	smulbb	ip, ip, r3
 800bf9e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 800bfa2:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 800bfa6:	fb14 f403 	smulbb	r4, r4, r3
 800bfaa:	fb05 c502 	mla	r5, r5, r2, ip
 800bfae:	f106 0e01 	add.w	lr, r6, #1
 800bfb2:	fb07 4702 	mla	r7, r7, r2, r4
 800bfb6:	b2ad      	uxth	r5, r5
 800bfb8:	b2bf      	uxth	r7, r7
 800bfba:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 800bfbe:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 800bfc2:	f105 0c01 	add.w	ip, r5, #1
 800bfc6:	1c7e      	adds	r6, r7, #1
 800bfc8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 800bfcc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 800bfd0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 800bfd4:	096d      	lsrs	r5, r5, #5
 800bfd6:	ea46 060e 	orr.w	r6, r6, lr
 800bfda:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 800bfde:	432e      	orrs	r6, r5
 800bfe0:	8006      	strh	r6, [r0, #0]
 800bfe2:	e7ba      	b.n	800bf5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800bfe4:	f8ba 3000 	ldrh.w	r3, [sl]
 800bfe8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 800bfec:	eba3 0308 	sub.w	r3, r3, r8
 800bff0:	eba4 0408 	sub.w	r4, r4, r8
 800bff4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800bff8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800bffc:	e78b      	b.n	800bf16 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 800bffe:	4b03      	ldr	r3, [pc, #12]	; (800c00c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	6803      	ldr	r3, [r0, #0]
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	4798      	blx	r3
 800c008:	e76a      	b.n	800bee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 800c00a:	bf00      	nop
 800c00c:	2000a1d8 	.word	0x2000a1d8
 800c010:	2000a1d2 	.word	0x2000a1d2

0800c014 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 800c014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c018:	460c      	mov	r4, r1
 800c01a:	b085      	sub	sp, #20
 800c01c:	6810      	ldr	r0, [r2, #0]
 800c01e:	6851      	ldr	r1, [r2, #4]
 800c020:	466d      	mov	r5, sp
 800c022:	c503      	stmia	r5!, {r0, r1}
 800c024:	6818      	ldr	r0, [r3, #0]
 800c026:	6859      	ldr	r1, [r3, #4]
 800c028:	4616      	mov	r6, r2
 800c02a:	c503      	stmia	r5!, {r0, r1}
 800c02c:	4668      	mov	r0, sp
 800c02e:	f7fd ff8f 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800c032:	4631      	mov	r1, r6
 800c034:	a802      	add	r0, sp, #8
 800c036:	f7fd ffb3 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800c03a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800c03e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800c042:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800c046:	4d28      	ldr	r5, [pc, #160]	; (800c0e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 800c048:	4e28      	ldr	r6, [pc, #160]	; (800c0ec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 800c04a:	6828      	ldr	r0, [r5, #0]
 800c04c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800c050:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 800c054:	fb11 2103 	smlabb	r1, r1, r3, r2
 800c058:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800c05c:	f8bd 1000 	ldrh.w	r1, [sp]
 800c060:	440a      	add	r2, r1
 800c062:	f8ad 2008 	strh.w	r2, [sp, #8]
 800c066:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c06a:	4413      	add	r3, r2
 800c06c:	f8ad 300a 	strh.w	r3, [sp, #10]
 800c070:	6803      	ldr	r3, [r0, #0]
 800c072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c074:	4798      	blx	r3
 800c076:	8833      	ldrh	r3, [r6, #0]
 800c078:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800c07c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800c080:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800c0f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 800c084:	fb03 1202 	mla	r2, r3, r2, r1
 800c088:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800c08c:	fb08 f303 	mul.w	r3, r8, r3
 800c090:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c094:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 800c098:	4298      	cmp	r0, r3
 800c09a:	d21d      	bcs.n	800c0d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 800c09c:	eb00 080c 	add.w	r8, r0, ip
 800c0a0:	4540      	cmp	r0, r8
 800c0a2:	d20f      	bcs.n	800c0c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 800c0a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0a8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 800c0ac:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 800c0b0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 800c0b4:	ea42 0209 	orr.w	r2, r2, r9
 800c0b8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800c0bc:	430a      	orrs	r2, r1
 800c0be:	f820 2b02 	strh.w	r2, [r0], #2
 800c0c2:	e7ed      	b.n	800c0a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 800c0c4:	8832      	ldrh	r2, [r6, #0]
 800c0c6:	1bd2      	subs	r2, r2, r7
 800c0c8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800c0cc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800c0d0:	1bd2      	subs	r2, r2, r7
 800c0d2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800c0d6:	e7df      	b.n	800c098 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 800c0d8:	6828      	ldr	r0, [r5, #0]
 800c0da:	6803      	ldr	r3, [r0, #0]
 800c0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0de:	4798      	blx	r3
 800c0e0:	b005      	add	sp, #20
 800c0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0e6:	bf00      	nop
 800c0e8:	2000a1d8 	.word	0x2000a1d8
 800c0ec:	2000a1d2 	.word	0x2000a1d2
 800c0f0:	fffff800 	.word	0xfffff800

0800c0f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 800c0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f8:	460e      	mov	r6, r1
 800c0fa:	b08e      	sub	sp, #56	; 0x38
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	6808      	ldr	r0, [r1, #0]
 800c100:	6849      	ldr	r1, [r1, #4]
 800c102:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800c2dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 800c106:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800c2e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 800c10a:	461d      	mov	r5, r3
 800c10c:	ab0a      	add	r3, sp, #40	; 0x28
 800c10e:	c303      	stmia	r3!, {r0, r1}
 800c110:	6810      	ldr	r0, [r2, #0]
 800c112:	6851      	ldr	r1, [r2, #4]
 800c114:	ab0c      	add	r3, sp, #48	; 0x30
 800c116:	c303      	stmia	r3!, {r0, r1}
 800c118:	a80a      	add	r0, sp, #40	; 0x28
 800c11a:	f7fd ff19 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800c11e:	4631      	mov	r1, r6
 800c120:	a80c      	add	r0, sp, #48	; 0x30
 800c122:	f7fd ff3d 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800c126:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 800c12a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800c12e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800c132:	f8d8 0000 	ldr.w	r0, [r8]
 800c136:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 800c13a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 800c13e:	fb11 2103 	smlabb	r1, r1, r3, r2
 800c142:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800c146:	440c      	add	r4, r1
 800c148:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800c14c:	440a      	add	r2, r1
 800c14e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800c152:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800c156:	4413      	add	r3, r2
 800c158:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800c15c:	6803      	ldr	r3, [r0, #0]
 800c15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c160:	4798      	blx	r3
 800c162:	2dff      	cmp	r5, #255	; 0xff
 800c164:	d124      	bne.n	800c1b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 800c166:	f010 0f01 	tst.w	r0, #1
 800c16a:	f8d8 0000 	ldr.w	r0, [r8]
 800c16e:	d022      	beq.n	800c1b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 800c170:	2100      	movs	r1, #0
 800c172:	f8d0 c000 	ldr.w	ip, [r0]
 800c176:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800c17a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800c17e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800c182:	f04f 0e01 	mov.w	lr, #1
 800c186:	f8cd e018 	str.w	lr, [sp, #24]
 800c18a:	f8b9 e000 	ldrh.w	lr, [r9]
 800c18e:	9503      	str	r5, [sp, #12]
 800c190:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 800c194:	b2b6      	uxth	r6, r6
 800c196:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800c19a:	9102      	str	r1, [sp, #8]
 800c19c:	b2bf      	uxth	r7, r7
 800c19e:	9601      	str	r6, [sp, #4]
 800c1a0:	9700      	str	r7, [sp, #0]
 800c1a2:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	47a8      	blx	r5
 800c1aa:	b00e      	add	sp, #56	; 0x38
 800c1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b0:	f010 0f04 	tst.w	r0, #4
 800c1b4:	e7d9      	b.n	800c16a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 800c1b6:	6803      	ldr	r3, [r0, #0]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ba:	4798      	blx	r3
 800c1bc:	f8b9 3000 	ldrh.w	r3, [r9]
 800c1c0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 800c1c4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 800c1c8:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 800c1cc:	fb03 1202 	mla	r2, r3, r2, r1
 800c1d0:	ebac 0c07 	sub.w	ip, ip, r7
 800c1d4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800c1d8:	435e      	muls	r6, r3
 800c1da:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 800c1de:	2dff      	cmp	r5, #255	; 0xff
 800c1e0:	eba3 0707 	sub.w	r7, r3, r7
 800c1e4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800c1e8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800c1ec:	ea4f 0747 	mov.w	r7, r7, lsl #1
 800c1f0:	d049      	beq.n	800c286 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 800c1f2:	43eb      	mvns	r3, r5
 800c1f4:	fa1f f985 	uxth.w	r9, r5
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	42b0      	cmp	r0, r6
 800c1fc:	d266      	bcs.n	800c2cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 800c1fe:	eb00 0a0e 	add.w	sl, r0, lr
 800c202:	4550      	cmp	r0, sl
 800c204:	4621      	mov	r1, r4
 800c206:	f104 0403 	add.w	r4, r4, #3
 800c20a:	d25b      	bcs.n	800c2c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 800c20c:	8802      	ldrh	r2, [r0, #0]
 800c20e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800c212:	ea4f 2822 	mov.w	r8, r2, asr #8
 800c216:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 800c21a:	fb11 f109 	smulbb	r1, r1, r9
 800c21e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 800c222:	10d5      	asrs	r5, r2, #3
 800c224:	fb08 1803 	mla	r8, r8, r3, r1
 800c228:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800c22c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 800c230:	fb11 f109 	smulbb	r1, r1, r9
 800c234:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 800c238:	fb05 1503 	mla	r5, r5, r3, r1
 800c23c:	00d2      	lsls	r2, r2, #3
 800c23e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800c242:	b2d2      	uxtb	r2, r2
 800c244:	fb11 f109 	smulbb	r1, r1, r9
 800c248:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800c24c:	fa1f f888 	uxth.w	r8, r8
 800c250:	fb02 1203 	mla	r2, r2, r3, r1
 800c254:	b292      	uxth	r2, r2
 800c256:	f108 0101 	add.w	r1, r8, #1
 800c25a:	b2ad      	uxth	r5, r5
 800c25c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 800c260:	1c51      	adds	r1, r2, #1
 800c262:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800c266:	1c69      	adds	r1, r5, #1
 800c268:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 800c26c:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 800c270:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800c274:	096d      	lsrs	r5, r5, #5
 800c276:	ea42 0208 	orr.w	r2, r2, r8
 800c27a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 800c27e:	432a      	orrs	r2, r5
 800c280:	f820 2b02 	strh.w	r2, [r0], #2
 800c284:	e7bd      	b.n	800c202 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 800c286:	4a14      	ldr	r2, [pc, #80]	; (800c2d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 800c288:	42b0      	cmp	r0, r6
 800c28a:	d21f      	bcs.n	800c2cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 800c28c:	eb00 050e 	add.w	r5, r0, lr
 800c290:	42a8      	cmp	r0, r5
 800c292:	4621      	mov	r1, r4
 800c294:	f104 0403 	add.w	r4, r4, #3
 800c298:	d210      	bcs.n	800c2bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 800c29a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800c29e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 800c2a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800c2ac:	430b      	orrs	r3, r1
 800c2ae:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800c2b2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 800c2b6:	f820 3b02 	strh.w	r3, [r0], #2
 800c2ba:	e7e9      	b.n	800c290 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 800c2bc:	4438      	add	r0, r7
 800c2be:	eb01 040c 	add.w	r4, r1, ip
 800c2c2:	e7e1      	b.n	800c288 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 800c2c4:	4438      	add	r0, r7
 800c2c6:	eb01 040c 	add.w	r4, r1, ip
 800c2ca:	e796      	b.n	800c1fa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 800c2cc:	4b03      	ldr	r3, [pc, #12]	; (800c2dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	6803      	ldr	r3, [r0, #0]
 800c2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d4:	4798      	blx	r3
 800c2d6:	e768      	b.n	800c1aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 800c2d8:	fffff800 	.word	0xfffff800
 800c2dc:	2000a1d8 	.word	0x2000a1d8
 800c2e0:	2000a1d2 	.word	0x2000a1d2

0800c2e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 800c2e4:	b4f0      	push	{r4, r5, r6, r7}
 800c2e6:	4616      	mov	r6, r2
 800c2e8:	2e01      	cmp	r6, #1
 800c2ea:	461c      	mov	r4, r3
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	9a04      	ldr	r2, [sp, #16]
 800c2f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c2f4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800c2f8:	d012      	beq.n	800c320 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 800c2fa:	d303      	bcc.n	800c304 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 800c2fc:	2e02      	cmp	r6, #2
 800c2fe:	d00a      	beq.n	800c316 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 800c300:	bcf0      	pop	{r4, r5, r6, r7}
 800c302:	4770      	bx	lr
 800c304:	6805      	ldr	r5, [r0, #0]
 800c306:	e9cd 3704 	strd	r3, r7, [sp, #16]
 800c30a:	68ed      	ldr	r5, [r5, #12]
 800c30c:	4613      	mov	r3, r2
 800c30e:	46ac      	mov	ip, r5
 800c310:	4622      	mov	r2, r4
 800c312:	bcf0      	pop	{r4, r5, r6, r7}
 800c314:	4760      	bx	ip
 800c316:	4621      	mov	r1, r4
 800c318:	4628      	mov	r0, r5
 800c31a:	bcf0      	pop	{r4, r5, r6, r7}
 800c31c:	f7ff bd94 	b.w	800be48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800c320:	4621      	mov	r1, r4
 800c322:	4628      	mov	r0, r5
 800c324:	bcf0      	pop	{r4, r5, r6, r7}
 800c326:	f7ff bee5 	b.w	800c0f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0800c32c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	4681      	mov	r9, r0
 800c332:	b093      	sub	sp, #76	; 0x4c
 800c334:	6810      	ldr	r0, [r2, #0]
 800c336:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 800c33a:	4f6d      	ldr	r7, [pc, #436]	; (800c4f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 800c33c:	4688      	mov	r8, r1
 800c33e:	6851      	ldr	r1, [r2, #4]
 800c340:	ac0e      	add	r4, sp, #56	; 0x38
 800c342:	c403      	stmia	r4!, {r0, r1}
 800c344:	6818      	ldr	r0, [r3, #0]
 800c346:	6859      	ldr	r1, [r3, #4]
 800c348:	ac10      	add	r4, sp, #64	; 0x40
 800c34a:	4616      	mov	r6, r2
 800c34c:	c403      	stmia	r4!, {r0, r1}
 800c34e:	a80e      	add	r0, sp, #56	; 0x38
 800c350:	f7fd fdfe 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800c354:	4631      	mov	r1, r6
 800c356:	a810      	add	r0, sp, #64	; 0x40
 800c358:	f7fd fe22 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800c35c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800c360:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800c364:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 800c368:	4e62      	ldr	r6, [pc, #392]	; (800c4f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800c36a:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 800c36e:	6830      	ldr	r0, [r6, #0]
 800c370:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 800c374:	fb11 2103 	smlabb	r1, r1, r3, r2
 800c378:	4489      	add	r9, r1
 800c37a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800c37e:	440a      	add	r2, r1
 800c380:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800c384:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800c388:	4413      	add	r3, r2
 800c38a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800c38e:	6803      	ldr	r3, [r0, #0]
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	4798      	blx	r3
 800c394:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c398:	6830      	ldr	r0, [r6, #0]
 800c39a:	d01d      	beq.n	800c3d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 800c39c:	2200      	movs	r2, #0
 800c39e:	6801      	ldr	r1, [r0, #0]
 800c3a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c3a4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800c3a8:	220b      	movs	r2, #11
 800c3aa:	9207      	str	r2, [sp, #28]
 800c3ac:	883a      	ldrh	r2, [r7, #0]
 800c3ae:	9206      	str	r2, [sp, #24]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	e9cd a204 	strd	sl, r2, [sp, #16]
 800c3b6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800c3ba:	9203      	str	r2, [sp, #12]
 800c3bc:	b2a4      	uxth	r4, r4
 800c3be:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800c3c2:	9200      	str	r2, [sp, #0]
 800c3c4:	b2ad      	uxth	r5, r5
 800c3c6:	9502      	str	r5, [sp, #8]
 800c3c8:	9401      	str	r4, [sp, #4]
 800c3ca:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 800c3cc:	4642      	mov	r2, r8
 800c3ce:	4649      	mov	r1, r9
 800c3d0:	47a0      	blx	r4
 800c3d2:	b013      	add	sp, #76	; 0x4c
 800c3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d8:	6803      	ldr	r3, [r0, #0]
 800c3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3dc:	4798      	blx	r3
 800c3de:	883b      	ldrh	r3, [r7, #0]
 800c3e0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800c3e4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 800c3e8:	fb03 1202 	mla	r2, r3, r2, r1
 800c3ec:	435d      	muls	r5, r3
 800c3ee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800c3f2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 800c3f6:	920c      	str	r2, [sp, #48]	; 0x30
 800c3f8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 800c3fc:	1b12      	subs	r2, r2, r4
 800c3fe:	920d      	str	r2, [sp, #52]	; 0x34
 800c400:	0062      	lsls	r2, r4, #1
 800c402:	1b1c      	subs	r4, r3, r4
 800c404:	0063      	lsls	r3, r4, #1
 800c406:	920a      	str	r2, [sp, #40]	; 0x28
 800c408:	930b      	str	r3, [sp, #44]	; 0x2c
 800c40a:	f04f 0e04 	mov.w	lr, #4
 800c40e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c410:	4298      	cmp	r0, r3
 800c412:	d266      	bcs.n	800c4e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 800c414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c416:	eb00 0b03 	add.w	fp, r0, r3
 800c41a:	4558      	cmp	r0, fp
 800c41c:	d25c      	bcs.n	800c4d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 800c41e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c422:	fb1e e303 	smlabb	r3, lr, r3, lr
 800c426:	f858 2003 	ldr.w	r2, [r8, r3]
 800c42a:	0e11      	lsrs	r1, r2, #24
 800c42c:	d012      	beq.n	800c454 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800c42e:	29ff      	cmp	r1, #255	; 0xff
 800c430:	ea4f 2712 	mov.w	r7, r2, lsr #8
 800c434:	d110      	bne.n	800c458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 800c436:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800c43a:	d10d      	bne.n	800c458 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 800c43c:	0953      	lsrs	r3, r2, #5
 800c43e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 800c442:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800c446:	f027 0707 	bic.w	r7, r7, #7
 800c44a:	431f      	orrs	r7, r3
 800c44c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800c450:	433a      	orrs	r2, r7
 800c452:	8002      	strh	r2, [r0, #0]
 800c454:	3002      	adds	r0, #2
 800c456:	e7e0      	b.n	800c41a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 800c458:	fb0a f101 	mul.w	r1, sl, r1
 800c45c:	8806      	ldrh	r6, [r0, #0]
 800c45e:	1c4b      	adds	r3, r1, #1
 800c460:	eb03 2321 	add.w	r3, r3, r1, asr #8
 800c464:	1235      	asrs	r5, r6, #8
 800c466:	10f4      	asrs	r4, r6, #3
 800c468:	121b      	asrs	r3, r3, #8
 800c46a:	00f6      	lsls	r6, r6, #3
 800c46c:	b299      	uxth	r1, r3
 800c46e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c472:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 800c476:	b2f6      	uxtb	r6, r6
 800c478:	43db      	mvns	r3, r3
 800c47a:	b2d2      	uxtb	r2, r2
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	fb1c fc01 	smulbb	ip, ip, r1
 800c482:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 800c486:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 800c48a:	fb12 f201 	smulbb	r2, r2, r1
 800c48e:	fb05 c503 	mla	r5, r5, r3, ip
 800c492:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 800c496:	b2ff      	uxtb	r7, r7
 800c498:	fb06 2203 	mla	r2, r6, r3, r2
 800c49c:	b2ad      	uxth	r5, r5
 800c49e:	fb17 f701 	smulbb	r7, r7, r1
 800c4a2:	b292      	uxth	r2, r2
 800c4a4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 800c4a8:	fb04 7403 	mla	r4, r4, r3, r7
 800c4ac:	f105 0c01 	add.w	ip, r5, #1
 800c4b0:	1c57      	adds	r7, r2, #1
 800c4b2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 800c4b6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 800c4ba:	b2a4      	uxth	r4, r4
 800c4bc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800c4c0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 800c4c4:	433d      	orrs	r5, r7
 800c4c6:	1c67      	adds	r7, r4, #1
 800c4c8:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 800c4cc:	0964      	lsrs	r4, r4, #5
 800c4ce:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 800c4d2:	4325      	orrs	r5, r4
 800c4d4:	8005      	strh	r5, [r0, #0]
 800c4d6:	e7bd      	b.n	800c454 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800c4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4da:	4418      	add	r0, r3
 800c4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4de:	4499      	add	r9, r3
 800c4e0:	e795      	b.n	800c40e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 800c4e2:	4b04      	ldr	r3, [pc, #16]	; (800c4f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800c4e4:	6818      	ldr	r0, [r3, #0]
 800c4e6:	6803      	ldr	r3, [r0, #0]
 800c4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ea:	4798      	blx	r3
 800c4ec:	e771      	b.n	800c3d2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 800c4ee:	bf00      	nop
 800c4f0:	2000a1d2 	.word	0x2000a1d2
 800c4f4:	2000a1d8 	.word	0x2000a1d8

0800c4f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	b087      	sub	sp, #28
 800c4fe:	4680      	mov	r8, r0
 800c500:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 800c504:	460d      	mov	r5, r1
 800c506:	4614      	mov	r4, r2
 800c508:	2e00      	cmp	r6, #0
 800c50a:	f000 80b9 	beq.w	800c680 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 800c50e:	6810      	ldr	r0, [r2, #0]
 800c510:	6851      	ldr	r1, [r2, #4]
 800c512:	af02      	add	r7, sp, #8
 800c514:	c703      	stmia	r7!, {r0, r1}
 800c516:	6818      	ldr	r0, [r3, #0]
 800c518:	6859      	ldr	r1, [r3, #4]
 800c51a:	af04      	add	r7, sp, #16
 800c51c:	c703      	stmia	r7!, {r0, r1}
 800c51e:	a802      	add	r0, sp, #8
 800c520:	f7fd fd16 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800c524:	4621      	mov	r1, r4
 800c526:	a804      	add	r0, sp, #16
 800c528:	f7fd fd3a 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800c52c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c530:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c534:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 800c538:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 800c53c:	fb14 2103 	smlabb	r1, r4, r3, r2
 800c540:	eb08 0401 	add.w	r4, r8, r1
 800c544:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800c548:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800c54c:	440a      	add	r2, r1
 800c54e:	f8ad 2010 	strh.w	r2, [sp, #16]
 800c552:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c556:	4413      	add	r3, r2
 800c558:	f8ad 3012 	strh.w	r3, [sp, #18]
 800c55c:	4b4a      	ldr	r3, [pc, #296]	; (800c688 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800c55e:	6818      	ldr	r0, [r3, #0]
 800c560:	6803      	ldr	r3, [r0, #0]
 800c562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c564:	4798      	blx	r3
 800c566:	4b49      	ldr	r3, [pc, #292]	; (800c68c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 800c568:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800c56c:	881a      	ldrh	r2, [r3, #0]
 800c56e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800c572:	2eff      	cmp	r6, #255	; 0xff
 800c574:	fb02 c101 	mla	r1, r2, r1, ip
 800c578:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800c57c:	fb02 f207 	mul.w	r2, r2, r7
 800c580:	f105 0104 	add.w	r1, r5, #4
 800c584:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800c588:	461d      	mov	r5, r3
 800c58a:	d05a      	beq.n	800c642 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 800c58c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 800c590:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800c594:	b2b6      	uxth	r6, r6
 800c596:	fa1f fe8e 	uxth.w	lr, lr
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	4282      	cmp	r2, r0
 800c59e:	d96a      	bls.n	800c676 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800c5a0:	eb00 0b0a 	add.w	fp, r0, sl
 800c5a4:	4583      	cmp	fp, r0
 800c5a6:	d940      	bls.n	800c62a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 800c5a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5ac:	8805      	ldrh	r5, [r0, #0]
 800c5ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c5b2:	122f      	asrs	r7, r5, #8
 800c5b4:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800c5b8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800c5bc:	fb17 f70e 	smulbb	r7, r7, lr
 800c5c0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 800c5c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800c5c8:	00ed      	lsls	r5, r5, #3
 800c5ca:	fb0c 7c06 	mla	ip, ip, r6, r7
 800c5ce:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 800c5d2:	10df      	asrs	r7, r3, #3
 800c5d4:	b2ed      	uxtb	r5, r5
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	fa1f fc8c 	uxth.w	ip, ip
 800c5dc:	fb19 f90e 	smulbb	r9, r9, lr
 800c5e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	fb15 f50e 	smulbb	r5, r5, lr
 800c5ea:	fb07 9706 	mla	r7, r7, r6, r9
 800c5ee:	fb03 5306 	mla	r3, r3, r6, r5
 800c5f2:	f10c 0901 	add.w	r9, ip, #1
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 800c5fc:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 800c600:	f103 0c01 	add.w	ip, r3, #1
 800c604:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800c608:	b2bf      	uxth	r7, r7
 800c60a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800c60e:	ea4c 0c09 	orr.w	ip, ip, r9
 800c612:	f107 0901 	add.w	r9, r7, #1
 800c616:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800c61a:	097f      	lsrs	r7, r7, #5
 800c61c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 800c620:	ea4c 0c07 	orr.w	ip, ip, r7
 800c624:	f820 cb02 	strh.w	ip, [r0], #2
 800c628:	e7bc      	b.n	800c5a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 800c62a:	9b01      	ldr	r3, [sp, #4]
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	eba3 0308 	sub.w	r3, r3, r8
 800c632:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c636:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800c63a:	eba3 0308 	sub.w	r3, r3, r8
 800c63e:	441c      	add	r4, r3
 800c640:	e7ac      	b.n	800c59c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 800c642:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800c646:	4282      	cmp	r2, r0
 800c648:	d915      	bls.n	800c676 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800c64a:	eb00 060a 	add.w	r6, r0, sl
 800c64e:	4286      	cmp	r6, r0
 800c650:	d906      	bls.n	800c660 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 800c652:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c656:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c65a:	f820 3b02 	strh.w	r3, [r0], #2
 800c65e:	e7f6      	b.n	800c64e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 800c660:	882b      	ldrh	r3, [r5, #0]
 800c662:	eba3 0308 	sub.w	r3, r3, r8
 800c666:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c66a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800c66e:	eba3 0308 	sub.w	r3, r3, r8
 800c672:	441c      	add	r4, r3
 800c674:	e7e7      	b.n	800c646 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 800c676:	4b04      	ldr	r3, [pc, #16]	; (800c688 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800c678:	6818      	ldr	r0, [r3, #0]
 800c67a:	6803      	ldr	r3, [r0, #0]
 800c67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67e:	4798      	blx	r3
 800c680:	b007      	add	sp, #28
 800c682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c686:	bf00      	nop
 800c688:	2000a1d8 	.word	0x2000a1d8
 800c68c:	2000a1d2 	.word	0x2000a1d2

0800c690 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	b091      	sub	sp, #68	; 0x44
 800c696:	4680      	mov	r8, r0
 800c698:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 800c69c:	460f      	mov	r7, r1
 800c69e:	4614      	mov	r4, r2
 800c6a0:	2d00      	cmp	r5, #0
 800c6a2:	d051      	beq.n	800c748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800c6a4:	6810      	ldr	r0, [r2, #0]
 800c6a6:	6851      	ldr	r1, [r2, #4]
 800c6a8:	f8df 9200 	ldr.w	r9, [pc, #512]	; 800c8ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 800c6ac:	ae0c      	add	r6, sp, #48	; 0x30
 800c6ae:	c603      	stmia	r6!, {r0, r1}
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	6859      	ldr	r1, [r3, #4]
 800c6b4:	ae0e      	add	r6, sp, #56	; 0x38
 800c6b6:	c603      	stmia	r6!, {r0, r1}
 800c6b8:	a80c      	add	r0, sp, #48	; 0x30
 800c6ba:	f7fd fc49 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800c6be:	4621      	mov	r1, r4
 800c6c0:	a80e      	add	r0, sp, #56	; 0x38
 800c6c2:	f7fd fc6d 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800c6c6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 800c6ca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800c6ce:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800c6d2:	f8d9 0000 	ldr.w	r0, [r9]
 800c6d6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 800c6da:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 800c6de:	fb11 2103 	smlabb	r1, r1, r3, r2
 800c6e2:	eb08 0401 	add.w	r4, r8, r1
 800c6e6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800c6ea:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800c8b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 800c6ee:	440a      	add	r2, r1
 800c6f0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 800c6f4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800c6fe:	6803      	ldr	r3, [r0, #0]
 800c700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c702:	4798      	blx	r3
 800c704:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c708:	f8d9 0000 	ldr.w	r0, [r9]
 800c70c:	d01f      	beq.n	800c74e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 800c70e:	2200      	movs	r2, #0
 800c710:	6801      	ldr	r1, [r0, #0]
 800c712:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c716:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800c71a:	220b      	movs	r2, #11
 800c71c:	9207      	str	r2, [sp, #28]
 800c71e:	f8b8 2000 	ldrh.w	r2, [r8]
 800c722:	9206      	str	r2, [sp, #24]
 800c724:	2201      	movs	r2, #1
 800c726:	e9cd 5204 	strd	r5, r2, [sp, #16]
 800c72a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800c72e:	9203      	str	r2, [sp, #12]
 800c730:	fa1f f28a 	uxth.w	r2, sl
 800c734:	9202      	str	r2, [sp, #8]
 800c736:	b2b6      	uxth	r6, r6
 800c738:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800c73c:	9200      	str	r2, [sp, #0]
 800c73e:	9601      	str	r6, [sp, #4]
 800c740:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 800c742:	463a      	mov	r2, r7
 800c744:	4621      	mov	r1, r4
 800c746:	47a8      	blx	r5
 800c748:	b011      	add	sp, #68	; 0x44
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	6803      	ldr	r3, [r0, #0]
 800c750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c752:	4798      	blx	r3
 800c754:	f8b8 2000 	ldrh.w	r2, [r8]
 800c758:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800c75c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 800c760:	2dff      	cmp	r5, #255	; 0xff
 800c762:	fb02 1303 	mla	r3, r2, r3, r1
 800c766:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c76a:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800c76e:	fb0a fa02 	mul.w	sl, sl, r2
 800c772:	d062      	beq.n	800c83a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 800c774:	ea6f 0c05 	mvn.w	ip, r5
 800c778:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 800c77c:	930a      	str	r3, [sp, #40]	; 0x28
 800c77e:	b2ad      	uxth	r5, r5
 800c780:	fa5f fc8c 	uxtb.w	ip, ip
 800c784:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800c788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c78a:	4298      	cmp	r0, r3
 800c78c:	f080 8085 	bcs.w	800c89a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800c790:	eb00 0b09 	add.w	fp, r0, r9
 800c794:	4558      	cmp	r0, fp
 800c796:	d246      	bcs.n	800c826 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 800c798:	f814 eb01 	ldrb.w	lr, [r4], #1
 800c79c:	2303      	movs	r3, #3
 800c79e:	2204      	movs	r2, #4
 800c7a0:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 800c7a4:	eb07 0a0e 	add.w	sl, r7, lr
 800c7a8:	8803      	ldrh	r3, [r0, #0]
 800c7aa:	f89a 8002 	ldrb.w	r8, [sl, #2]
 800c7ae:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800c7b2:	1219      	asrs	r1, r3, #8
 800c7b4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 800c7b8:	fb18 f805 	smulbb	r8, r8, r5
 800c7bc:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 800c7c0:	10da      	asrs	r2, r3, #3
 800c7c2:	fb01 810c 	mla	r1, r1, ip, r8
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 800c7cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	fb18 f805 	smulbb	r8, r8, r5
 800c7d6:	fb1e fe05 	smulbb	lr, lr, r5
 800c7da:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 800c7de:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 800c7e2:	b289      	uxth	r1, r1
 800c7e4:	fb02 820c 	mla	r2, r2, ip, r8
 800c7e8:	fb03 e30c 	mla	r3, r3, ip, lr
 800c7ec:	b292      	uxth	r2, r2
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	f101 0801 	add.w	r8, r1, #1
 800c7f4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 800c7f8:	f103 0e01 	add.w	lr, r3, #1
 800c7fc:	f102 0801 	add.w	r8, r2, #1
 800c800:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 800c804:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 800c808:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 800c80c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 800c810:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800c814:	ea4e 0101 	orr.w	r1, lr, r1
 800c818:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 800c81c:	ea41 0108 	orr.w	r1, r1, r8
 800c820:	f820 1b02 	strh.w	r1, [r0], #2
 800c824:	e7b6      	b.n	800c794 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 800c826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	1b9b      	subs	r3, r3, r6
 800c82c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c830:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800c834:	1b9b      	subs	r3, r3, r6
 800c836:	441c      	add	r4, r3
 800c838:	e7a6      	b.n	800c788 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 800c83a:	491b      	ldr	r1, [pc, #108]	; (800c8a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 800c83c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 800c840:	2203      	movs	r2, #3
 800c842:	2504      	movs	r5, #4
 800c844:	4550      	cmp	r0, sl
 800c846:	d228      	bcs.n	800c89a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800c848:	eb00 0c09 	add.w	ip, r0, r9
 800c84c:	4560      	cmp	r0, ip
 800c84e:	4623      	mov	r3, r4
 800c850:	d219      	bcs.n	800c886 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 800c852:	f893 e000 	ldrb.w	lr, [r3]
 800c856:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 800c85a:	eb07 0b0e 	add.w	fp, r7, lr
 800c85e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800c862:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800c866:	f89b b001 	ldrb.w	fp, [fp, #1]
 800c86a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c86e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 800c872:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 800c876:	ea43 030b 	orr.w	r3, r3, fp
 800c87a:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 800c87e:	3401      	adds	r4, #1
 800c880:	f820 3b02 	strh.w	r3, [r0], #2
 800c884:	e7e2      	b.n	800c84c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 800c886:	f8b8 3000 	ldrh.w	r3, [r8]
 800c88a:	1b9b      	subs	r3, r3, r6
 800c88c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c890:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800c894:	1b9b      	subs	r3, r3, r6
 800c896:	441c      	add	r4, r3
 800c898:	e7d4      	b.n	800c844 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 800c89a:	4b04      	ldr	r3, [pc, #16]	; (800c8ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 800c89c:	6818      	ldr	r0, [r3, #0]
 800c89e:	6803      	ldr	r3, [r0, #0]
 800c8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a2:	4798      	blx	r3
 800c8a4:	e750      	b.n	800c748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800c8a6:	bf00      	nop
 800c8a8:	fffff800 	.word	0xfffff800
 800c8ac:	2000a1d8 	.word	0x2000a1d8
 800c8b0:	2000a1d2 	.word	0x2000a1d2

0800c8b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 800c8b4:	b4f0      	push	{r4, r5, r6, r7}
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800c8be:	780f      	ldrb	r7, [r1, #0]
 800c8c0:	784e      	ldrb	r6, [r1, #1]
 800c8c2:	2f01      	cmp	r7, #1
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	9b04      	ldr	r3, [sp, #16]
 800c8c8:	d036      	beq.n	800c938 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 800c8ca:	d31e      	bcc.n	800c90a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 800c8cc:	2f02      	cmp	r7, #2
 800c8ce:	d14a      	bne.n	800c966 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 800c8d0:	2e03      	cmp	r6, #3
 800c8d2:	d848      	bhi.n	800c966 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 800c8d4:	e8df f006 	tbb	[pc, r6]
 800c8d8:	16140702 	.word	0x16140702
 800c8dc:	9504      	str	r5, [sp, #16]
 800c8de:	4620      	mov	r0, r4
 800c8e0:	bcf0      	pop	{r4, r5, r6, r7}
 800c8e2:	f7ff be09 	b.w	800c4f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 800c8e6:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d03c      	beq.n	800c966 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 800c8ec:	6806      	ldr	r6, [r0, #0]
 800c8ee:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800c8f2:	68b5      	ldr	r5, [r6, #8]
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	46ac      	mov	ip, r5
 800c8f8:	460a      	mov	r2, r1
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	bcf0      	pop	{r4, r5, r6, r7}
 800c8fe:	4760      	bx	ip
 800c900:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c902:	e7f1      	b.n	800c8e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800c904:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800c908:	e7ee      	b.n	800c8e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800c90a:	2e03      	cmp	r6, #3
 800c90c:	d82b      	bhi.n	800c966 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 800c90e:	e8df f006 	tbb	[pc, r6]
 800c912:	0702      	.short	0x0702
 800c914:	100e      	.short	0x100e
 800c916:	9504      	str	r5, [sp, #16]
 800c918:	4620      	mov	r0, r4
 800c91a:	bcf0      	pop	{r4, r5, r6, r7}
 800c91c:	f7ff bd06 	b.w	800c32c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 800c920:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800c922:	b300      	cbz	r0, 800c966 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 800c924:	6806      	ldr	r6, [r0, #0]
 800c926:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800c92a:	68f5      	ldr	r5, [r6, #12]
 800c92c:	e7e2      	b.n	800c8f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800c92e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c930:	e7f7      	b.n	800c922 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 800c932:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800c936:	e7f4      	b.n	800c922 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 800c938:	2e03      	cmp	r6, #3
 800c93a:	d814      	bhi.n	800c966 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 800c93c:	e8df f006 	tbb	[pc, r6]
 800c940:	100e0702 	.word	0x100e0702
 800c944:	9504      	str	r5, [sp, #16]
 800c946:	4620      	mov	r0, r4
 800c948:	bcf0      	pop	{r4, r5, r6, r7}
 800c94a:	f7ff bea1 	b.w	800c690 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 800c94e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800c950:	b148      	cbz	r0, 800c966 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 800c952:	6806      	ldr	r6, [r0, #0]
 800c954:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800c958:	6935      	ldr	r5, [r6, #16]
 800c95a:	e7cb      	b.n	800c8f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800c95c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c95e:	e7f7      	b.n	800c950 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 800c960:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800c964:	e7f4      	b.n	800c950 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 800c966:	bcf0      	pop	{r4, r5, r6, r7}
 800c968:	4770      	bx	lr
	...

0800c96c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	4604      	mov	r4, r0
 800c972:	b087      	sub	sp, #28
 800c974:	6810      	ldr	r0, [r2, #0]
 800c976:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 800c97a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800cbb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 800c97e:	460e      	mov	r6, r1
 800c980:	6851      	ldr	r1, [r2, #4]
 800c982:	ad02      	add	r5, sp, #8
 800c984:	c503      	stmia	r5!, {r0, r1}
 800c986:	6818      	ldr	r0, [r3, #0]
 800c988:	6859      	ldr	r1, [r3, #4]
 800c98a:	ad04      	add	r5, sp, #16
 800c98c:	4617      	mov	r7, r2
 800c98e:	c503      	stmia	r5!, {r0, r1}
 800c990:	a802      	add	r0, sp, #8
 800c992:	f7fd fadd 	bl	8009f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800c996:	4639      	mov	r1, r7
 800c998:	a804      	add	r0, sp, #16
 800c99a:	f7fd fb01 	bl	8009fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800c99e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c9a2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c9a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800c9aa:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800c9ae:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800c9b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 800c9b6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 800c9ba:	440e      	add	r6, r1
 800c9bc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800c9c0:	440a      	add	r2, r1
 800c9c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 800c9c6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	f8ad 3012 	strh.w	r3, [sp, #18]
 800c9d0:	4b77      	ldr	r3, [pc, #476]	; (800cbb0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800c9d2:	6818      	ldr	r0, [r3, #0]
 800c9d4:	6803      	ldr	r3, [r0, #0]
 800c9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d8:	4798      	blx	r3
 800c9da:	f8b9 b000 	ldrh.w	fp, [r9]
 800c9de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c9e2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c9e6:	fb0b 2303 	mla	r3, fp, r3, r2
 800c9ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c9ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800c9f2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800c9f6:	fb05 f50b 	mul.w	r5, r5, fp
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	d069      	beq.n	800cad2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 800c9fe:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 800ca02:	4558      	cmp	r0, fp
 800ca04:	f080 80cc 	bcs.w	800cba0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800ca08:	9b00      	ldr	r3, [sp, #0]
 800ca0a:	18c3      	adds	r3, r0, r3
 800ca0c:	9301      	str	r3, [sp, #4]
 800ca0e:	4631      	mov	r1, r6
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	4298      	cmp	r0, r3
 800ca14:	d24f      	bcs.n	800cab6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 800ca16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca1a:	2a00      	cmp	r2, #0
 800ca1c:	d048      	beq.n	800cab0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800ca1e:	fb0a f202 	mul.w	r2, sl, r2
 800ca22:	1c53      	adds	r3, r2, #1
 800ca24:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800ca28:	121b      	asrs	r3, r3, #8
 800ca2a:	d041      	beq.n	800cab0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800ca2c:	8802      	ldrh	r2, [r0, #0]
 800ca2e:	f8b4 c000 	ldrh.w	ip, [r4]
 800ca32:	b29e      	uxth	r6, r3
 800ca34:	1215      	asrs	r5, r2, #8
 800ca36:	43db      	mvns	r3, r3
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	ea4f 272c 	mov.w	r7, ip, asr #8
 800ca3e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 800ca42:	fb15 f503 	smulbb	r5, r5, r3
 800ca46:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 800ca4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800ca4e:	00d2      	lsls	r2, r2, #3
 800ca50:	fb07 5706 	mla	r7, r7, r6, r5
 800ca54:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 800ca58:	ea4f 05ec 	mov.w	r5, ip, asr #3
 800ca5c:	b2d2      	uxtb	r2, r2
 800ca5e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ca62:	b2bf      	uxth	r7, r7
 800ca64:	fb1e fe03 	smulbb	lr, lr, r3
 800ca68:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 800ca6c:	fa5f fc8c 	uxtb.w	ip, ip
 800ca70:	fb12 f203 	smulbb	r2, r2, r3
 800ca74:	fb05 e506 	mla	r5, r5, r6, lr
 800ca78:	fb0c 2c06 	mla	ip, ip, r6, r2
 800ca7c:	f107 0e01 	add.w	lr, r7, #1
 800ca80:	fa1f fc8c 	uxth.w	ip, ip
 800ca84:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 800ca88:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 800ca8c:	f10c 0701 	add.w	r7, ip, #1
 800ca90:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 800ca94:	b2ad      	uxth	r5, r5
 800ca96:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800ca9a:	ea47 070e 	orr.w	r7, r7, lr
 800ca9e:	f105 0e01 	add.w	lr, r5, #1
 800caa2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 800caa6:	096d      	lsrs	r5, r5, #5
 800caa8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 800caac:	432f      	orrs	r7, r5
 800caae:	8007      	strh	r7, [r0, #0]
 800cab0:	3002      	adds	r0, #2
 800cab2:	3402      	adds	r4, #2
 800cab4:	e7ac      	b.n	800ca10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 800cab6:	f8b9 3000 	ldrh.w	r3, [r9]
 800caba:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800cabe:	eba3 0308 	sub.w	r3, r3, r8
 800cac2:	eba6 0608 	sub.w	r6, r6, r8
 800cac6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800caca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800cace:	440e      	add	r6, r1
 800cad0:	e797      	b.n	800ca02 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 800cad2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800cad6:	42a8      	cmp	r0, r5
 800cad8:	d262      	bcs.n	800cba0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800cada:	9b00      	ldr	r3, [sp, #0]
 800cadc:	4631      	mov	r1, r6
 800cade:	eb00 0b03 	add.w	fp, r0, r3
 800cae2:	4558      	cmp	r0, fp
 800cae4:	d24e      	bcs.n	800cb84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 800cae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caea:	b12b      	cbz	r3, 800caf8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800caec:	2bff      	cmp	r3, #255	; 0xff
 800caee:	f8b4 e000 	ldrh.w	lr, [r4]
 800caf2:	d104      	bne.n	800cafe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 800caf4:	f8a0 e000 	strh.w	lr, [r0]
 800caf8:	3002      	adds	r0, #2
 800cafa:	3402      	adds	r4, #2
 800cafc:	e7f1      	b.n	800cae2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 800cafe:	8802      	ldrh	r2, [r0, #0]
 800cb00:	b29f      	uxth	r7, r3
 800cb02:	1216      	asrs	r6, r2, #8
 800cb04:	43db      	mvns	r3, r3
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 800cb0c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 800cb10:	fb16 f603 	smulbb	r6, r6, r3
 800cb14:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 800cb18:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800cb1c:	00d2      	lsls	r2, r2, #3
 800cb1e:	fb0c 6c07 	mla	ip, ip, r7, r6
 800cb22:	b2d2      	uxtb	r2, r2
 800cb24:	ea4f 06ee 	mov.w	r6, lr, asr #3
 800cb28:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 800cb2c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800cb30:	fb1a fa03 	smulbb	sl, sl, r3
 800cb34:	fa1f fc8c 	uxth.w	ip, ip
 800cb38:	fb12 f303 	smulbb	r3, r2, r3
 800cb3c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 800cb40:	fa5f fe8e 	uxtb.w	lr, lr
 800cb44:	fb06 a607 	mla	r6, r6, r7, sl
 800cb48:	f10c 0201 	add.w	r2, ip, #1
 800cb4c:	fb0e 3307 	mla	r3, lr, r7, r3
 800cb50:	b2b6      	uxth	r6, r6
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 800cb58:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 800cb5c:	f106 0a01 	add.w	sl, r6, #1
 800cb60:	f103 0c01 	add.w	ip, r3, #1
 800cb64:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800cb68:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 800cb6c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800cb70:	0976      	lsrs	r6, r6, #5
 800cb72:	ea4c 0c02 	orr.w	ip, ip, r2
 800cb76:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800cb7a:	ea4c 0c06 	orr.w	ip, ip, r6
 800cb7e:	f8a0 c000 	strh.w	ip, [r0]
 800cb82:	e7b9      	b.n	800caf8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800cb84:	f8b9 3000 	ldrh.w	r3, [r9]
 800cb88:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800cb8c:	eba3 0308 	sub.w	r3, r3, r8
 800cb90:	eba6 0608 	sub.w	r6, r6, r8
 800cb94:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800cb98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800cb9c:	440e      	add	r6, r1
 800cb9e:	e79a      	b.n	800cad6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 800cba0:	4b03      	ldr	r3, [pc, #12]	; (800cbb0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800cba2:	6818      	ldr	r0, [r3, #0]
 800cba4:	6803      	ldr	r3, [r0, #0]
 800cba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba8:	4798      	blx	r3
 800cbaa:	b007      	add	sp, #28
 800cbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb0:	2000a1d8 	.word	0x2000a1d8
 800cbb4:	2000a1d2 	.word	0x2000a1d2

0800cbb8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 800cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbbc:	b089      	sub	sp, #36	; 0x24
 800cbbe:	4682      	mov	sl, r0
 800cbc0:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 800cbc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	4691      	mov	r9, r2
 800cbca:	4698      	mov	r8, r3
 800cbcc:	2e00      	cmp	r6, #0
 800cbce:	d03d      	beq.n	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cbd0:	4608      	mov	r0, r1
 800cbd2:	f7fe fb03 	bl	800b1dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	4638      	mov	r0, r7
 800cbda:	f7fe fb33 	bl	800b244 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cbde:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	f8ad 9008 	strh.w	r9, [sp, #8]
 800cbe8:	f8ad 500c 	strh.w	r5, [sp, #12]
 800cbec:	f8ad 800a 	strh.w	r8, [sp, #10]
 800cbf0:	f7fe fbe0 	bl	800b3b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	f7fe fc0c 	bl	800b414 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800cbfc:	4681      	mov	r9, r0
 800cbfe:	4638      	mov	r0, r7
 800cc00:	f7fe fc5c 	bl	800b4bc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800cc04:	280b      	cmp	r0, #11
 800cc06:	d821      	bhi.n	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cc08:	e8df f000 	tbb	[pc, r0]
 800cc0c:	2006aebe 	.word	0x2006aebe
 800cc10:	20202020 	.word	0x20202020
 800cc14:	b5202020 	.word	0xb5202020
 800cc18:	4bb0      	ldr	r3, [pc, #704]	; (800cedc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 800cc1a:	6818      	ldr	r0, [r3, #0]
 800cc1c:	6803      	ldr	r3, [r0, #0]
 800cc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc20:	4798      	blx	r3
 800cc22:	2eff      	cmp	r6, #255	; 0xff
 800cc24:	d101      	bne.n	800cc2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 800cc26:	0683      	lsls	r3, r0, #26
 800cc28:	d506      	bpl.n	800cc38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 800cc2a:	4633      	mov	r3, r6
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	a902      	add	r1, sp, #8
 800cc30:	4628      	mov	r0, r5
 800cc32:	f7ff f909 	bl	800be48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800cc36:	e009      	b.n	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7fe fb83 	bl	800b344 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800cc3e:	b940      	cbnz	r0, 800cc52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 800cc40:	4623      	mov	r3, r4
 800cc42:	aa02      	add	r2, sp, #8
 800cc44:	4629      	mov	r1, r5
 800cc46:	4650      	mov	r0, sl
 800cc48:	f7ff f9e4 	bl	800c014 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800cc4c:	b009      	add	sp, #36	; 0x24
 800cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc52:	f10d 0818 	add.w	r8, sp, #24
 800cc56:	4639      	mov	r1, r7
 800cc58:	4640      	mov	r0, r8
 800cc5a:	f7fe fb27 	bl	800b2ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800cc5e:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cc62:	af04      	add	r7, sp, #16
 800cc64:	e887 0003 	stmia.w	r7, {r0, r1}
 800cc68:	4638      	mov	r0, r7
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	f7fb fb92 	bl	8008394 <_ZN8touchgfx4RectaNERKS0_>
 800cc70:	4638      	mov	r0, r7
 800cc72:	f7fb fbd2 	bl	800841a <_ZNK8touchgfx4Rect7isEmptyEv>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d1d7      	bne.n	800cc2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 800cc7a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800cc7e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800cc82:	4293      	cmp	r3, r2
 800cc84:	dd12      	ble.n	800ccac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 800cc86:	1a9b      	subs	r3, r3, r2
 800cc88:	f9b4 0000 	ldrsh.w	r0, [r4]
 800cc8c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800cc90:	f8ad 0018 	strh.w	r0, [sp, #24]
 800cc94:	f8ad 201a 	strh.w	r2, [sp, #26]
 800cc98:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cc9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cca0:	4642      	mov	r2, r8
 800cca2:	4633      	mov	r3, r6
 800cca4:	a902      	add	r1, sp, #8
 800cca6:	4628      	mov	r0, r5
 800cca8:	f7ff f8ce 	bl	800be48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800ccac:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800ccb0:	f9b4 2000 	ldrsh.w	r2, [r4]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	dd12      	ble.n	800ccde <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 800ccb8:	1a9b      	subs	r3, r3, r2
 800ccba:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800ccbe:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800ccc2:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ccc6:	f8ad 001a 	strh.w	r0, [sp, #26]
 800ccca:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ccce:	f8ad 101e 	strh.w	r1, [sp, #30]
 800ccd2:	23ff      	movs	r3, #255	; 0xff
 800ccd4:	4642      	mov	r2, r8
 800ccd6:	a902      	add	r1, sp, #8
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f7ff f8b5 	bl	800be48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800ccde:	463b      	mov	r3, r7
 800cce0:	aa02      	add	r2, sp, #8
 800cce2:	4629      	mov	r1, r5
 800cce4:	4650      	mov	r0, sl
 800cce6:	f7ff f995 	bl	800c014 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800ccea:	88a2      	ldrh	r2, [r4, #4]
 800ccec:	8823      	ldrh	r3, [r4, #0]
 800ccee:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ccf8:	440a      	add	r2, r1
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	b292      	uxth	r2, r2
 800ccfe:	b211      	sxth	r1, r2
 800cd00:	b218      	sxth	r0, r3
 800cd02:	4288      	cmp	r0, r1
 800cd04:	dd12      	ble.n	800cd2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 800cd06:	1a9b      	subs	r3, r3, r2
 800cd08:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800cd0c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800cd10:	f8ad 1018 	strh.w	r1, [sp, #24]
 800cd14:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cd18:	f8ad 001e 	strh.w	r0, [sp, #30]
 800cd1c:	23ff      	movs	r3, #255	; 0xff
 800cd1e:	4642      	mov	r2, r8
 800cd20:	a902      	add	r1, sp, #8
 800cd22:	4628      	mov	r0, r5
 800cd24:	f8ad 601a 	strh.w	r6, [sp, #26]
 800cd28:	f7ff f88e 	bl	800be48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800cd2c:	88e2      	ldrh	r2, [r4, #6]
 800cd2e:	8863      	ldrh	r3, [r4, #2]
 800cd30:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800cd34:	4413      	add	r3, r2
 800cd36:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cd3a:	440a      	add	r2, r1
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	b292      	uxth	r2, r2
 800cd40:	b211      	sxth	r1, r2
 800cd42:	b218      	sxth	r0, r3
 800cd44:	4288      	cmp	r0, r1
 800cd46:	dd81      	ble.n	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cd48:	1a9b      	subs	r3, r3, r2
 800cd4a:	f9b4 6000 	ldrsh.w	r6, [r4]
 800cd4e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800cd52:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cd56:	f8ad 6018 	strh.w	r6, [sp, #24]
 800cd5a:	f8ad 101a 	strh.w	r1, [sp, #26]
 800cd5e:	f8ad 001c 	strh.w	r0, [sp, #28]
 800cd62:	23ff      	movs	r3, #255	; 0xff
 800cd64:	4642      	mov	r2, r8
 800cd66:	e762      	b.n	800cc2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 800cd68:	4633      	mov	r3, r6
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	a902      	add	r1, sp, #8
 800cd6e:	4628      	mov	r0, r5
 800cd70:	f7ff f9c0 	bl	800c0f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 800cd74:	e76a      	b.n	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cd76:	e9cd 4600 	strd	r4, r6, [sp]
 800cd7a:	ab02      	add	r3, sp, #8
 800cd7c:	464a      	mov	r2, r9
 800cd7e:	4629      	mov	r1, r5
 800cd80:	4650      	mov	r0, sl
 800cd82:	f7ff fd97 	bl	800c8b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 800cd86:	e761      	b.n	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f7fe fadb 	bl	800b344 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800cd8e:	b950      	cbnz	r0, 800cda6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 800cd90:	e9cd 6000 	strd	r6, r0, [sp]
 800cd94:	f8da 3000 	ldr.w	r3, [sl]
 800cd98:	aa02      	add	r2, sp, #8
 800cd9a:	68de      	ldr	r6, [r3, #12]
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4623      	mov	r3, r4
 800cda0:	4650      	mov	r0, sl
 800cda2:	47b0      	blx	r6
 800cda4:	e752      	b.n	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cda6:	f10d 0818 	add.w	r8, sp, #24
 800cdaa:	4639      	mov	r1, r7
 800cdac:	4640      	mov	r0, r8
 800cdae:	f7fe fa7d 	bl	800b2ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800cdb2:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cdb6:	af04      	add	r7, sp, #16
 800cdb8:	e887 0003 	stmia.w	r7, {r0, r1}
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	4621      	mov	r1, r4
 800cdc0:	f7fb fae8 	bl	8008394 <_ZN8touchgfx4RectaNERKS0_>
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	f7fb fb28 	bl	800841a <_ZNK8touchgfx4Rect7isEmptyEv>
 800cdca:	b138      	cbz	r0, 800cddc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 800cdcc:	9600      	str	r6, [sp, #0]
 800cdce:	4623      	mov	r3, r4
 800cdd0:	aa02      	add	r2, sp, #8
 800cdd2:	4649      	mov	r1, r9
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	f7ff fdc9 	bl	800c96c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800cdda:	e737      	b.n	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cddc:	e9cd 6000 	strd	r6, r0, [sp]
 800cde0:	f8da 3000 	ldr.w	r3, [sl]
 800cde4:	aa02      	add	r2, sp, #8
 800cde6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 800cdea:	4629      	mov	r1, r5
 800cdec:	463b      	mov	r3, r7
 800cdee:	4650      	mov	r0, sl
 800cdf0:	47d8      	blx	fp
 800cdf2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800cdf6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	dd13      	ble.n	800ce26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 800cdfe:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ce02:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ce06:	f8ad 0018 	strh.w	r0, [sp, #24]
 800ce0a:	1a9b      	subs	r3, r3, r2
 800ce0c:	f8ad 201a 	strh.w	r2, [sp, #26]
 800ce10:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ce14:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ce18:	9600      	str	r6, [sp, #0]
 800ce1a:	4643      	mov	r3, r8
 800ce1c:	aa02      	add	r2, sp, #8
 800ce1e:	4649      	mov	r1, r9
 800ce20:	4628      	mov	r0, r5
 800ce22:	f7ff fda3 	bl	800c96c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ce26:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800ce2a:	f9b4 2000 	ldrsh.w	r2, [r4]
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	dd13      	ble.n	800ce5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 800ce32:	1a9b      	subs	r3, r3, r2
 800ce34:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800ce38:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800ce3c:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ce40:	f8ad 001a 	strh.w	r0, [sp, #26]
 800ce44:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ce48:	f8ad 101e 	strh.w	r1, [sp, #30]
 800ce4c:	9600      	str	r6, [sp, #0]
 800ce4e:	4643      	mov	r3, r8
 800ce50:	aa02      	add	r2, sp, #8
 800ce52:	4649      	mov	r1, r9
 800ce54:	4628      	mov	r0, r5
 800ce56:	f7ff fd89 	bl	800c96c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ce5a:	88a2      	ldrh	r2, [r4, #4]
 800ce5c:	8823      	ldrh	r3, [r4, #0]
 800ce5e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ce62:	4413      	add	r3, r2
 800ce64:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ce68:	440a      	add	r2, r1
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	b292      	uxth	r2, r2
 800ce6e:	b211      	sxth	r1, r2
 800ce70:	b218      	sxth	r0, r3
 800ce72:	4288      	cmp	r0, r1
 800ce74:	dd13      	ble.n	800ce9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 800ce76:	1a9b      	subs	r3, r3, r2
 800ce78:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800ce7c:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 800ce80:	f8ad 1018 	strh.w	r1, [sp, #24]
 800ce84:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ce88:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ce8c:	9600      	str	r6, [sp, #0]
 800ce8e:	4643      	mov	r3, r8
 800ce90:	aa02      	add	r2, sp, #8
 800ce92:	4649      	mov	r1, r9
 800ce94:	4628      	mov	r0, r5
 800ce96:	f8ad 701a 	strh.w	r7, [sp, #26]
 800ce9a:	f7ff fd67 	bl	800c96c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ce9e:	88e2      	ldrh	r2, [r4, #6]
 800cea0:	8863      	ldrh	r3, [r4, #2]
 800cea2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800cea6:	4413      	add	r3, r2
 800cea8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ceac:	440a      	add	r2, r1
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	b292      	uxth	r2, r2
 800ceb2:	b211      	sxth	r1, r2
 800ceb4:	b218      	sxth	r0, r3
 800ceb6:	4288      	cmp	r0, r1
 800ceb8:	f77f aec8 	ble.w	800cc4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 800cebc:	f9b4 7000 	ldrsh.w	r7, [r4]
 800cec0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800cec4:	f8ad 7018 	strh.w	r7, [sp, #24]
 800cec8:	1a9b      	subs	r3, r3, r2
 800ceca:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cece:	f8ad 101a 	strh.w	r1, [sp, #26]
 800ced2:	f8ad 001c 	strh.w	r0, [sp, #28]
 800ced6:	9600      	str	r6, [sp, #0]
 800ced8:	4643      	mov	r3, r8
 800ceda:	e779      	b.n	800cdd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 800cedc:	2000a1d8 	.word	0x2000a1d8

0800cee0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 800cee0:	b180      	cbz	r0, 800cf04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 800cee2:	2903      	cmp	r1, #3
 800cee4:	d81c      	bhi.n	800cf20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800cee6:	e8df f001 	tbb	[pc, r1]
 800ceea:	1d02      	.short	0x1d02
 800ceec:	1f08      	.short	0x1f08
 800ceee:	4b10      	ldr	r3, [pc, #64]	; (800cf30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800cef0:	8818      	ldrh	r0, [r3, #0]
 800cef2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800cef6:	4240      	negs	r0, r0
 800cef8:	4770      	bx	lr
 800cefa:	4b0d      	ldr	r3, [pc, #52]	; (800cf30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800cefc:	8818      	ldrh	r0, [r3, #0]
 800cefe:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800cf02:	4770      	bx	lr
 800cf04:	2903      	cmp	r1, #3
 800cf06:	d80b      	bhi.n	800cf20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800cf08:	a301      	add	r3, pc, #4	; (adr r3, 800cf10 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 800cf0a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800cf0e:	bf00      	nop
 800cf10:	0800cf25 	.word	0x0800cf25
 800cf14:	0800cefb 	.word	0x0800cefb
 800cf18:	0800cf29 	.word	0x0800cf29
 800cf1c:	0800ceef 	.word	0x0800ceef
 800cf20:	2000      	movs	r0, #0
 800cf22:	4770      	bx	lr
 800cf24:	2001      	movs	r0, #1
 800cf26:	4770      	bx	lr
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	2000a1d2 	.word	0x2000a1d2

0800cf34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 800cf34:	b180      	cbz	r0, 800cf58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 800cf36:	2903      	cmp	r1, #3
 800cf38:	d81c      	bhi.n	800cf74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800cf3a:	e8df f001 	tbb	[pc, r1]
 800cf3e:	021d      	.short	0x021d
 800cf40:	071f      	.short	0x071f
 800cf42:	4b10      	ldr	r3, [pc, #64]	; (800cf84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800cf44:	8818      	ldrh	r0, [r3, #0]
 800cf46:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800cf4a:	4770      	bx	lr
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800cf4e:	8818      	ldrh	r0, [r3, #0]
 800cf50:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800cf54:	4240      	negs	r0, r0
 800cf56:	4770      	bx	lr
 800cf58:	2903      	cmp	r1, #3
 800cf5a:	d80b      	bhi.n	800cf74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800cf5c:	a301      	add	r3, pc, #4	; (adr r3, 800cf64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 800cf5e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800cf62:	bf00      	nop
 800cf64:	0800cf43 	.word	0x0800cf43
 800cf68:	0800cf7d 	.word	0x0800cf7d
 800cf6c:	0800cf4d 	.word	0x0800cf4d
 800cf70:	0800cf79 	.word	0x0800cf79
 800cf74:	2000      	movs	r0, #0
 800cf76:	4770      	bx	lr
 800cf78:	2001      	movs	r0, #1
 800cf7a:	4770      	bx	lr
 800cf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	2000a1d2 	.word	0x2000a1d2

0800cf88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	b099      	sub	sp, #100	; 0x64
 800cf8e:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf90:	a914      	add	r1, sp, #80	; 0x50
 800cf92:	e881 000c 	stmia.w	r1, {r2, r3}
 800cf96:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 800cf9a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 800cf9e:	f891 900d 	ldrb.w	r9, [r1, #13]
 800cfa2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfa4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800cfa8:	9310      	str	r3, [sp, #64]	; 0x40
 800cfaa:	ea4f 1749 	mov.w	r7, r9, lsl #5
 800cfae:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 800cfb2:	930c      	str	r3, [sp, #48]	; 0x30
 800cfb4:	f407 7380 	and.w	r3, r7, #256	; 0x100
 800cfb8:	798f      	ldrb	r7, [r1, #6]
 800cfba:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 800cfbe:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 800cfc2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 800cfc6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 800cfca:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 800cfce:	431f      	orrs	r7, r3
 800cfd0:	f000 8195 	beq.w	800d2fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800cfd4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800cfd8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800cfdc:	f891 9007 	ldrb.w	r9, [r1, #7]
 800cfe0:	ea59 0903 	orrs.w	r9, r9, r3
 800cfe4:	f000 818b 	beq.w	800d2fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800cfe8:	f991 3009 	ldrsb.w	r3, [r1, #9]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	2d00      	cmp	r5, #0
 800cff0:	f000 812e 	beq.w	800d250 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 800cff4:	1aed      	subs	r5, r5, r3
 800cff6:	b2ad      	uxth	r5, r5
 800cff8:	042b      	lsls	r3, r5, #16
 800cffa:	d502      	bpl.n	800d002 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800cffc:	1b64      	subs	r4, r4, r5
 800cffe:	b224      	sxth	r4, r4
 800d000:	2500      	movs	r5, #0
 800d002:	f9b2 1000 	ldrsh.w	r1, [r2]
 800d006:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800d00a:	428c      	cmp	r4, r1
 800d00c:	b28b      	uxth	r3, r1
 800d00e:	bfbf      	itttt	lt
 800d010:	18ed      	addlt	r5, r5, r3
 800d012:	1b2c      	sublt	r4, r5, r4
 800d014:	b2a5      	uxthlt	r5, r4
 800d016:	460c      	movlt	r4, r1
 800d018:	8891      	ldrh	r1, [r2, #4]
 800d01a:	440b      	add	r3, r1
 800d01c:	b21b      	sxth	r3, r3
 800d01e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d020:	88d3      	ldrh	r3, [r2, #6]
 800d022:	8852      	ldrh	r2, [r2, #2]
 800d024:	4413      	add	r3, r2
 800d026:	b21b      	sxth	r3, r3
 800d028:	930d      	str	r3, [sp, #52]	; 0x34
 800d02a:	4bbe      	ldr	r3, [pc, #760]	; (800d324 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 800d02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d02e:	f893 b000 	ldrb.w	fp, [r3]
 800d032:	f10b 3cff 	add.w	ip, fp, #4294967295
 800d036:	f1dc 0300 	rsbs	r3, ip, #0
 800d03a:	eb43 030c 	adc.w	r3, r3, ip
 800d03e:	930e      	str	r3, [sp, #56]	; 0x38
 800d040:	4621      	mov	r1, r4
 800d042:	4653      	mov	r3, sl
 800d044:	a814      	add	r0, sp, #80	; 0x50
 800d046:	f7fc fe11 	bl	8009c6c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 800d04a:	4621      	mov	r1, r4
 800d04c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 800d050:	4653      	mov	r3, sl
 800d052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d054:	a814      	add	r0, sp, #80	; 0x50
 800d056:	f7fc fe26 	bl	8009ca6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 800d05a:	a918      	add	r1, sp, #96	; 0x60
 800d05c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 800d060:	a817      	add	r0, sp, #92	; 0x5c
 800d062:	f7fc ff4d 	bl	8009f00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 800d066:	f1ba 0f00 	cmp.w	sl, #0
 800d06a:	f040 80f4 	bne.w	800d256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 800d06e:	f1bb 0f01 	cmp.w	fp, #1
 800d072:	f040 80f8 	bne.w	800d266 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 800d076:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f040 8145 	bne.w	800d308 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 800d07e:	b2ba      	uxth	r2, r7
 800d080:	b905      	cbnz	r5, 800d084 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 800d082:	b16e      	cbz	r6, 800d0a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 800d084:	fb06 5302 	mla	r3, r6, r2, r5
 800d088:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800d08a:	fb08 f303 	mul.w	r3, r8, r3
 800d08e:	4631      	mov	r1, r6
 800d090:	f003 0607 	and.w	r6, r3, #7
 800d094:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 800d098:	9328      	str	r3, [sp, #160]	; 0xa0
 800d09a:	eba9 0301 	sub.w	r3, r9, r1
 800d09e:	930a      	str	r3, [sp, #40]	; 0x28
 800d0a0:	4651      	mov	r1, sl
 800d0a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d0a4:	f7ff ff1c 	bl	800cee0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 800d0a8:	4681      	mov	r9, r0
 800d0aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d0ac:	f7ff ff42 	bl	800cf34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 800d0b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0b4:	eba3 0a01 	sub.w	sl, r3, r1
 800d0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ba:	459a      	cmp	sl, r3
 800d0bc:	bfa8      	it	ge
 800d0be:	469a      	movge	sl, r3
 800d0c0:	f1ba 0f00 	cmp.w	sl, #0
 800d0c4:	4683      	mov	fp, r0
 800d0c6:	f340 811a 	ble.w	800d2fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800d0ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0cc:	1b64      	subs	r4, r4, r5
 800d0ce:	1b1c      	subs	r4, r3, r4
 800d0d0:	42bc      	cmp	r4, r7
 800d0d2:	bfd4      	ite	le
 800d0d4:	ebc5 0504 	rsble	r5, r5, r4
 800d0d8:	ebc5 0507 	rsbgt	r5, r5, r7
 800d0dc:	2d00      	cmp	r5, #0
 800d0de:	f340 810e 	ble.w	800d2fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800d0e2:	1b52      	subs	r2, r2, r5
 800d0e4:	fb08 f302 	mul.w	r3, r8, r2
 800d0e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f040 8116 	bne.w	800d31e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 800d0f2:	4b8d      	ldr	r3, [pc, #564]	; (800d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	6803      	ldr	r3, [r0, #0]
 800d0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fa:	4798      	blx	r3
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	fa03 f308 	lsl.w	r3, r3, r8
 800d102:	4a8a      	ldr	r2, [pc, #552]	; (800d32c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 800d104:	3b01      	subs	r3, #1
 800d106:	b2db      	uxtb	r3, r3
 800d108:	8811      	ldrh	r1, [r2, #0]
 800d10a:	930e      	str	r3, [sp, #56]	; 0x38
 800d10c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 800d110:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800d114:	fb01 2303 	mla	r3, r1, r3, r2
 800d118:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d11c:	930a      	str	r3, [sp, #40]	; 0x28
 800d11e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d120:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800d124:	9313      	str	r3, [sp, #76]	; 0x4c
 800d126:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d128:	0a19      	lsrs	r1, r3, #8
 800d12a:	b2cb      	uxtb	r3, r1
 800d12c:	9312      	str	r3, [sp, #72]	; 0x48
 800d12e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d130:	b2db      	uxtb	r3, r3
 800d132:	9311      	str	r3, [sp, #68]	; 0x44
 800d134:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d136:	095a      	lsrs	r2, r3, #5
 800d138:	4b7d      	ldr	r3, [pc, #500]	; (800d330 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 800d13a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800d13e:	400b      	ands	r3, r1
 800d140:	4313      	orrs	r3, r2
 800d142:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d144:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800d148:	4313      	orrs	r3, r2
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	9310      	str	r3, [sp, #64]	; 0x40
 800d14e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d150:	781a      	ldrb	r2, [r3, #0]
 800d152:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800d156:	4132      	asrs	r2, r6
 800d158:	fb05 b919 	mls	r9, r5, r9, fp
 800d15c:	fb03 fb05 	mul.w	fp, r3, r5
 800d160:	b2d2      	uxtb	r2, r2
 800d162:	930d      	str	r3, [sp, #52]	; 0x34
 800d164:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 800d168:	f11a 3aff 	adds.w	sl, sl, #4294967295
 800d16c:	f0c0 80f5 	bcc.w	800d35a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 800d170:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800d174:	46ae      	mov	lr, r5
 800d176:	f11e 3eff 	adds.w	lr, lr, #4294967295
 800d17a:	f0c0 80dd 	bcc.w	800d338 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 800d17e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d180:	4013      	ands	r3, r2
 800d182:	d055      	beq.n	800d230 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 800d184:	20ff      	movs	r0, #255	; 0xff
 800d186:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d188:	fb90 f1f1 	sdiv	r1, r0, r1
 800d18c:	434b      	muls	r3, r1
 800d18e:	2bfe      	cmp	r3, #254	; 0xfe
 800d190:	dd03      	ble.n	800d19a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 800d192:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d194:	4281      	cmp	r1, r0
 800d196:	f000 80cd 	beq.w	800d334 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 800d19a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d19c:	f8bc 4000 	ldrh.w	r4, [ip]
 800d1a0:	fb11 f303 	smulbb	r3, r1, r3
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	1c59      	adds	r1, r3, #1
 800d1a8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800d1ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800d1b0:	b29f      	uxth	r7, r3
 800d1b2:	43db      	mvns	r3, r3
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1ba:	1220      	asrs	r0, r4, #8
 800d1bc:	fb13 f907 	smulbb	r9, r3, r7
 800d1c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800d1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 800d1ca:	fb00 9003 	mla	r0, r0, r3, r9
 800d1ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1d0:	10e1      	asrs	r1, r4, #3
 800d1d2:	fb13 f907 	smulbb	r9, r3, r7
 800d1d6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800d1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1dc:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 800d1e0:	fb01 9103 	mla	r1, r1, r3, r9
 800d1e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1e6:	00e4      	lsls	r4, r4, #3
 800d1e8:	fb13 f707 	smulbb	r7, r3, r7
 800d1ec:	b2e4      	uxtb	r4, r4
 800d1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1f0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800d1f4:	fb04 7403 	mla	r4, r4, r3, r7
 800d1f8:	b280      	uxth	r0, r0
 800d1fa:	b2a4      	uxth	r4, r4
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	f104 0901 	add.w	r9, r4, #1
 800d202:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800d206:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 800d20a:	b289      	uxth	r1, r1
 800d20c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 800d210:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 800d214:	ea49 0000 	orr.w	r0, r9, r0
 800d218:	f101 0901 	add.w	r9, r1, #1
 800d21c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 800d220:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800d224:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 800d228:	ea40 0009 	orr.w	r0, r0, r9
 800d22c:	f8ac 0000 	strh.w	r0, [ip]
 800d230:	4446      	add	r6, r8
 800d232:	b2b6      	uxth	r6, r6
 800d234:	2e07      	cmp	r6, #7
 800d236:	bf81      	itttt	hi
 800d238:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 800d23a:	785a      	ldrbhi	r2, [r3, #1]
 800d23c:	3301      	addhi	r3, #1
 800d23e:	9328      	strhi	r3, [sp, #160]	; 0xa0
 800d240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d242:	bf9a      	itte	ls
 800d244:	fa42 f208 	asrls.w	r2, r2, r8
 800d248:	b2d2      	uxtbls	r2, r2
 800d24a:	2600      	movhi	r6, #0
 800d24c:	449c      	add	ip, r3
 800d24e:	e792      	b.n	800d176 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 800d250:	441c      	add	r4, r3
 800d252:	b224      	sxth	r4, r4
 800d254:	e6d5      	b.n	800d002 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800d256:	f1ba 0f01 	cmp.w	sl, #1
 800d25a:	f47f af0c 	bne.w	800d076 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800d25e:	f1bb 0f01 	cmp.w	fp, #1
 800d262:	f47f af08 	bne.w	800d076 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800d266:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800d328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 800d26a:	f8db 0000 	ldr.w	r0, [fp]
 800d26e:	6803      	ldr	r3, [r0, #0]
 800d270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d272:	4798      	blx	r3
 800d274:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 800d278:	465a      	mov	r2, fp
 800d27a:	d006      	beq.n	800d28a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 800d27c:	f1b8 0f04 	cmp.w	r8, #4
 800d280:	d140      	bne.n	800d304 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 800d282:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d284:	3300      	adds	r3, #0
 800d286:	bf18      	it	ne
 800d288:	2301      	movne	r3, #1
 800d28a:	0580      	lsls	r0, r0, #22
 800d28c:	d56e      	bpl.n	800d36c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 800d28e:	f1b8 0f08 	cmp.w	r8, #8
 800d292:	d16b      	bne.n	800d36c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 800d294:	2b00      	cmp	r3, #0
 800d296:	bf0c      	ite	eq
 800d298:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800d29c:	f44f 7180 	movne.w	r1, #256	; 0x100
 800d2a0:	2d00      	cmp	r5, #0
 800d2a2:	f47f aee8 	bne.w	800d076 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800d2a6:	2e00      	cmp	r6, #0
 800d2a8:	f47f aee5 	bne.w	800d076 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800d2ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d2ae:	19e3      	adds	r3, r4, r7
 800d2b0:	4283      	cmp	r3, r0
 800d2b2:	f73f aee0 	bgt.w	800d076 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800d2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d2ba:	444b      	add	r3, r9
 800d2bc:	4283      	cmp	r3, r0
 800d2be:	f73f aeda 	bgt.w	800d076 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800d2c2:	6810      	ldr	r0, [r2, #0]
 800d2c4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800d2c8:	6804      	ldr	r4, [r0, #0]
 800d2ca:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800d2ce:	b2bf      	uxth	r7, r7
 800d2d0:	f1b8 0f08 	cmp.w	r8, #8
 800d2d4:	f04f 0500 	mov.w	r5, #0
 800d2d8:	bf18      	it	ne
 800d2da:	3701      	addne	r7, #1
 800d2dc:	e9cd 1505 	strd	r1, r5, [sp, #20]
 800d2e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d2e2:	9104      	str	r1, [sp, #16]
 800d2e4:	bf18      	it	ne
 800d2e6:	f027 0701 	bicne.w	r7, r7, #1
 800d2ea:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800d2ec:	bf18      	it	ne
 800d2ee:	b2bf      	uxthne	r7, r7
 800d2f0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 800d2f4:	e9cd 7900 	strd	r7, r9, [sp]
 800d2f8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800d2fa:	6d64      	ldr	r4, [r4, #84]	; 0x54
 800d2fc:	47a0      	blx	r4
 800d2fe:	b019      	add	sp, #100	; 0x64
 800d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d304:	2300      	movs	r3, #0
 800d306:	e7c0      	b.n	800d28a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 800d308:	2208      	movs	r2, #8
 800d30a:	fb92 f3f8 	sdiv	r3, r2, r8
 800d30e:	1e5a      	subs	r2, r3, #1
 800d310:	443a      	add	r2, r7
 800d312:	fb92 f2f3 	sdiv	r2, r2, r3
 800d316:	fb12 f203 	smulbb	r2, r2, r3
 800d31a:	b292      	uxth	r2, r2
 800d31c:	e6b0      	b.n	800d080 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 800d31e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d320:	e6ec      	b.n	800d0fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 800d322:	bf00      	nop
 800d324:	2000a1d0 	.word	0x2000a1d0
 800d328:	2000a1d8 	.word	0x2000a1d8
 800d32c:	2000a1d2 	.word	0x2000a1d2
 800d330:	00fff800 	.word	0x00fff800
 800d334:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d336:	e779      	b.n	800d22c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 800d338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d33a:	b153      	cbz	r3, 800d352 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 800d33c:	441e      	add	r6, r3
 800d33e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d340:	b2b6      	uxth	r6, r6
 800d342:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 800d346:	f006 0607 	and.w	r6, r6, #7
 800d34a:	781a      	ldrb	r2, [r3, #0]
 800d34c:	9328      	str	r3, [sp, #160]	; 0xa0
 800d34e:	4132      	asrs	r2, r6
 800d350:	b2d2      	uxtb	r2, r2
 800d352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d354:	445b      	add	r3, fp
 800d356:	930a      	str	r3, [sp, #40]	; 0x28
 800d358:	e706      	b.n	800d168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 800d35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1ce      	bne.n	800d2fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800d360:	4b05      	ldr	r3, [pc, #20]	; (800d378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 800d362:	6818      	ldr	r0, [r3, #0]
 800d364:	6803      	ldr	r3, [r0, #0]
 800d366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d368:	4798      	blx	r3
 800d36a:	e7c8      	b.n	800d2fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f43f ae82 	beq.w	800d076 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800d372:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d376:	e793      	b.n	800d2a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 800d378:	2000a1d8 	.word	0x2000a1d8

0800d37c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 800d37c:	6101      	str	r1, [r0, #16]
 800d37e:	4770      	bx	lr

0800d380 <_ZN8touchgfx8Gestures4tickEv>:
 800d380:	7b83      	ldrb	r3, [r0, #14]
 800d382:	b14b      	cbz	r3, 800d398 <_ZN8touchgfx8Gestures4tickEv+0x18>
 800d384:	8903      	ldrh	r3, [r0, #8]
 800d386:	3301      	adds	r3, #1
 800d388:	b29b      	uxth	r3, r3
 800d38a:	2b07      	cmp	r3, #7
 800d38c:	8103      	strh	r3, [r0, #8]
 800d38e:	bf81      	itttt	hi
 800d390:	2300      	movhi	r3, #0
 800d392:	8143      	strhhi	r3, [r0, #10]
 800d394:	8183      	strhhi	r3, [r0, #12]
 800d396:	7383      	strbhi	r3, [r0, #14]
 800d398:	4770      	bx	lr
	...

0800d39c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 800d39c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d3a0:	4698      	mov	r8, r3
 800d3a2:	8883      	ldrh	r3, [r0, #4]
 800d3a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d3a8:	eba8 0303 	sub.w	r3, r8, r3
 800d3ac:	b21b      	sxth	r3, r3
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	4617      	mov	r7, r2
 800d3b4:	4a18      	ldr	r2, [pc, #96]	; (800d418 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 800d3b6:	9200      	str	r2, [sp, #0]
 800d3b8:	bfb8      	it	lt
 800d3ba:	425b      	neglt	r3, r3
 800d3bc:	8aa2      	ldrh	r2, [r4, #20]
 800d3be:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800d3c2:	f8ad 800a 	strh.w	r8, [sp, #10]
 800d3c6:	b21b      	sxth	r3, r3
 800d3c8:	460e      	mov	r6, r1
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	88c1      	ldrh	r1, [r0, #6]
 800d3ce:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d3d2:	f04f 0000 	mov.w	r0, #0
 800d3d6:	f88d 0004 	strb.w	r0, [sp, #4]
 800d3da:	f8ad 500c 	strh.w	r5, [sp, #12]
 800d3de:	dc07      	bgt.n	800d3f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 800d3e0:	1a69      	subs	r1, r5, r1
 800d3e2:	b209      	sxth	r1, r1
 800d3e4:	2900      	cmp	r1, #0
 800d3e6:	bfb8      	it	lt
 800d3e8:	4249      	neglt	r1, r1
 800d3ea:	b209      	sxth	r1, r1
 800d3ec:	428a      	cmp	r2, r1
 800d3ee:	da10      	bge.n	800d412 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 800d3f0:	6920      	ldr	r0, [r4, #16]
 800d3f2:	6803      	ldr	r3, [r0, #0]
 800d3f4:	4669      	mov	r1, sp
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	4798      	blx	r3
 800d3fa:	eba8 0606 	sub.w	r6, r8, r6
 800d3fe:	2300      	movs	r3, #0
 800d400:	1bef      	subs	r7, r5, r7
 800d402:	2001      	movs	r0, #1
 800d404:	8123      	strh	r3, [r4, #8]
 800d406:	8166      	strh	r6, [r4, #10]
 800d408:	81a7      	strh	r7, [r4, #12]
 800d40a:	f8a4 8004 	strh.w	r8, [r4, #4]
 800d40e:	80e5      	strh	r5, [r4, #6]
 800d410:	73a0      	strb	r0, [r4, #14]
 800d412:	b004      	add	sp, #16
 800d414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d418:	0800f088 	.word	0x0800f088

0800d41c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 800d41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d41e:	461e      	mov	r6, r3
 800d420:	1e4b      	subs	r3, r1, #1
 800d422:	2b01      	cmp	r3, #1
 800d424:	b085      	sub	sp, #20
 800d426:	4604      	mov	r4, r0
 800d428:	460d      	mov	r5, r1
 800d42a:	4617      	mov	r7, r2
 800d42c:	d84b      	bhi.n	800d4c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 800d42e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d432:	1cd3      	adds	r3, r2, #3
 800d434:	b29b      	uxth	r3, r3
 800d436:	2b06      	cmp	r3, #6
 800d438:	d916      	bls.n	800d468 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 800d43a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800d4dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800d43e:	f8cd c004 	str.w	ip, [sp, #4]
 800d442:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d446:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d44a:	6900      	ldr	r0, [r0, #16]
 800d44c:	f8ad 100c 	strh.w	r1, [sp, #12]
 800d450:	f04f 0c00 	mov.w	ip, #0
 800d454:	f88d c008 	strb.w	ip, [sp, #8]
 800d458:	f8ad 200a 	strh.w	r2, [sp, #10]
 800d45c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d460:	6803      	ldr	r3, [r0, #0]
 800d462:	a901      	add	r1, sp, #4
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	4798      	blx	r3
 800d468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d46c:	1cd3      	adds	r3, r2, #3
 800d46e:	b29b      	uxth	r3, r3
 800d470:	2b06      	cmp	r3, #6
 800d472:	d916      	bls.n	800d4a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800d474:	f8df c064 	ldr.w	ip, [pc, #100]	; 800d4dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800d478:	f8cd c004 	str.w	ip, [sp, #4]
 800d47c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d480:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d484:	6920      	ldr	r0, [r4, #16]
 800d486:	f8ad 100c 	strh.w	r1, [sp, #12]
 800d48a:	f04f 0c01 	mov.w	ip, #1
 800d48e:	f88d c008 	strb.w	ip, [sp, #8]
 800d492:	f8ad 200a 	strh.w	r2, [sp, #10]
 800d496:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d49a:	6803      	ldr	r3, [r0, #0]
 800d49c:	a901      	add	r1, sp, #4
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	4798      	blx	r3
 800d4a2:	4b0d      	ldr	r3, [pc, #52]	; (800d4d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 800d4a4:	9301      	str	r3, [sp, #4]
 800d4a6:	6920      	ldr	r0, [r4, #16]
 800d4a8:	f88d 5008 	strb.w	r5, [sp, #8]
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f8ad 700a 	strh.w	r7, [sp, #10]
 800d4b2:	f8ad 600c 	strh.w	r6, [sp, #12]
 800d4b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d4ba:	6803      	ldr	r3, [r0, #0]
 800d4bc:	a901      	add	r1, sp, #4
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4798      	blx	r3
 800d4c2:	b005      	add	sp, #20
 800d4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4c6:	2900      	cmp	r1, #0
 800d4c8:	d1eb      	bne.n	800d4a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800d4ca:	80a2      	strh	r2, [r4, #4]
 800d4cc:	80c6      	strh	r6, [r0, #6]
 800d4ce:	60a1      	str	r1, [r4, #8]
 800d4d0:	81a1      	strh	r1, [r4, #12]
 800d4d2:	73a1      	strb	r1, [r4, #14]
 800d4d4:	e7e5      	b.n	800d4a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800d4d6:	bf00      	nop
 800d4d8:	0800f074 	.word	0x0800f074
 800d4dc:	0800f09c 	.word	0x0800f09c

0800d4e0 <_ZdlPvj>:
 800d4e0:	f000 b812 	b.w	800d508 <_ZdlPv>

0800d4e4 <__cxa_guard_acquire>:
 800d4e4:	6803      	ldr	r3, [r0, #0]
 800d4e6:	07db      	lsls	r3, r3, #31
 800d4e8:	d406      	bmi.n	800d4f8 <__cxa_guard_acquire+0x14>
 800d4ea:	7843      	ldrb	r3, [r0, #1]
 800d4ec:	b103      	cbz	r3, 800d4f0 <__cxa_guard_acquire+0xc>
 800d4ee:	deff      	udf	#255	; 0xff
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	7043      	strb	r3, [r0, #1]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	4770      	bx	lr
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	4770      	bx	lr

0800d4fc <__cxa_guard_release>:
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	6003      	str	r3, [r0, #0]
 800d500:	4770      	bx	lr

0800d502 <__cxa_pure_virtual>:
 800d502:	b508      	push	{r3, lr}
 800d504:	f000 f80e 	bl	800d524 <_ZSt9terminatev>

0800d508 <_ZdlPv>:
 800d508:	f000 b844 	b.w	800d594 <free>

0800d50c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d50c:	b508      	push	{r3, lr}
 800d50e:	4780      	blx	r0
 800d510:	f000 f80d 	bl	800d52e <abort>

0800d514 <_ZSt13get_terminatev>:
 800d514:	4b02      	ldr	r3, [pc, #8]	; (800d520 <_ZSt13get_terminatev+0xc>)
 800d516:	6818      	ldr	r0, [r3, #0]
 800d518:	f3bf 8f5b 	dmb	ish
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	20000058 	.word	0x20000058

0800d524 <_ZSt9terminatev>:
 800d524:	b508      	push	{r3, lr}
 800d526:	f7ff fff5 	bl	800d514 <_ZSt13get_terminatev>
 800d52a:	f7ff ffef 	bl	800d50c <_ZN10__cxxabiv111__terminateEPFvvE>

0800d52e <abort>:
 800d52e:	b508      	push	{r3, lr}
 800d530:	2006      	movs	r0, #6
 800d532:	f000 fa2b 	bl	800d98c <raise>
 800d536:	2001      	movs	r0, #1
 800d538:	f7f4 fc32 	bl	8001da0 <_exit>

0800d53c <__assert_func>:
 800d53c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d53e:	4614      	mov	r4, r2
 800d540:	461a      	mov	r2, r3
 800d542:	4b09      	ldr	r3, [pc, #36]	; (800d568 <__assert_func+0x2c>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4605      	mov	r5, r0
 800d548:	68d8      	ldr	r0, [r3, #12]
 800d54a:	b14c      	cbz	r4, 800d560 <__assert_func+0x24>
 800d54c:	4b07      	ldr	r3, [pc, #28]	; (800d56c <__assert_func+0x30>)
 800d54e:	9100      	str	r1, [sp, #0]
 800d550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d554:	4906      	ldr	r1, [pc, #24]	; (800d570 <__assert_func+0x34>)
 800d556:	462b      	mov	r3, r5
 800d558:	f000 f974 	bl	800d844 <fiprintf>
 800d55c:	f7ff ffe7 	bl	800d52e <abort>
 800d560:	4b04      	ldr	r3, [pc, #16]	; (800d574 <__assert_func+0x38>)
 800d562:	461c      	mov	r4, r3
 800d564:	e7f3      	b.n	800d54e <__assert_func+0x12>
 800d566:	bf00      	nop
 800d568:	200000b4 	.word	0x200000b4
 800d56c:	0800f100 	.word	0x0800f100
 800d570:	0800f10d 	.word	0x0800f10d
 800d574:	0800f13b 	.word	0x0800f13b

0800d578 <atexit>:
 800d578:	2300      	movs	r3, #0
 800d57a:	4601      	mov	r1, r0
 800d57c:	461a      	mov	r2, r3
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 bab2 	b.w	800dae8 <__register_exitproc>

0800d584 <malloc>:
 800d584:	4b02      	ldr	r3, [pc, #8]	; (800d590 <malloc+0xc>)
 800d586:	4601      	mov	r1, r0
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	f000 b82b 	b.w	800d5e4 <_malloc_r>
 800d58e:	bf00      	nop
 800d590:	200000b4 	.word	0x200000b4

0800d594 <free>:
 800d594:	4b02      	ldr	r3, [pc, #8]	; (800d5a0 <free+0xc>)
 800d596:	4601      	mov	r1, r0
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f000 bb03 	b.w	800dba4 <_free_r>
 800d59e:	bf00      	nop
 800d5a0:	200000b4 	.word	0x200000b4

0800d5a4 <sbrk_aligned>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	4e0e      	ldr	r6, [pc, #56]	; (800d5e0 <sbrk_aligned+0x3c>)
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	6831      	ldr	r1, [r6, #0]
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	b911      	cbnz	r1, 800d5b6 <sbrk_aligned+0x12>
 800d5b0:	f000 fa3c 	bl	800da2c <_sbrk_r>
 800d5b4:	6030      	str	r0, [r6, #0]
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f000 fa37 	bl	800da2c <_sbrk_r>
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	d00a      	beq.n	800d5d8 <sbrk_aligned+0x34>
 800d5c2:	1cc4      	adds	r4, r0, #3
 800d5c4:	f024 0403 	bic.w	r4, r4, #3
 800d5c8:	42a0      	cmp	r0, r4
 800d5ca:	d007      	beq.n	800d5dc <sbrk_aligned+0x38>
 800d5cc:	1a21      	subs	r1, r4, r0
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	f000 fa2c 	bl	800da2c <_sbrk_r>
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	d101      	bne.n	800d5dc <sbrk_aligned+0x38>
 800d5d8:	f04f 34ff 	mov.w	r4, #4294967295
 800d5dc:	4620      	mov	r0, r4
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
 800d5e0:	2000a230 	.word	0x2000a230

0800d5e4 <_malloc_r>:
 800d5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e8:	1ccd      	adds	r5, r1, #3
 800d5ea:	f025 0503 	bic.w	r5, r5, #3
 800d5ee:	3508      	adds	r5, #8
 800d5f0:	2d0c      	cmp	r5, #12
 800d5f2:	bf38      	it	cc
 800d5f4:	250c      	movcc	r5, #12
 800d5f6:	2d00      	cmp	r5, #0
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	db01      	blt.n	800d600 <_malloc_r+0x1c>
 800d5fc:	42a9      	cmp	r1, r5
 800d5fe:	d905      	bls.n	800d60c <_malloc_r+0x28>
 800d600:	230c      	movs	r3, #12
 800d602:	603b      	str	r3, [r7, #0]
 800d604:	2600      	movs	r6, #0
 800d606:	4630      	mov	r0, r6
 800d608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d60c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d6e0 <_malloc_r+0xfc>
 800d610:	f000 f868 	bl	800d6e4 <__malloc_lock>
 800d614:	f8d8 3000 	ldr.w	r3, [r8]
 800d618:	461c      	mov	r4, r3
 800d61a:	bb5c      	cbnz	r4, 800d674 <_malloc_r+0x90>
 800d61c:	4629      	mov	r1, r5
 800d61e:	4638      	mov	r0, r7
 800d620:	f7ff ffc0 	bl	800d5a4 <sbrk_aligned>
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	4604      	mov	r4, r0
 800d628:	d155      	bne.n	800d6d6 <_malloc_r+0xf2>
 800d62a:	f8d8 4000 	ldr.w	r4, [r8]
 800d62e:	4626      	mov	r6, r4
 800d630:	2e00      	cmp	r6, #0
 800d632:	d145      	bne.n	800d6c0 <_malloc_r+0xdc>
 800d634:	2c00      	cmp	r4, #0
 800d636:	d048      	beq.n	800d6ca <_malloc_r+0xe6>
 800d638:	6823      	ldr	r3, [r4, #0]
 800d63a:	4631      	mov	r1, r6
 800d63c:	4638      	mov	r0, r7
 800d63e:	eb04 0903 	add.w	r9, r4, r3
 800d642:	f000 f9f3 	bl	800da2c <_sbrk_r>
 800d646:	4581      	cmp	r9, r0
 800d648:	d13f      	bne.n	800d6ca <_malloc_r+0xe6>
 800d64a:	6821      	ldr	r1, [r4, #0]
 800d64c:	1a6d      	subs	r5, r5, r1
 800d64e:	4629      	mov	r1, r5
 800d650:	4638      	mov	r0, r7
 800d652:	f7ff ffa7 	bl	800d5a4 <sbrk_aligned>
 800d656:	3001      	adds	r0, #1
 800d658:	d037      	beq.n	800d6ca <_malloc_r+0xe6>
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	442b      	add	r3, r5
 800d65e:	6023      	str	r3, [r4, #0]
 800d660:	f8d8 3000 	ldr.w	r3, [r8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d038      	beq.n	800d6da <_malloc_r+0xf6>
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	42a2      	cmp	r2, r4
 800d66c:	d12b      	bne.n	800d6c6 <_malloc_r+0xe2>
 800d66e:	2200      	movs	r2, #0
 800d670:	605a      	str	r2, [r3, #4]
 800d672:	e00f      	b.n	800d694 <_malloc_r+0xb0>
 800d674:	6822      	ldr	r2, [r4, #0]
 800d676:	1b52      	subs	r2, r2, r5
 800d678:	d41f      	bmi.n	800d6ba <_malloc_r+0xd6>
 800d67a:	2a0b      	cmp	r2, #11
 800d67c:	d917      	bls.n	800d6ae <_malloc_r+0xca>
 800d67e:	1961      	adds	r1, r4, r5
 800d680:	42a3      	cmp	r3, r4
 800d682:	6025      	str	r5, [r4, #0]
 800d684:	bf18      	it	ne
 800d686:	6059      	strne	r1, [r3, #4]
 800d688:	6863      	ldr	r3, [r4, #4]
 800d68a:	bf08      	it	eq
 800d68c:	f8c8 1000 	streq.w	r1, [r8]
 800d690:	5162      	str	r2, [r4, r5]
 800d692:	604b      	str	r3, [r1, #4]
 800d694:	4638      	mov	r0, r7
 800d696:	f104 060b 	add.w	r6, r4, #11
 800d69a:	f000 f829 	bl	800d6f0 <__malloc_unlock>
 800d69e:	f026 0607 	bic.w	r6, r6, #7
 800d6a2:	1d23      	adds	r3, r4, #4
 800d6a4:	1af2      	subs	r2, r6, r3
 800d6a6:	d0ae      	beq.n	800d606 <_malloc_r+0x22>
 800d6a8:	1b9b      	subs	r3, r3, r6
 800d6aa:	50a3      	str	r3, [r4, r2]
 800d6ac:	e7ab      	b.n	800d606 <_malloc_r+0x22>
 800d6ae:	42a3      	cmp	r3, r4
 800d6b0:	6862      	ldr	r2, [r4, #4]
 800d6b2:	d1dd      	bne.n	800d670 <_malloc_r+0x8c>
 800d6b4:	f8c8 2000 	str.w	r2, [r8]
 800d6b8:	e7ec      	b.n	800d694 <_malloc_r+0xb0>
 800d6ba:	4623      	mov	r3, r4
 800d6bc:	6864      	ldr	r4, [r4, #4]
 800d6be:	e7ac      	b.n	800d61a <_malloc_r+0x36>
 800d6c0:	4634      	mov	r4, r6
 800d6c2:	6876      	ldr	r6, [r6, #4]
 800d6c4:	e7b4      	b.n	800d630 <_malloc_r+0x4c>
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	e7cc      	b.n	800d664 <_malloc_r+0x80>
 800d6ca:	230c      	movs	r3, #12
 800d6cc:	603b      	str	r3, [r7, #0]
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	f000 f80e 	bl	800d6f0 <__malloc_unlock>
 800d6d4:	e797      	b.n	800d606 <_malloc_r+0x22>
 800d6d6:	6025      	str	r5, [r4, #0]
 800d6d8:	e7dc      	b.n	800d694 <_malloc_r+0xb0>
 800d6da:	605b      	str	r3, [r3, #4]
 800d6dc:	deff      	udf	#255	; 0xff
 800d6de:	bf00      	nop
 800d6e0:	2000a22c 	.word	0x2000a22c

0800d6e4 <__malloc_lock>:
 800d6e4:	4801      	ldr	r0, [pc, #4]	; (800d6ec <__malloc_lock+0x8>)
 800d6e6:	f000 b9ee 	b.w	800dac6 <__retarget_lock_acquire_recursive>
 800d6ea:	bf00      	nop
 800d6ec:	2000a375 	.word	0x2000a375

0800d6f0 <__malloc_unlock>:
 800d6f0:	4801      	ldr	r0, [pc, #4]	; (800d6f8 <__malloc_unlock+0x8>)
 800d6f2:	f000 b9e9 	b.w	800dac8 <__retarget_lock_release_recursive>
 800d6f6:	bf00      	nop
 800d6f8:	2000a375 	.word	0x2000a375

0800d6fc <std>:
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	b510      	push	{r4, lr}
 800d700:	4604      	mov	r4, r0
 800d702:	e9c0 3300 	strd	r3, r3, [r0]
 800d706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d70a:	6083      	str	r3, [r0, #8]
 800d70c:	8181      	strh	r1, [r0, #12]
 800d70e:	6643      	str	r3, [r0, #100]	; 0x64
 800d710:	81c2      	strh	r2, [r0, #14]
 800d712:	6183      	str	r3, [r0, #24]
 800d714:	4619      	mov	r1, r3
 800d716:	2208      	movs	r2, #8
 800d718:	305c      	adds	r0, #92	; 0x5c
 800d71a:	f000 f906 	bl	800d92a <memset>
 800d71e:	4b0d      	ldr	r3, [pc, #52]	; (800d754 <std+0x58>)
 800d720:	6263      	str	r3, [r4, #36]	; 0x24
 800d722:	4b0d      	ldr	r3, [pc, #52]	; (800d758 <std+0x5c>)
 800d724:	62a3      	str	r3, [r4, #40]	; 0x28
 800d726:	4b0d      	ldr	r3, [pc, #52]	; (800d75c <std+0x60>)
 800d728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d72a:	4b0d      	ldr	r3, [pc, #52]	; (800d760 <std+0x64>)
 800d72c:	6323      	str	r3, [r4, #48]	; 0x30
 800d72e:	4b0d      	ldr	r3, [pc, #52]	; (800d764 <std+0x68>)
 800d730:	6224      	str	r4, [r4, #32]
 800d732:	429c      	cmp	r4, r3
 800d734:	d006      	beq.n	800d744 <std+0x48>
 800d736:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d73a:	4294      	cmp	r4, r2
 800d73c:	d002      	beq.n	800d744 <std+0x48>
 800d73e:	33d0      	adds	r3, #208	; 0xd0
 800d740:	429c      	cmp	r4, r3
 800d742:	d105      	bne.n	800d750 <std+0x54>
 800d744:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d74c:	f000 b9ba 	b.w	800dac4 <__retarget_lock_init_recursive>
 800d750:	bd10      	pop	{r4, pc}
 800d752:	bf00      	nop
 800d754:	0800d8a5 	.word	0x0800d8a5
 800d758:	0800d8c7 	.word	0x0800d8c7
 800d75c:	0800d8ff 	.word	0x0800d8ff
 800d760:	0800d923 	.word	0x0800d923
 800d764:	2000a234 	.word	0x2000a234

0800d768 <stdio_exit_handler>:
 800d768:	4a02      	ldr	r2, [pc, #8]	; (800d774 <stdio_exit_handler+0xc>)
 800d76a:	4903      	ldr	r1, [pc, #12]	; (800d778 <stdio_exit_handler+0x10>)
 800d76c:	4803      	ldr	r0, [pc, #12]	; (800d77c <stdio_exit_handler+0x14>)
 800d76e:	f000 b87b 	b.w	800d868 <_fwalk_sglue>
 800d772:	bf00      	nop
 800d774:	2000005c 	.word	0x2000005c
 800d778:	0800e2f1 	.word	0x0800e2f1
 800d77c:	20000068 	.word	0x20000068

0800d780 <cleanup_stdio>:
 800d780:	6841      	ldr	r1, [r0, #4]
 800d782:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <cleanup_stdio+0x34>)
 800d784:	4299      	cmp	r1, r3
 800d786:	b510      	push	{r4, lr}
 800d788:	4604      	mov	r4, r0
 800d78a:	d001      	beq.n	800d790 <cleanup_stdio+0x10>
 800d78c:	f000 fdb0 	bl	800e2f0 <_fflush_r>
 800d790:	68a1      	ldr	r1, [r4, #8]
 800d792:	4b09      	ldr	r3, [pc, #36]	; (800d7b8 <cleanup_stdio+0x38>)
 800d794:	4299      	cmp	r1, r3
 800d796:	d002      	beq.n	800d79e <cleanup_stdio+0x1e>
 800d798:	4620      	mov	r0, r4
 800d79a:	f000 fda9 	bl	800e2f0 <_fflush_r>
 800d79e:	68e1      	ldr	r1, [r4, #12]
 800d7a0:	4b06      	ldr	r3, [pc, #24]	; (800d7bc <cleanup_stdio+0x3c>)
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	d004      	beq.n	800d7b0 <cleanup_stdio+0x30>
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ac:	f000 bda0 	b.w	800e2f0 <_fflush_r>
 800d7b0:	bd10      	pop	{r4, pc}
 800d7b2:	bf00      	nop
 800d7b4:	2000a234 	.word	0x2000a234
 800d7b8:	2000a29c 	.word	0x2000a29c
 800d7bc:	2000a304 	.word	0x2000a304

0800d7c0 <global_stdio_init.part.0>:
 800d7c0:	b510      	push	{r4, lr}
 800d7c2:	4b0b      	ldr	r3, [pc, #44]	; (800d7f0 <global_stdio_init.part.0+0x30>)
 800d7c4:	4c0b      	ldr	r4, [pc, #44]	; (800d7f4 <global_stdio_init.part.0+0x34>)
 800d7c6:	4a0c      	ldr	r2, [pc, #48]	; (800d7f8 <global_stdio_init.part.0+0x38>)
 800d7c8:	601a      	str	r2, [r3, #0]
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	2104      	movs	r1, #4
 800d7d0:	f7ff ff94 	bl	800d6fc <std>
 800d7d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d7d8:	2201      	movs	r2, #1
 800d7da:	2109      	movs	r1, #9
 800d7dc:	f7ff ff8e 	bl	800d6fc <std>
 800d7e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d7e4:	2202      	movs	r2, #2
 800d7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ea:	2112      	movs	r1, #18
 800d7ec:	f7ff bf86 	b.w	800d6fc <std>
 800d7f0:	2000a36c 	.word	0x2000a36c
 800d7f4:	2000a234 	.word	0x2000a234
 800d7f8:	0800d769 	.word	0x0800d769

0800d7fc <__sfp_lock_acquire>:
 800d7fc:	4801      	ldr	r0, [pc, #4]	; (800d804 <__sfp_lock_acquire+0x8>)
 800d7fe:	f000 b962 	b.w	800dac6 <__retarget_lock_acquire_recursive>
 800d802:	bf00      	nop
 800d804:	2000a376 	.word	0x2000a376

0800d808 <__sfp_lock_release>:
 800d808:	4801      	ldr	r0, [pc, #4]	; (800d810 <__sfp_lock_release+0x8>)
 800d80a:	f000 b95d 	b.w	800dac8 <__retarget_lock_release_recursive>
 800d80e:	bf00      	nop
 800d810:	2000a376 	.word	0x2000a376

0800d814 <__sinit>:
 800d814:	b510      	push	{r4, lr}
 800d816:	4604      	mov	r4, r0
 800d818:	f7ff fff0 	bl	800d7fc <__sfp_lock_acquire>
 800d81c:	6a23      	ldr	r3, [r4, #32]
 800d81e:	b11b      	cbz	r3, 800d828 <__sinit+0x14>
 800d820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d824:	f7ff bff0 	b.w	800d808 <__sfp_lock_release>
 800d828:	4b04      	ldr	r3, [pc, #16]	; (800d83c <__sinit+0x28>)
 800d82a:	6223      	str	r3, [r4, #32]
 800d82c:	4b04      	ldr	r3, [pc, #16]	; (800d840 <__sinit+0x2c>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1f5      	bne.n	800d820 <__sinit+0xc>
 800d834:	f7ff ffc4 	bl	800d7c0 <global_stdio_init.part.0>
 800d838:	e7f2      	b.n	800d820 <__sinit+0xc>
 800d83a:	bf00      	nop
 800d83c:	0800d781 	.word	0x0800d781
 800d840:	2000a36c 	.word	0x2000a36c

0800d844 <fiprintf>:
 800d844:	b40e      	push	{r1, r2, r3}
 800d846:	b503      	push	{r0, r1, lr}
 800d848:	4601      	mov	r1, r0
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	4805      	ldr	r0, [pc, #20]	; (800d864 <fiprintf+0x20>)
 800d84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d852:	6800      	ldr	r0, [r0, #0]
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	f000 fa1b 	bl	800dc90 <_vfiprintf_r>
 800d85a:	b002      	add	sp, #8
 800d85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d860:	b003      	add	sp, #12
 800d862:	4770      	bx	lr
 800d864:	200000b4 	.word	0x200000b4

0800d868 <_fwalk_sglue>:
 800d868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d86c:	4607      	mov	r7, r0
 800d86e:	4688      	mov	r8, r1
 800d870:	4614      	mov	r4, r2
 800d872:	2600      	movs	r6, #0
 800d874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d878:	f1b9 0901 	subs.w	r9, r9, #1
 800d87c:	d505      	bpl.n	800d88a <_fwalk_sglue+0x22>
 800d87e:	6824      	ldr	r4, [r4, #0]
 800d880:	2c00      	cmp	r4, #0
 800d882:	d1f7      	bne.n	800d874 <_fwalk_sglue+0xc>
 800d884:	4630      	mov	r0, r6
 800d886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d88a:	89ab      	ldrh	r3, [r5, #12]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d907      	bls.n	800d8a0 <_fwalk_sglue+0x38>
 800d890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d894:	3301      	adds	r3, #1
 800d896:	d003      	beq.n	800d8a0 <_fwalk_sglue+0x38>
 800d898:	4629      	mov	r1, r5
 800d89a:	4638      	mov	r0, r7
 800d89c:	47c0      	blx	r8
 800d89e:	4306      	orrs	r6, r0
 800d8a0:	3568      	adds	r5, #104	; 0x68
 800d8a2:	e7e9      	b.n	800d878 <_fwalk_sglue+0x10>

0800d8a4 <__sread>:
 800d8a4:	b510      	push	{r4, lr}
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ac:	f000 f898 	bl	800d9e0 <_read_r>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	bfab      	itete	ge
 800d8b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8b6:	89a3      	ldrhlt	r3, [r4, #12]
 800d8b8:	181b      	addge	r3, r3, r0
 800d8ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8be:	bfac      	ite	ge
 800d8c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8c2:	81a3      	strhlt	r3, [r4, #12]
 800d8c4:	bd10      	pop	{r4, pc}

0800d8c6 <__swrite>:
 800d8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ca:	461f      	mov	r7, r3
 800d8cc:	898b      	ldrh	r3, [r1, #12]
 800d8ce:	05db      	lsls	r3, r3, #23
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	4616      	mov	r6, r2
 800d8d6:	d505      	bpl.n	800d8e4 <__swrite+0x1e>
 800d8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8dc:	2302      	movs	r3, #2
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f000 f86c 	bl	800d9bc <_lseek_r>
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8ee:	81a3      	strh	r3, [r4, #12]
 800d8f0:	4632      	mov	r2, r6
 800d8f2:	463b      	mov	r3, r7
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fa:	f000 b8a7 	b.w	800da4c <_write_r>

0800d8fe <__sseek>:
 800d8fe:	b510      	push	{r4, lr}
 800d900:	460c      	mov	r4, r1
 800d902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d906:	f000 f859 	bl	800d9bc <_lseek_r>
 800d90a:	1c43      	adds	r3, r0, #1
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	bf15      	itete	ne
 800d910:	6560      	strne	r0, [r4, #84]	; 0x54
 800d912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d91a:	81a3      	strheq	r3, [r4, #12]
 800d91c:	bf18      	it	ne
 800d91e:	81a3      	strhne	r3, [r4, #12]
 800d920:	bd10      	pop	{r4, pc}

0800d922 <__sclose>:
 800d922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d926:	f000 b839 	b.w	800d99c <_close_r>

0800d92a <memset>:
 800d92a:	4402      	add	r2, r0
 800d92c:	4603      	mov	r3, r0
 800d92e:	4293      	cmp	r3, r2
 800d930:	d100      	bne.n	800d934 <memset+0xa>
 800d932:	4770      	bx	lr
 800d934:	f803 1b01 	strb.w	r1, [r3], #1
 800d938:	e7f9      	b.n	800d92e <memset+0x4>

0800d93a <_raise_r>:
 800d93a:	291f      	cmp	r1, #31
 800d93c:	b538      	push	{r3, r4, r5, lr}
 800d93e:	4604      	mov	r4, r0
 800d940:	460d      	mov	r5, r1
 800d942:	d904      	bls.n	800d94e <_raise_r+0x14>
 800d944:	2316      	movs	r3, #22
 800d946:	6003      	str	r3, [r0, #0]
 800d948:	f04f 30ff 	mov.w	r0, #4294967295
 800d94c:	bd38      	pop	{r3, r4, r5, pc}
 800d94e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d950:	b112      	cbz	r2, 800d958 <_raise_r+0x1e>
 800d952:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d956:	b94b      	cbnz	r3, 800d96c <_raise_r+0x32>
 800d958:	4620      	mov	r0, r4
 800d95a:	f000 f865 	bl	800da28 <_getpid_r>
 800d95e:	462a      	mov	r2, r5
 800d960:	4601      	mov	r1, r0
 800d962:	4620      	mov	r0, r4
 800d964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d968:	f000 b84c 	b.w	800da04 <_kill_r>
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d00a      	beq.n	800d986 <_raise_r+0x4c>
 800d970:	1c59      	adds	r1, r3, #1
 800d972:	d103      	bne.n	800d97c <_raise_r+0x42>
 800d974:	2316      	movs	r3, #22
 800d976:	6003      	str	r3, [r0, #0]
 800d978:	2001      	movs	r0, #1
 800d97a:	e7e7      	b.n	800d94c <_raise_r+0x12>
 800d97c:	2400      	movs	r4, #0
 800d97e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d982:	4628      	mov	r0, r5
 800d984:	4798      	blx	r3
 800d986:	2000      	movs	r0, #0
 800d988:	e7e0      	b.n	800d94c <_raise_r+0x12>
	...

0800d98c <raise>:
 800d98c:	4b02      	ldr	r3, [pc, #8]	; (800d998 <raise+0xc>)
 800d98e:	4601      	mov	r1, r0
 800d990:	6818      	ldr	r0, [r3, #0]
 800d992:	f7ff bfd2 	b.w	800d93a <_raise_r>
 800d996:	bf00      	nop
 800d998:	200000b4 	.word	0x200000b4

0800d99c <_close_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4d06      	ldr	r5, [pc, #24]	; (800d9b8 <_close_r+0x1c>)
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	4608      	mov	r0, r1
 800d9a6:	602b      	str	r3, [r5, #0]
 800d9a8:	f7f4 fa1c 	bl	8001de4 <_close>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_close_r+0x1a>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_close_r+0x1a>
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	2000a370 	.word	0x2000a370

0800d9bc <_lseek_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4d07      	ldr	r5, [pc, #28]	; (800d9dc <_lseek_r+0x20>)
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	4608      	mov	r0, r1
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	602a      	str	r2, [r5, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f7f4 fa14 	bl	8001df8 <_lseek>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d102      	bne.n	800d9da <_lseek_r+0x1e>
 800d9d4:	682b      	ldr	r3, [r5, #0]
 800d9d6:	b103      	cbz	r3, 800d9da <_lseek_r+0x1e>
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	2000a370 	.word	0x2000a370

0800d9e0 <_read_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4d07      	ldr	r5, [pc, #28]	; (800da00 <_read_r+0x20>)
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	4608      	mov	r0, r1
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	602a      	str	r2, [r5, #0]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	f7f4 f9dc 	bl	8001dac <_read>
 800d9f4:	1c43      	adds	r3, r0, #1
 800d9f6:	d102      	bne.n	800d9fe <_read_r+0x1e>
 800d9f8:	682b      	ldr	r3, [r5, #0]
 800d9fa:	b103      	cbz	r3, 800d9fe <_read_r+0x1e>
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	bd38      	pop	{r3, r4, r5, pc}
 800da00:	2000a370 	.word	0x2000a370

0800da04 <_kill_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	4d07      	ldr	r5, [pc, #28]	; (800da24 <_kill_r+0x20>)
 800da08:	2300      	movs	r3, #0
 800da0a:	4604      	mov	r4, r0
 800da0c:	4608      	mov	r0, r1
 800da0e:	4611      	mov	r1, r2
 800da10:	602b      	str	r3, [r5, #0]
 800da12:	f7f4 f9bd 	bl	8001d90 <_kill>
 800da16:	1c43      	adds	r3, r0, #1
 800da18:	d102      	bne.n	800da20 <_kill_r+0x1c>
 800da1a:	682b      	ldr	r3, [r5, #0]
 800da1c:	b103      	cbz	r3, 800da20 <_kill_r+0x1c>
 800da1e:	6023      	str	r3, [r4, #0]
 800da20:	bd38      	pop	{r3, r4, r5, pc}
 800da22:	bf00      	nop
 800da24:	2000a370 	.word	0x2000a370

0800da28 <_getpid_r>:
 800da28:	f7f4 b9b0 	b.w	8001d8c <_getpid>

0800da2c <_sbrk_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4d06      	ldr	r5, [pc, #24]	; (800da48 <_sbrk_r+0x1c>)
 800da30:	2300      	movs	r3, #0
 800da32:	4604      	mov	r4, r0
 800da34:	4608      	mov	r0, r1
 800da36:	602b      	str	r3, [r5, #0]
 800da38:	f7f4 f9e0 	bl	8001dfc <_sbrk>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	d102      	bne.n	800da46 <_sbrk_r+0x1a>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	b103      	cbz	r3, 800da46 <_sbrk_r+0x1a>
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	2000a370 	.word	0x2000a370

0800da4c <_write_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4d07      	ldr	r5, [pc, #28]	; (800da6c <_write_r+0x20>)
 800da50:	4604      	mov	r4, r0
 800da52:	4608      	mov	r0, r1
 800da54:	4611      	mov	r1, r2
 800da56:	2200      	movs	r2, #0
 800da58:	602a      	str	r2, [r5, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	f7f4 f9b4 	bl	8001dc8 <_write>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d102      	bne.n	800da6a <_write_r+0x1e>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	b103      	cbz	r3, 800da6a <_write_r+0x1e>
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	2000a370 	.word	0x2000a370

0800da70 <__errno>:
 800da70:	4b01      	ldr	r3, [pc, #4]	; (800da78 <__errno+0x8>)
 800da72:	6818      	ldr	r0, [r3, #0]
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	200000b4 	.word	0x200000b4

0800da7c <__libc_init_array>:
 800da7c:	b570      	push	{r4, r5, r6, lr}
 800da7e:	4d0d      	ldr	r5, [pc, #52]	; (800dab4 <__libc_init_array+0x38>)
 800da80:	4c0d      	ldr	r4, [pc, #52]	; (800dab8 <__libc_init_array+0x3c>)
 800da82:	1b64      	subs	r4, r4, r5
 800da84:	10a4      	asrs	r4, r4, #2
 800da86:	2600      	movs	r6, #0
 800da88:	42a6      	cmp	r6, r4
 800da8a:	d109      	bne.n	800daa0 <__libc_init_array+0x24>
 800da8c:	4d0b      	ldr	r5, [pc, #44]	; (800dabc <__libc_init_array+0x40>)
 800da8e:	4c0c      	ldr	r4, [pc, #48]	; (800dac0 <__libc_init_array+0x44>)
 800da90:	f000 fd70 	bl	800e574 <_init>
 800da94:	1b64      	subs	r4, r4, r5
 800da96:	10a4      	asrs	r4, r4, #2
 800da98:	2600      	movs	r6, #0
 800da9a:	42a6      	cmp	r6, r4
 800da9c:	d105      	bne.n	800daaa <__libc_init_array+0x2e>
 800da9e:	bd70      	pop	{r4, r5, r6, pc}
 800daa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800daa4:	4798      	blx	r3
 800daa6:	3601      	adds	r6, #1
 800daa8:	e7ee      	b.n	800da88 <__libc_init_array+0xc>
 800daaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800daae:	4798      	blx	r3
 800dab0:	3601      	adds	r6, #1
 800dab2:	e7f2      	b.n	800da9a <__libc_init_array+0x1e>
 800dab4:	0800f21c 	.word	0x0800f21c
 800dab8:	0800f21c 	.word	0x0800f21c
 800dabc:	0800f21c 	.word	0x0800f21c
 800dac0:	0800f234 	.word	0x0800f234

0800dac4 <__retarget_lock_init_recursive>:
 800dac4:	4770      	bx	lr

0800dac6 <__retarget_lock_acquire_recursive>:
 800dac6:	4770      	bx	lr

0800dac8 <__retarget_lock_release_recursive>:
 800dac8:	4770      	bx	lr

0800daca <memcpy>:
 800daca:	440a      	add	r2, r1
 800dacc:	4291      	cmp	r1, r2
 800dace:	f100 33ff 	add.w	r3, r0, #4294967295
 800dad2:	d100      	bne.n	800dad6 <memcpy+0xc>
 800dad4:	4770      	bx	lr
 800dad6:	b510      	push	{r4, lr}
 800dad8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dadc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dae0:	4291      	cmp	r1, r2
 800dae2:	d1f9      	bne.n	800dad8 <memcpy+0xe>
 800dae4:	bd10      	pop	{r4, pc}
	...

0800dae8 <__register_exitproc>:
 800dae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daec:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800dba0 <__register_exitproc+0xb8>
 800daf0:	4606      	mov	r6, r0
 800daf2:	f8d8 0000 	ldr.w	r0, [r8]
 800daf6:	461f      	mov	r7, r3
 800daf8:	460d      	mov	r5, r1
 800dafa:	4691      	mov	r9, r2
 800dafc:	f7ff ffe3 	bl	800dac6 <__retarget_lock_acquire_recursive>
 800db00:	4b23      	ldr	r3, [pc, #140]	; (800db90 <__register_exitproc+0xa8>)
 800db02:	681c      	ldr	r4, [r3, #0]
 800db04:	b934      	cbnz	r4, 800db14 <__register_exitproc+0x2c>
 800db06:	4c23      	ldr	r4, [pc, #140]	; (800db94 <__register_exitproc+0xac>)
 800db08:	601c      	str	r4, [r3, #0]
 800db0a:	4b23      	ldr	r3, [pc, #140]	; (800db98 <__register_exitproc+0xb0>)
 800db0c:	b113      	cbz	r3, 800db14 <__register_exitproc+0x2c>
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800db14:	6863      	ldr	r3, [r4, #4]
 800db16:	2b1f      	cmp	r3, #31
 800db18:	dd07      	ble.n	800db2a <__register_exitproc+0x42>
 800db1a:	f8d8 0000 	ldr.w	r0, [r8]
 800db1e:	f7ff ffd3 	bl	800dac8 <__retarget_lock_release_recursive>
 800db22:	f04f 30ff 	mov.w	r0, #4294967295
 800db26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db2a:	b32e      	cbz	r6, 800db78 <__register_exitproc+0x90>
 800db2c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800db30:	b968      	cbnz	r0, 800db4e <__register_exitproc+0x66>
 800db32:	4b1a      	ldr	r3, [pc, #104]	; (800db9c <__register_exitproc+0xb4>)
 800db34:	2b00      	cmp	r3, #0
 800db36:	d0f0      	beq.n	800db1a <__register_exitproc+0x32>
 800db38:	f44f 7084 	mov.w	r0, #264	; 0x108
 800db3c:	f7ff fd22 	bl	800d584 <malloc>
 800db40:	2800      	cmp	r0, #0
 800db42:	d0ea      	beq.n	800db1a <__register_exitproc+0x32>
 800db44:	2300      	movs	r3, #0
 800db46:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800db4a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800db4e:	6863      	ldr	r3, [r4, #4]
 800db50:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800db54:	2201      	movs	r2, #1
 800db56:	409a      	lsls	r2, r3
 800db58:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800db5c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800db60:	4313      	orrs	r3, r2
 800db62:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800db66:	2e02      	cmp	r6, #2
 800db68:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800db6c:	bf02      	ittt	eq
 800db6e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800db72:	4313      	orreq	r3, r2
 800db74:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800db78:	6863      	ldr	r3, [r4, #4]
 800db7a:	f8d8 0000 	ldr.w	r0, [r8]
 800db7e:	1c5a      	adds	r2, r3, #1
 800db80:	3302      	adds	r3, #2
 800db82:	6062      	str	r2, [r4, #4]
 800db84:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800db88:	f7ff ff9e 	bl	800dac8 <__retarget_lock_release_recursive>
 800db8c:	2000      	movs	r0, #0
 800db8e:	e7ca      	b.n	800db26 <__register_exitproc+0x3e>
 800db90:	2000a404 	.word	0x2000a404
 800db94:	2000a378 	.word	0x2000a378
 800db98:	0800f13c 	.word	0x0800f13c
 800db9c:	0800d585 	.word	0x0800d585
 800dba0:	200000b8 	.word	0x200000b8

0800dba4 <_free_r>:
 800dba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dba6:	2900      	cmp	r1, #0
 800dba8:	d044      	beq.n	800dc34 <_free_r+0x90>
 800dbaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbae:	9001      	str	r0, [sp, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f1a1 0404 	sub.w	r4, r1, #4
 800dbb6:	bfb8      	it	lt
 800dbb8:	18e4      	addlt	r4, r4, r3
 800dbba:	f7ff fd93 	bl	800d6e4 <__malloc_lock>
 800dbbe:	4a1e      	ldr	r2, [pc, #120]	; (800dc38 <_free_r+0x94>)
 800dbc0:	9801      	ldr	r0, [sp, #4]
 800dbc2:	6813      	ldr	r3, [r2, #0]
 800dbc4:	b933      	cbnz	r3, 800dbd4 <_free_r+0x30>
 800dbc6:	6063      	str	r3, [r4, #4]
 800dbc8:	6014      	str	r4, [r2, #0]
 800dbca:	b003      	add	sp, #12
 800dbcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbd0:	f7ff bd8e 	b.w	800d6f0 <__malloc_unlock>
 800dbd4:	42a3      	cmp	r3, r4
 800dbd6:	d908      	bls.n	800dbea <_free_r+0x46>
 800dbd8:	6825      	ldr	r5, [r4, #0]
 800dbda:	1961      	adds	r1, r4, r5
 800dbdc:	428b      	cmp	r3, r1
 800dbde:	bf01      	itttt	eq
 800dbe0:	6819      	ldreq	r1, [r3, #0]
 800dbe2:	685b      	ldreq	r3, [r3, #4]
 800dbe4:	1949      	addeq	r1, r1, r5
 800dbe6:	6021      	streq	r1, [r4, #0]
 800dbe8:	e7ed      	b.n	800dbc6 <_free_r+0x22>
 800dbea:	461a      	mov	r2, r3
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	b10b      	cbz	r3, 800dbf4 <_free_r+0x50>
 800dbf0:	42a3      	cmp	r3, r4
 800dbf2:	d9fa      	bls.n	800dbea <_free_r+0x46>
 800dbf4:	6811      	ldr	r1, [r2, #0]
 800dbf6:	1855      	adds	r5, r2, r1
 800dbf8:	42a5      	cmp	r5, r4
 800dbfa:	d10b      	bne.n	800dc14 <_free_r+0x70>
 800dbfc:	6824      	ldr	r4, [r4, #0]
 800dbfe:	4421      	add	r1, r4
 800dc00:	1854      	adds	r4, r2, r1
 800dc02:	42a3      	cmp	r3, r4
 800dc04:	6011      	str	r1, [r2, #0]
 800dc06:	d1e0      	bne.n	800dbca <_free_r+0x26>
 800dc08:	681c      	ldr	r4, [r3, #0]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	6053      	str	r3, [r2, #4]
 800dc0e:	440c      	add	r4, r1
 800dc10:	6014      	str	r4, [r2, #0]
 800dc12:	e7da      	b.n	800dbca <_free_r+0x26>
 800dc14:	d902      	bls.n	800dc1c <_free_r+0x78>
 800dc16:	230c      	movs	r3, #12
 800dc18:	6003      	str	r3, [r0, #0]
 800dc1a:	e7d6      	b.n	800dbca <_free_r+0x26>
 800dc1c:	6825      	ldr	r5, [r4, #0]
 800dc1e:	1961      	adds	r1, r4, r5
 800dc20:	428b      	cmp	r3, r1
 800dc22:	bf04      	itt	eq
 800dc24:	6819      	ldreq	r1, [r3, #0]
 800dc26:	685b      	ldreq	r3, [r3, #4]
 800dc28:	6063      	str	r3, [r4, #4]
 800dc2a:	bf04      	itt	eq
 800dc2c:	1949      	addeq	r1, r1, r5
 800dc2e:	6021      	streq	r1, [r4, #0]
 800dc30:	6054      	str	r4, [r2, #4]
 800dc32:	e7ca      	b.n	800dbca <_free_r+0x26>
 800dc34:	b003      	add	sp, #12
 800dc36:	bd30      	pop	{r4, r5, pc}
 800dc38:	2000a22c 	.word	0x2000a22c

0800dc3c <__sfputc_r>:
 800dc3c:	6893      	ldr	r3, [r2, #8]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	b410      	push	{r4}
 800dc44:	6093      	str	r3, [r2, #8]
 800dc46:	da08      	bge.n	800dc5a <__sfputc_r+0x1e>
 800dc48:	6994      	ldr	r4, [r2, #24]
 800dc4a:	42a3      	cmp	r3, r4
 800dc4c:	db01      	blt.n	800dc52 <__sfputc_r+0x16>
 800dc4e:	290a      	cmp	r1, #10
 800dc50:	d103      	bne.n	800dc5a <__sfputc_r+0x1e>
 800dc52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc56:	f000 bb73 	b.w	800e340 <__swbuf_r>
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	1c58      	adds	r0, r3, #1
 800dc5e:	6010      	str	r0, [r2, #0]
 800dc60:	7019      	strb	r1, [r3, #0]
 800dc62:	4608      	mov	r0, r1
 800dc64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <__sfputs_r>:
 800dc6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	460f      	mov	r7, r1
 800dc70:	4614      	mov	r4, r2
 800dc72:	18d5      	adds	r5, r2, r3
 800dc74:	42ac      	cmp	r4, r5
 800dc76:	d101      	bne.n	800dc7c <__sfputs_r+0x12>
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e007      	b.n	800dc8c <__sfputs_r+0x22>
 800dc7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc80:	463a      	mov	r2, r7
 800dc82:	4630      	mov	r0, r6
 800dc84:	f7ff ffda 	bl	800dc3c <__sfputc_r>
 800dc88:	1c43      	adds	r3, r0, #1
 800dc8a:	d1f3      	bne.n	800dc74 <__sfputs_r+0xa>
 800dc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc90 <_vfiprintf_r>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	460d      	mov	r5, r1
 800dc96:	b09d      	sub	sp, #116	; 0x74
 800dc98:	4614      	mov	r4, r2
 800dc9a:	4698      	mov	r8, r3
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	b118      	cbz	r0, 800dca8 <_vfiprintf_r+0x18>
 800dca0:	6a03      	ldr	r3, [r0, #32]
 800dca2:	b90b      	cbnz	r3, 800dca8 <_vfiprintf_r+0x18>
 800dca4:	f7ff fdb6 	bl	800d814 <__sinit>
 800dca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcaa:	07d9      	lsls	r1, r3, #31
 800dcac:	d405      	bmi.n	800dcba <_vfiprintf_r+0x2a>
 800dcae:	89ab      	ldrh	r3, [r5, #12]
 800dcb0:	059a      	lsls	r2, r3, #22
 800dcb2:	d402      	bmi.n	800dcba <_vfiprintf_r+0x2a>
 800dcb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcb6:	f7ff ff06 	bl	800dac6 <__retarget_lock_acquire_recursive>
 800dcba:	89ab      	ldrh	r3, [r5, #12]
 800dcbc:	071b      	lsls	r3, r3, #28
 800dcbe:	d501      	bpl.n	800dcc4 <_vfiprintf_r+0x34>
 800dcc0:	692b      	ldr	r3, [r5, #16]
 800dcc2:	b99b      	cbnz	r3, 800dcec <_vfiprintf_r+0x5c>
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	f000 fb78 	bl	800e3bc <__swsetup_r>
 800dccc:	b170      	cbz	r0, 800dcec <_vfiprintf_r+0x5c>
 800dcce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcd0:	07dc      	lsls	r4, r3, #31
 800dcd2:	d504      	bpl.n	800dcde <_vfiprintf_r+0x4e>
 800dcd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd8:	b01d      	add	sp, #116	; 0x74
 800dcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcde:	89ab      	ldrh	r3, [r5, #12]
 800dce0:	0598      	lsls	r0, r3, #22
 800dce2:	d4f7      	bmi.n	800dcd4 <_vfiprintf_r+0x44>
 800dce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dce6:	f7ff feef 	bl	800dac8 <__retarget_lock_release_recursive>
 800dcea:	e7f3      	b.n	800dcd4 <_vfiprintf_r+0x44>
 800dcec:	2300      	movs	r3, #0
 800dcee:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf0:	2320      	movs	r3, #32
 800dcf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcfa:	2330      	movs	r3, #48	; 0x30
 800dcfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800deb0 <_vfiprintf_r+0x220>
 800dd00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd04:	f04f 0901 	mov.w	r9, #1
 800dd08:	4623      	mov	r3, r4
 800dd0a:	469a      	mov	sl, r3
 800dd0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd10:	b10a      	cbz	r2, 800dd16 <_vfiprintf_r+0x86>
 800dd12:	2a25      	cmp	r2, #37	; 0x25
 800dd14:	d1f9      	bne.n	800dd0a <_vfiprintf_r+0x7a>
 800dd16:	ebba 0b04 	subs.w	fp, sl, r4
 800dd1a:	d00b      	beq.n	800dd34 <_vfiprintf_r+0xa4>
 800dd1c:	465b      	mov	r3, fp
 800dd1e:	4622      	mov	r2, r4
 800dd20:	4629      	mov	r1, r5
 800dd22:	4630      	mov	r0, r6
 800dd24:	f7ff ffa1 	bl	800dc6a <__sfputs_r>
 800dd28:	3001      	adds	r0, #1
 800dd2a:	f000 80a9 	beq.w	800de80 <_vfiprintf_r+0x1f0>
 800dd2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd30:	445a      	add	r2, fp
 800dd32:	9209      	str	r2, [sp, #36]	; 0x24
 800dd34:	f89a 3000 	ldrb.w	r3, [sl]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 80a1 	beq.w	800de80 <_vfiprintf_r+0x1f0>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f04f 32ff 	mov.w	r2, #4294967295
 800dd44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd48:	f10a 0a01 	add.w	sl, sl, #1
 800dd4c:	9304      	str	r3, [sp, #16]
 800dd4e:	9307      	str	r3, [sp, #28]
 800dd50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd54:	931a      	str	r3, [sp, #104]	; 0x68
 800dd56:	4654      	mov	r4, sl
 800dd58:	2205      	movs	r2, #5
 800dd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5e:	4854      	ldr	r0, [pc, #336]	; (800deb0 <_vfiprintf_r+0x220>)
 800dd60:	f7f2 fa4e 	bl	8000200 <memchr>
 800dd64:	9a04      	ldr	r2, [sp, #16]
 800dd66:	b9d8      	cbnz	r0, 800dda0 <_vfiprintf_r+0x110>
 800dd68:	06d1      	lsls	r1, r2, #27
 800dd6a:	bf44      	itt	mi
 800dd6c:	2320      	movmi	r3, #32
 800dd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd72:	0713      	lsls	r3, r2, #28
 800dd74:	bf44      	itt	mi
 800dd76:	232b      	movmi	r3, #43	; 0x2b
 800dd78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd7c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd80:	2b2a      	cmp	r3, #42	; 0x2a
 800dd82:	d015      	beq.n	800ddb0 <_vfiprintf_r+0x120>
 800dd84:	9a07      	ldr	r2, [sp, #28]
 800dd86:	4654      	mov	r4, sl
 800dd88:	2000      	movs	r0, #0
 800dd8a:	f04f 0c0a 	mov.w	ip, #10
 800dd8e:	4621      	mov	r1, r4
 800dd90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd94:	3b30      	subs	r3, #48	; 0x30
 800dd96:	2b09      	cmp	r3, #9
 800dd98:	d94d      	bls.n	800de36 <_vfiprintf_r+0x1a6>
 800dd9a:	b1b0      	cbz	r0, 800ddca <_vfiprintf_r+0x13a>
 800dd9c:	9207      	str	r2, [sp, #28]
 800dd9e:	e014      	b.n	800ddca <_vfiprintf_r+0x13a>
 800dda0:	eba0 0308 	sub.w	r3, r0, r8
 800dda4:	fa09 f303 	lsl.w	r3, r9, r3
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	9304      	str	r3, [sp, #16]
 800ddac:	46a2      	mov	sl, r4
 800ddae:	e7d2      	b.n	800dd56 <_vfiprintf_r+0xc6>
 800ddb0:	9b03      	ldr	r3, [sp, #12]
 800ddb2:	1d19      	adds	r1, r3, #4
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	9103      	str	r1, [sp, #12]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	bfbb      	ittet	lt
 800ddbc:	425b      	neglt	r3, r3
 800ddbe:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc2:	9307      	strge	r3, [sp, #28]
 800ddc4:	9307      	strlt	r3, [sp, #28]
 800ddc6:	bfb8      	it	lt
 800ddc8:	9204      	strlt	r2, [sp, #16]
 800ddca:	7823      	ldrb	r3, [r4, #0]
 800ddcc:	2b2e      	cmp	r3, #46	; 0x2e
 800ddce:	d10c      	bne.n	800ddea <_vfiprintf_r+0x15a>
 800ddd0:	7863      	ldrb	r3, [r4, #1]
 800ddd2:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd4:	d134      	bne.n	800de40 <_vfiprintf_r+0x1b0>
 800ddd6:	9b03      	ldr	r3, [sp, #12]
 800ddd8:	1d1a      	adds	r2, r3, #4
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	9203      	str	r2, [sp, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bfb8      	it	lt
 800dde2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dde6:	3402      	adds	r4, #2
 800dde8:	9305      	str	r3, [sp, #20]
 800ddea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dec0 <_vfiprintf_r+0x230>
 800ddee:	7821      	ldrb	r1, [r4, #0]
 800ddf0:	2203      	movs	r2, #3
 800ddf2:	4650      	mov	r0, sl
 800ddf4:	f7f2 fa04 	bl	8000200 <memchr>
 800ddf8:	b138      	cbz	r0, 800de0a <_vfiprintf_r+0x17a>
 800ddfa:	9b04      	ldr	r3, [sp, #16]
 800ddfc:	eba0 000a 	sub.w	r0, r0, sl
 800de00:	2240      	movs	r2, #64	; 0x40
 800de02:	4082      	lsls	r2, r0
 800de04:	4313      	orrs	r3, r2
 800de06:	3401      	adds	r4, #1
 800de08:	9304      	str	r3, [sp, #16]
 800de0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de0e:	4829      	ldr	r0, [pc, #164]	; (800deb4 <_vfiprintf_r+0x224>)
 800de10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de14:	2206      	movs	r2, #6
 800de16:	f7f2 f9f3 	bl	8000200 <memchr>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d03f      	beq.n	800de9e <_vfiprintf_r+0x20e>
 800de1e:	4b26      	ldr	r3, [pc, #152]	; (800deb8 <_vfiprintf_r+0x228>)
 800de20:	bb1b      	cbnz	r3, 800de6a <_vfiprintf_r+0x1da>
 800de22:	9b03      	ldr	r3, [sp, #12]
 800de24:	3307      	adds	r3, #7
 800de26:	f023 0307 	bic.w	r3, r3, #7
 800de2a:	3308      	adds	r3, #8
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de30:	443b      	add	r3, r7
 800de32:	9309      	str	r3, [sp, #36]	; 0x24
 800de34:	e768      	b.n	800dd08 <_vfiprintf_r+0x78>
 800de36:	fb0c 3202 	mla	r2, ip, r2, r3
 800de3a:	460c      	mov	r4, r1
 800de3c:	2001      	movs	r0, #1
 800de3e:	e7a6      	b.n	800dd8e <_vfiprintf_r+0xfe>
 800de40:	2300      	movs	r3, #0
 800de42:	3401      	adds	r4, #1
 800de44:	9305      	str	r3, [sp, #20]
 800de46:	4619      	mov	r1, r3
 800de48:	f04f 0c0a 	mov.w	ip, #10
 800de4c:	4620      	mov	r0, r4
 800de4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de52:	3a30      	subs	r2, #48	; 0x30
 800de54:	2a09      	cmp	r2, #9
 800de56:	d903      	bls.n	800de60 <_vfiprintf_r+0x1d0>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0c6      	beq.n	800ddea <_vfiprintf_r+0x15a>
 800de5c:	9105      	str	r1, [sp, #20]
 800de5e:	e7c4      	b.n	800ddea <_vfiprintf_r+0x15a>
 800de60:	fb0c 2101 	mla	r1, ip, r1, r2
 800de64:	4604      	mov	r4, r0
 800de66:	2301      	movs	r3, #1
 800de68:	e7f0      	b.n	800de4c <_vfiprintf_r+0x1bc>
 800de6a:	ab03      	add	r3, sp, #12
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	462a      	mov	r2, r5
 800de70:	4b12      	ldr	r3, [pc, #72]	; (800debc <_vfiprintf_r+0x22c>)
 800de72:	a904      	add	r1, sp, #16
 800de74:	4630      	mov	r0, r6
 800de76:	f3af 8000 	nop.w
 800de7a:	4607      	mov	r7, r0
 800de7c:	1c78      	adds	r0, r7, #1
 800de7e:	d1d6      	bne.n	800de2e <_vfiprintf_r+0x19e>
 800de80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de82:	07d9      	lsls	r1, r3, #31
 800de84:	d405      	bmi.n	800de92 <_vfiprintf_r+0x202>
 800de86:	89ab      	ldrh	r3, [r5, #12]
 800de88:	059a      	lsls	r2, r3, #22
 800de8a:	d402      	bmi.n	800de92 <_vfiprintf_r+0x202>
 800de8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de8e:	f7ff fe1b 	bl	800dac8 <__retarget_lock_release_recursive>
 800de92:	89ab      	ldrh	r3, [r5, #12]
 800de94:	065b      	lsls	r3, r3, #25
 800de96:	f53f af1d 	bmi.w	800dcd4 <_vfiprintf_r+0x44>
 800de9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de9c:	e71c      	b.n	800dcd8 <_vfiprintf_r+0x48>
 800de9e:	ab03      	add	r3, sp, #12
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	462a      	mov	r2, r5
 800dea4:	4b05      	ldr	r3, [pc, #20]	; (800debc <_vfiprintf_r+0x22c>)
 800dea6:	a904      	add	r1, sp, #16
 800dea8:	4630      	mov	r0, r6
 800deaa:	f000 f879 	bl	800dfa0 <_printf_i>
 800deae:	e7e4      	b.n	800de7a <_vfiprintf_r+0x1ea>
 800deb0:	0800f140 	.word	0x0800f140
 800deb4:	0800f14a 	.word	0x0800f14a
 800deb8:	00000000 	.word	0x00000000
 800debc:	0800dc6b 	.word	0x0800dc6b
 800dec0:	0800f146 	.word	0x0800f146

0800dec4 <_printf_common>:
 800dec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dec8:	4616      	mov	r6, r2
 800deca:	4699      	mov	r9, r3
 800decc:	688a      	ldr	r2, [r1, #8]
 800dece:	690b      	ldr	r3, [r1, #16]
 800ded0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ded4:	4293      	cmp	r3, r2
 800ded6:	bfb8      	it	lt
 800ded8:	4613      	movlt	r3, r2
 800deda:	6033      	str	r3, [r6, #0]
 800dedc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dee0:	4607      	mov	r7, r0
 800dee2:	460c      	mov	r4, r1
 800dee4:	b10a      	cbz	r2, 800deea <_printf_common+0x26>
 800dee6:	3301      	adds	r3, #1
 800dee8:	6033      	str	r3, [r6, #0]
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	0699      	lsls	r1, r3, #26
 800deee:	bf42      	ittt	mi
 800def0:	6833      	ldrmi	r3, [r6, #0]
 800def2:	3302      	addmi	r3, #2
 800def4:	6033      	strmi	r3, [r6, #0]
 800def6:	6825      	ldr	r5, [r4, #0]
 800def8:	f015 0506 	ands.w	r5, r5, #6
 800defc:	d106      	bne.n	800df0c <_printf_common+0x48>
 800defe:	f104 0a19 	add.w	sl, r4, #25
 800df02:	68e3      	ldr	r3, [r4, #12]
 800df04:	6832      	ldr	r2, [r6, #0]
 800df06:	1a9b      	subs	r3, r3, r2
 800df08:	42ab      	cmp	r3, r5
 800df0a:	dc26      	bgt.n	800df5a <_printf_common+0x96>
 800df0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df10:	1e13      	subs	r3, r2, #0
 800df12:	6822      	ldr	r2, [r4, #0]
 800df14:	bf18      	it	ne
 800df16:	2301      	movne	r3, #1
 800df18:	0692      	lsls	r2, r2, #26
 800df1a:	d42b      	bmi.n	800df74 <_printf_common+0xb0>
 800df1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df20:	4649      	mov	r1, r9
 800df22:	4638      	mov	r0, r7
 800df24:	47c0      	blx	r8
 800df26:	3001      	adds	r0, #1
 800df28:	d01e      	beq.n	800df68 <_printf_common+0xa4>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	6922      	ldr	r2, [r4, #16]
 800df2e:	f003 0306 	and.w	r3, r3, #6
 800df32:	2b04      	cmp	r3, #4
 800df34:	bf02      	ittt	eq
 800df36:	68e5      	ldreq	r5, [r4, #12]
 800df38:	6833      	ldreq	r3, [r6, #0]
 800df3a:	1aed      	subeq	r5, r5, r3
 800df3c:	68a3      	ldr	r3, [r4, #8]
 800df3e:	bf0c      	ite	eq
 800df40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df44:	2500      	movne	r5, #0
 800df46:	4293      	cmp	r3, r2
 800df48:	bfc4      	itt	gt
 800df4a:	1a9b      	subgt	r3, r3, r2
 800df4c:	18ed      	addgt	r5, r5, r3
 800df4e:	2600      	movs	r6, #0
 800df50:	341a      	adds	r4, #26
 800df52:	42b5      	cmp	r5, r6
 800df54:	d11a      	bne.n	800df8c <_printf_common+0xc8>
 800df56:	2000      	movs	r0, #0
 800df58:	e008      	b.n	800df6c <_printf_common+0xa8>
 800df5a:	2301      	movs	r3, #1
 800df5c:	4652      	mov	r2, sl
 800df5e:	4649      	mov	r1, r9
 800df60:	4638      	mov	r0, r7
 800df62:	47c0      	blx	r8
 800df64:	3001      	adds	r0, #1
 800df66:	d103      	bne.n	800df70 <_printf_common+0xac>
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df70:	3501      	adds	r5, #1
 800df72:	e7c6      	b.n	800df02 <_printf_common+0x3e>
 800df74:	18e1      	adds	r1, r4, r3
 800df76:	1c5a      	adds	r2, r3, #1
 800df78:	2030      	movs	r0, #48	; 0x30
 800df7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df7e:	4422      	add	r2, r4
 800df80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df88:	3302      	adds	r3, #2
 800df8a:	e7c7      	b.n	800df1c <_printf_common+0x58>
 800df8c:	2301      	movs	r3, #1
 800df8e:	4622      	mov	r2, r4
 800df90:	4649      	mov	r1, r9
 800df92:	4638      	mov	r0, r7
 800df94:	47c0      	blx	r8
 800df96:	3001      	adds	r0, #1
 800df98:	d0e6      	beq.n	800df68 <_printf_common+0xa4>
 800df9a:	3601      	adds	r6, #1
 800df9c:	e7d9      	b.n	800df52 <_printf_common+0x8e>
	...

0800dfa0 <_printf_i>:
 800dfa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa4:	7e0f      	ldrb	r7, [r1, #24]
 800dfa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dfa8:	2f78      	cmp	r7, #120	; 0x78
 800dfaa:	4691      	mov	r9, r2
 800dfac:	4680      	mov	r8, r0
 800dfae:	460c      	mov	r4, r1
 800dfb0:	469a      	mov	sl, r3
 800dfb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dfb6:	d807      	bhi.n	800dfc8 <_printf_i+0x28>
 800dfb8:	2f62      	cmp	r7, #98	; 0x62
 800dfba:	d80a      	bhi.n	800dfd2 <_printf_i+0x32>
 800dfbc:	2f00      	cmp	r7, #0
 800dfbe:	f000 80d4 	beq.w	800e16a <_printf_i+0x1ca>
 800dfc2:	2f58      	cmp	r7, #88	; 0x58
 800dfc4:	f000 80c0 	beq.w	800e148 <_printf_i+0x1a8>
 800dfc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dfd0:	e03a      	b.n	800e048 <_printf_i+0xa8>
 800dfd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dfd6:	2b15      	cmp	r3, #21
 800dfd8:	d8f6      	bhi.n	800dfc8 <_printf_i+0x28>
 800dfda:	a101      	add	r1, pc, #4	; (adr r1, 800dfe0 <_printf_i+0x40>)
 800dfdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfe0:	0800e039 	.word	0x0800e039
 800dfe4:	0800e04d 	.word	0x0800e04d
 800dfe8:	0800dfc9 	.word	0x0800dfc9
 800dfec:	0800dfc9 	.word	0x0800dfc9
 800dff0:	0800dfc9 	.word	0x0800dfc9
 800dff4:	0800dfc9 	.word	0x0800dfc9
 800dff8:	0800e04d 	.word	0x0800e04d
 800dffc:	0800dfc9 	.word	0x0800dfc9
 800e000:	0800dfc9 	.word	0x0800dfc9
 800e004:	0800dfc9 	.word	0x0800dfc9
 800e008:	0800dfc9 	.word	0x0800dfc9
 800e00c:	0800e151 	.word	0x0800e151
 800e010:	0800e079 	.word	0x0800e079
 800e014:	0800e10b 	.word	0x0800e10b
 800e018:	0800dfc9 	.word	0x0800dfc9
 800e01c:	0800dfc9 	.word	0x0800dfc9
 800e020:	0800e173 	.word	0x0800e173
 800e024:	0800dfc9 	.word	0x0800dfc9
 800e028:	0800e079 	.word	0x0800e079
 800e02c:	0800dfc9 	.word	0x0800dfc9
 800e030:	0800dfc9 	.word	0x0800dfc9
 800e034:	0800e113 	.word	0x0800e113
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	1d1a      	adds	r2, r3, #4
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	602a      	str	r2, [r5, #0]
 800e040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e048:	2301      	movs	r3, #1
 800e04a:	e09f      	b.n	800e18c <_printf_i+0x1ec>
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	682b      	ldr	r3, [r5, #0]
 800e050:	0607      	lsls	r7, r0, #24
 800e052:	f103 0104 	add.w	r1, r3, #4
 800e056:	6029      	str	r1, [r5, #0]
 800e058:	d501      	bpl.n	800e05e <_printf_i+0xbe>
 800e05a:	681e      	ldr	r6, [r3, #0]
 800e05c:	e003      	b.n	800e066 <_printf_i+0xc6>
 800e05e:	0646      	lsls	r6, r0, #25
 800e060:	d5fb      	bpl.n	800e05a <_printf_i+0xba>
 800e062:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e066:	2e00      	cmp	r6, #0
 800e068:	da03      	bge.n	800e072 <_printf_i+0xd2>
 800e06a:	232d      	movs	r3, #45	; 0x2d
 800e06c:	4276      	negs	r6, r6
 800e06e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e072:	485a      	ldr	r0, [pc, #360]	; (800e1dc <_printf_i+0x23c>)
 800e074:	230a      	movs	r3, #10
 800e076:	e012      	b.n	800e09e <_printf_i+0xfe>
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	6820      	ldr	r0, [r4, #0]
 800e07c:	1d19      	adds	r1, r3, #4
 800e07e:	6029      	str	r1, [r5, #0]
 800e080:	0605      	lsls	r5, r0, #24
 800e082:	d501      	bpl.n	800e088 <_printf_i+0xe8>
 800e084:	681e      	ldr	r6, [r3, #0]
 800e086:	e002      	b.n	800e08e <_printf_i+0xee>
 800e088:	0641      	lsls	r1, r0, #25
 800e08a:	d5fb      	bpl.n	800e084 <_printf_i+0xe4>
 800e08c:	881e      	ldrh	r6, [r3, #0]
 800e08e:	4853      	ldr	r0, [pc, #332]	; (800e1dc <_printf_i+0x23c>)
 800e090:	2f6f      	cmp	r7, #111	; 0x6f
 800e092:	bf0c      	ite	eq
 800e094:	2308      	moveq	r3, #8
 800e096:	230a      	movne	r3, #10
 800e098:	2100      	movs	r1, #0
 800e09a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e09e:	6865      	ldr	r5, [r4, #4]
 800e0a0:	60a5      	str	r5, [r4, #8]
 800e0a2:	2d00      	cmp	r5, #0
 800e0a4:	bfa2      	ittt	ge
 800e0a6:	6821      	ldrge	r1, [r4, #0]
 800e0a8:	f021 0104 	bicge.w	r1, r1, #4
 800e0ac:	6021      	strge	r1, [r4, #0]
 800e0ae:	b90e      	cbnz	r6, 800e0b4 <_printf_i+0x114>
 800e0b0:	2d00      	cmp	r5, #0
 800e0b2:	d04b      	beq.n	800e14c <_printf_i+0x1ac>
 800e0b4:	4615      	mov	r5, r2
 800e0b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e0ba:	fb03 6711 	mls	r7, r3, r1, r6
 800e0be:	5dc7      	ldrb	r7, [r0, r7]
 800e0c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e0c4:	4637      	mov	r7, r6
 800e0c6:	42bb      	cmp	r3, r7
 800e0c8:	460e      	mov	r6, r1
 800e0ca:	d9f4      	bls.n	800e0b6 <_printf_i+0x116>
 800e0cc:	2b08      	cmp	r3, #8
 800e0ce:	d10b      	bne.n	800e0e8 <_printf_i+0x148>
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	07de      	lsls	r6, r3, #31
 800e0d4:	d508      	bpl.n	800e0e8 <_printf_i+0x148>
 800e0d6:	6923      	ldr	r3, [r4, #16]
 800e0d8:	6861      	ldr	r1, [r4, #4]
 800e0da:	4299      	cmp	r1, r3
 800e0dc:	bfde      	ittt	le
 800e0de:	2330      	movle	r3, #48	; 0x30
 800e0e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e0e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e0e8:	1b52      	subs	r2, r2, r5
 800e0ea:	6122      	str	r2, [r4, #16]
 800e0ec:	f8cd a000 	str.w	sl, [sp]
 800e0f0:	464b      	mov	r3, r9
 800e0f2:	aa03      	add	r2, sp, #12
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4640      	mov	r0, r8
 800e0f8:	f7ff fee4 	bl	800dec4 <_printf_common>
 800e0fc:	3001      	adds	r0, #1
 800e0fe:	d14a      	bne.n	800e196 <_printf_i+0x1f6>
 800e100:	f04f 30ff 	mov.w	r0, #4294967295
 800e104:	b004      	add	sp, #16
 800e106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	f043 0320 	orr.w	r3, r3, #32
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	4833      	ldr	r0, [pc, #204]	; (800e1e0 <_printf_i+0x240>)
 800e114:	2778      	movs	r7, #120	; 0x78
 800e116:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	6829      	ldr	r1, [r5, #0]
 800e11e:	061f      	lsls	r7, r3, #24
 800e120:	f851 6b04 	ldr.w	r6, [r1], #4
 800e124:	d402      	bmi.n	800e12c <_printf_i+0x18c>
 800e126:	065f      	lsls	r7, r3, #25
 800e128:	bf48      	it	mi
 800e12a:	b2b6      	uxthmi	r6, r6
 800e12c:	07df      	lsls	r7, r3, #31
 800e12e:	bf48      	it	mi
 800e130:	f043 0320 	orrmi.w	r3, r3, #32
 800e134:	6029      	str	r1, [r5, #0]
 800e136:	bf48      	it	mi
 800e138:	6023      	strmi	r3, [r4, #0]
 800e13a:	b91e      	cbnz	r6, 800e144 <_printf_i+0x1a4>
 800e13c:	6823      	ldr	r3, [r4, #0]
 800e13e:	f023 0320 	bic.w	r3, r3, #32
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	2310      	movs	r3, #16
 800e146:	e7a7      	b.n	800e098 <_printf_i+0xf8>
 800e148:	4824      	ldr	r0, [pc, #144]	; (800e1dc <_printf_i+0x23c>)
 800e14a:	e7e4      	b.n	800e116 <_printf_i+0x176>
 800e14c:	4615      	mov	r5, r2
 800e14e:	e7bd      	b.n	800e0cc <_printf_i+0x12c>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	6826      	ldr	r6, [r4, #0]
 800e154:	6961      	ldr	r1, [r4, #20]
 800e156:	1d18      	adds	r0, r3, #4
 800e158:	6028      	str	r0, [r5, #0]
 800e15a:	0635      	lsls	r5, r6, #24
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	d501      	bpl.n	800e164 <_printf_i+0x1c4>
 800e160:	6019      	str	r1, [r3, #0]
 800e162:	e002      	b.n	800e16a <_printf_i+0x1ca>
 800e164:	0670      	lsls	r0, r6, #25
 800e166:	d5fb      	bpl.n	800e160 <_printf_i+0x1c0>
 800e168:	8019      	strh	r1, [r3, #0]
 800e16a:	2300      	movs	r3, #0
 800e16c:	6123      	str	r3, [r4, #16]
 800e16e:	4615      	mov	r5, r2
 800e170:	e7bc      	b.n	800e0ec <_printf_i+0x14c>
 800e172:	682b      	ldr	r3, [r5, #0]
 800e174:	1d1a      	adds	r2, r3, #4
 800e176:	602a      	str	r2, [r5, #0]
 800e178:	681d      	ldr	r5, [r3, #0]
 800e17a:	6862      	ldr	r2, [r4, #4]
 800e17c:	2100      	movs	r1, #0
 800e17e:	4628      	mov	r0, r5
 800e180:	f7f2 f83e 	bl	8000200 <memchr>
 800e184:	b108      	cbz	r0, 800e18a <_printf_i+0x1ea>
 800e186:	1b40      	subs	r0, r0, r5
 800e188:	6060      	str	r0, [r4, #4]
 800e18a:	6863      	ldr	r3, [r4, #4]
 800e18c:	6123      	str	r3, [r4, #16]
 800e18e:	2300      	movs	r3, #0
 800e190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e194:	e7aa      	b.n	800e0ec <_printf_i+0x14c>
 800e196:	6923      	ldr	r3, [r4, #16]
 800e198:	462a      	mov	r2, r5
 800e19a:	4649      	mov	r1, r9
 800e19c:	4640      	mov	r0, r8
 800e19e:	47d0      	blx	sl
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d0ad      	beq.n	800e100 <_printf_i+0x160>
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	079b      	lsls	r3, r3, #30
 800e1a8:	d413      	bmi.n	800e1d2 <_printf_i+0x232>
 800e1aa:	68e0      	ldr	r0, [r4, #12]
 800e1ac:	9b03      	ldr	r3, [sp, #12]
 800e1ae:	4298      	cmp	r0, r3
 800e1b0:	bfb8      	it	lt
 800e1b2:	4618      	movlt	r0, r3
 800e1b4:	e7a6      	b.n	800e104 <_printf_i+0x164>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	4632      	mov	r2, r6
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	4640      	mov	r0, r8
 800e1be:	47d0      	blx	sl
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d09d      	beq.n	800e100 <_printf_i+0x160>
 800e1c4:	3501      	adds	r5, #1
 800e1c6:	68e3      	ldr	r3, [r4, #12]
 800e1c8:	9903      	ldr	r1, [sp, #12]
 800e1ca:	1a5b      	subs	r3, r3, r1
 800e1cc:	42ab      	cmp	r3, r5
 800e1ce:	dcf2      	bgt.n	800e1b6 <_printf_i+0x216>
 800e1d0:	e7eb      	b.n	800e1aa <_printf_i+0x20a>
 800e1d2:	2500      	movs	r5, #0
 800e1d4:	f104 0619 	add.w	r6, r4, #25
 800e1d8:	e7f5      	b.n	800e1c6 <_printf_i+0x226>
 800e1da:	bf00      	nop
 800e1dc:	0800f151 	.word	0x0800f151
 800e1e0:	0800f162 	.word	0x0800f162

0800e1e4 <__sflush_r>:
 800e1e4:	898a      	ldrh	r2, [r1, #12]
 800e1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	0710      	lsls	r0, r2, #28
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	d458      	bmi.n	800e2a4 <__sflush_r+0xc0>
 800e1f2:	684b      	ldr	r3, [r1, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dc05      	bgt.n	800e204 <__sflush_r+0x20>
 800e1f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	dc02      	bgt.n	800e204 <__sflush_r+0x20>
 800e1fe:	2000      	movs	r0, #0
 800e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e206:	2e00      	cmp	r6, #0
 800e208:	d0f9      	beq.n	800e1fe <__sflush_r+0x1a>
 800e20a:	2300      	movs	r3, #0
 800e20c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e210:	682f      	ldr	r7, [r5, #0]
 800e212:	6a21      	ldr	r1, [r4, #32]
 800e214:	602b      	str	r3, [r5, #0]
 800e216:	d032      	beq.n	800e27e <__sflush_r+0x9a>
 800e218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e21a:	89a3      	ldrh	r3, [r4, #12]
 800e21c:	075a      	lsls	r2, r3, #29
 800e21e:	d505      	bpl.n	800e22c <__sflush_r+0x48>
 800e220:	6863      	ldr	r3, [r4, #4]
 800e222:	1ac0      	subs	r0, r0, r3
 800e224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e226:	b10b      	cbz	r3, 800e22c <__sflush_r+0x48>
 800e228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e22a:	1ac0      	subs	r0, r0, r3
 800e22c:	2300      	movs	r3, #0
 800e22e:	4602      	mov	r2, r0
 800e230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e232:	6a21      	ldr	r1, [r4, #32]
 800e234:	4628      	mov	r0, r5
 800e236:	47b0      	blx	r6
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	89a3      	ldrh	r3, [r4, #12]
 800e23c:	d106      	bne.n	800e24c <__sflush_r+0x68>
 800e23e:	6829      	ldr	r1, [r5, #0]
 800e240:	291d      	cmp	r1, #29
 800e242:	d82b      	bhi.n	800e29c <__sflush_r+0xb8>
 800e244:	4a29      	ldr	r2, [pc, #164]	; (800e2ec <__sflush_r+0x108>)
 800e246:	410a      	asrs	r2, r1
 800e248:	07d6      	lsls	r6, r2, #31
 800e24a:	d427      	bmi.n	800e29c <__sflush_r+0xb8>
 800e24c:	2200      	movs	r2, #0
 800e24e:	6062      	str	r2, [r4, #4]
 800e250:	04d9      	lsls	r1, r3, #19
 800e252:	6922      	ldr	r2, [r4, #16]
 800e254:	6022      	str	r2, [r4, #0]
 800e256:	d504      	bpl.n	800e262 <__sflush_r+0x7e>
 800e258:	1c42      	adds	r2, r0, #1
 800e25a:	d101      	bne.n	800e260 <__sflush_r+0x7c>
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	b903      	cbnz	r3, 800e262 <__sflush_r+0x7e>
 800e260:	6560      	str	r0, [r4, #84]	; 0x54
 800e262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e264:	602f      	str	r7, [r5, #0]
 800e266:	2900      	cmp	r1, #0
 800e268:	d0c9      	beq.n	800e1fe <__sflush_r+0x1a>
 800e26a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e26e:	4299      	cmp	r1, r3
 800e270:	d002      	beq.n	800e278 <__sflush_r+0x94>
 800e272:	4628      	mov	r0, r5
 800e274:	f7ff fc96 	bl	800dba4 <_free_r>
 800e278:	2000      	movs	r0, #0
 800e27a:	6360      	str	r0, [r4, #52]	; 0x34
 800e27c:	e7c0      	b.n	800e200 <__sflush_r+0x1c>
 800e27e:	2301      	movs	r3, #1
 800e280:	4628      	mov	r0, r5
 800e282:	47b0      	blx	r6
 800e284:	1c41      	adds	r1, r0, #1
 800e286:	d1c8      	bne.n	800e21a <__sflush_r+0x36>
 800e288:	682b      	ldr	r3, [r5, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d0c5      	beq.n	800e21a <__sflush_r+0x36>
 800e28e:	2b1d      	cmp	r3, #29
 800e290:	d001      	beq.n	800e296 <__sflush_r+0xb2>
 800e292:	2b16      	cmp	r3, #22
 800e294:	d101      	bne.n	800e29a <__sflush_r+0xb6>
 800e296:	602f      	str	r7, [r5, #0]
 800e298:	e7b1      	b.n	800e1fe <__sflush_r+0x1a>
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2a0:	81a3      	strh	r3, [r4, #12]
 800e2a2:	e7ad      	b.n	800e200 <__sflush_r+0x1c>
 800e2a4:	690f      	ldr	r7, [r1, #16]
 800e2a6:	2f00      	cmp	r7, #0
 800e2a8:	d0a9      	beq.n	800e1fe <__sflush_r+0x1a>
 800e2aa:	0793      	lsls	r3, r2, #30
 800e2ac:	680e      	ldr	r6, [r1, #0]
 800e2ae:	bf08      	it	eq
 800e2b0:	694b      	ldreq	r3, [r1, #20]
 800e2b2:	600f      	str	r7, [r1, #0]
 800e2b4:	bf18      	it	ne
 800e2b6:	2300      	movne	r3, #0
 800e2b8:	eba6 0807 	sub.w	r8, r6, r7
 800e2bc:	608b      	str	r3, [r1, #8]
 800e2be:	f1b8 0f00 	cmp.w	r8, #0
 800e2c2:	dd9c      	ble.n	800e1fe <__sflush_r+0x1a>
 800e2c4:	6a21      	ldr	r1, [r4, #32]
 800e2c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2c8:	4643      	mov	r3, r8
 800e2ca:	463a      	mov	r2, r7
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	47b0      	blx	r6
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	dc06      	bgt.n	800e2e2 <__sflush_r+0xfe>
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2da:	81a3      	strh	r3, [r4, #12]
 800e2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e0:	e78e      	b.n	800e200 <__sflush_r+0x1c>
 800e2e2:	4407      	add	r7, r0
 800e2e4:	eba8 0800 	sub.w	r8, r8, r0
 800e2e8:	e7e9      	b.n	800e2be <__sflush_r+0xda>
 800e2ea:	bf00      	nop
 800e2ec:	dfbffffe 	.word	0xdfbffffe

0800e2f0 <_fflush_r>:
 800e2f0:	b538      	push	{r3, r4, r5, lr}
 800e2f2:	690b      	ldr	r3, [r1, #16]
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	b913      	cbnz	r3, 800e300 <_fflush_r+0x10>
 800e2fa:	2500      	movs	r5, #0
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}
 800e300:	b118      	cbz	r0, 800e30a <_fflush_r+0x1a>
 800e302:	6a03      	ldr	r3, [r0, #32]
 800e304:	b90b      	cbnz	r3, 800e30a <_fflush_r+0x1a>
 800e306:	f7ff fa85 	bl	800d814 <__sinit>
 800e30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0f3      	beq.n	800e2fa <_fflush_r+0xa>
 800e312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e314:	07d0      	lsls	r0, r2, #31
 800e316:	d404      	bmi.n	800e322 <_fflush_r+0x32>
 800e318:	0599      	lsls	r1, r3, #22
 800e31a:	d402      	bmi.n	800e322 <_fflush_r+0x32>
 800e31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e31e:	f7ff fbd2 	bl	800dac6 <__retarget_lock_acquire_recursive>
 800e322:	4628      	mov	r0, r5
 800e324:	4621      	mov	r1, r4
 800e326:	f7ff ff5d 	bl	800e1e4 <__sflush_r>
 800e32a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e32c:	07da      	lsls	r2, r3, #31
 800e32e:	4605      	mov	r5, r0
 800e330:	d4e4      	bmi.n	800e2fc <_fflush_r+0xc>
 800e332:	89a3      	ldrh	r3, [r4, #12]
 800e334:	059b      	lsls	r3, r3, #22
 800e336:	d4e1      	bmi.n	800e2fc <_fflush_r+0xc>
 800e338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e33a:	f7ff fbc5 	bl	800dac8 <__retarget_lock_release_recursive>
 800e33e:	e7dd      	b.n	800e2fc <_fflush_r+0xc>

0800e340 <__swbuf_r>:
 800e340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e342:	460e      	mov	r6, r1
 800e344:	4614      	mov	r4, r2
 800e346:	4605      	mov	r5, r0
 800e348:	b118      	cbz	r0, 800e352 <__swbuf_r+0x12>
 800e34a:	6a03      	ldr	r3, [r0, #32]
 800e34c:	b90b      	cbnz	r3, 800e352 <__swbuf_r+0x12>
 800e34e:	f7ff fa61 	bl	800d814 <__sinit>
 800e352:	69a3      	ldr	r3, [r4, #24]
 800e354:	60a3      	str	r3, [r4, #8]
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	071a      	lsls	r2, r3, #28
 800e35a:	d525      	bpl.n	800e3a8 <__swbuf_r+0x68>
 800e35c:	6923      	ldr	r3, [r4, #16]
 800e35e:	b31b      	cbz	r3, 800e3a8 <__swbuf_r+0x68>
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	6922      	ldr	r2, [r4, #16]
 800e364:	1a98      	subs	r0, r3, r2
 800e366:	6963      	ldr	r3, [r4, #20]
 800e368:	b2f6      	uxtb	r6, r6
 800e36a:	4283      	cmp	r3, r0
 800e36c:	4637      	mov	r7, r6
 800e36e:	dc04      	bgt.n	800e37a <__swbuf_r+0x3a>
 800e370:	4621      	mov	r1, r4
 800e372:	4628      	mov	r0, r5
 800e374:	f7ff ffbc 	bl	800e2f0 <_fflush_r>
 800e378:	b9e0      	cbnz	r0, 800e3b4 <__swbuf_r+0x74>
 800e37a:	68a3      	ldr	r3, [r4, #8]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	60a3      	str	r3, [r4, #8]
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	6022      	str	r2, [r4, #0]
 800e386:	701e      	strb	r6, [r3, #0]
 800e388:	6962      	ldr	r2, [r4, #20]
 800e38a:	1c43      	adds	r3, r0, #1
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d004      	beq.n	800e39a <__swbuf_r+0x5a>
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	07db      	lsls	r3, r3, #31
 800e394:	d506      	bpl.n	800e3a4 <__swbuf_r+0x64>
 800e396:	2e0a      	cmp	r6, #10
 800e398:	d104      	bne.n	800e3a4 <__swbuf_r+0x64>
 800e39a:	4621      	mov	r1, r4
 800e39c:	4628      	mov	r0, r5
 800e39e:	f7ff ffa7 	bl	800e2f0 <_fflush_r>
 800e3a2:	b938      	cbnz	r0, 800e3b4 <__swbuf_r+0x74>
 800e3a4:	4638      	mov	r0, r7
 800e3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	f000 f806 	bl	800e3bc <__swsetup_r>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d0d5      	beq.n	800e360 <__swbuf_r+0x20>
 800e3b4:	f04f 37ff 	mov.w	r7, #4294967295
 800e3b8:	e7f4      	b.n	800e3a4 <__swbuf_r+0x64>
	...

0800e3bc <__swsetup_r>:
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4b2a      	ldr	r3, [pc, #168]	; (800e468 <__swsetup_r+0xac>)
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	b118      	cbz	r0, 800e3d0 <__swsetup_r+0x14>
 800e3c8:	6a03      	ldr	r3, [r0, #32]
 800e3ca:	b90b      	cbnz	r3, 800e3d0 <__swsetup_r+0x14>
 800e3cc:	f7ff fa22 	bl	800d814 <__sinit>
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3d6:	0718      	lsls	r0, r3, #28
 800e3d8:	d422      	bmi.n	800e420 <__swsetup_r+0x64>
 800e3da:	06d9      	lsls	r1, r3, #27
 800e3dc:	d407      	bmi.n	800e3ee <__swsetup_r+0x32>
 800e3de:	2309      	movs	r3, #9
 800e3e0:	602b      	str	r3, [r5, #0]
 800e3e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3e6:	81a3      	strh	r3, [r4, #12]
 800e3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ec:	e034      	b.n	800e458 <__swsetup_r+0x9c>
 800e3ee:	0758      	lsls	r0, r3, #29
 800e3f0:	d512      	bpl.n	800e418 <__swsetup_r+0x5c>
 800e3f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3f4:	b141      	cbz	r1, 800e408 <__swsetup_r+0x4c>
 800e3f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3fa:	4299      	cmp	r1, r3
 800e3fc:	d002      	beq.n	800e404 <__swsetup_r+0x48>
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7ff fbd0 	bl	800dba4 <_free_r>
 800e404:	2300      	movs	r3, #0
 800e406:	6363      	str	r3, [r4, #52]	; 0x34
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e40e:	81a3      	strh	r3, [r4, #12]
 800e410:	2300      	movs	r3, #0
 800e412:	6063      	str	r3, [r4, #4]
 800e414:	6923      	ldr	r3, [r4, #16]
 800e416:	6023      	str	r3, [r4, #0]
 800e418:	89a3      	ldrh	r3, [r4, #12]
 800e41a:	f043 0308 	orr.w	r3, r3, #8
 800e41e:	81a3      	strh	r3, [r4, #12]
 800e420:	6923      	ldr	r3, [r4, #16]
 800e422:	b94b      	cbnz	r3, 800e438 <__swsetup_r+0x7c>
 800e424:	89a3      	ldrh	r3, [r4, #12]
 800e426:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e42a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e42e:	d003      	beq.n	800e438 <__swsetup_r+0x7c>
 800e430:	4621      	mov	r1, r4
 800e432:	4628      	mov	r0, r5
 800e434:	f000 f840 	bl	800e4b8 <__smakebuf_r>
 800e438:	89a0      	ldrh	r0, [r4, #12]
 800e43a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e43e:	f010 0301 	ands.w	r3, r0, #1
 800e442:	d00a      	beq.n	800e45a <__swsetup_r+0x9e>
 800e444:	2300      	movs	r3, #0
 800e446:	60a3      	str	r3, [r4, #8]
 800e448:	6963      	ldr	r3, [r4, #20]
 800e44a:	425b      	negs	r3, r3
 800e44c:	61a3      	str	r3, [r4, #24]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	b943      	cbnz	r3, 800e464 <__swsetup_r+0xa8>
 800e452:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e456:	d1c4      	bne.n	800e3e2 <__swsetup_r+0x26>
 800e458:	bd38      	pop	{r3, r4, r5, pc}
 800e45a:	0781      	lsls	r1, r0, #30
 800e45c:	bf58      	it	pl
 800e45e:	6963      	ldrpl	r3, [r4, #20]
 800e460:	60a3      	str	r3, [r4, #8]
 800e462:	e7f4      	b.n	800e44e <__swsetup_r+0x92>
 800e464:	2000      	movs	r0, #0
 800e466:	e7f7      	b.n	800e458 <__swsetup_r+0x9c>
 800e468:	200000b4 	.word	0x200000b4

0800e46c <__swhatbuf_r>:
 800e46c:	b570      	push	{r4, r5, r6, lr}
 800e46e:	460c      	mov	r4, r1
 800e470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e474:	2900      	cmp	r1, #0
 800e476:	b096      	sub	sp, #88	; 0x58
 800e478:	4615      	mov	r5, r2
 800e47a:	461e      	mov	r6, r3
 800e47c:	da0d      	bge.n	800e49a <__swhatbuf_r+0x2e>
 800e47e:	89a3      	ldrh	r3, [r4, #12]
 800e480:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e484:	f04f 0100 	mov.w	r1, #0
 800e488:	bf0c      	ite	eq
 800e48a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e48e:	2340      	movne	r3, #64	; 0x40
 800e490:	2000      	movs	r0, #0
 800e492:	6031      	str	r1, [r6, #0]
 800e494:	602b      	str	r3, [r5, #0]
 800e496:	b016      	add	sp, #88	; 0x58
 800e498:	bd70      	pop	{r4, r5, r6, pc}
 800e49a:	466a      	mov	r2, sp
 800e49c:	f000 f848 	bl	800e530 <_fstat_r>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	dbec      	blt.n	800e47e <__swhatbuf_r+0x12>
 800e4a4:	9901      	ldr	r1, [sp, #4]
 800e4a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e4aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e4ae:	4259      	negs	r1, r3
 800e4b0:	4159      	adcs	r1, r3
 800e4b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4b6:	e7eb      	b.n	800e490 <__swhatbuf_r+0x24>

0800e4b8 <__smakebuf_r>:
 800e4b8:	898b      	ldrh	r3, [r1, #12]
 800e4ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4bc:	079d      	lsls	r5, r3, #30
 800e4be:	4606      	mov	r6, r0
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	d507      	bpl.n	800e4d4 <__smakebuf_r+0x1c>
 800e4c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4c8:	6023      	str	r3, [r4, #0]
 800e4ca:	6123      	str	r3, [r4, #16]
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	6163      	str	r3, [r4, #20]
 800e4d0:	b002      	add	sp, #8
 800e4d2:	bd70      	pop	{r4, r5, r6, pc}
 800e4d4:	ab01      	add	r3, sp, #4
 800e4d6:	466a      	mov	r2, sp
 800e4d8:	f7ff ffc8 	bl	800e46c <__swhatbuf_r>
 800e4dc:	9900      	ldr	r1, [sp, #0]
 800e4de:	4605      	mov	r5, r0
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff f87f 	bl	800d5e4 <_malloc_r>
 800e4e6:	b948      	cbnz	r0, 800e4fc <__smakebuf_r+0x44>
 800e4e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ec:	059a      	lsls	r2, r3, #22
 800e4ee:	d4ef      	bmi.n	800e4d0 <__smakebuf_r+0x18>
 800e4f0:	f023 0303 	bic.w	r3, r3, #3
 800e4f4:	f043 0302 	orr.w	r3, r3, #2
 800e4f8:	81a3      	strh	r3, [r4, #12]
 800e4fa:	e7e3      	b.n	800e4c4 <__smakebuf_r+0xc>
 800e4fc:	89a3      	ldrh	r3, [r4, #12]
 800e4fe:	6020      	str	r0, [r4, #0]
 800e500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e504:	81a3      	strh	r3, [r4, #12]
 800e506:	9b00      	ldr	r3, [sp, #0]
 800e508:	6163      	str	r3, [r4, #20]
 800e50a:	9b01      	ldr	r3, [sp, #4]
 800e50c:	6120      	str	r0, [r4, #16]
 800e50e:	b15b      	cbz	r3, 800e528 <__smakebuf_r+0x70>
 800e510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e514:	4630      	mov	r0, r6
 800e516:	f000 f81d 	bl	800e554 <_isatty_r>
 800e51a:	b128      	cbz	r0, 800e528 <__smakebuf_r+0x70>
 800e51c:	89a3      	ldrh	r3, [r4, #12]
 800e51e:	f023 0303 	bic.w	r3, r3, #3
 800e522:	f043 0301 	orr.w	r3, r3, #1
 800e526:	81a3      	strh	r3, [r4, #12]
 800e528:	89a3      	ldrh	r3, [r4, #12]
 800e52a:	431d      	orrs	r5, r3
 800e52c:	81a5      	strh	r5, [r4, #12]
 800e52e:	e7cf      	b.n	800e4d0 <__smakebuf_r+0x18>

0800e530 <_fstat_r>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4d07      	ldr	r5, [pc, #28]	; (800e550 <_fstat_r+0x20>)
 800e534:	2300      	movs	r3, #0
 800e536:	4604      	mov	r4, r0
 800e538:	4608      	mov	r0, r1
 800e53a:	4611      	mov	r1, r2
 800e53c:	602b      	str	r3, [r5, #0]
 800e53e:	f7f3 fc54 	bl	8001dea <_fstat>
 800e542:	1c43      	adds	r3, r0, #1
 800e544:	d102      	bne.n	800e54c <_fstat_r+0x1c>
 800e546:	682b      	ldr	r3, [r5, #0]
 800e548:	b103      	cbz	r3, 800e54c <_fstat_r+0x1c>
 800e54a:	6023      	str	r3, [r4, #0]
 800e54c:	bd38      	pop	{r3, r4, r5, pc}
 800e54e:	bf00      	nop
 800e550:	2000a370 	.word	0x2000a370

0800e554 <_isatty_r>:
 800e554:	b538      	push	{r3, r4, r5, lr}
 800e556:	4d06      	ldr	r5, [pc, #24]	; (800e570 <_isatty_r+0x1c>)
 800e558:	2300      	movs	r3, #0
 800e55a:	4604      	mov	r4, r0
 800e55c:	4608      	mov	r0, r1
 800e55e:	602b      	str	r3, [r5, #0]
 800e560:	f7f3 fc48 	bl	8001df4 <_isatty>
 800e564:	1c43      	adds	r3, r0, #1
 800e566:	d102      	bne.n	800e56e <_isatty_r+0x1a>
 800e568:	682b      	ldr	r3, [r5, #0]
 800e56a:	b103      	cbz	r3, 800e56e <_isatty_r+0x1a>
 800e56c:	6023      	str	r3, [r4, #0]
 800e56e:	bd38      	pop	{r3, r4, r5, pc}
 800e570:	2000a370 	.word	0x2000a370

0800e574 <_init>:
 800e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e576:	bf00      	nop
 800e578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57a:	bc08      	pop	{r3}
 800e57c:	469e      	mov	lr, r3
 800e57e:	4770      	bx	lr

0800e580 <_fini>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr
