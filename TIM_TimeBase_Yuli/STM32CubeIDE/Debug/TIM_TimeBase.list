
TIM_TimeBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e14  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001fc8  08001fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd8  08001fd8  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08001fd8  08001fd8  00011fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fe0  08001fe0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe0  08001fe0  00011fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fe4  08001fe4  00011fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08001fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          00000070  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000af25  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c4d  00000000  00000000  0002afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b70  00000000  00000000  0002cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008c8  00000000  00000000  0002d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002907b  00000000  00000000  0002e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cf8b  00000000  00000000  000570cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f792d  00000000  00000000  00064056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002efc  00000000  00000000  0015b984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0015e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000030 	.word	0x20000030
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08001fb0 	.word	0x08001fb0

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000034 	.word	0x20000034
 80001f0:	08001fb0 	.word	0x08001fb0

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b970 	b.w	80004ec <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	460f      	mov	r7, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14a      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000234:	428a      	cmp	r2, r1
 8000236:	4694      	mov	ip, r2
 8000238:	d965      	bls.n	8000306 <__udivmoddi4+0xe2>
 800023a:	fab2 f382 	clz	r3, r2
 800023e:	b143      	cbz	r3, 8000252 <__udivmoddi4+0x2e>
 8000240:	fa02 fc03 	lsl.w	ip, r2, r3
 8000244:	f1c3 0220 	rsb	r2, r3, #32
 8000248:	409f      	lsls	r7, r3
 800024a:	fa20 f202 	lsr.w	r2, r0, r2
 800024e:	4317      	orrs	r7, r2
 8000250:	409c      	lsls	r4, r3
 8000252:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000256:	fa1f f58c 	uxth.w	r5, ip
 800025a:	fbb7 f1fe 	udiv	r1, r7, lr
 800025e:	0c22      	lsrs	r2, r4, #16
 8000260:	fb0e 7711 	mls	r7, lr, r1, r7
 8000264:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000268:	fb01 f005 	mul.w	r0, r1, r5
 800026c:	4290      	cmp	r0, r2
 800026e:	d90a      	bls.n	8000286 <__udivmoddi4+0x62>
 8000270:	eb1c 0202 	adds.w	r2, ip, r2
 8000274:	f101 37ff 	add.w	r7, r1, #4294967295
 8000278:	f080 811c 	bcs.w	80004b4 <__udivmoddi4+0x290>
 800027c:	4290      	cmp	r0, r2
 800027e:	f240 8119 	bls.w	80004b4 <__udivmoddi4+0x290>
 8000282:	3902      	subs	r1, #2
 8000284:	4462      	add	r2, ip
 8000286:	1a12      	subs	r2, r2, r0
 8000288:	b2a4      	uxth	r4, r4
 800028a:	fbb2 f0fe 	udiv	r0, r2, lr
 800028e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000292:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000296:	fb00 f505 	mul.w	r5, r0, r5
 800029a:	42a5      	cmp	r5, r4
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x90>
 800029e:	eb1c 0404 	adds.w	r4, ip, r4
 80002a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x294>
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x294>
 80002b0:	4464      	add	r4, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11e      	cbz	r6, 80002c6 <__udivmoddi4+0xa2>
 80002be:	40dc      	lsrs	r4, r3
 80002c0:	2300      	movs	r3, #0
 80002c2:	e9c6 4300 	strd	r4, r3, [r6]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0xbc>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80ed 	beq.w	80004ae <__udivmoddi4+0x28a>
 80002d4:	2100      	movs	r1, #0
 80002d6:	e9c6 0500 	strd	r0, r5, [r6]
 80002da:	4608      	mov	r0, r1
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	fab3 f183 	clz	r1, r3
 80002e4:	2900      	cmp	r1, #0
 80002e6:	d149      	bne.n	800037c <__udivmoddi4+0x158>
 80002e8:	42ab      	cmp	r3, r5
 80002ea:	d302      	bcc.n	80002f2 <__udivmoddi4+0xce>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	f200 80f8 	bhi.w	80004e2 <__udivmoddi4+0x2be>
 80002f2:	1a84      	subs	r4, r0, r2
 80002f4:	eb65 0203 	sbc.w	r2, r5, r3
 80002f8:	2001      	movs	r0, #1
 80002fa:	4617      	mov	r7, r2
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d0e2      	beq.n	80002c6 <__udivmoddi4+0xa2>
 8000300:	e9c6 4700 	strd	r4, r7, [r6]
 8000304:	e7df      	b.n	80002c6 <__udivmoddi4+0xa2>
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xe6>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f382 	clz	r3, r2
 800030e:	2b00      	cmp	r3, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x210>
 8000314:	1a8a      	subs	r2, r1, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2101      	movs	r1, #1
 8000320:	fbb2 f5f7 	udiv	r5, r2, r7
 8000324:	fb07 2015 	mls	r0, r7, r5, r2
 8000328:	0c22      	lsrs	r2, r4, #16
 800032a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032e:	fb0e f005 	mul.w	r0, lr, r5
 8000332:	4290      	cmp	r0, r2
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x124>
 8000336:	eb1c 0202 	adds.w	r2, ip, r2
 800033a:	f105 38ff 	add.w	r8, r5, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4290      	cmp	r0, r2
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2b8>
 8000346:	4645      	mov	r5, r8
 8000348:	1a12      	subs	r2, r2, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000350:	fb07 2210 	mls	r2, r7, r0, r2
 8000354:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x14e>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x14c>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2c2>
 8000370:	4610      	mov	r0, r2
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800037a:	e79f      	b.n	80002bc <__udivmoddi4+0x98>
 800037c:	f1c1 0720 	rsb	r7, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa05 f401 	lsl.w	r4, r5, r1
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	40fd      	lsrs	r5, r7
 8000394:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fbb5 f8f9 	udiv	r8, r5, r9
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	fb09 5518 	mls	r5, r9, r8, r5
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ac:	fb08 f50e 	mul.w	r5, r8, lr
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2b4>
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2b4>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4464      	add	r4, ip
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	b29d      	uxth	r5, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2ac>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2ac>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	4464      	add	r4, ip
 80003fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000402:	fba3 9502 	umull	r9, r5, r3, r2
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	42ac      	cmp	r4, r5
 800040c:	46c8      	mov	r8, r9
 800040e:	46ae      	mov	lr, r5
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x29c>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x298>
 8000414:	b156      	cbz	r6, 800042c <__udivmoddi4+0x208>
 8000416:	ebb0 0208 	subs.w	r2, r0, r8
 800041a:	eb64 040e 	sbc.w	r4, r4, lr
 800041e:	fa04 f707 	lsl.w	r7, r4, r7
 8000422:	40ca      	lsrs	r2, r1
 8000424:	40cc      	lsrs	r4, r1
 8000426:	4317      	orrs	r7, r2
 8000428:	e9c6 7400 	strd	r7, r4, [r6]
 800042c:	4618      	mov	r0, r3
 800042e:	2100      	movs	r1, #0
 8000430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000434:	f1c3 0120 	rsb	r1, r3, #32
 8000438:	fa02 fc03 	lsl.w	ip, r2, r3
 800043c:	fa20 f201 	lsr.w	r2, r0, r1
 8000440:	fa25 f101 	lsr.w	r1, r5, r1
 8000444:	409d      	lsls	r5, r3
 8000446:	432a      	orrs	r2, r5
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1510 	mls	r5, r7, r0, r1
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045e:	fb00 f50e 	mul.w	r5, r0, lr
 8000462:	428d      	cmp	r5, r1
 8000464:	fa04 f403 	lsl.w	r4, r4, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x258>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 8000474:	428d      	cmp	r5, r1
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 8000478:	3802      	subs	r0, #2
 800047a:	4461      	add	r1, ip
 800047c:	1b49      	subs	r1, r1, r5
 800047e:	b292      	uxth	r2, r2
 8000480:	fbb1 f5f7 	udiv	r5, r1, r7
 8000484:	fb07 1115 	mls	r1, r7, r5, r1
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x282>
 8000494:	eb1c 0202 	adds.w	r2, ip, r2
 8000498:	f105 38ff 	add.w	r8, r5, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800049e:	4291      	cmp	r1, r2
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2a8>
 80004a2:	3d02      	subs	r5, #2
 80004a4:	4462      	add	r2, ip
 80004a6:	1a52      	subs	r2, r2, r1
 80004a8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0xfc>
 80004ae:	4631      	mov	r1, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e708      	b.n	80002c6 <__udivmoddi4+0xa2>
 80004b4:	4639      	mov	r1, r7
 80004b6:	e6e6      	b.n	8000286 <__udivmoddi4+0x62>
 80004b8:	4610      	mov	r0, r2
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x90>
 80004bc:	4548      	cmp	r0, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c8:	3b01      	subs	r3, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004cc:	4645      	mov	r5, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x282>
 80004d0:	462b      	mov	r3, r5
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x258>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004dc:	3d02      	subs	r5, #2
 80004de:	4462      	add	r2, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x124>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e70a      	b.n	80002fc <__udivmoddi4+0xd8>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x14e>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	; 0x30
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led <= LED4)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d86d      	bhi.n	80005dc <BSP_LED_Init+0xec>
  {
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4a38      	ldr	r2, [pc, #224]	; (80005e4 <BSP_LED_Init+0xf4>)
 8000504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000508:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800050e:	2301      	movs	r3, #1
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	62bb      	str	r3, [r7, #40]	; 0x28

    switch(Led)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d847      	bhi.n	80005ac <BSP_LED_Init+0xbc>
 800051c:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <BSP_LED_Init+0x34>)
 800051e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000522:	bf00      	nop
 8000524:	08000535 	.word	0x08000535
 8000528:	08000553 	.word	0x08000553
 800052c:	08000571 	.word	0x08000571
 8000530:	0800058f 	.word	0x0800058f
    {
    case LED1 :
      LED1_GPIO_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <BSP_LED_Init+0xf8>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053c:	4a2a      	ldr	r2, [pc, #168]	; (80005e8 <BSP_LED_Init+0xf8>)
 800053e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000542:	6313      	str	r3, [r2, #48]	; 0x30
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <BSP_LED_Init+0xf8>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800054c:	61bb      	str	r3, [r7, #24]
 800054e:	69bb      	ldr	r3, [r7, #24]
      break;
 8000550:	e02d      	b.n	80005ae <BSP_LED_Init+0xbe>
    case LED2 :
      LED2_GPIO_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <BSP_LED_Init+0xf8>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a23      	ldr	r2, [pc, #140]	; (80005e8 <BSP_LED_Init+0xf8>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <BSP_LED_Init+0xf8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697b      	ldr	r3, [r7, #20]
      break;
 800056e:	e01e      	b.n	80005ae <BSP_LED_Init+0xbe>
    case LED3 :
      LED3_GPIO_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <BSP_LED_Init+0xf8>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <BSP_LED_Init+0xf8>)
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	6313      	str	r3, [r2, #48]	; 0x30
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <BSP_LED_Init+0xf8>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	f003 0308 	and.w	r3, r3, #8
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	693b      	ldr	r3, [r7, #16]
      break;
 800058c:	e00f      	b.n	80005ae <BSP_LED_Init+0xbe>
    case LED4 :
      LED4_GPIO_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <BSP_LED_Init+0xf8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <BSP_LED_Init+0xf8>)
 8000598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <BSP_LED_Init+0xf8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
      break;
 80005aa:	e000      	b.n	80005ae <BSP_LED_Init+0xbe>
    default :
      break;
 80005ac:	bf00      	nop

    } /* end switch */

    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <BSP_LED_Init+0xfc>)
 80005b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b6:	f107 021c 	add.w	r2, r7, #28
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fa15 	bl	80009ec <HAL_GPIO_Init>

    /* By default, turn off LED by setting a high level on corresponding GPIO */
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <BSP_LED_Init+0xfc>)
 80005c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <BSP_LED_Init+0xf4>)
 80005ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	f000 fbb4 	bl	8000d44 <HAL_GPIO_WritePin>

  } /* of if (Led <= LED4) */

}
 80005dc:	bf00      	nop
 80005de:	3730      	adds	r7, #48	; 0x30
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000000 	.word	0x20000000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	20000010 	.word	0x20000010

080005f0 <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d80c      	bhi.n	800061a <BSP_LED_On+0x2a>
  {
     HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <BSP_LED_On+0x34>)
 8000604:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <BSP_LED_On+0x38>)
 800060c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000610:	b29b      	uxth	r3, r3
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f000 fb95 	bl	8000d44 <HAL_GPIO_WritePin>
  }

}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000010 	.word	0x20000010
 8000628:	20000000 	.word	0x20000000

0800062c <BSP_LED_Toggle>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b03      	cmp	r3, #3
 800063a:	d80c      	bhi.n	8000656 <BSP_LED_Toggle+0x2a>
  {
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <BSP_LED_Toggle+0x34>)
 8000640:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4907      	ldr	r1, [pc, #28]	; (8000664 <BSP_LED_Toggle+0x38>)
 8000648:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800064c:	b29b      	uxth	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	4610      	mov	r0, r2
 8000652:	f000 fb90 	bl	8000d76 <HAL_GPIO_TogglePin>
  }
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000010 	.word	0x20000010
 8000664:	20000000 	.word	0x20000000

08000668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <SystemInit+0x60>)
 800066e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <SystemInit+0x60>)
 8000674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <SystemInit+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <SystemInit+0x64>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <SystemInit+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <SystemInit+0x64>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <SystemInit+0x64>)
 8000694:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800069c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <SystemInit+0x64>)
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <SystemInit+0x68>)
 80006a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <SystemInit+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a08      	ldr	r2, [pc, #32]	; (80006cc <SystemInit+0x64>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <SystemInit+0x60>)
 80006b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006bc:	609a      	str	r2, [r3, #8]
#endif
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00
 80006cc:	40023800 	.word	0x40023800
 80006d0:	24003010 	.word	0x24003010

080006d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_Init+0x40>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <HAL_Init+0x40>)
 80006de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <HAL_Init+0x40>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <HAL_Init+0x40>)
 80006ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_Init+0x40>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_Init+0x40>)
 80006f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f933 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	200f      	movs	r0, #15
 8000704:	f000 f810 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f000 f806 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023c00 	.word	0x40023c00

08000718 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x54>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x58>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f943 	bl	80009d2 <HAL_SYSTICK_Config>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e00e      	b.n	8000774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d80a      	bhi.n	8000772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075c:	2200      	movs	r2, #0
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f000 f90b 	bl	800097e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <HAL_InitTick+0x5c>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000020 	.word	0x20000020
 8000780:	20000028 	.word	0x20000028
 8000784:	20000024 	.word	0x20000024

08000788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x20>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_IncTick+0x24>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_IncTick+0x24>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000028 	.word	0x20000028
 80007ac:	2000004c 	.word	0x2000004c

080007b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <HAL_GetTick+0x14>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	2000004c 	.word	0x2000004c

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4907      	ldr	r1, [pc, #28]	; (8000864 <__NVIC_EnableIRQ+0x38>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000e100 	.word	0xe000e100

08000868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db0a      	blt.n	8000892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	490c      	ldr	r1, [pc, #48]	; (80008b4 <__NVIC_SetPriority+0x4c>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	440b      	add	r3, r1
 800088c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000890:	e00a      	b.n	80008a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4908      	ldr	r1, [pc, #32]	; (80008b8 <__NVIC_SetPriority+0x50>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	3b04      	subs	r3, #4
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	761a      	strb	r2, [r3, #24]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f1c3 0307 	rsb	r3, r3, #7
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	bf28      	it	cs
 80008da:	2304      	movcs	r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	d902      	bls.n	80008ec <NVIC_EncodePriority+0x30>
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3b03      	subs	r3, #3
 80008ea:	e000      	b.n	80008ee <NVIC_EncodePriority+0x32>
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43da      	mvns	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	401a      	ands	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000904:	f04f 31ff 	mov.w	r1, #4294967295
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	43d9      	mvns	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	4313      	orrs	r3, r2
         );
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff8e 	bl	8000868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff29 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff3e 	bl	8000810 <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff8e 	bl	80008bc <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5d 	bl	8000868 <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff31 	bl	800082c <__NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffa2 	bl	8000924 <SysTick_Config>
 80009e0:	4603      	mov	r3, r0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	e177      	b.n	8000cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a08:	2201      	movs	r2, #1
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f040 8166 	bne.w	8000cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d005      	beq.n	8000a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d130      	bne.n	8000aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	68da      	ldr	r2, [r3, #12]
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a74:	2201      	movs	r2, #1
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	091b      	lsrs	r3, r3, #4
 8000a8a:	f003 0201 	and.w	r2, r3, #1
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f003 0303 	and.w	r3, r3, #3
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d017      	beq.n	8000adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d123      	bne.n	8000b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	08da      	lsrs	r2, r3, #3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3208      	adds	r2, #8
 8000af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	691a      	ldr	r2, [r3, #16]
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	08da      	lsrs	r2, r3, #3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3208      	adds	r2, #8
 8000b2a:	69b9      	ldr	r1, [r7, #24]
 8000b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0203 	and.w	r2, r3, #3
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 80c0 	beq.w	8000cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b66      	ldr	r3, [pc, #408]	; (8000d10 <HAL_GPIO_Init+0x324>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a65      	ldr	r2, [pc, #404]	; (8000d10 <HAL_GPIO_Init+0x324>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b63      	ldr	r3, [pc, #396]	; (8000d10 <HAL_GPIO_Init+0x324>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b8e:	4a61      	ldr	r2, [pc, #388]	; (8000d14 <HAL_GPIO_Init+0x328>)
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3302      	adds	r3, #2
 8000b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a58      	ldr	r2, [pc, #352]	; (8000d18 <HAL_GPIO_Init+0x32c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d037      	beq.n	8000c2a <HAL_GPIO_Init+0x23e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <HAL_GPIO_Init+0x330>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d031      	beq.n	8000c26 <HAL_GPIO_Init+0x23a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a56      	ldr	r2, [pc, #344]	; (8000d20 <HAL_GPIO_Init+0x334>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d02b      	beq.n	8000c22 <HAL_GPIO_Init+0x236>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a55      	ldr	r2, [pc, #340]	; (8000d24 <HAL_GPIO_Init+0x338>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d025      	beq.n	8000c1e <HAL_GPIO_Init+0x232>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a54      	ldr	r2, [pc, #336]	; (8000d28 <HAL_GPIO_Init+0x33c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d01f      	beq.n	8000c1a <HAL_GPIO_Init+0x22e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a53      	ldr	r2, [pc, #332]	; (8000d2c <HAL_GPIO_Init+0x340>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d019      	beq.n	8000c16 <HAL_GPIO_Init+0x22a>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a52      	ldr	r2, [pc, #328]	; (8000d30 <HAL_GPIO_Init+0x344>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0x226>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <HAL_GPIO_Init+0x348>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d00d      	beq.n	8000c0e <HAL_GPIO_Init+0x222>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a50      	ldr	r2, [pc, #320]	; (8000d38 <HAL_GPIO_Init+0x34c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d007      	beq.n	8000c0a <HAL_GPIO_Init+0x21e>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a4f      	ldr	r2, [pc, #316]	; (8000d3c <HAL_GPIO_Init+0x350>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_GPIO_Init+0x21a>
 8000c02:	2309      	movs	r3, #9
 8000c04:	e012      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c06:	230a      	movs	r3, #10
 8000c08:	e010      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	e00e      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c0e:	2307      	movs	r3, #7
 8000c10:	e00c      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c12:	2306      	movs	r3, #6
 8000c14:	e00a      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c16:	2305      	movs	r3, #5
 8000c18:	e008      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	e006      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e004      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c22:	2302      	movs	r3, #2
 8000c24:	e002      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <HAL_GPIO_Init+0x240>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	69fa      	ldr	r2, [r7, #28]
 8000c2e:	f002 0203 	and.w	r2, r2, #3
 8000c32:	0092      	lsls	r2, r2, #2
 8000c34:	4093      	lsls	r3, r2
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c3c:	4935      	ldr	r1, [pc, #212]	; (8000d14 <HAL_GPIO_Init+0x328>)
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4a:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <HAL_GPIO_Init+0x354>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4013      	ands	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c6e:	4a34      	ldr	r2, [pc, #208]	; (8000d40 <HAL_GPIO_Init+0x354>)
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <HAL_GPIO_Init+0x354>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c98:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <HAL_GPIO_Init+0x354>)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <HAL_GPIO_Init+0x354>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <HAL_GPIO_Init+0x354>)
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_GPIO_Init+0x354>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_GPIO_Init+0x354>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	f67f ae84 	bls.w	8000a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40013800 	.word	0x40013800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020c00 	.word	0x40020c00
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40021400 	.word	0x40021400
 8000d30:	40021800 	.word	0x40021800
 8000d34:	40021c00 	.word	0x40021c00
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	40022400 	.word	0x40022400
 8000d40:	40013c00 	.word	0x40013c00

08000d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d54:	787b      	ldrb	r3, [r7, #1]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000d60:	e003      	b.n	8000d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	041a      	lsls	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	619a      	str	r2, [r3, #24]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b085      	sub	sp, #20
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d88:	887a      	ldrh	r2, [r7, #2]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	041a      	lsls	r2, r3, #16
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	400b      	ands	r3, r1
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	619a      	str	r2, [r3, #24]
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_PWREx_EnableOverDrive+0x94>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff fcea 	bl	80007b0 <HAL_GetTick>
 8000ddc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000dde:	e009      	b.n	8000df4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000de0:	f7ff fce6 	bl	80007b0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dee:	d901      	bls.n	8000df4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e01f      	b.n	8000e34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_PWREx_EnableOverDrive+0x98>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e00:	d1ee      	bne.n	8000de0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e08:	f7ff fcd2 	bl	80007b0 <HAL_GetTick>
 8000e0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e0e:	e009      	b.n	8000e24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e10:	f7ff fcce 	bl	80007b0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e1e:	d901      	bls.n	8000e24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e007      	b.n	8000e34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_PWREx_EnableOverDrive+0x98>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e30:	d1ee      	bne.n	8000e10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	420e0040 	.word	0x420e0040
 8000e44:	40007000 	.word	0x40007000
 8000e48:	420e0044 	.word	0x420e0044

08000e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e0cc      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e60:	4b68      	ldr	r3, [pc, #416]	; (8001004 <HAL_RCC_ClockConfig+0x1b8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d90c      	bls.n	8000e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6e:	4b65      	ldr	r3, [pc, #404]	; (8001004 <HAL_RCC_ClockConfig+0x1b8>)
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e76:	4b63      	ldr	r3, [pc, #396]	; (8001004 <HAL_RCC_ClockConfig+0x1b8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d001      	beq.n	8000e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e0b8      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d020      	beq.n	8000ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ea0:	4b59      	ldr	r3, [pc, #356]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a58      	ldr	r2, [pc, #352]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d005      	beq.n	8000ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000eb8:	4b53      	ldr	r3, [pc, #332]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4a52      	ldr	r2, [pc, #328]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ec4:	4b50      	ldr	r3, [pc, #320]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	494d      	ldr	r1, [pc, #308]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d044      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d107      	bne.n	8000efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d119      	bne.n	8000f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e07f      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d003      	beq.n	8000f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d107      	bne.n	8000f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e06f      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e067      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f023 0203 	bic.w	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	4934      	ldr	r1, [pc, #208]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f3c:	f7ff fc38 	bl	80007b0 <HAL_GetTick>
 8000f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f42:	e00a      	b.n	8000f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f44:	f7ff fc34 	bl	80007b0 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e04f      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 020c 	and.w	r2, r3, #12
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d1eb      	bne.n	8000f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_RCC_ClockConfig+0x1b8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d20c      	bcs.n	8000f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_RCC_ClockConfig+0x1b8>)
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_RCC_ClockConfig+0x1b8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d001      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e032      	b.n	8000ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4916      	ldr	r1, [pc, #88]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d009      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	490e      	ldr	r1, [pc, #56]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fd2:	f000 f821 	bl	8001018 <HAL_RCC_GetSysClockFreq>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_RCC_ClockConfig+0x1bc>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	490a      	ldr	r1, [pc, #40]	; (800100c <HAL_RCC_ClockConfig+0x1c0>)
 8000fe4:	5ccb      	ldrb	r3, [r1, r3]
 8000fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fea:	4a09      	ldr	r2, [pc, #36]	; (8001010 <HAL_RCC_ClockConfig+0x1c4>)
 8000fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_RCC_ClockConfig+0x1c8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fb98 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00
 8001008:	40023800 	.word	0x40023800
 800100c:	08001fc8 	.word	0x08001fc8
 8001010:	20000020 	.word	0x20000020
 8001014:	20000024 	.word	0x20000024

08001018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800101c:	b094      	sub	sp, #80	; 0x50
 800101e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
 8001024:	2300      	movs	r3, #0
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001028:	2300      	movs	r3, #0
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001030:	4b79      	ldr	r3, [pc, #484]	; (8001218 <HAL_RCC_GetSysClockFreq+0x200>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b08      	cmp	r3, #8
 800103a:	d00d      	beq.n	8001058 <HAL_RCC_GetSysClockFreq+0x40>
 800103c:	2b08      	cmp	r3, #8
 800103e:	f200 80e1 	bhi.w	8001204 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <HAL_RCC_GetSysClockFreq+0x34>
 8001046:	2b04      	cmp	r3, #4
 8001048:	d003      	beq.n	8001052 <HAL_RCC_GetSysClockFreq+0x3a>
 800104a:	e0db      	b.n	8001204 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800104c:	4b73      	ldr	r3, [pc, #460]	; (800121c <HAL_RCC_GetSysClockFreq+0x204>)
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001050:	e0db      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001052:	4b73      	ldr	r3, [pc, #460]	; (8001220 <HAL_RCC_GetSysClockFreq+0x208>)
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001056:	e0d8      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001058:	4b6f      	ldr	r3, [pc, #444]	; (8001218 <HAL_RCC_GetSysClockFreq+0x200>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001060:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001062:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <HAL_RCC_GetSysClockFreq+0x200>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d063      	beq.n	8001136 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800106e:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <HAL_RCC_GetSysClockFreq+0x200>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	099b      	lsrs	r3, r3, #6
 8001074:	2200      	movs	r2, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
 8001078:	63fa      	str	r2, [r7, #60]	; 0x3c
 800107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
 8001086:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800108a:	4622      	mov	r2, r4
 800108c:	462b      	mov	r3, r5
 800108e:	f04f 0000 	mov.w	r0, #0
 8001092:	f04f 0100 	mov.w	r1, #0
 8001096:	0159      	lsls	r1, r3, #5
 8001098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800109c:	0150      	lsls	r0, r2, #5
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4621      	mov	r1, r4
 80010a4:	1a51      	subs	r1, r2, r1
 80010a6:	6139      	str	r1, [r7, #16]
 80010a8:	4629      	mov	r1, r5
 80010aa:	eb63 0301 	sbc.w	r3, r3, r1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80010bc:	4659      	mov	r1, fp
 80010be:	018b      	lsls	r3, r1, #6
 80010c0:	4651      	mov	r1, sl
 80010c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80010c6:	4651      	mov	r1, sl
 80010c8:	018a      	lsls	r2, r1, #6
 80010ca:	4651      	mov	r1, sl
 80010cc:	ebb2 0801 	subs.w	r8, r2, r1
 80010d0:	4659      	mov	r1, fp
 80010d2:	eb63 0901 	sbc.w	r9, r3, r1
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010ea:	4690      	mov	r8, r2
 80010ec:	4699      	mov	r9, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	eb18 0303 	adds.w	r3, r8, r3
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	462b      	mov	r3, r5
 80010f8:	eb49 0303 	adc.w	r3, r9, r3
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800110a:	4629      	mov	r1, r5
 800110c:	024b      	lsls	r3, r1, #9
 800110e:	4621      	mov	r1, r4
 8001110:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001114:	4621      	mov	r1, r4
 8001116:	024a      	lsls	r2, r1, #9
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800111e:	2200      	movs	r2, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
 8001122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001128:	f7ff f864 	bl	80001f4 <__aeabi_uldivmod>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4613      	mov	r3, r2
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001134:	e058      	b.n	80011e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <HAL_RCC_GetSysClockFreq+0x200>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	099b      	lsrs	r3, r3, #6
 800113c:	2200      	movs	r2, #0
 800113e:	4618      	mov	r0, r3
 8001140:	4611      	mov	r1, r2
 8001142:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001146:	623b      	str	r3, [r7, #32]
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
 800114c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001150:	4642      	mov	r2, r8
 8001152:	464b      	mov	r3, r9
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	f04f 0100 	mov.w	r1, #0
 800115c:	0159      	lsls	r1, r3, #5
 800115e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001162:	0150      	lsls	r0, r2, #5
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4641      	mov	r1, r8
 800116a:	ebb2 0a01 	subs.w	sl, r2, r1
 800116e:	4649      	mov	r1, r9
 8001170:	eb63 0b01 	sbc.w	fp, r3, r1
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001180:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001184:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001188:	ebb2 040a 	subs.w	r4, r2, sl
 800118c:	eb63 050b 	sbc.w	r5, r3, fp
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	00eb      	lsls	r3, r5, #3
 800119a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800119e:	00e2      	lsls	r2, r4, #3
 80011a0:	4614      	mov	r4, r2
 80011a2:	461d      	mov	r5, r3
 80011a4:	4643      	mov	r3, r8
 80011a6:	18e3      	adds	r3, r4, r3
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	464b      	mov	r3, r9
 80011ac:	eb45 0303 	adc.w	r3, r5, r3
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80011be:	4629      	mov	r1, r5
 80011c0:	028b      	lsls	r3, r1, #10
 80011c2:	4621      	mov	r1, r4
 80011c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80011c8:	4621      	mov	r1, r4
 80011ca:	028a      	lsls	r2, r1, #10
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d2:	2200      	movs	r2, #0
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	61fa      	str	r2, [r7, #28]
 80011d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011dc:	f7ff f80a 	bl	80001f4 <__aeabi_uldivmod>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4613      	mov	r3, r2
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_RCC_GetSysClockFreq+0x200>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	3301      	adds	r3, #1
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80011f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001200:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001202:	e002      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_RCC_GetSysClockFreq+0x204>)
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800120a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800120c:	4618      	mov	r0, r3
 800120e:	3750      	adds	r7, #80	; 0x50
 8001210:	46bd      	mov	sp, r7
 8001212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	00f42400 	.word	0x00f42400
 8001220:	007a1200 	.word	0x007a1200

08001224 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e273      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d075      	beq.n	800132e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b04      	cmp	r3, #4
 800124c:	d00c      	beq.n	8001268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124e:	4b85      	ldr	r3, [pc, #532]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001256:	2b08      	cmp	r3, #8
 8001258:	d112      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b82      	ldr	r3, [pc, #520]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001266:	d10b      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	4b7e      	ldr	r3, [pc, #504]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d05b      	beq.n	800132c <HAL_RCC_OscConfig+0x108>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d157      	bne.n	800132c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e24e      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001288:	d106      	bne.n	8001298 <HAL_RCC_OscConfig+0x74>
 800128a:	4b76      	ldr	r3, [pc, #472]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a75      	ldr	r2, [pc, #468]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e01d      	b.n	80012d4 <HAL_RCC_OscConfig+0xb0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x98>
 80012a2:	4b70      	ldr	r3, [pc, #448]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6f      	ldr	r2, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6c      	ldr	r2, [pc, #432]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e00b      	b.n	80012d4 <HAL_RCC_OscConfig+0xb0>
 80012bc:	4b69      	ldr	r3, [pc, #420]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a68      	ldr	r2, [pc, #416]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b66      	ldr	r3, [pc, #408]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a65      	ldr	r2, [pc, #404]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fa68 	bl	80007b0 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fa64 	bl	80007b0 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e213      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0xc0>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff fa54 	bl	80007b0 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fa50 	bl	80007b0 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1ff      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	4b51      	ldr	r3, [pc, #324]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0xe8>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d063      	beq.n	8001402 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800134e:	2b08      	cmp	r3, #8
 8001350:	d11c      	bne.n	800138c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d116      	bne.n	800138c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e1d3      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4937      	ldr	r1, [pc, #220]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	e03a      	b.n	8001402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <HAL_RCC_OscConfig+0x244>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff fa09 	bl	80007b0 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fa05 	bl	80007b0 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1b4      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4925      	ldr	r1, [pc, #148]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	e015      	b.n	8001402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_RCC_OscConfig+0x244>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff f9e8 	bl	80007b0 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff f9e4 	bl	80007b0 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e193      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d036      	beq.n	800147c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d016      	beq.n	8001444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_RCC_OscConfig+0x248>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff f9c8 	bl	80007b0 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff f9c4 	bl	80007b0 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e173      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x200>
 8001442:	e01b      	b.n	800147c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_RCC_OscConfig+0x248>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144a:	f7ff f9b1 	bl	80007b0 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	e00e      	b.n	8001470 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001452:	f7ff f9ad 	bl	80007b0 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d907      	bls.n	8001470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e15c      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
 8001464:	40023800 	.word	0x40023800
 8001468:	42470000 	.word	0x42470000
 800146c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b8a      	ldr	r3, [pc, #552]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ea      	bne.n	8001452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8097 	beq.w	80015b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b83      	ldr	r3, [pc, #524]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b7f      	ldr	r3, [pc, #508]	; (800169c <HAL_RCC_OscConfig+0x478>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a7e      	ldr	r2, [pc, #504]	; (800169c <HAL_RCC_OscConfig+0x478>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b7c      	ldr	r3, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x478>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <HAL_RCC_OscConfig+0x47c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c6:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x47c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a75      	ldr	r2, [pc, #468]	; (80016a0 <HAL_RCC_OscConfig+0x47c>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff f96d 	bl	80007b0 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff f969 	bl	80007b0 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e118      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <HAL_RCC_OscConfig+0x47c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x2ea>
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a65      	ldr	r2, [pc, #404]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	e01c      	b.n	8001548 <HAL_RCC_OscConfig+0x324>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x30c>
 8001516:	4b61      	ldr	r3, [pc, #388]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a60      	ldr	r2, [pc, #384]	; (800169c <HAL_RCC_OscConfig+0x478>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	4b5e      	ldr	r3, [pc, #376]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a5d      	ldr	r2, [pc, #372]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0x324>
 8001530:	4b5a      	ldr	r3, [pc, #360]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a59      	ldr	r2, [pc, #356]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	4b57      	ldr	r3, [pc, #348]	; (800169c <HAL_RCC_OscConfig+0x478>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a56      	ldr	r2, [pc, #344]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001542:	f023 0304 	bic.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d015      	beq.n	800157c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff f92e 	bl	80007b0 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff f92a 	bl	80007b0 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0d7      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0ee      	beq.n	8001558 <HAL_RCC_OscConfig+0x334>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff f918 	bl	80007b0 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff f914 	bl	80007b0 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0c1      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_RCC_OscConfig+0x478>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ee      	bne.n	8001584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ac:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_OscConfig+0x478>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a3a      	ldr	r2, [pc, #232]	; (800169c <HAL_RCC_OscConfig+0x478>)
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80ad 	beq.w	800171c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x478>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d060      	beq.n	8001690 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d145      	bne.n	8001662 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_RCC_OscConfig+0x480>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff f8e8 	bl	80007b0 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff f8e4 	bl	80007b0 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e093      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_RCC_OscConfig+0x478>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	3b01      	subs	r3, #1
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	071b      	lsls	r3, r3, #28
 800162e:	491b      	ldr	r1, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x480>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff f8b9 	bl	80007b0 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff f8b5 	bl	80007b0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e064      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x41e>
 8001660:	e05c      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_OscConfig+0x480>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f8a2 	bl	80007b0 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff f89e 	bl	80007b0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e04d      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x478>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x44c>
 800168e:	e045      	b.n	800171c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e040      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000
 80016a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d030      	beq.n	8001718 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d129      	bne.n	8001718 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d122      	bne.n	8001718 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d8:	4013      	ands	r3, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d119      	bne.n	8001718 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	3b01      	subs	r3, #1
 80016f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10f      	bne.n	8001718 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e041      	b.n	80017c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fbb0 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3304      	adds	r3, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f000 f9b6 	bl	8001adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d001      	beq.n	80017e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e04e      	b.n	8001882 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_TIM_Base_Start_IT+0xc4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d022      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x80>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180e:	d01d      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x80>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <HAL_TIM_Base_Start_IT+0xc8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d018      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x80>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <HAL_TIM_Base_Start_IT+0xcc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x80>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1c      	ldr	r2, [pc, #112]	; (800189c <HAL_TIM_Base_Start_IT+0xd0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00e      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x80>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d009      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x80>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d004      	beq.n	800184c <HAL_TIM_Base_Start_IT+0x80>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d111      	bne.n	8001870 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d010      	beq.n	8001880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186e:	e007      	b.n	8001880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40010000 	.word	0x40010000
 8001894:	40000400 	.word	0x40000400
 8001898:	40000800 	.word	0x40000800
 800189c:	40000c00 	.word	0x40000c00
 80018a0:	40010400 	.word	0x40010400
 80018a4:	40014000 	.word	0x40014000
 80018a8:	40001800 	.word	0x40001800

080018ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d020      	beq.n	8001910 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01b      	beq.n	8001910 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0202 	mvn.w	r2, #2
 80018e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f8d2 	bl	8001aa0 <HAL_TIM_IC_CaptureCallback>
 80018fc:	e005      	b.n	800190a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8c4 	bl	8001a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f8d5 	bl	8001ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	d020      	beq.n	800195c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01b      	beq.n	800195c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0204 	mvn.w	r2, #4
 800192c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2202      	movs	r2, #2
 8001932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f8ac 	bl	8001aa0 <HAL_TIM_IC_CaptureCallback>
 8001948:	e005      	b.n	8001956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f89e 	bl	8001a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f8af 	bl	8001ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d020      	beq.n	80019a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01b      	beq.n	80019a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0208 	mvn.w	r2, #8
 8001978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2204      	movs	r2, #4
 800197e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f886 	bl	8001aa0 <HAL_TIM_IC_CaptureCallback>
 8001994:	e005      	b.n	80019a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f878 	bl	8001a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f889 	bl	8001ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d020      	beq.n	80019f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01b      	beq.n	80019f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0210 	mvn.w	r2, #16
 80019c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2208      	movs	r2, #8
 80019ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f860 	bl	8001aa0 <HAL_TIM_IC_CaptureCallback>
 80019e0:	e005      	b.n	80019ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f852 	bl	8001a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f863 	bl	8001ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00c      	beq.n	8001a18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0201 	mvn.w	r2, #1
 8001a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f9a2 	bl	8001d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00c      	beq.n	8001a3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f906 	bl	8001c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00c      	beq.n	8001a60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f834 	bl	8001ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00c      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f06f 0220 	mvn.w	r2, #32
 8001a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f8d8 	bl	8001c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <TIM_Base_SetConfig+0x12c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d013      	beq.n	8001b1c <TIM_Base_SetConfig+0x40>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afa:	d00f      	beq.n	8001b1c <TIM_Base_SetConfig+0x40>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <TIM_Base_SetConfig+0x130>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00b      	beq.n	8001b1c <TIM_Base_SetConfig+0x40>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a42      	ldr	r2, [pc, #264]	; (8001c10 <TIM_Base_SetConfig+0x134>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <TIM_Base_SetConfig+0x40>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a41      	ldr	r2, [pc, #260]	; (8001c14 <TIM_Base_SetConfig+0x138>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d003      	beq.n	8001b1c <TIM_Base_SetConfig+0x40>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a40      	ldr	r2, [pc, #256]	; (8001c18 <TIM_Base_SetConfig+0x13c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d108      	bne.n	8001b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a35      	ldr	r2, [pc, #212]	; (8001c08 <TIM_Base_SetConfig+0x12c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02b      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3c:	d027      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <TIM_Base_SetConfig+0x130>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d023      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a31      	ldr	r2, [pc, #196]	; (8001c10 <TIM_Base_SetConfig+0x134>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01f      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <TIM_Base_SetConfig+0x138>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01b      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <TIM_Base_SetConfig+0x13c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d017      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a2e      	ldr	r2, [pc, #184]	; (8001c1c <TIM_Base_SetConfig+0x140>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <TIM_Base_SetConfig+0x144>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00f      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <TIM_Base_SetConfig+0x148>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00b      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <TIM_Base_SetConfig+0x14c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a2a      	ldr	r2, [pc, #168]	; (8001c2c <TIM_Base_SetConfig+0x150>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <TIM_Base_SetConfig+0xb2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <TIM_Base_SetConfig+0x154>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d108      	bne.n	8001ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <TIM_Base_SetConfig+0x12c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d003      	beq.n	8001bd4 <TIM_Base_SetConfig+0xf8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <TIM_Base_SetConfig+0x13c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d103      	bne.n	8001bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f023 0201 	bic.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800
 8001c14:	40000c00 	.word	0x40000c00
 8001c18:	40010400 	.word	0x40010400
 8001c1c:	40014000 	.word	0x40014000
 8001c20:	40014400 	.word	0x40014400
 8001c24:	40014800 	.word	0x40014800
 8001c28:	40001800 	.word	0x40001800
 8001c2c:	40001c00 	.word	0x40001c00
 8001c30:	40002000 	.word	0x40002000

08001c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c62:	490e      	ldr	r1, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c64:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c78:	4c0b      	ldr	r4, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c86:	f7fe fcef 	bl	8000668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f000 f96d 	bl	8001f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f000 f80f 	bl	8001cb0 <main>
  bx  lr    
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001ca0:	08001fe8 	.word	0x08001fe8
  ldr r2, =_sbss
 8001ca4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001ca8:	200000a0 	.word	0x200000a0

08001cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC_IRQHandler>
	...

08001cb0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization: global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8001cb6:	f7fe fd0d 	bl	80006d4 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8001cba:	f000 f887 	bl	8001dcc <SystemClock_Config>

  /* Configure LED1 & LED3 */
  BSP_LED_Init(LED1);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7fe fc16 	bl	80004f0 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7fe fc13 	bl	80004f0 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f7fe fc10 	bl	80004f0 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f7fe fc0d 	bl	80004f0 <BSP_LED_Init>
      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
  uwPrescalerValue = (uint32_t)((SystemCoreClock / 2) / 10000) - 1;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <main+0x98>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <main+0x9c>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0b9b      	lsrs	r3, r3, #14
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <main+0xa0>)
 8001ce6:	6013      	str	r3, [r2, #0]

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <main+0xa4>)
 8001cea:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <main+0xa8>)
 8001cec:	601a      	str	r2, [r3, #0]
       + ClockDivision = 0
       + Counter direction = Up
  */

  /* Set the amount of time to keep LED on (in secs) */
  unsigned int timerSeconds = 6;
 8001cee:	2306      	movs	r3, #6
 8001cf0:	607b      	str	r3, [r7, #4]

  TimHandle.Init.Period            = setTimer(timerSeconds, 10000);
 8001cf2:	f242 7110 	movw	r1, #10000	; 0x2710
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f858 	bl	8001dac <setTimer>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <main+0xa4>)
 8001d02:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler         = uwPrescalerValue;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <main+0xa0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <main+0xa4>)
 8001d0a:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision     = 0;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <main+0xa4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <main+0xa4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  TimHandle.Init.RepetitionCounter = 0;
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <main+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <main+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <main+0xa4>)
 8001d26:	f7ff fd01 	bl	800172c <HAL_TIM_Base_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <main+0x84>
  {
    /* Initialization Error */
    Error_Handler();
 8001d30:	f000 f8bc 	bl	8001eac <Error_Handler>
  }

  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  /* Start Channel1 */
  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <main+0xa4>)
 8001d36:	f7ff fd49 	bl	80017cc <HAL_TIM_Base_Start_IT>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <main+0x94>
  {
    /* Starting Error */
    Error_Handler();
 8001d40:	f000 f8b4 	bl	8001eac <Error_Handler>
  }

  while (1)
 8001d44:	e7fe      	b.n	8001d44 <main+0x94>
 8001d46:	bf00      	nop
 8001d48:	20000020 	.word	0x20000020
 8001d4c:	d1b71759 	.word	0xd1b71759
 8001d50:	20000098 	.word	0x20000098
 8001d54:	20000050 	.word	0x20000050
 8001d58:	40000400 	.word	0x40000400

08001d5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Callback method called during timer interrupts
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	/*
	 * When an LED is requested to turn on for a set time, the "flipLED" flag is set to 2.
	 * The toggle method runs in the next 2 interrupts. First to turn on the LED, second to
	 * turn off the LED. With the flag equal to 0, the request sequence is completed.
	 */
	if (flipLED >= 1 && pwmMode == 0) {
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	dd0c      	ble.n	8001d86 <HAL_TIM_PeriodElapsedCallback+0x2a>
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d108      	bne.n	8001d86 <HAL_TIM_PeriodElapsedCallback+0x2a>
		BSP_LED_Toggle(LED2);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7fe fc59 	bl	800062c <BSP_LED_Toggle>
		flipLED = flipLED - 1;
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d82:	6013      	str	r3, [r2, #0]
	} else if (flipLED == 0 && pwmMode == 1) {
		BSP_LED_Toggle(LED4);
	}

}
 8001d84:	e00a      	b.n	8001d9c <HAL_TIM_PeriodElapsedCallback+0x40>
	} else if (flipLED == 0 && pwmMode == 1) {
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_PeriodElapsedCallback+0x40>
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_TIM_PeriodElapsedCallback+0x40>
		BSP_LED_Toggle(LED4);
 8001d96:	2003      	movs	r0, #3
 8001d98:	f7fe fc48 	bl	800062c <BSP_LED_Toggle>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000002c 	.word	0x2000002c
 8001da8:	2000009c 	.word	0x2000009c

08001dac <setTimer>:

int setTimer(unsigned int i, unsigned int clkFreq) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
	return (i * clkFreq) - 1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	3b01      	subs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b096      	sub	sp, #88	; 0x58
 8001dd0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <SystemClock_Config+0xd8>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <SystemClock_Config+0xd8>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <SystemClock_Config+0xd8>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <SystemClock_Config+0xdc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <SystemClock_Config+0xdc>)
 8001dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <SystemClock_Config+0xdc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e18:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e24:	2308      	movs	r3, #8
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USE_STM32469I_DISCO_REVA */
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001e28:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e32:	2307      	movs	r3, #7
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001e36:	2306      	movs	r3, #6
 8001e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f9f0 	bl	8001224 <HAL_RCC_OscConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d000      	beq.n	8001e54 <SystemClock_Config+0x88>
  {
    while(1) { ; }
 8001e52:	e7fe      	b.n	8001e52 <SystemClock_Config+0x86>
  }
  
  /* Activate the OverDrive to reach the 180 MHz Frequency */  
  ret = HAL_PWREx_EnableOverDrive();
 8001e54:	f7fe ffaa 	bl	8000dac <HAL_PWREx_EnableOverDrive>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001e5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d000      	beq.n	8001e68 <SystemClock_Config+0x9c>
  {
    while(1) { ; }
 8001e66:	e7fe      	b.n	8001e66 <SystemClock_Config+0x9a>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e68:	230f      	movs	r3, #15
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e70:	2300      	movs	r3, #0
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8001e74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7e:	653b      	str	r3, [r7, #80]	; 0x50
  
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001e80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e84:	2105      	movs	r1, #5
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ffe0 	bl	8000e4c <HAL_RCC_ClockConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001e92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d000      	beq.n	8001e9c <SystemClock_Config+0xd0>
  {
    while(1) { ; }
 8001e9a:	e7fe      	b.n	8001e9a <SystemClock_Config+0xce>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3758      	adds	r7, #88	; 0x58
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40007000 	.word	0x40007000

08001eac <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7fe fb9d 	bl	80005f0 <BSP_LED_On>
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <Error_Handler+0xa>

08001eb8 <HAL_TIM_Base_MspInit>:
  *           - Peripheral's clock enable
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripheral clock #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
  
  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set the TIMx priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2103      	movs	r1, #3
 8001ee0:	201d      	movs	r0, #29
 8001ee2:	f7fe fd4c 	bl	800097e <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8001ee6:	201d      	movs	r0, #29
 8001ee8:	f7fe fd65 	bl	80009b6 <HAL_NVIC_EnableIRQ>
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler+0x4>

08001f12 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f1e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001f4c:	f7fe fc1c 	bl	8000788 <HAL_IncTick>
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <TIM3_IRQHandler+0x10>)
 8001f5a:	f7ff fca7 	bl	80018ac <HAL_TIM_IRQHandler>
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000050 	.word	0x20000050

08001f68 <__libc_init_array>:
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	4d0d      	ldr	r5, [pc, #52]	; (8001fa0 <__libc_init_array+0x38>)
 8001f6c:	4c0d      	ldr	r4, [pc, #52]	; (8001fa4 <__libc_init_array+0x3c>)
 8001f6e:	1b64      	subs	r4, r4, r5
 8001f70:	10a4      	asrs	r4, r4, #2
 8001f72:	2600      	movs	r6, #0
 8001f74:	42a6      	cmp	r6, r4
 8001f76:	d109      	bne.n	8001f8c <__libc_init_array+0x24>
 8001f78:	4d0b      	ldr	r5, [pc, #44]	; (8001fa8 <__libc_init_array+0x40>)
 8001f7a:	4c0c      	ldr	r4, [pc, #48]	; (8001fac <__libc_init_array+0x44>)
 8001f7c:	f000 f818 	bl	8001fb0 <_init>
 8001f80:	1b64      	subs	r4, r4, r5
 8001f82:	10a4      	asrs	r4, r4, #2
 8001f84:	2600      	movs	r6, #0
 8001f86:	42a6      	cmp	r6, r4
 8001f88:	d105      	bne.n	8001f96 <__libc_init_array+0x2e>
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
 8001f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f90:	4798      	blx	r3
 8001f92:	3601      	adds	r6, #1
 8001f94:	e7ee      	b.n	8001f74 <__libc_init_array+0xc>
 8001f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f9a:	4798      	blx	r3
 8001f9c:	3601      	adds	r6, #1
 8001f9e:	e7f2      	b.n	8001f86 <__libc_init_array+0x1e>
 8001fa0:	08001fe0 	.word	0x08001fe0
 8001fa4:	08001fe0 	.word	0x08001fe0
 8001fa8:	08001fe0 	.word	0x08001fe0
 8001fac:	08001fe4 	.word	0x08001fe4

08001fb0 <_init>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr

08001fbc <_fini>:
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	bf00      	nop
 8001fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc2:	bc08      	pop	{r3}
 8001fc4:	469e      	mov	lr, r3
 8001fc6:	4770      	bx	lr
